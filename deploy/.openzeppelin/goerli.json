{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0x4f4cC63D7f2bC894078d41f284453062842Afa46",
    "txHash": "0x58f56b4b0f593b4c9128ef0e60b327cdbe63bf795f5dfed77e6f39ebdbb00eba"
  },
  "proxies": [
    {
      "address": "0xA094E566b61b3c2D88ACf7Cc15e3Dd0FA83F32af",
      "txHash": "0x123942405bbb35e2812ea7ebdd67d39589c9726304730d2d62b4b17dc63b6ee9",
      "kind": "transparent"
    },
    {
      "address": "0xd786eBeD505D010D4f8127Cd825511E887c65A2A",
      "txHash": "0xdf1fcc5106c37599def13cc044fe1870fa8758cd5cf1e0344e64808926581145",
      "kind": "transparent"
    },
    {
      "address": "0x2FCE8435F0455eDc702199741411dbcD1B7606cA",
      "txHash": "0x17cffc3895712e96df9ed2e452bc7245de250f62939d508d69f35e226cb7e213",
      "kind": "transparent"
    },
    {
      "address": "0x18a2553ef1aaE12d9cd158821319e26A62feE90E",
      "txHash": "0x49a9b568f45db4b6d8d5f9a2bc5f69256a7001555911757a8b082011acadbbd4",
      "kind": "transparent"
    },
    {
      "address": "0x4492608238eB09c7AD036e9C089538a7286B8985",
      "txHash": "0xa60e56bea91d0de2d082a639b21795e8ee72f85f5a1545990cd36ab18eda8c34",
      "kind": "transparent"
    },
    {
      "address": "0x415a59308893c97b25755dF94f87A61066B9C53C",
      "txHash": "0xbe0acf4b331201536a4a6ab644da3933a14f8438c872ba11ae9aec767bbab80e",
      "kind": "transparent"
    },
    {
      "address": "0xfb21AbF34Ad3e53071187663D54C05f19AD6e46b",
      "txHash": "0xaca38b5522b9fde2cb701037855f45344b5920d559357c80e0d9b9f7218b06fe",
      "kind": "transparent"
    }
  ],
  "impls": {
    "740f4cf0b0860289e2bcafb1ee88e5020261f296747cabf8cbb0ab8297409b33": {
      "address": "0x00C74eD067Cea48F1D6F7D00aBABa3C1D5B2598b",
      "txHash": "0xba1598886295efdbb4d9699d848f8b93783b8070cbc9296490cfb0efc578b419",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "RoyaltiesRegistry",
            "label": "royaltiesByTokenAndTokenId",
            "type": "t_mapping(t_bytes32,t_struct(RoyaltiesSet)11256_storage)",
            "src": "../@rarible/royalties-registry/contracts/RoyaltiesRegistry.sol:29"
          },
          {
            "contract": "RoyaltiesRegistry",
            "label": "royaltiesByToken",
            "type": "t_mapping(t_address,t_struct(RoyaltiesSet)11256_storage)",
            "src": "../@rarible/royalties-registry/contracts/RoyaltiesRegistry.sol:31"
          },
          {
            "contract": "RoyaltiesRegistry",
            "label": "royaltiesProviders",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@rarible/royalties-registry/contracts/RoyaltiesRegistry.sol:33"
          },
          {
            "contract": "RoyaltiesRegistry",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "../@rarible/royalties-registry/contracts/RoyaltiesRegistry.sol:250"
          }
        ],
        "types": {
          "t_mapping(t_bytes32,t_struct(RoyaltiesSet)11256_storage)": {
            "label": "mapping(bytes32 => struct RoyaltiesRegistry.RoyaltiesSet)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoyaltiesSet)11256_storage": {
            "label": "struct RoyaltiesRegistry.RoyaltiesSet",
            "members": [
              {
                "label": "initialized",
                "type": "t_bool"
              },
              {
                "label": "royalties",
                "type": "t_array(t_struct(Part)10548_storage)dyn_storage"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_struct(Part)10548_storage)dyn_storage": {
            "label": "struct LibPart.Part[]"
          },
          "t_struct(Part)10548_storage": {
            "label": "struct LibPart.Part",
            "members": [
              {
                "label": "account",
                "type": "t_address_payable"
              },
              {
                "label": "value",
                "type": "t_uint96"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint96": {
            "label": "uint96"
          },
          "t_mapping(t_address,t_struct(RoyaltiesSet)11256_storage)": {
            "label": "mapping(address => struct RoyaltiesRegistry.RoyaltiesSet)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "4c7a68291de6d3f93ee7137c6d1ceadabcb956bb57515818d9a843de338ad25d": {
      "address": "0x799ac034128f89b2c785809087bc5C66c2EFEea4",
      "txHash": "0x8425656ca2ce345f61fdd7720d66d631d36916a39b37e533b16aab457e50b3b5",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155Upgradeable.sol:27"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155Upgradeable.sol:30"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155Upgradeable.sol:33"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155Upgradeable.sol:421"
          },
          {
            "contract": "ERC1155DefaultApproval",
            "label": "defaultApprovals",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155DefaultApproval.sol:8"
          },
          {
            "contract": "ERC1155DefaultApproval",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155DefaultApproval.sol:20"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155BurnableUpgradeable.sol:41"
          },
          {
            "contract": "ERC1155BaseURI",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155BaseURI.sol:14"
          },
          {
            "contract": "ERC1155BaseURI",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155BaseURI.sol:17"
          },
          {
            "contract": "ERC1155BaseURI",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155BaseURI.sol:69"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "../project:/contracts/CryptoPunksMarket.sol:47"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "../project:/contracts/CryptoPunksMarket.sol:47"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/CryptoPunksMarket.sol:132"
          },
          {
            "contract": "ERC1271Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-1271/ERC1271Validator.sol:34"
          },
          {
            "contract": "Mint1155Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-1155/Mint1155Validator.sol:16"
          },
          {
            "contract": "AbstractRoyalties",
            "label": "royalties",
            "type": "t_mapping(t_uint256,t_array(t_struct(Part)10548_storage)dyn_storage)",
            "src": "../@rarible/royalties/contracts/impl/AbstractRoyalties.sol:8"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "creators",
            "type": "t_mapping(t_uint256,t_array(t_struct(Part)10548_storage)dyn_storage)",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155Lazy.sol:20"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "supply",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155Lazy.sol:21"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "minted",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155Lazy.sol:22"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155Lazy.sol:149"
          },
          {
            "contract": "HasContractURI",
            "label": "contractURI",
            "type": "t_string_storage",
            "src": "../@rarible/tokens/contracts/HasContractURI.sol:9"
          },
          {
            "contract": "HasContractURI",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@rarible/tokens/contracts/HasContractURI.sol:29"
          },
          {
            "contract": "ERC1155Base",
            "label": "name",
            "type": "t_string_storage",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155Base.sol:13"
          },
          {
            "contract": "ERC1155Base",
            "label": "symbol",
            "type": "t_string_storage",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155Base.sol:14"
          },
          {
            "contract": "ERC1155Base",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155Base.sol:89"
          },
          {
            "contract": "IsPrivateCollection",
            "label": "isPrivate",
            "type": "t_bool",
            "src": "../@rarible/tokens/contracts/IsPrivateCollection.sol:7"
          },
          {
            "contract": "IsPrivateCollection",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@rarible/tokens/contracts/IsPrivateCollection.sol:9"
          },
          {
            "contract": "MinterAccessControl",
            "label": "_minters",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../@rarible/tokens/contracts/access/MinterAccessControl.sol:8"
          },
          {
            "contract": "MinterAccessControl",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/access/MinterAccessControl.sol:43"
          }
        ],
        "types": {
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_struct(Part)10548_storage)dyn_storage)": {
            "label": "mapping(uint256 => struct LibPart.Part[])"
          },
          "t_array(t_struct(Part)10548_storage)dyn_storage": {
            "label": "struct LibPart.Part[]"
          },
          "t_struct(Part)10548_storage": {
            "label": "struct LibPart.Part",
            "members": [
              {
                "label": "account",
                "type": "t_address_payable"
              },
              {
                "label": "value",
                "type": "t_uint96"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint96": {
            "label": "uint96"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          }
        }
      }
    },
    "6b32f8589b3eb685910a619972301af7f45f80525e9458efd3e3ff11aa662a30": {
      "address": "0x4fEB488209d2A0A71fEef28E5fA306F15b2D5FEa",
      "txHash": "0xcf48ebcc161fb299c8b3ff0c65dabdeb761d5214ca536c460421f6171a1ec790",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_holderTokens",
            "type": "t_mapping(t_address,t_struct(UintSet)2748_storage)",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Upgradeable.sol:35"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenOwners",
            "type": "t_struct(UintToAddressMap)2125_storage",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Upgradeable.sol:38"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Upgradeable.sol:41"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Upgradeable.sol:44"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Upgradeable.sol:47"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Upgradeable.sol:50"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Upgradeable.sol:53"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Upgradeable.sol:56"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_burnedTokens",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Upgradeable.sol:93"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)40_storage",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Upgradeable.sol:495"
          },
          {
            "contract": "ERC721DefaultApproval",
            "label": "defaultApprovals",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721DefaultApproval.sol:8"
          },
          {
            "contract": "ERC721DefaultApproval",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721DefaultApproval.sol:24"
          },
          {
            "contract": "ERC721BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721BurnableUpgradeable.sol:40"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "../project:/contracts/CryptoPunksMarket.sol:47"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "../project:/contracts/CryptoPunksMarket.sol:47"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/CryptoPunksMarket.sol:132"
          },
          {
            "contract": "ERC1271Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-1271/ERC1271Validator.sol:34"
          },
          {
            "contract": "Mint721Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/Mint721Validator.sol:16"
          },
          {
            "contract": "AbstractRoyalties",
            "label": "royalties",
            "type": "t_mapping(t_uint256,t_array(t_struct(Part)10548_storage)dyn_storage)",
            "src": "../@rarible/royalties/contracts/impl/AbstractRoyalties.sol:8"
          },
          {
            "contract": "ERC721Lazy",
            "label": "creators",
            "type": "t_mapping(t_uint256,t_array(t_struct(Part)10548_storage)dyn_storage)",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Lazy.sol:23"
          },
          {
            "contract": "ERC721Lazy",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Lazy.sol:115"
          },
          {
            "contract": "HasContractURI",
            "label": "contractURI",
            "type": "t_string_storage",
            "src": "../@rarible/tokens/contracts/HasContractURI.sol:9"
          },
          {
            "contract": "HasContractURI",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@rarible/tokens/contracts/HasContractURI.sol:29"
          },
          {
            "contract": "ERC721Base",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Base.sol:38"
          },
          {
            "contract": "ERC721Rarible",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Rarible.sol:34"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_uint256,t_array(t_struct(Part)10548_storage)dyn_storage)": {
            "label": "mapping(uint256 => struct LibPart.Part[])"
          },
          "t_array(t_struct(Part)10548_storage)dyn_storage": {
            "label": "struct LibPart.Part[]"
          },
          "t_struct(Part)10548_storage": {
            "label": "struct LibPart.Part",
            "members": [
              {
                "label": "account",
                "type": "t_address_payable"
              },
              {
                "label": "value",
                "type": "t_uint96"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint96": {
            "label": "uint96"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(UintSet)2748_storage)": {
            "label": "mapping(address => struct EnumerableSetUpgradeable.UintSet)"
          },
          "t_struct(UintSet)2748_storage": {
            "label": "struct EnumerableSetUpgradeable.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)2362_storage"
              }
            ]
          },
          "t_struct(Set)2362_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_struct(UintToAddressMap)2125_storage": {
            "label": "struct EnumerableMapUpgradeable.UintToAddressMap",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Map)1807_storage"
              }
            ]
          },
          "t_struct(Map)1807_storage": {
            "label": "struct EnumerableMapUpgradeable.Map",
            "members": [
              {
                "label": "_entries",
                "type": "t_array(t_struct(MapEntry)1799_storage)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_struct(MapEntry)1799_storage)dyn_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry[]"
          },
          "t_struct(MapEntry)1799_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry",
            "members": [
              {
                "label": "_key",
                "type": "t_bytes32"
              },
              {
                "label": "_value",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_array(t_uint256)40_storage": {
            "label": "uint256[40]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          }
        }
      }
    },
    "03fb6601e7716e3f4a48c8e76878564ce5a52b0281c843527f566da753b04fa6": {
      "address": "0xB020bA7fcF43DCc59eF0103624BD6FADE66d105E",
      "txHash": "0xd81108f3f4f3e45584c917a42e5332588289b213b5f8d029986df3f078ce164f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "AssetMatcher",
            "label": "matchers",
            "type": "t_mapping(t_bytes4,t_address)",
            "src": "../@rarible/exchange-v2/contracts/AssetMatcher.sol:13"
          },
          {
            "contract": "AssetMatcher",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@rarible/exchange-v2/contracts/AssetMatcher.sol:77"
          },
          {
            "contract": "TransferExecutor",
            "label": "proxies",
            "type": "t_mapping(t_bytes4,t_address)",
            "src": "../@rarible/transfer-manager/contracts/TransferExecutor.sol:19"
          },
          {
            "contract": "TransferExecutor",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@rarible/transfer-manager/contracts/TransferExecutor.sol:74"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "../project:/contracts/CryptoPunksMarket.sol:47"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "../project:/contracts/CryptoPunksMarket.sol:47"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/CryptoPunksMarket.sol:132"
          },
          {
            "contract": "OrderValidator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/exchange-v2/contracts/OrderValidator.sol:50"
          },
          {
            "contract": "ExchangeV2Core",
            "label": "fills",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../@rarible/exchange-v2/contracts/ExchangeV2Core.sol:22"
          },
          {
            "contract": "ExchangeV2Core",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@rarible/exchange-v2/contracts/ExchangeV2Core.sol:240"
          },
          {
            "contract": "RaribleTransferManager",
            "label": "protocolFee",
            "type": "t_uint256",
            "src": "../@rarible/transfer-manager/contracts/RaribleTransferManager.sol:21"
          },
          {
            "contract": "RaribleTransferManager",
            "label": "royaltiesRegistry",
            "type": "t_contract(IRoyaltiesProvider)7562",
            "src": "../@rarible/transfer-manager/contracts/RaribleTransferManager.sol:22"
          },
          {
            "contract": "RaribleTransferManager",
            "label": "defaultFeeReceiver",
            "type": "t_address",
            "src": "../@rarible/transfer-manager/contracts/RaribleTransferManager.sol:24"
          },
          {
            "contract": "RaribleTransferManager",
            "label": "feeReceivers",
            "type": "t_mapping(t_address,t_address)",
            "src": "../@rarible/transfer-manager/contracts/RaribleTransferManager.sol:25"
          },
          {
            "contract": "RaribleTransferManager",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "../@rarible/transfer-manager/contracts/RaribleTransferManager.sol:247"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IRoyaltiesProvider)7562": {
            "label": "contract IRoyaltiesProvider"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes4,t_address)": {
            "label": "mapping(bytes4 => address)"
          },
          "t_bytes4": {
            "label": "bytes4"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "4c45d2a4ccf12529dc6d49090a280d11bda91402e2541192f5d42944318256e8": {
      "address": "0x6667b5ce062115651b0a6f499ac3f24A2DdFCB72",
      "txHash": "0x620d8408062c96a9a9c64fa122c6d5b5b2baf2053dd4b42a5dd3ee0d434235af",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "../project:/contracts/CryptoPunksMarket.sol:47"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "../project:/contracts/CryptoPunksMarket.sol:47"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/CryptoPunksMarket.sol:132"
          },
          {
            "contract": "ERC1271Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-1271/ERC1271Validator.sol:34"
          },
          {
            "contract": "ERC721UpgradeableMinimal",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721UpgradeableMinimal.sol:23"
          },
          {
            "contract": "ERC721UpgradeableMinimal",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721UpgradeableMinimal.sol:26"
          },
          {
            "contract": "ERC721UpgradeableMinimal",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721UpgradeableMinimal.sol:29"
          },
          {
            "contract": "ERC721UpgradeableMinimal",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721UpgradeableMinimal.sol:32"
          },
          {
            "contract": "ERC721UpgradeableMinimal",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721UpgradeableMinimal.sol:35"
          },
          {
            "contract": "ERC721UpgradeableMinimal",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721UpgradeableMinimal.sol:38"
          },
          {
            "contract": "ERC721UpgradeableMinimal",
            "label": "_burnedTokens",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721UpgradeableMinimal.sol:66"
          },
          {
            "contract": "ERC721UpgradeableMinimal",
            "label": "__gap",
            "type": "t_array(t_uint256)43_storage",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721UpgradeableMinimal.sol:443"
          },
          {
            "contract": "ERC721DefaultApprovalMinimal",
            "label": "defaultApprovals",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721DefaultApprovalMinimal.sol:8"
          },
          {
            "contract": "ERC721DefaultApprovalMinimal",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721DefaultApprovalMinimal.sol:24"
          },
          {
            "contract": "ERC721BurnableUpgradeableMinimal",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721BurnableUpgradeableMinimal.sol:41"
          },
          {
            "contract": "Mint721Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/Mint721Validator.sol:16"
          },
          {
            "contract": "AbstractRoyalties",
            "label": "royalties",
            "type": "t_mapping(t_uint256,t_array(t_struct(Part)10548_storage)dyn_storage)",
            "src": "../@rarible/royalties/contracts/impl/AbstractRoyalties.sol:8"
          },
          {
            "contract": "ERC721URI",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721URI.sol:19"
          },
          {
            "contract": "ERC721URI",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721URI.sol:22"
          },
          {
            "contract": "ERC721URI",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721URI.sol:92"
          },
          {
            "contract": "ERC721LazyMinimal",
            "label": "creators",
            "type": "t_mapping(t_uint256,t_array(t_struct(Part)10548_storage)dyn_storage)",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721LazyMinimal.sol:23"
          },
          {
            "contract": "ERC721LazyMinimal",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721LazyMinimal.sol:113"
          },
          {
            "contract": "HasContractURI",
            "label": "contractURI",
            "type": "t_string_storage",
            "src": "../@rarible/tokens/contracts/HasContractURI.sol:9"
          },
          {
            "contract": "HasContractURI",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@rarible/tokens/contracts/HasContractURI.sol:29"
          },
          {
            "contract": "ERC721BaseMinimal",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721BaseMinimal.sol:45"
          },
          {
            "contract": "IsPrivateCollection",
            "label": "isPrivate",
            "type": "t_bool",
            "src": "../@rarible/tokens/contracts/IsPrivateCollection.sol:7"
          },
          {
            "contract": "IsPrivateCollection",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@rarible/tokens/contracts/IsPrivateCollection.sol:9"
          },
          {
            "contract": "MinterAccessControl",
            "label": "_minters",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../@rarible/tokens/contracts/access/MinterAccessControl.sol:8"
          },
          {
            "contract": "MinterAccessControl",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/access/MinterAccessControl.sol:43"
          }
        ],
        "types": {
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_struct(Part)10548_storage)dyn_storage)": {
            "label": "mapping(uint256 => struct LibPart.Part[])"
          },
          "t_array(t_struct(Part)10548_storage)dyn_storage": {
            "label": "struct LibPart.Part[]"
          },
          "t_struct(Part)10548_storage": {
            "label": "struct LibPart.Part",
            "members": [
              {
                "label": "account",
                "type": "t_address_payable"
              },
              {
                "label": "value",
                "type": "t_uint96"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint96": {
            "label": "uint96"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_array(t_uint256)43_storage": {
            "label": "uint256[43]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          }
        }
      }
    },
    "ebbbccfe154ddc06933d7998c89c288edf4d8b95650df5c973ad8e4fea9a39ca": {
      "address": "0x72d0Ee6B28553b048442a9c8DAD6eA33806e9357",
      "txHash": "0x886a7a5222e2e076fb74830c3ef0bf06f43f9248c16efc811de0a6b543777120",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:30"
          },
          {
            "contract": "ERC721HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721HolderUpgradeable.sol:30"
          },
          {
            "contract": "TokenToAuction",
            "label": "tokenToAuctionId",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "../@rarible/auction/contracts/wrapper/TokenToAuction.sol:7"
          },
          {
            "contract": "TokenToAuction",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/auction/contracts/wrapper/TokenToAuction.sol:24"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "RaribleTransferManager",
            "label": "protocolFee",
            "type": "t_uint256",
            "src": "../@rarible/transfer-manager/contracts/RaribleTransferManager.sol:21"
          },
          {
            "contract": "RaribleTransferManager",
            "label": "royaltiesRegistry",
            "type": "t_contract(IRoyaltiesProvider)7562",
            "src": "../@rarible/transfer-manager/contracts/RaribleTransferManager.sol:22"
          },
          {
            "contract": "RaribleTransferManager",
            "label": "defaultFeeReceiver",
            "type": "t_address",
            "src": "../@rarible/transfer-manager/contracts/RaribleTransferManager.sol:24"
          },
          {
            "contract": "RaribleTransferManager",
            "label": "feeReceivers",
            "type": "t_mapping(t_address,t_address)",
            "src": "../@rarible/transfer-manager/contracts/RaribleTransferManager.sol:25"
          },
          {
            "contract": "RaribleTransferManager",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "../@rarible/transfer-manager/contracts/RaribleTransferManager.sol:247"
          },
          {
            "contract": "TransferExecutor",
            "label": "proxies",
            "type": "t_mapping(t_bytes4,t_address)",
            "src": "../@rarible/transfer-manager/contracts/TransferExecutor.sol:19"
          },
          {
            "contract": "TransferExecutor",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@rarible/transfer-manager/contracts/TransferExecutor.sol:74"
          },
          {
            "contract": "AuctionHouseBase",
            "label": "readyToWithdraw",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@rarible/auction/contracts/AuctionHouseBase.sol:32"
          },
          {
            "contract": "AuctionHouseBase",
            "label": "auctionId",
            "type": "t_uint256",
            "src": "../@rarible/auction/contracts/AuctionHouseBase.sol:35"
          },
          {
            "contract": "AuctionHouseBase",
            "label": "minimalDuration",
            "type": "t_uint96",
            "src": "../@rarible/auction/contracts/AuctionHouseBase.sol:38"
          },
          {
            "contract": "AuctionHouseBase",
            "label": "minimalStepBasePoint",
            "type": "t_uint96",
            "src": "../@rarible/auction/contracts/AuctionHouseBase.sol:41"
          },
          {
            "contract": "AuctionHouseBase",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/auction/contracts/AuctionHouseBase.sol:290"
          },
          {
            "contract": "AuctionHouseBase721",
            "label": "auctions",
            "type": "t_mapping(t_uint256,t_struct(Auction)6140_storage)",
            "src": "../@rarible/auction/contracts/721/AuctionHouseBase721.sol:10"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_struct(Auction)6140_storage)": {
            "label": "mapping(uint256 => struct AuctionHouseBase721.Auction)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Auction)6140_storage": {
            "label": "struct AuctionHouseBase721.Auction",
            "members": [
              {
                "label": "sellToken",
                "type": "t_address"
              },
              {
                "label": "sellTokenId",
                "type": "t_uint256"
              },
              {
                "label": "buyAsset",
                "type": "t_address"
              },
              {
                "label": "endTime",
                "type": "t_uint96"
              },
              {
                "label": "lastBid",
                "type": "t_struct(Bid)6202_storage"
              },
              {
                "label": "seller",
                "type": "t_address_payable"
              },
              {
                "label": "minimalPrice",
                "type": "t_uint96"
              },
              {
                "label": "buyer",
                "type": "t_address_payable"
              },
              {
                "label": "protocolFee",
                "type": "t_uint64"
              },
              {
                "label": "dataType",
                "type": "t_bytes4"
              },
              {
                "label": "data",
                "type": "t_bytes_storage"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_uint96": {
            "label": "uint96"
          },
          "t_struct(Bid)6202_storage": {
            "label": "struct AuctionHouseBase.Bid",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "dataType",
                "type": "t_bytes4"
              },
              {
                "label": "data",
                "type": "t_bytes_storage"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_bytes4": {
            "label": "bytes4"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes4,t_address)": {
            "label": "mapping(bytes4 => address)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_contract(IRoyaltiesProvider)7562": {
            "label": "contract IRoyaltiesProvider"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "b307cad13b6b7d210ac1778a465d5bfc3189424a00464ad710c16945eb2ac7ad": {
      "address": "0x57b192eE5c1aBc4E81e960db7c56fc1c6A0a3250",
      "txHash": "0xad3726f7ca2aa108a1431e5609a8abe2c5e164f8551b4c3dbdead50aef93eb01",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155ReceiverUpgradeable.sol:24"
          },
          {
            "contract": "ERC1155HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155HolderUpgradeable.sol:27"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "RaribleTransferManager",
            "label": "protocolFee",
            "type": "t_uint256",
            "src": "../@rarible/transfer-manager/contracts/RaribleTransferManager.sol:21"
          },
          {
            "contract": "RaribleTransferManager",
            "label": "royaltiesRegistry",
            "type": "t_contract(IRoyaltiesProvider)7562",
            "src": "../@rarible/transfer-manager/contracts/RaribleTransferManager.sol:22"
          },
          {
            "contract": "RaribleTransferManager",
            "label": "defaultFeeReceiver",
            "type": "t_address",
            "src": "../@rarible/transfer-manager/contracts/RaribleTransferManager.sol:24"
          },
          {
            "contract": "RaribleTransferManager",
            "label": "feeReceivers",
            "type": "t_mapping(t_address,t_address)",
            "src": "../@rarible/transfer-manager/contracts/RaribleTransferManager.sol:25"
          },
          {
            "contract": "RaribleTransferManager",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "../@rarible/transfer-manager/contracts/RaribleTransferManager.sol:247"
          },
          {
            "contract": "TransferExecutor",
            "label": "proxies",
            "type": "t_mapping(t_bytes4,t_address)",
            "src": "../@rarible/transfer-manager/contracts/TransferExecutor.sol:19"
          },
          {
            "contract": "TransferExecutor",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@rarible/transfer-manager/contracts/TransferExecutor.sol:74"
          },
          {
            "contract": "AuctionHouseBase",
            "label": "readyToWithdraw",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@rarible/auction/contracts/AuctionHouseBase.sol:32"
          },
          {
            "contract": "AuctionHouseBase",
            "label": "auctionId",
            "type": "t_uint256",
            "src": "../@rarible/auction/contracts/AuctionHouseBase.sol:35"
          },
          {
            "contract": "AuctionHouseBase",
            "label": "minimalDuration",
            "type": "t_uint96",
            "src": "../@rarible/auction/contracts/AuctionHouseBase.sol:38"
          },
          {
            "contract": "AuctionHouseBase",
            "label": "minimalStepBasePoint",
            "type": "t_uint96",
            "src": "../@rarible/auction/contracts/AuctionHouseBase.sol:41"
          },
          {
            "contract": "AuctionHouseBase",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/auction/contracts/AuctionHouseBase.sol:290"
          },
          {
            "contract": "AuctionHouseBase1155",
            "label": "auctions",
            "type": "t_mapping(t_uint256,t_struct(Auction)5068_storage)",
            "src": "../@rarible/auction/contracts/1155/AuctionHouseBase1155.sol:10"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_struct(Auction)5068_storage)": {
            "label": "mapping(uint256 => struct AuctionHouseBase1155.Auction)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Auction)5068_storage": {
            "label": "struct AuctionHouseBase1155.Auction",
            "members": [
              {
                "label": "sellToken",
                "type": "t_address"
              },
              {
                "label": "sellTokenValue",
                "type": "t_uint96"
              },
              {
                "label": "sellTokenId",
                "type": "t_uint256"
              },
              {
                "label": "buyAsset",
                "type": "t_address"
              },
              {
                "label": "endTime",
                "type": "t_uint96"
              },
              {
                "label": "lastBid",
                "type": "t_struct(Bid)6202_storage"
              },
              {
                "label": "seller",
                "type": "t_address_payable"
              },
              {
                "label": "minimalPrice",
                "type": "t_uint96"
              },
              {
                "label": "buyer",
                "type": "t_address_payable"
              },
              {
                "label": "protocolFee",
                "type": "t_uint64"
              },
              {
                "label": "dataType",
                "type": "t_bytes4"
              },
              {
                "label": "data",
                "type": "t_bytes_storage"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_uint96": {
            "label": "uint96"
          },
          "t_struct(Bid)6202_storage": {
            "label": "struct AuctionHouseBase.Bid",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "dataType",
                "type": "t_bytes4"
              },
              {
                "label": "data",
                "type": "t_bytes_storage"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_bytes4": {
            "label": "bytes4"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes4,t_address)": {
            "label": "mapping(bytes4 => address)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_contract(IRoyaltiesProvider)7562": {
            "label": "contract IRoyaltiesProvider"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    }
  }
}
