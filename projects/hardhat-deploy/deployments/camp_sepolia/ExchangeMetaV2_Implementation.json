{
  "address": "0x6c619E55E9947051e98570a36044C31C4eB0736d",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "BuyerFeeAmountChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "name": "Cancel",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldValue",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "FeeReceiverChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "leftHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "rightHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLeftFill",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRightFill",
          "type": "uint256"
        }
      ],
      "name": "Match",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes4",
          "name": "assetType",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "matcher",
          "type": "address"
        }
      ],
      "name": "MatcherChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address payable",
          "name": "relayerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "functionSignature",
          "type": "bytes"
        }
      ],
      "name": "MetaTransactionExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes4",
          "name": "assetType",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        }
      ],
      "name": "ProxyChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "SellerFeeAmountChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_transferProxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_erc20TransferProxy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newProtocolFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "newDefaultFeeReceiver",
          "type": "address"
        },
        {
          "internalType": "contract IRoyaltiesProvider",
          "name": "newRoyaltiesProvider",
          "type": "address"
        }
      ],
      "name": "__ExchangeV2_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_transferProxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_erc20TransferProxy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newProtocolFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "newDefaultFeeReceiver",
          "type": "address"
        },
        {
          "internalType": "contract IRoyaltiesProvider",
          "name": "newRoyaltiesProvider",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_initialOwner",
          "type": "address"
        },
        {
          "internalType": "bytes4[]",
          "name": "assetTypes",
          "type": "bytes4[]"
        },
        {
          "internalType": "address[]",
          "name": "proxies",
          "type": "address[]"
        },
        {
          "internalType": "bytes4",
          "name": "assetMatcherType",
          "type": "bytes4"
        },
        {
          "internalType": "address",
          "name": "assetMatcher",
          "type": "address"
        }
      ],
      "name": "__ExchangeV2_init_proxy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "bytes4",
                      "name": "assetClass",
                      "type": "bytes4"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct LibAsset.AssetType",
                  "name": "assetType",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LibAsset.Asset",
              "name": "makeAsset",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "bytes4",
                      "name": "assetClass",
                      "type": "bytes4"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct LibAsset.AssetType",
                  "name": "assetType",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LibAsset.Asset",
              "name": "takeAsset",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "end",
              "type": "uint256"
            },
            {
              "internalType": "bytes4",
              "name": "dataType",
              "type": "bytes4"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct LibOrder.Order",
          "name": "order",
          "type": "tuple"
        }
      ],
      "name": "cancel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "bidMaker",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "bidNftAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes4",
              "name": "nftAssetClass",
              "type": "bytes4"
            },
            {
              "internalType": "bytes",
              "name": "nftData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "bidPaymentAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "paymentToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "bidSalt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bidStart",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bidEnd",
              "type": "uint256"
            },
            {
              "internalType": "bytes4",
              "name": "bidDataType",
              "type": "bytes4"
            },
            {
              "internalType": "bytes",
              "name": "bidData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "bidSignature",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "sellOrderPaymentAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sellOrderNftAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "sellOrderData",
              "type": "bytes"
            }
          ],
          "internalType": "struct LibDirectTransfer.AcceptBid",
          "name": "direct",
          "type": "tuple"
        }
      ],
      "name": "directAcceptBid",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sellOrderMaker",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "sellOrderNftAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes4",
              "name": "nftAssetClass",
              "type": "bytes4"
            },
            {
              "internalType": "bytes",
              "name": "nftData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "sellOrderPaymentAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "paymentToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "sellOrderSalt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sellOrderStart",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sellOrderEnd",
              "type": "uint256"
            },
            {
              "internalType": "bytes4",
              "name": "sellOrderDataType",
              "type": "bytes4"
            },
            {
              "internalType": "bytes",
              "name": "sellOrderData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "sellOrderSignature",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "buyOrderPaymentAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyOrderNftAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "buyOrderData",
              "type": "bytes"
            }
          ],
          "internalType": "struct LibDirectTransfer.Purchase",
          "name": "direct",
          "type": "tuple"
        }
      ],
      "name": "directPurchase",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "functionSignature",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "sigR",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "sigS",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "sigV",
          "type": "uint8"
        }
      ],
      "name": "executeMetaTransaction",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "fills",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "bytes4",
                      "name": "assetClass",
                      "type": "bytes4"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct LibAsset.AssetType",
                  "name": "assetType",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LibAsset.Asset",
              "name": "makeAsset",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "bytes4",
                      "name": "assetClass",
                      "type": "bytes4"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct LibAsset.AssetType",
                  "name": "assetType",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LibAsset.Asset",
              "name": "takeAsset",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "end",
              "type": "uint256"
            },
            {
              "internalType": "bytes4",
              "name": "dataType",
              "type": "bytes4"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct LibOrder.Order",
          "name": "orderLeft",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signatureLeft",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "bytes4",
                      "name": "assetClass",
                      "type": "bytes4"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct LibAsset.AssetType",
                  "name": "assetType",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LibAsset.Asset",
              "name": "makeAsset",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "bytes4",
                      "name": "assetClass",
                      "type": "bytes4"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct LibAsset.AssetType",
                  "name": "assetType",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LibAsset.Asset",
              "name": "takeAsset",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "end",
              "type": "uint256"
            },
            {
              "internalType": "bytes4",
              "name": "dataType",
              "type": "bytes4"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct LibOrder.Order",
          "name": "orderRight",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signatureRight",
          "type": "bytes"
        }
      ],
      "name": "matchOrders",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFee",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint48",
          "name": "buyerAmount",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "sellerAmount",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltiesRegistry",
      "outputs": [
        {
          "internalType": "contract IRoyaltiesProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint48",
          "name": "_buyerAmount",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "_sellerAmount",
          "type": "uint48"
        }
      ],
      "name": "setAllProtocolFeeData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "assetType",
          "type": "bytes4"
        },
        {
          "internalType": "address",
          "name": "matcher",
          "type": "address"
        }
      ],
      "name": "setAssetMatcher",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint48",
          "name": "_buyerAmount",
          "type": "uint48"
        }
      ],
      "name": "setPrtocolFeeBuyerAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "setPrtocolFeeReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint48",
          "name": "_sellerAmount",
          "type": "uint48"
        }
      ],
      "name": "setPrtocolFeeSellerAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRoyaltiesProvider",
          "name": "newRoyaltiesRegistry",
          "type": "address"
        }
      ],
      "name": "setRoyaltiesRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "assetType",
          "type": "bytes4"
        },
        {
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        }
      ],
      "name": "setTransferProxy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8e1907dcb354ea634192361d245d17e202759be614e120205a60a099e66d61b2",
  "receipt": {
    "to": "0x933AcD72513796c31dc9B63579130335Dcd4a961",
    "from": "0xfb571F9da71D1aC33E069571bf5c67faDCFf18e4",
    "contractAddress": null,
    "transactionIndex": 1,
    "gasUsed": "5353145",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x5130988f3b7125b9d8dd95fbcd35fe315ea18b748f713b55db10406d2fcbd367",
    "transactionHash": "0x8e1907dcb354ea634192361d245d17e202759be614e120205a60a099e66d61b2",
    "logs": [],
    "blockNumber": 2308744,
    "cumulativeGasUsed": "5400046",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "25cec8d3d0ea4b0d6c3f88e02b714495",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"BuyerFeeAmountChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"FeeReceiverChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"leftHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"rightHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLeftFill\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRightFill\",\"type\":\"uint256\"}],\"name\":\"Match\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"assetType\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"matcher\",\"type\":\"address\"}],\"name\":\"MatcherChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"relayerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"}],\"name\":\"MetaTransactionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"assetType\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"name\":\"ProxyChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"SellerFeeAmountChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_transferProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_erc20TransferProxy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newProtocolFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newDefaultFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"contract IRoyaltiesProvider\",\"name\":\"newRoyaltiesProvider\",\"type\":\"address\"}],\"name\":\"__ExchangeV2_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_transferProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_erc20TransferProxy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newProtocolFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newDefaultFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"contract IRoyaltiesProvider\",\"name\":\"newRoyaltiesProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_initialOwner\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"assetTypes\",\"type\":\"bytes4[]\"},{\"internalType\":\"address[]\",\"name\":\"proxies\",\"type\":\"address[]\"},{\"internalType\":\"bytes4\",\"name\":\"assetMatcherType\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"assetMatcher\",\"type\":\"address\"}],\"name\":\"__ExchangeV2_init_proxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"assetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"makeAsset\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"assetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"takeAsset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"bytes4\",\"name\":\"dataType\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibOrder.Order\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"bidMaker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bidNftAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes4\",\"name\":\"nftAssetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"nftData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"bidPaymentAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bidSalt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidEnd\",\"type\":\"uint256\"},{\"internalType\":\"bytes4\",\"name\":\"bidDataType\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"bidData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"bidSignature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"sellOrderPaymentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellOrderNftAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sellOrderData\",\"type\":\"bytes\"}],\"internalType\":\"struct LibDirectTransfer.AcceptBid\",\"name\":\"direct\",\"type\":\"tuple\"}],\"name\":\"directAcceptBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sellOrderMaker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellOrderNftAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes4\",\"name\":\"nftAssetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"nftData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"sellOrderPaymentAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellOrderSalt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellOrderStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellOrderEnd\",\"type\":\"uint256\"},{\"internalType\":\"bytes4\",\"name\":\"sellOrderDataType\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"sellOrderData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sellOrderSignature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"buyOrderPaymentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyOrderNftAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"buyOrderData\",\"type\":\"bytes\"}],\"internalType\":\"struct LibDirectTransfer.Purchase\",\"name\":\"direct\",\"type\":\"tuple\"}],\"name\":\"directPurchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"}],\"name\":\"executeMetaTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"fills\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"assetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"makeAsset\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"assetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"takeAsset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"bytes4\",\"name\":\"dataType\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibOrder.Order\",\"name\":\"orderLeft\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signatureLeft\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"assetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"makeAsset\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"assetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"takeAsset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"bytes4\",\"name\":\"dataType\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibOrder.Order\",\"name\":\"orderRight\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signatureRight\",\"type\":\"bytes\"}],\"name\":\"matchOrders\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"buyerAmount\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"sellerAmount\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltiesRegistry\",\"outputs\":[{\"internalType\":\"contract IRoyaltiesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"_buyerAmount\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"_sellerAmount\",\"type\":\"uint48\"}],\"name\":\"setAllProtocolFeeData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"assetType\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"matcher\",\"type\":\"address\"}],\"name\":\"setAssetMatcher\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"_buyerAmount\",\"type\":\"uint48\"}],\"name\":\"setPrtocolFeeBuyerAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"setPrtocolFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"_sellerAmount\",\"type\":\"uint48\"}],\"name\":\"setPrtocolFeeSellerAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRoyaltiesProvider\",\"name\":\"newRoyaltiesRegistry\",\"type\":\"address\"}],\"name\":\"setRoyaltiesRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"assetType\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"name\":\"setTransferProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"directAcceptBid((address,uint256,bytes4,bytes,uint256,address,uint256,uint256,uint256,bytes4,bytes,bytes,uint256,uint256,bytes))\":{\"details\":\"function, generate sellOrder and buyOrder from parameters and call validateAndMatch() for accept bid transaction\",\"params\":{\"direct\":\"struct with parameters for accept bid operation\"}},\"directPurchase((address,uint256,bytes4,bytes,uint256,address,uint256,uint256,uint256,bytes4,bytes,bytes,uint256,uint256,bytes))\":{\"details\":\"function, generate sellOrder and buyOrder from parameters and call validateAndMatch() for purchase transaction\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@rarible/exchange-v2/contracts/ExchangeMetaV2.sol\":\"ExchangeMetaV2\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb419e68addcb82ecda3ad3974b0d2db76435ce9b08435a04d5b119a0c5d45ea5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal initializer {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal initializer {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(bytes32 typeHash, bytes32 name, bytes32 version) private view returns (bytes32) {\\n        return keccak256(\\n            abi.encode(\\n                typeHash,\\n                name,\\n                version,\\n                _getChainId(),\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", _domainSeparatorV4(), structHash));\\n    }\\n\\n    function _getChainId() private view returns (uint256 chainId) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            chainId := chainid()\\n        }\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6cd0bc8c149150614ca3d4a3d3d21f844a0ab3032625f34fcfcf1c2c8b351638\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4784c3f8a520a739dd25d76f514833a653990902d0e21601aed45bda44c87524\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x0dd1e9b19801e3e7d900fbf4182d81e1afd23ad7be39504e33df6bbcba91d724\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xcbc02d192c55298cf65e5695375c839eac979a597a0fbdc1635195c4d28ca5ac\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa1931c47a617014f858580db625aa0dcf343796f39acd4b5b51effc092a1f0a9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x3dab19bb4a63bcbda1ee153ca291694f92f9009fad28626126b15a8503b0e5ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@rarible/exchange-interfaces/contracts/IAssetMatcher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@rarible/lib-asset/contracts/LibAsset.sol\\\";\\n\\ninterface IAssetMatcher {\\n    function matchAssets(\\n        LibAsset.AssetType memory leftAssetType,\\n        LibAsset.AssetType memory rightAssetType\\n    ) external view returns (LibAsset.AssetType memory);\\n}\\n\",\"keccak256\":\"0x6c4459012ce46db960cfdcc5067c49392aa650e6d78e0702acc7ad9173b061b0\",\"license\":\"MIT\"},\"@rarible/exchange-interfaces/contracts/IERC20TransferProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.9 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IERC20TransferProxy {\\n    function erc20safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) external;\\n}\\n\",\"keccak256\":\"0x5cc1d6300618f13724624bbdd1b4447d1f149dc7cc3b75497e03110f798d9547\",\"license\":\"MIT\"},\"@rarible/exchange-interfaces/contracts/INftTransferProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.9 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\n\\ninterface INftTransferProxy {\\n    function erc721safeTransferFrom(IERC721Upgradeable token, address from, address to, uint256 tokenId) external;\\n\\n    function erc1155safeTransferFrom(IERC1155Upgradeable token, address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x43093ee21a43fb70eb06b5e886ea48308fa689765e370297de52d71d4f7ab5cf\",\"license\":\"MIT\"},\"@rarible/exchange-interfaces/contracts/IRoyaltiesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@rarible/lib-part/contracts/LibPart.sol\\\";\\n\\ninterface IRoyaltiesProvider {\\n    function getRoyalties(address token, uint tokenId) external returns (LibPart.Part[] memory);\\n}\\n\",\"keccak256\":\"0xf947c1e5ab670f631a6b2db55672829766ad410cf4730981202866e8c1a226ac\",\"license\":\"MIT\"},\"@rarible/exchange-interfaces/contracts/ITransferProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.9 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@rarible/lib-asset/contracts/LibAsset.sol\\\";\\n\\ninterface ITransferProxy {\\n    function transfer(LibAsset.Asset calldata asset, address from, address to) external;\\n}\\n\",\"keccak256\":\"0xd9400959d0a108534601673e480a55c4e760e03211594e8123d9c19e5d3890ac\",\"license\":\"MIT\"},\"@rarible/exchange-v2/contracts/AssetMatcher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@rarible/exchange-interfaces/contracts/IAssetMatcher.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nabstract contract AssetMatcher is Initializable, OwnableUpgradeable {\\n\\n    bytes constant EMPTY = \\\"\\\";\\n    mapping(bytes4 => address) internal matchers;\\n\\n    event MatcherChange(bytes4 indexed assetType, address matcher);\\n\\n    function setAssetMatcher(bytes4 assetType, address matcher) external onlyOwner {\\n        matchers[assetType] = matcher;\\n        emit MatcherChange(assetType, matcher);\\n    }\\n\\n    function _setAssetMatcher(bytes4 assetType, address matcher) internal {\\n        matchers[assetType] = matcher;\\n        emit MatcherChange(assetType, matcher);\\n    }\\n\\n    function matchAssets(LibAsset.AssetType memory leftAssetType, LibAsset.AssetType memory rightAssetType) internal view returns (LibAsset.AssetType memory) {\\n        LibAsset.AssetType memory result = matchAssetOneSide(leftAssetType, rightAssetType);\\n        if (result.assetClass == 0) {\\n            return matchAssetOneSide(rightAssetType, leftAssetType);\\n        } else {\\n            return result;\\n        }\\n    }\\n\\n    function matchAssetOneSide(LibAsset.AssetType memory leftAssetType, LibAsset.AssetType memory rightAssetType) private view returns (LibAsset.AssetType memory) {\\n        bytes4 classLeft = leftAssetType.assetClass;\\n        bytes4 classRight = rightAssetType.assetClass;\\n        if (classLeft == LibAsset.ETH_ASSET_CLASS) {\\n            if (classRight == LibAsset.ETH_ASSET_CLASS) {\\n                return leftAssetType;\\n            }\\n            return LibAsset.AssetType(0, EMPTY);\\n        }\\n        if (classLeft == LibAsset.ERC20_ASSET_CLASS) {\\n            if (classRight == LibAsset.ERC20_ASSET_CLASS) {\\n                return simpleMatch(leftAssetType, rightAssetType);\\n            }\\n            return LibAsset.AssetType(0, EMPTY);\\n        }\\n        if (classLeft == LibAsset.ERC721_ASSET_CLASS) {\\n            if (classRight == LibAsset.ERC721_ASSET_CLASS) {\\n                return simpleMatch(leftAssetType, rightAssetType);\\n            }\\n            return LibAsset.AssetType(0, EMPTY);\\n        }\\n        if (classLeft == LibAsset.ERC1155_ASSET_CLASS) {\\n            if (classRight == LibAsset.ERC1155_ASSET_CLASS) {\\n                return simpleMatch(leftAssetType, rightAssetType);\\n            }\\n            return LibAsset.AssetType(0, EMPTY);\\n        }\\n        address matcher = matchers[classLeft];\\n        if (matcher != address(0)) {\\n            return IAssetMatcher(matcher).matchAssets(leftAssetType, rightAssetType);\\n        }\\n        if (classLeft == classRight) {\\n            return simpleMatch(leftAssetType, rightAssetType);\\n        }\\n        revert(\\\"not found IAssetMatcher\\\");\\n    }\\n\\n    function simpleMatch(LibAsset.AssetType memory leftAssetType, LibAsset.AssetType memory rightAssetType) private pure returns (LibAsset.AssetType memory) {\\n        bytes32 leftHash = keccak256(leftAssetType.data);\\n        bytes32 rightHash = keccak256(rightAssetType.data);\\n        if (leftHash == rightHash) {\\n            return leftAssetType;\\n        }\\n        return LibAsset.AssetType(0, EMPTY);\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8fceb04eec1c1b32bea097a019b57e9422c31fa2e020e9957db91d5b03edb1bb\",\"license\":\"MIT\"},\"@rarible/exchange-v2/contracts/ExchangeMetaV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./ExchangeV2Core.sol\\\";\\nimport \\\"@rarible/meta-tx/contracts/EIP712MetaTransaction.sol\\\";\\nimport \\\"@rarible/transfer-manager/contracts/RaribleTransferManager.sol\\\";\\n\\ncontract ExchangeMetaV2 is ExchangeV2Core, RaribleTransferManager, EIP712MetaTransaction {\\n    function __ExchangeV2_init(\\n        address _transferProxy,\\n        address _erc20TransferProxy,\\n        uint newProtocolFee,\\n        address newDefaultFeeReceiver,\\n        IRoyaltiesProvider newRoyaltiesProvider\\n    ) external initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n        __OrderValidator_init_unchained();\\n        __MetaTransaction_init_unchained(\\\"ExchangeMetaV2\\\", \\\"1\\\");\\n        __TransferExecutor_init_unchained(_transferProxy, _erc20TransferProxy);\\n        __RaribleTransferManager_init_unchained(newProtocolFee, newDefaultFeeReceiver, newRoyaltiesProvider);\\n    }\\n\\n    function __ExchangeV2_init_proxy(\\n        address _transferProxy,\\n        address _erc20TransferProxy,\\n        uint newProtocolFee,\\n        address newDefaultFeeReceiver,\\n        IRoyaltiesProvider newRoyaltiesProvider,\\n        address _initialOwner,\\n        bytes4[] memory assetTypes, \\n        address[] memory proxies,\\n        bytes4 assetMatcherType,\\n        address assetMatcher\\n    ) external initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n        __OrderValidator_init_unchained();\\n        __MetaTransaction_init_unchained(\\\"ExchangeMetaV2\\\", \\\"1\\\");\\n        __TransferExecutor_init_unchained(_transferProxy, _erc20TransferProxy);\\n        __RaribleTransferManager_init_unchained(newProtocolFee, newDefaultFeeReceiver, newRoyaltiesProvider);\\n        for (uint i = 0; i < assetTypes.length; i++) {\\n            _setTransferProxy(assetTypes[i], proxies[i]);\\n        }\\n        _setAssetMatcher(assetMatcherType, assetMatcher);\\n        transferOwnership(_initialOwner);\\n    }\\n\\n    function _msgSender() internal view virtual override(ContextUpgradeable, EIP712MetaTransaction) returns (address payable) {\\n        return super._msgSender();\\n    }\\n\\n}\\n\",\"keccak256\":\"0xe555b85b81c8f5d3aed6aeb629444a9a0794b6da5c28c5d58252e68d71f20282\",\"license\":\"MIT\"},\"@rarible/exchange-v2/contracts/ExchangeV2Core.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./libraries/LibFill.sol\\\";\\nimport \\\"./libraries/LibOrderData.sol\\\";\\nimport \\\"./libraries/LibDirectTransfer.sol\\\";\\nimport \\\"./OrderValidator.sol\\\";\\nimport \\\"./AssetMatcher.sol\\\";\\n\\nimport \\\"@rarible/transfer-manager/contracts/TransferExecutor.sol\\\";\\nimport \\\"@rarible/transfer-manager/contracts/interfaces/ITransferManager.sol\\\";\\nimport \\\"@rarible/transfer-manager/contracts/lib/LibDeal.sol\\\";\\n\\nabstract contract ExchangeV2Core is Initializable, OwnableUpgradeable, AssetMatcher, TransferExecutor, OrderValidator, ITransferManager {\\n    using SafeMathUpgradeable for uint;\\n    using LibTransfer for address;\\n\\n    uint256 private constant UINT256_MAX = type(uint256).max;\\n\\n    //state of the orders\\n    mapping(bytes32 => uint) public fills;\\n\\n    //events\\n    event Cancel(bytes32 hash);\\n    event Match(bytes32 leftHash, bytes32 rightHash, uint newLeftFill, uint newRightFill);\\n\\n    function cancel(LibOrder.Order memory order) external {\\n        require(_msgSender() == order.maker, \\\"not a maker\\\");\\n        require(order.salt != 0, \\\"0 salt can't be used\\\");\\n        bytes32 orderKeyHash = LibOrder.hashKey(order);\\n        fills[orderKeyHash] = UINT256_MAX;\\n        emit Cancel(orderKeyHash);\\n    }\\n\\n    /**\\n     * @dev function, generate sellOrder and buyOrder from parameters and call validateAndMatch() for purchase transaction\\n \\n    */\\n\\n    function directPurchase(\\n        LibDirectTransfer.Purchase calldata direct\\n    ) external payable{\\n        LibAsset.AssetType memory paymentAssetType = getPaymentAssetType(direct.paymentToken);\\n                \\n        LibOrder.Order memory sellOrder = LibOrder.Order(\\n            direct.sellOrderMaker,\\n            LibAsset.Asset(\\n                LibAsset.AssetType(\\n                    direct.nftAssetClass,\\n                    direct.nftData\\n                ),\\n                direct.sellOrderNftAmount\\n            ),\\n            address(0),\\n            LibAsset.Asset(\\n                paymentAssetType,\\n                direct.sellOrderPaymentAmount\\n            ),\\n            direct.sellOrderSalt,\\n            direct.sellOrderStart,\\n            direct.sellOrderEnd,\\n            direct.sellOrderDataType,\\n            direct.sellOrderData\\n        );\\n\\n        LibOrder.Order memory buyOrder = LibOrder.Order(\\n            address(0),\\n            LibAsset.Asset(\\n                paymentAssetType,\\n                direct.buyOrderPaymentAmount\\n            ),\\n            address(0),\\n            LibAsset.Asset(\\n                LibAsset.AssetType(\\n                    direct.nftAssetClass,\\n                    direct.nftData\\n                ),\\n                direct.buyOrderNftAmount\\n            ),\\n            0,\\n            0,\\n            0,\\n            direct.sellOrderDataType,\\n            direct.buyOrderData\\n        );\\n\\n        validateFull(sellOrder, direct.sellOrderSignature);\\n\\n        matchAndTransfer(sellOrder, buyOrder);\\n    }\\n\\n    /**\\n     * @dev function, generate sellOrder and buyOrder from parameters and call validateAndMatch() for accept bid transaction\\n     * @param direct struct with parameters for accept bid operation\\n     */\\n    function directAcceptBid(\\n        LibDirectTransfer.AcceptBid calldata direct\\n    ) external payable {\\n        LibAsset.AssetType memory paymentAssetType = getPaymentAssetType(direct.paymentToken);\\n\\n        LibOrder.Order memory buyOrder = LibOrder.Order(\\n            direct.bidMaker,\\n            LibAsset.Asset(\\n                paymentAssetType,\\n                direct.bidPaymentAmount\\n            ),\\n            address(0),\\n            LibAsset.Asset(\\n                LibAsset.AssetType(\\n                    direct.nftAssetClass,\\n                    direct.nftData\\n                ),\\n                direct.bidNftAmount\\n            ),\\n            direct.bidSalt,\\n            direct.bidStart,\\n            direct.bidEnd,\\n            direct.bidDataType,\\n            direct.bidData\\n        );\\n\\n        LibOrder.Order memory sellOrder = LibOrder.Order(\\n            address(0),\\n            LibAsset.Asset(\\n                LibAsset.AssetType(\\n                    direct.nftAssetClass,\\n                    direct.nftData\\n                ),\\n                direct.sellOrderNftAmount\\n            ),\\n            address(0),\\n            LibAsset.Asset(\\n                paymentAssetType,\\n                direct.sellOrderPaymentAmount\\n            ),\\n            0,\\n            0,\\n            0,\\n            direct.bidDataType,\\n            direct.sellOrderData\\n        );\\n\\n        validateFull(buyOrder, direct.bidSignature);\\n\\n        matchAndTransfer(sellOrder, buyOrder);\\n    }\\n\\n    function matchOrders(\\n        LibOrder.Order memory orderLeft,\\n        bytes memory signatureLeft,\\n        LibOrder.Order memory orderRight,\\n        bytes memory signatureRight\\n    ) external payable {\\n        validateOrders(orderLeft, signatureLeft, orderRight, signatureRight);\\n        matchAndTransfer(orderLeft, orderRight);\\n    }\\n\\n    /**\\n      * @dev function, validate orders\\n      * @param orderLeft left order\\n      * @param signatureLeft order left signature\\n      * @param orderRight right order\\n      * @param signatureRight order right signature\\n      */\\n    function validateOrders(LibOrder.Order memory orderLeft, bytes memory signatureLeft, LibOrder.Order memory orderRight, bytes memory signatureRight) internal view {\\n        validateFull(orderLeft, signatureLeft);\\n        validateFull(orderRight, signatureRight);\\n        if (orderLeft.taker != address(0)) {\\n            if (orderRight.maker != address(0))\\n                require(orderRight.maker == orderLeft.taker, \\\"leftOrder.taker verification failed\\\");\\n        }\\n        if (orderRight.taker != address(0)) {\\n            if (orderLeft.maker != address(0))\\n                require(orderRight.taker == orderLeft.maker, \\\"rightOrder.taker verification failed\\\");\\n        }\\n    }\\n\\n    /**\\n        @notice matches valid orders and transfers their assets\\n        @param orderLeft the left order of the match\\n        @param orderRight the right order of the match\\n    */\\n    function matchAndTransfer(LibOrder.Order memory orderLeft, LibOrder.Order memory orderRight) internal {\\n        (LibAsset.AssetType memory makeMatch, LibAsset.AssetType memory takeMatch) = matchAssets(orderLeft, orderRight);\\n\\n        (LibOrderData.GenericOrderData memory leftOrderData, LibOrderData.GenericOrderData memory rightOrderData, LibFill.FillResult memory newFill) =\\n            parseOrdersSetFillEmitMatch(orderLeft, orderRight);\\n\\n        (uint totalMakeValue, uint totalTakeValue) = doTransfers(\\n            LibDeal.DealSide({\\n                asset: LibAsset.Asset({\\n                    assetType: makeMatch,\\n                    value: newFill.leftValue\\n                }),\\n                payouts: leftOrderData.payouts,\\n                originFees: leftOrderData.originFees,\\n                proxy: proxies[makeMatch.assetClass],\\n                from: orderLeft.maker\\n            }), \\n            LibDeal.DealSide({\\n                asset: LibAsset.Asset( \\n                    takeMatch,\\n                    newFill.rightValue\\n                ),\\n                payouts: rightOrderData.payouts,\\n                originFees: rightOrderData.originFees,\\n                proxy: proxies[takeMatch.assetClass],\\n                from: orderRight.maker\\n            }),\\n            LibFeeSide.getFeeSide(makeMatch.assetClass, takeMatch.assetClass)\\n        );\\n        if (makeMatch.assetClass == LibAsset.ETH_ASSET_CLASS) {\\n            require(takeMatch.assetClass != LibAsset.ETH_ASSET_CLASS);\\n            require(msg.value >= totalMakeValue, \\\"not enough eth\\\");\\n            if (msg.value > totalMakeValue) {\\n                address(msg.sender).transferEth(msg.value.sub(totalMakeValue));\\n            }\\n        } else if (takeMatch.assetClass == LibAsset.ETH_ASSET_CLASS) {\\n            require(msg.value >= totalTakeValue, \\\"not enough eth\\\");\\n            if (msg.value > totalTakeValue) {\\n                address(msg.sender).transferEth(msg.value.sub(totalTakeValue));\\n            }\\n        }\\n    }\\n\\n    function parseOrdersSetFillEmitMatch(\\n        LibOrder.Order memory orderLeft,\\n        LibOrder.Order memory orderRight\\n    ) internal returns (LibOrderData.GenericOrderData memory leftOrderData, LibOrderData.GenericOrderData memory rightOrderData, LibFill.FillResult memory newFill) {\\n        bytes32 leftOrderKeyHash = LibOrder.hashKey(orderLeft);\\n        bytes32 rightOrderKeyHash = LibOrder.hashKey(orderRight);\\n\\n        address msgSender = _msgSender();\\n        if (orderLeft.maker == address(0)) {\\n            orderLeft.maker = msgSender;\\n        }\\n        if (orderRight.maker == address(0)) {\\n            orderRight.maker = msgSender;\\n        }\\n\\n        leftOrderData = LibOrderData.parse(orderLeft);\\n        rightOrderData = LibOrderData.parse(orderRight);\\n\\n        newFill = setFillEmitMatch(\\n            orderLeft,\\n            orderRight,\\n            leftOrderKeyHash,\\n            rightOrderKeyHash,\\n            leftOrderData.isMakeFill,\\n            rightOrderData.isMakeFill\\n        );\\n    }\\n\\n    /**\\n        @notice calculates fills for the matched orders and set them in \\\"fills\\\" mapping\\n        @param orderLeft left order of the match\\n        @param orderRight right order of the match\\n        @param leftMakeFill true if the left orders uses make-side fills, false otherwise\\n        @param rightMakeFill true if the right orders uses make-side fills, false otherwise\\n        @return returns change in orders' fills by the match \\n    */\\n    function setFillEmitMatch(\\n        LibOrder.Order memory orderLeft,\\n        LibOrder.Order memory orderRight,\\n        bytes32 leftOrderKeyHash,\\n        bytes32 rightOrderKeyHash,\\n        bool leftMakeFill,\\n        bool rightMakeFill\\n    ) internal returns (LibFill.FillResult memory) {\\n        uint leftOrderFill = getOrderFill(orderLeft.salt, leftOrderKeyHash);\\n        uint rightOrderFill = getOrderFill(orderRight.salt, rightOrderKeyHash);\\n        LibFill.FillResult memory newFill = LibFill.fillOrder(orderLeft, orderRight, leftOrderFill, rightOrderFill, leftMakeFill, rightMakeFill);\\n\\n        if (orderLeft.makeAsset.value != 0 || orderRight.takeAsset.value != 0) {\\n            require(newFill.leftValue > 0, \\\"nothing to fill\\\");\\n        }\\n        if (orderLeft.takeAsset.value != 0 || orderRight.makeAsset.value != 0) {\\n            require(newFill.rightValue > 0, \\\"nothing to fill\\\");\\n        }\\n\\n        if (orderLeft.salt != 0) {\\n            if (leftMakeFill) {\\n                fills[leftOrderKeyHash] = leftOrderFill.add(newFill.leftValue);\\n            } else {\\n                fills[leftOrderKeyHash] = leftOrderFill.add(newFill.rightValue);\\n            }\\n        }\\n\\n        if (orderRight.salt != 0) {\\n            if (rightMakeFill) {\\n                fills[rightOrderKeyHash] = rightOrderFill.add(newFill.rightValue);\\n            } else {\\n                fills[rightOrderKeyHash] = rightOrderFill.add(newFill.leftValue);\\n            }\\n        }\\n\\n        emit Match(leftOrderKeyHash, rightOrderKeyHash, newFill.rightValue, newFill.leftValue);\\n\\n        return newFill;\\n    }\\n\\n    function getOrderFill(uint salt, bytes32 hash) internal view returns (uint fill) {\\n        if (salt == 0) {\\n            fill = 0;\\n        } else {\\n            fill = fills[hash];\\n        }\\n    }\\n\\n    function matchAssets(LibOrder.Order memory orderLeft, LibOrder.Order memory orderRight) internal view returns (LibAsset.AssetType memory makeMatch, LibAsset.AssetType memory takeMatch) {\\n        makeMatch = matchAssets(orderLeft.makeAsset.assetType, orderRight.takeAsset.assetType);\\n        require(makeMatch.assetClass != 0, \\\"assets don't match\\\");\\n        takeMatch = matchAssets(orderLeft.takeAsset.assetType, orderRight.makeAsset.assetType);\\n        require(takeMatch.assetClass != 0, \\\"assets don't match\\\");\\n    }\\n\\n    function validateFull(LibOrder.Order memory order, bytes memory signature) internal view {\\n        LibOrder.validateOrderTime(order);\\n        validate(order, signature);\\n    }\\n\\n    function getPaymentAssetType(address token) internal pure returns(LibAsset.AssetType memory){\\n        LibAsset.AssetType memory result;\\n        if(token == address(0)) {\\n            result.assetClass = LibAsset.ETH_ASSET_CLASS;\\n        } else {\\n            result.assetClass = LibAsset.ERC20_ASSET_CLASS;\\n            result.data = abi.encode(token);\\n        }\\n        return result;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xd9562a650f1f55fd78a6e2cf55b635b09177ffa8b7e2b959d49d251117fb696f\",\"license\":\"MIT\"},\"@rarible/exchange-v2/contracts/OrderValidator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"./libraries/LibOrder.sol\\\";\\n\\nimport \\\"@rarible/lib-signature/contracts/IERC1271.sol\\\";\\nimport \\\"@rarible/lib-signature/contracts/LibSignature.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol\\\";\\n\\nabstract contract OrderValidator is Initializable, ContextUpgradeable, EIP712Upgradeable {\\n    using LibSignature for bytes32;\\n    using AddressUpgradeable for address;\\n    \\n    bytes4 constant internal MAGICVALUE = 0x1626ba7e;\\n\\n    function __OrderValidator_init_unchained() internal initializer {\\n        __EIP712_init_unchained(\\\"Exchange\\\", \\\"2\\\");\\n    }\\n\\n    function validate(LibOrder.Order memory order, bytes memory signature) internal view {\\n        if (order.salt == 0) {\\n            if (order.maker != address(0)) {\\n                require(_msgSender() == order.maker, \\\"maker is not tx sender\\\");\\n            }\\n        } else {\\n            if (_msgSender() != order.maker) {\\n                bytes32 hash = LibOrder.hash(order);\\n                // if maker is contract checking ERC1271 signature\\n                if (order.maker.isContract()) {\\n                    require(\\n                        IERC1271(order.maker).isValidSignature(_hashTypedDataV4(hash), signature) == MAGICVALUE,\\n                        \\\"contract order signature verification error\\\"\\n                    );\\n                } else {\\n                    // if maker is not contract then checking ECDSA signature\\n                    if (_hashTypedDataV4(hash).recover(signature) != order.maker) {\\n                        revert(\\\"order signature verification error\\\");\\n                    } else {\\n                        require (order.maker != address(0), \\\"no maker\\\");\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xa73f3046ab283611bcd4904f7f9d40668140e75fa6678dc20fba5721f1dad011\",\"license\":\"MIT\"},\"@rarible/exchange-v2/contracts/libraries/LibDirectTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@rarible/lib-asset/contracts/LibAsset.sol\\\";\\n\\nlibrary LibDirectTransfer { //LibDirectTransfers\\n    /*All buy parameters need for create buyOrder and sellOrder*/\\n    struct Purchase {\\n        address sellOrderMaker; //\\n        uint256 sellOrderNftAmount;\\n        bytes4 nftAssetClass;\\n        bytes nftData;\\n        uint256 sellOrderPaymentAmount;\\n        address paymentToken;\\n        uint256 sellOrderSalt;\\n        uint sellOrderStart;\\n        uint sellOrderEnd;\\n        bytes4 sellOrderDataType;\\n        bytes sellOrderData;\\n        bytes sellOrderSignature;\\n\\n        uint256 buyOrderPaymentAmount;\\n        uint256 buyOrderNftAmount;\\n        bytes buyOrderData;\\n    }\\n\\n    /*All accept bid parameters need for create buyOrder and sellOrder*/\\n    struct AcceptBid {\\n        address bidMaker; //\\n        uint256 bidNftAmount;\\n        bytes4 nftAssetClass;\\n        bytes nftData;\\n        uint256 bidPaymentAmount;\\n        address paymentToken;\\n        uint256 bidSalt;\\n        uint bidStart;\\n        uint bidEnd;\\n        bytes4 bidDataType;\\n        bytes bidData;\\n        bytes bidSignature;\\n\\n        uint256 sellOrderPaymentAmount;\\n        uint256 sellOrderNftAmount;\\n        bytes sellOrderData;\\n    }\\n}\\n\",\"keccak256\":\"0xdd424a4854082b53142689a90446bf7637826d1d35a163419c0f953f52728291\",\"license\":\"MIT\"},\"@rarible/exchange-v2/contracts/libraries/LibFill.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"./LibOrder.sol\\\";\\n\\nlibrary LibFill {\\n    struct FillResult {\\n        uint leftValue;\\n        uint rightValue;\\n    }\\n\\n    struct IsMakeFill {\\n        bool leftMake;\\n        bool rightMake;\\n    }\\n\\n    /**\\n     * @dev Should return filled values\\n     * @param leftOrder left order\\n     * @param rightOrder right order\\n     * @param leftOrderFill current fill of the left order (0 if order is unfilled)\\n     * @param rightOrderFill current fill of the right order (0 if order is unfilled)\\n     * @param leftIsMakeFill true if left orders fill is calculated from the make side, false if from the take side\\n     * @param rightIsMakeFill true if right orders fill is calculated from the make side, false if from the take side\\n     * @return tuple representing fill of both assets\\n     */\\n    function fillOrder(LibOrder.Order memory leftOrder, LibOrder.Order memory rightOrder, uint leftOrderFill, uint rightOrderFill, bool leftIsMakeFill, bool rightIsMakeFill) internal pure returns (FillResult memory) {\\n        (uint leftMakeValue, uint leftTakeValue) = LibOrder.calculateRemaining(leftOrder, leftOrderFill, leftIsMakeFill);\\n        (uint rightMakeValue, uint rightTakeValue) = LibOrder.calculateRemaining(rightOrder, rightOrderFill, rightIsMakeFill);\\n\\n        //We have 3 cases here:\\n        if (rightTakeValue > leftMakeValue || (rightTakeValue == leftMakeValue && leftMakeValue == 0)) { //1nd: left order should be fully filled\\n            return fillLeft(leftMakeValue, leftTakeValue, rightOrder.makeAsset.value, rightOrder.takeAsset.value);\\n        }//2st: right order should be fully filled or 3d: both should be fully filled if required values are the same\\n        return fillRight(leftOrder.makeAsset.value, leftOrder.takeAsset.value, rightMakeValue, rightTakeValue);\\n    }\\n\\n    function fillRight(uint leftMakeValue, uint leftTakeValue, uint rightMakeValue, uint rightTakeValue) internal pure returns (FillResult memory result) {\\n        uint makerValue = LibMath.safeGetPartialAmountFloor(rightTakeValue, leftMakeValue, leftTakeValue);\\n        require(makerValue <= rightMakeValue, \\\"fillRight: unable to fill\\\");\\n        return FillResult(rightTakeValue, makerValue);\\n    }\\n\\n    function fillLeft(uint leftMakeValue, uint leftTakeValue, uint rightMakeValue, uint rightTakeValue) internal pure returns (FillResult memory result) {\\n        uint rightTake = LibMath.safeGetPartialAmountFloor(leftTakeValue, rightMakeValue, rightTakeValue);\\n        require(rightTake <= leftMakeValue, \\\"fillLeft: unable to fill\\\");\\n        return FillResult(leftMakeValue, leftTakeValue);\\n    }\\n}\\n\",\"keccak256\":\"0xd8ff6a506590af9d97911eaf66add363e4437525e30e82032acf27d20812a1ab\",\"license\":\"MIT\"},\"@rarible/exchange-v2/contracts/libraries/LibMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\n\\nlibrary LibMath {\\n    using SafeMathUpgradeable for uint;\\n\\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\\n    ///      Reverts if rounding error is >= 0.1%\\n    /// @param numerator Numerator.\\n    /// @param denominator Denominator.\\n    /// @param target Value to calculate partial of.\\n    /// @return partialAmount value of target rounded down.\\n    function safeGetPartialAmountFloor(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    ) internal pure returns (uint256 partialAmount) {\\n        if (isRoundingErrorFloor(numerator, denominator, target)) {\\n            revert(\\\"rounding error\\\");\\n        }\\n        partialAmount = numerator.mul(target).div(denominator);\\n    }\\n\\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\\n    /// @param numerator Numerator.\\n    /// @param denominator Denominator.\\n    /// @param target Value to multiply with numerator/denominator.\\n    /// @return isError Rounding error is present.\\n    function isRoundingErrorFloor(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    ) internal pure returns (bool isError) {\\n        if (denominator == 0) {\\n            revert(\\\"division by zero\\\");\\n        }\\n\\n        // The absolute rounding error is the difference between the rounded\\n        // value and the ideal value. The relative rounding error is the\\n        // absolute rounding error divided by the absolute value of the\\n        // ideal value. This is undefined when the ideal value is zero.\\n        //\\n        // The ideal value is `numerator * target / denominator`.\\n        // Let's call `numerator * target % denominator` the remainder.\\n        // The absolute error is `remainder / denominator`.\\n        //\\n        // When the ideal value is zero, we require the absolute error to\\n        // be zero. Fortunately, this is always the case. The ideal value is\\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\\n        // remainder and absolute error are also zero.\\n        if (target == 0 || numerator == 0) {\\n            return false;\\n        }\\n\\n        // Otherwise, we want the relative rounding error to be strictly\\n        // less than 0.1%.\\n        // The relative error is `remainder / (numerator * target)`.\\n        // We want the relative error less than 1 / 1000:\\n        //        remainder / (numerator * target)  <  1 / 1000\\n        // or equivalently:\\n        //        1000 * remainder  <  numerator * target\\n        // so we have a rounding error iff:\\n        //        1000 * remainder  >=  numerator * target\\n        uint256 remainder = mulmod(\\n            target,\\n            numerator,\\n            denominator\\n        );\\n        isError = remainder.mul(1000) >= numerator.mul(target);\\n    }\\n\\n    function safeGetPartialAmountCeil(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    ) internal pure returns (uint256 partialAmount) {\\n        if (isRoundingErrorCeil(numerator, denominator, target)) {\\n            revert(\\\"rounding error\\\");\\n        }\\n        partialAmount = numerator.mul(target).add(denominator.sub(1)).div(denominator);\\n    }\\n\\n    /// @dev Checks if rounding error >= 0.1% when rounding up.\\n    /// @param numerator Numerator.\\n    /// @param denominator Denominator.\\n    /// @param target Value to multiply with numerator/denominator.\\n    /// @return isError Rounding error is present.\\n    function isRoundingErrorCeil(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    ) internal pure returns (bool isError) {\\n        if (denominator == 0) {\\n            revert(\\\"division by zero\\\");\\n        }\\n\\n        // See the comments in `isRoundingError`.\\n        if (target == 0 || numerator == 0) {\\n            // When either is zero, the ideal value and rounded value are zero\\n            // and there is no rounding error. (Although the relative error\\n            // is undefined.)\\n            return false;\\n        }\\n        // Compute remainder as before\\n        uint256 remainder = mulmod(\\n            target,\\n            numerator,\\n            denominator\\n        );\\n        remainder = denominator.sub(remainder) % denominator;\\n        isError = remainder.mul(1000) >= numerator.mul(target);\\n        return isError;\\n    }\\n}\\n\",\"keccak256\":\"0x479e01de1a609d836f73eecb1ba5d0a3d78fa791979e8e4f361a576a61b101ec\",\"license\":\"MIT\"},\"@rarible/exchange-v2/contracts/libraries/LibOrder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@rarible/lib-asset/contracts/LibAsset.sol\\\";\\n\\nimport \\\"./LibMath.sol\\\";\\nimport \\\"./LibOrderDataV3.sol\\\";\\nimport \\\"./LibOrderDataV2.sol\\\";\\nimport \\\"./LibOrderDataV1.sol\\\";\\n\\nlibrary LibOrder {\\n    using SafeMathUpgradeable for uint;\\n\\n    bytes32 constant ORDER_TYPEHASH = keccak256(\\n        \\\"Order(address maker,Asset makeAsset,address taker,Asset takeAsset,uint256 salt,uint256 start,uint256 end,bytes4 dataType,bytes data)Asset(AssetType assetType,uint256 value)AssetType(bytes4 assetClass,bytes data)\\\"\\n    );\\n\\n    bytes4 constant DEFAULT_ORDER_TYPE = 0xffffffff;\\n\\n    struct Order {\\n        address maker;\\n        LibAsset.Asset makeAsset;\\n        address taker;\\n        LibAsset.Asset takeAsset;\\n        uint salt;\\n        uint start;\\n        uint end;\\n        bytes4 dataType;\\n        bytes data;\\n    }\\n\\n    /**\\n     * @dev Calculate remaining make and take values of the order (after partial filling real make and take decrease)\\n     * @param order initial order to calculate remaining values for\\n     * @param fill current fill of the left order (0 if order is unfilled)\\n     * @param isMakeFill true if order fill is calculated from the make side, false if from the take side\\n     * @return makeValue remaining make value of the order. if fill = 0 then it's order's make value\\n     * @return takeValue remaining take value of the order. if fill = 0 then it's order's take value\\n     */\\n    function calculateRemaining(Order memory order, uint fill, bool isMakeFill) internal pure returns (uint makeValue, uint takeValue) {\\n        if (isMakeFill) {\\n            makeValue = order.makeAsset.value.sub(fill);\\n            takeValue = LibMath.safeGetPartialAmountFloor(order.takeAsset.value, order.makeAsset.value, makeValue);\\n        } else {\\n            takeValue = order.takeAsset.value.sub(fill);\\n            makeValue = LibMath.safeGetPartialAmountFloor(order.makeAsset.value, order.takeAsset.value, takeValue); \\n        } \\n    }\\n\\n    function hashKey(Order memory order) internal pure returns (bytes32) {\\n        if (order.dataType == LibOrderDataV1.V1 || order.dataType == DEFAULT_ORDER_TYPE) {\\n            return keccak256(abi.encode(\\n                order.maker,\\n                LibAsset.hash(order.makeAsset.assetType),\\n                LibAsset.hash(order.takeAsset.assetType),\\n                order.salt\\n            ));\\n        } else {\\n            //order.data is in hash for V2, V3 and all new order\\n            return keccak256(abi.encode(\\n                order.maker,\\n                LibAsset.hash(order.makeAsset.assetType),\\n                LibAsset.hash(order.takeAsset.assetType),\\n                order.salt,\\n                order.data\\n            ));\\n        }\\n    }\\n\\n    function hash(Order memory order) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n                ORDER_TYPEHASH,\\n                order.maker,\\n                LibAsset.hash(order.makeAsset),\\n                order.taker,\\n                LibAsset.hash(order.takeAsset),\\n                order.salt,\\n                order.start,\\n                order.end,\\n                order.dataType,\\n                keccak256(order.data)\\n            ));\\n    }\\n\\n    function validateOrderTime(LibOrder.Order memory order) internal view {\\n        require(order.start == 0 || order.start < block.timestamp, \\\"Order start validation failed\\\");\\n        require(order.end == 0 || order.end > block.timestamp, \\\"Order end validation failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x5ac1388a3571fd7f0d7fc3f78edd354ff37e04079901d1c93c63ea6e1e527190\",\"license\":\"MIT\"},\"@rarible/exchange-v2/contracts/libraries/LibOrderData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./LibOrder.sol\\\";\\n\\nlibrary LibOrderData {\\n\\n    struct GenericOrderData {\\n        LibPart.Part[] payouts;\\n        LibPart.Part[] originFees;\\n        bool isMakeFill;\\n    } \\n\\n    function parse(LibOrder.Order memory order) pure internal returns (GenericOrderData memory dataOrder) {\\n        if (order.dataType == LibOrderDataV1.V1) {\\n            LibOrderDataV1.DataV1 memory data = abi.decode(order.data, (LibOrderDataV1.DataV1));\\n            dataOrder.payouts = data.payouts;\\n            dataOrder.originFees = data.originFees;\\n        } else if (order.dataType == LibOrderDataV2.V2) {\\n            LibOrderDataV2.DataV2 memory data = abi.decode(order.data, (LibOrderDataV2.DataV2));\\n            dataOrder.payouts = data.payouts;\\n            dataOrder.originFees = data.originFees;\\n            dataOrder.isMakeFill = data.isMakeFill;\\n        } else if (order.dataType == 0xffffffff) {\\n        } else {\\n            revert(\\\"Unknown Order data type\\\");\\n        }\\n        if (dataOrder.payouts.length == 0) {\\n            dataOrder.payouts = payoutSet(order.maker);\\n        }\\n    }\\n\\n    function payoutSet(address orderAddress) pure internal returns (LibPart.Part[] memory) {\\n        LibPart.Part[] memory payout = new LibPart.Part[](1);\\n        payout[0].account = payable(orderAddress);\\n        payout[0].value = 10000;\\n        return payout;\\n    }\\n\\n    function parseOriginFeeData(uint dataFirst, uint dataSecond) internal pure returns(LibPart.Part[] memory) {\\n        LibPart.Part[] memory originFee;\\n\\n        if (dataFirst > 0 && dataSecond > 0){\\n            originFee = new LibPart.Part[](2);\\n\\n            originFee[0] = uintToLibPart(dataFirst);\\n            originFee[1] = uintToLibPart(dataSecond);\\n        }\\n\\n        if (dataFirst > 0 && dataSecond == 0) {\\n            originFee = new LibPart.Part[](1);\\n\\n            originFee[0] = uintToLibPart(dataFirst);\\n        }\\n\\n        if (dataFirst == 0 && dataSecond > 0) {\\n            originFee = new LibPart.Part[](1);\\n\\n            originFee[0] = uintToLibPart(dataSecond);\\n        }\\n\\n        return originFee;\\n    }\\n\\n    function parsePayouts(uint data) internal pure returns(LibPart.Part[] memory) {\\n        LibPart.Part[] memory payouts;\\n\\n        if (data > 0) {\\n            payouts = new LibPart.Part[](1);\\n            payouts[0] = uintToLibPart(data);\\n        }\\n\\n        return payouts;\\n    }\\n\\n    /**\\n        @notice converts uint to LibPart.Part\\n        @param data address and value encoded in uint (first 12 bytes )\\n        @return result LibPart.Part \\n     */\\n    function uintToLibPart(uint data) internal pure returns(LibPart.Part memory result) {\\n        if (data > 0){\\n            result.account = payable(address(data));\\n            result.value = uint96(data >> 160);\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0xf14209f07d0936ef3697a06c5d84b514e94fc304aff1bb43cff1b91e85390bb5\",\"license\":\"MIT\"},\"@rarible/exchange-v2/contracts/libraries/LibOrderDataV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@rarible/lib-part/contracts/LibPart.sol\\\";\\n\\nlibrary LibOrderDataV1 {\\n    bytes4 constant public V1 = bytes4(keccak256(\\\"V1\\\"));\\n\\n    struct DataV1 {\\n        LibPart.Part[] payouts;\\n        LibPart.Part[] originFees;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x2ab77ee6306b933315e80f6ef38d27855cf881b9452891362016b8e1becb92ff\",\"license\":\"MIT\"},\"@rarible/exchange-v2/contracts/libraries/LibOrderDataV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@rarible/lib-part/contracts/LibPart.sol\\\";\\n\\nlibrary LibOrderDataV2 {\\n    bytes4 constant public V2 = bytes4(keccak256(\\\"V2\\\"));\\n\\n    struct DataV2 {\\n        LibPart.Part[] payouts;\\n        LibPart.Part[] originFees;\\n        bool isMakeFill;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x51684b4d70282bd621cec5b0d25f2fcb5d1782c282ce0ffcf6fa63890d9064d2\",\"license\":\"MIT\"},\"@rarible/exchange-v2/contracts/libraries/LibOrderDataV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@rarible/lib-part/contracts/LibPart.sol\\\";\\n\\n/// @dev deprecated\\nlibrary LibOrderDataV3 {\\n    bytes4 constant public V3_SELL = bytes4(keccak256(\\\"V3_SELL\\\"));\\n    bytes4 constant public V3_BUY = bytes4(keccak256(\\\"V3_BUY\\\"));\\n\\n    struct DataV3_SELL {\\n        uint payouts;\\n        uint originFeeFirst;\\n        uint originFeeSecond;\\n        uint maxFeesBasePoint;\\n        bytes32 marketplaceMarker;\\n    }\\n\\n    struct DataV3_BUY {\\n        uint payouts;\\n        uint originFeeFirst;\\n        uint originFeeSecond;\\n        bytes32 marketplaceMarker;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x4e7dac710b765717654925350ba0d13d10f526c8524d2e6af6c6cdc85235f918\",\"license\":\"MIT\"},\"@rarible/lazy-mint/contracts/erc-1155/LibERC1155LazyMint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"@rarible/lib-part/contracts/LibPart.sol\\\";\\n\\nlibrary LibERC1155LazyMint {\\n    bytes4 constant public ERC1155_LAZY_ASSET_CLASS = bytes4(keccak256(\\\"ERC1155_LAZY\\\"));\\n    bytes4 constant _INTERFACE_ID_MINT_AND_TRANSFER = 0x6db15a0f;\\n\\n    struct Mint1155Data {\\n        uint tokenId;\\n        string tokenURI;\\n        uint supply;\\n        LibPart.Part[] creators;\\n        LibPart.Part[] royalties;\\n        bytes[] signatures;\\n    }\\n\\n    bytes32 public constant MINT_AND_TRANSFER_TYPEHASH = keccak256(\\\"Mint1155(uint256 tokenId,uint256 supply,string tokenURI,Part[] creators,Part[] royalties)Part(address account,uint96 value)\\\");\\n\\n    function hash(Mint1155Data memory data) internal pure returns (bytes32) {\\n        bytes32[] memory royaltiesBytes = new bytes32[](data.royalties.length);\\n        for (uint i = 0; i < data.royalties.length; ++i) {\\n            royaltiesBytes[i] = LibPart.hash(data.royalties[i]);\\n        }\\n        bytes32[] memory creatorsBytes = new bytes32[](data.creators.length);\\n        for (uint i = 0; i < data.creators.length; ++i) {\\n            creatorsBytes[i] = LibPart.hash(data.creators[i]);\\n        }\\n        return keccak256(abi.encode(\\n                MINT_AND_TRANSFER_TYPEHASH,\\n                data.tokenId,\\n                data.supply,\\n                keccak256(bytes(data.tokenURI)),\\n                keccak256(abi.encodePacked(creatorsBytes)),\\n                keccak256(abi.encodePacked(royaltiesBytes))\\n            ));\\n    }\\n}\\n\",\"keccak256\":\"0x541f8f29d7d643c5eab654e1e86fc97392f79b246fc5072fc0dcc5c93802b98d\",\"license\":\"MIT\"},\"@rarible/lazy-mint/contracts/erc-721/LibERC721LazyMint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"@rarible/lib-part/contracts/LibPart.sol\\\";\\n\\nlibrary LibERC721LazyMint {\\n    bytes4 constant public ERC721_LAZY_ASSET_CLASS = bytes4(keccak256(\\\"ERC721_LAZY\\\"));\\n    bytes4 constant _INTERFACE_ID_MINT_AND_TRANSFER = 0x8486f69f;\\n\\n    struct Mint721Data {\\n        uint tokenId;\\n        string tokenURI;\\n        LibPart.Part[] creators;\\n        LibPart.Part[] royalties;\\n        bytes[] signatures;\\n    }\\n\\n    bytes32 public constant MINT_AND_TRANSFER_TYPEHASH = keccak256(\\\"Mint721(uint256 tokenId,string tokenURI,Part[] creators,Part[] royalties)Part(address account,uint96 value)\\\");\\n\\n    function hash(Mint721Data memory data) internal pure returns (bytes32) {\\n        bytes32[] memory royaltiesBytes = new bytes32[](data.royalties.length);\\n        for (uint i = 0; i < data.royalties.length; ++i) {\\n            royaltiesBytes[i] = LibPart.hash(data.royalties[i]);\\n        }\\n        bytes32[] memory creatorsBytes = new bytes32[](data.creators.length);\\n        for (uint i = 0; i < data.creators.length; ++i) {\\n            creatorsBytes[i] = LibPart.hash(data.creators[i]);\\n        }\\n        return keccak256(abi.encode(\\n                MINT_AND_TRANSFER_TYPEHASH,\\n                data.tokenId,\\n                keccak256(bytes(data.tokenURI)),\\n                keccak256(abi.encodePacked(creatorsBytes)),\\n                keccak256(abi.encodePacked(royaltiesBytes))\\n            ));\\n    }\\n\\n}\\n\",\"keccak256\":\"0xc0d28cb2d3f811cfcad6ed6d1d015e3a470a83d7896d3205cb8410c4bede097a\",\"license\":\"MIT\"},\"@rarible/lib-asset/contracts/LibAsset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nlibrary LibAsset {\\n    bytes4 constant public ETH_ASSET_CLASS = bytes4(keccak256(\\\"ETH\\\"));\\n    bytes4 constant public ERC20_ASSET_CLASS = bytes4(keccak256(\\\"ERC20\\\"));\\n    bytes4 constant public ERC721_ASSET_CLASS = bytes4(keccak256(\\\"ERC721\\\"));\\n    bytes4 constant public ERC1155_ASSET_CLASS = bytes4(keccak256(\\\"ERC1155\\\"));\\n    bytes4 constant public COLLECTION = bytes4(keccak256(\\\"COLLECTION\\\"));\\n    bytes4 constant public CRYPTO_PUNKS = bytes4(keccak256(\\\"CRYPTO_PUNKS\\\"));\\n\\n    bytes32 constant ASSET_TYPE_TYPEHASH = keccak256(\\n        \\\"AssetType(bytes4 assetClass,bytes data)\\\"\\n    );\\n\\n    bytes32 constant ASSET_TYPEHASH = keccak256(\\n        \\\"Asset(AssetType assetType,uint256 value)AssetType(bytes4 assetClass,bytes data)\\\"\\n    );\\n\\n    struct AssetType {\\n        bytes4 assetClass;\\n        bytes data;\\n    }\\n\\n    struct Asset {\\n        AssetType assetType;\\n        uint value;\\n    }\\n\\n    function hash(AssetType memory assetType) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n                ASSET_TYPE_TYPEHASH,\\n                assetType.assetClass,\\n                keccak256(assetType.data)\\n            ));\\n    }\\n\\n    function hash(Asset memory asset) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n                ASSET_TYPEHASH,\\n                hash(asset.assetType),\\n                asset.value\\n            ));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x5d63bba4747a12a83c5628dba94bf56714b4dcf94f742ff28863034831061c8a\",\"license\":\"MIT\"},\"@rarible/lib-bp/contracts/BpLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\n\\nlibrary BpLibrary {\\n    using SafeMathUpgradeable for uint;\\n\\n    function bp(uint value, uint bpValue) internal pure returns (uint) {\\n        return value.mul(bpValue).div(10000);\\n    }\\n}\\n\",\"keccak256\":\"0x17c563120ba6b4c52d10621806b18af45946fe64894d995e4d672cccf6c09c8c\",\"license\":\"MIT\"},\"@rarible/lib-part/contracts/LibPart.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nlibrary LibPart {\\n    bytes32 public constant TYPE_HASH = keccak256(\\\"Part(address account,uint96 value)\\\");\\n\\n    struct Part {\\n        address payable account;\\n        uint96 value;\\n    }\\n\\n    function hash(Part memory part) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, part.account, part.value));\\n    }\\n}\\n\",\"keccak256\":\"0xd0123f7411573a6a7e1527e0d3901913d7642e504ff240d5b7c5b76a28587def\",\"license\":\"MIT\"},\"@rarible/lib-signature/contracts/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\ninterface IERC1271 {\\n\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param _hash Hash of the data signed on the behalf of address(this)\\n     * @param _signature Signature byte array associated with _data\\n     *\\n     * MUST return the bytes4 magic value 0x1626ba7e when function passes.\\n     * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\\n     * MUST allow external calls\\n     */\\n    function isValidSignature(bytes32 _hash, bytes calldata _signature) virtual external view returns (bytes4 magicValue);\\n}\",\"keccak256\":\"0x47e5ddd7f0504f513ccff6f04095004452c6b8332d3f88e6959ea189568b7878\",\"license\":\"MIT\"},\"@rarible/lib-signature/contracts/LibSignature.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nlibrary LibSignature {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(\\n            uint256(s) <=\\n                0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\n            \\\"ECDSA: invalid signature 's' value\\\"\\n        );\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        // v > 30 is a special case, we need to adjust hash with \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"\\n        // and v = v - 4\\n        address signer;\\n        if (v > 30) {\\n            require(\\n                v - 4 == 27 || v - 4 == 28,\\n                \\\"ECDSA: invalid signature 'v' value\\\"\\n            );\\n            signer = ecrecover(toEthSignedMessageHash(hash), v - 4, r, s);\\n        } else {\\n            require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n            signer = ecrecover(hash, v, r, s);\\n        }\\n\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * replicates the behavior of the\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n     * JSON-RPC method.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return\\n            keccak256(\\n                abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x7a5583247b42c05cd0e592a870755c9b7bba3f2141f6e0dd1a123af504372237\",\"license\":\"MIT\"},\"@rarible/meta-tx/contracts/EIP712MetaTransaction.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nabstract contract EIP712MetaTransaction is ContextUpgradeable {\\n    using SafeMath for uint256;\\n\\n    bytes32 private constant META_TRANSACTION_TYPEHASH = keccak256(bytes(\\\"MetaTransaction(uint256 nonce,address from,bytes functionSignature)\\\"));\\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH = keccak256(\\\"EIP712Domain(string name,string version,address verifyingContract,bytes32 salt)\\\");\\n\\n    mapping(address => uint256) private nonces;\\n    bytes32 internal domainSeparator;\\n\\n    /*\\n     * Meta transaction structure.\\n     * No point of including value field here as if user is doing value transfer then he has the funds to pay for gas\\n     * He should call the desired function directly in that case.\\n     */\\n    struct MetaTransaction {\\n        uint256 nonce;\\n        address from;\\n        bytes functionSignature;\\n    }\\n\\n    /*\\n     * Domain structure.\\n     * Data(information to for making metaTransaction method uniq.) about method and contract\\n     */\\n    struct EIP712Domain {\\n        string name;\\n        string version;\\n        address verifyingContract;\\n        bytes32 salt;\\n    }\\n\\n    event MetaTransactionExecuted(address userAddress, address payable relayerAddress, bytes functionSignature);\\n\\n    function __MetaTransaction_init_unchained(string memory name, string memory version) internal {\\n        domainSeparator = keccak256(abi.encode(\\n                EIP712_DOMAIN_TYPEHASH,\\n                keccak256(bytes(name)),\\n                keccak256(bytes(version)),\\n                address(this),\\n                getSalt()\\n            ));\\n    }\\n\\n    function convertBytesToBytes4(bytes memory inBytes) internal pure returns (bytes4 outBytes4) {\\n        if (inBytes.length == 0) {\\n            return 0x0;\\n        }\\n\\n        assembly {\\n            outBytes4 := mload(add(inBytes, 32))\\n        }\\n    }\\n\\n    function executeMetaTransaction(address userAddress,\\n        bytes memory functionSignature, bytes32 sigR, bytes32 sigS, uint8 sigV) external payable returns (bytes memory) {\\n        bytes4 destinationFunctionSig = convertBytesToBytes4(functionSignature);\\n        require(destinationFunctionSig != msg.sig, \\\"Wrong functionSignature\\\");\\n        MetaTransaction memory metaTx = MetaTransaction({\\n        nonce : nonces[userAddress],\\n        from : userAddress,\\n        functionSignature : functionSignature\\n        });\\n        require(verify(userAddress, metaTx, sigR, sigS, sigV), \\\"Signer and signature do not match\\\");\\n        nonces[userAddress] = nonces[userAddress].add(1);\\n        // Append userAddress at the end to extract it from calling context\\n        (bool success, bytes memory returnData) = address(this).call(abi.encodePacked(functionSignature, userAddress));\\n\\n        require(success, \\\"Function call not successful\\\");\\n        emit MetaTransactionExecuted(userAddress, msg.sender, functionSignature);\\n        return returnData;\\n    }\\n\\n    function hashMetaTransaction(MetaTransaction memory metaTx) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n                META_TRANSACTION_TYPEHASH,\\n                metaTx.nonce,\\n                metaTx.from,\\n                keccak256(metaTx.functionSignature)\\n            ));\\n    }\\n\\n    function getNonce(address user) external view returns (uint256 nonce) {\\n        nonce = nonces[user];\\n    }\\n\\n    function verify(address user, MetaTransaction memory metaTx, bytes32 sigR, bytes32 sigS, uint8 sigV) internal view returns (bool) {\\n        address signer = ecrecover(toTypedMessageHash(hashMetaTransaction(metaTx)), sigV, sigR, sigS);\\n        require(signer != address(0), \\\"Invalid signature\\\");\\n        return signer == user;\\n    }\\n\\n    function _msgSender() internal view virtual override returns (address payable sender) {\\n        if (msg.sender == address(this)) {\\n            bytes memory array = msg.data;\\n            uint256 index = msg.data.length;\\n            assembly {\\n            // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\n                sender := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff)\\n            }\\n        } else {\\n            sender = msg.sender;\\n        }\\n        return sender;\\n    }\\n\\n    function getSalt() internal pure returns (bytes32) {\\n        return bytes32(getChainID());\\n    }\\n\\n    function getChainID() internal pure returns (uint256 id) {\\n        assembly {\\n            id := chainid()\\n        }\\n    }\\n\\n    function getDomainSeparator() private view returns (bytes32) {\\n        return domainSeparator;\\n    }\\n\\n    /**\\n    * Accept message hash and returns hash message in EIP712 compatible form\\n    * So that it can be used to recover signer from signature signed using EIP712 formatted data\\n    * https://eips.ethereum.org/EIPS/eip-712\\n    * \\\"\\\\\\\\x19\\\" makes the encoding deterministic\\n    * \\\"\\\\\\\\x01\\\" is the version byte to make it compatible to EIP-191\\n    */\\n    function toTypedMessageHash(bytes32 messageHash) internal view returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", getDomainSeparator(), messageHash));\\n    }\\n\\n    /**\\n         * @dev verifies the call result and bubbles up revert reason for failed calls\\n         *\\n         * @param success : outcome of forwarded call\\n         * @param returndata : returned data from the frowarded call\\n         * @param errorMessage : fallback error message to show\\n         */\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure {\\n        if (!success) {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\",\"keccak256\":\"0x58924a44eea8720bdcfb32f12d3374deac9605a3b75cb8872907856d526bde10\",\"license\":\"MIT\"},\"@rarible/transfer-manager/contracts/RaribleTransferManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport \\\"@rarible/lazy-mint/contracts/erc-721/LibERC721LazyMint.sol\\\";\\nimport \\\"@rarible/lazy-mint/contracts/erc-1155/LibERC1155LazyMint.sol\\\";\\n\\nimport \\\"@rarible/exchange-interfaces/contracts/IRoyaltiesProvider.sol\\\";\\n\\nimport \\\"@rarible/lib-bp/contracts/BpLibrary.sol\\\";\\n\\nimport \\\"./interfaces/ITransferManager.sol\\\";\\n\\nabstract contract RaribleTransferManager is OwnableUpgradeable, ITransferManager {\\n    using BpLibrary for uint;\\n    using SafeMathUpgradeable for uint;\\n\\n    ProtocolFeeData public protocolFee;\\n    IRoyaltiesProvider public royaltiesRegistry;\\n\\n    //deprecated\\n    address private defaultFeeReceiver;\\n    // deprecated\\n    mapping(address => address) private feeReceivers;\\n\\n    /// @dev event that's emitted when ProtocolFeeData buyerAmount changes\\n    event BuyerFeeAmountChanged(uint oldValue, uint newValue);\\n\\n    /// @dev event that's emitted when ProtocolFeeData sellerAmount changes\\n    event SellerFeeAmountChanged(uint oldValue, uint newValue);\\n\\n    /// @dev event that's emitted when ProtocolFeeData receiver changes\\n    event FeeReceiverChanged(address oldValue, address newValue);\\n\\n    /// @dev struct to store protocol fee - receiver address, buyer fee amount (in bp), seller fee amount (in bp)\\n    struct ProtocolFeeData {\\n        address receiver;\\n        uint48 buyerAmount;\\n        uint48 sellerAmount;\\n    }\\n\\n    /**\\n        @notice initialises RaribleTransferManager state\\n        @param newProtocolFee deprecated\\n        @param newDefaultFeeReceiver deprecated\\n        @param newRoyaltiesProvider royaltiesRegistry contract address\\n     */\\n    function __RaribleTransferManager_init_unchained(\\n        uint newProtocolFee,\\n        address newDefaultFeeReceiver,\\n        IRoyaltiesProvider newRoyaltiesProvider\\n    ) internal initializer {\\n        royaltiesRegistry = newRoyaltiesProvider;\\n    }\\n\\n    function setRoyaltiesRegistry(IRoyaltiesProvider newRoyaltiesRegistry) external onlyOwner {\\n        royaltiesRegistry = newRoyaltiesRegistry;\\n    }\\n\\n    function setPrtocolFeeReceiver(address _receiver) public onlyOwner {\\n        emit FeeReceiverChanged(protocolFee.receiver, _receiver);\\n        protocolFee.receiver = _receiver;\\n    }\\n\\n    function setPrtocolFeeBuyerAmount(uint48 _buyerAmount) public onlyOwner {\\n        emit BuyerFeeAmountChanged(protocolFee.buyerAmount, _buyerAmount);\\n        protocolFee.buyerAmount = _buyerAmount;\\n    }\\n\\n    function setPrtocolFeeSellerAmount(uint48 _sellerAmount) public onlyOwner {\\n        emit SellerFeeAmountChanged(protocolFee.sellerAmount, _sellerAmount);\\n        protocolFee.sellerAmount = _sellerAmount;\\n    }\\n\\n    function setAllProtocolFeeData(address _receiver, uint48 _buyerAmount, uint48 _sellerAmount) public onlyOwner {\\n        setPrtocolFeeReceiver(_receiver);\\n        setPrtocolFeeBuyerAmount(_buyerAmount);\\n        setPrtocolFeeSellerAmount(_sellerAmount);\\n    }\\n\\n    /**\\n        @notice executes transfers for 2 matched orders\\n        @param left DealSide from the left order (see LibDeal.sol)\\n        @param right DealSide from the right order (see LibDeal.sol)\\n        @param feeSide feeSide of the match\\n        @return totalLeftValue - total amount for the left order\\n        @return totalRightValue - total amout for the right order\\n    */\\n    function doTransfers(\\n        LibDeal.DealSide memory left,\\n        LibDeal.DealSide memory right,\\n        LibFeeSide.FeeSide feeSide\\n    ) override internal returns (uint totalLeftValue, uint totalRightValue) {\\n        totalLeftValue = left.asset.value;\\n        totalRightValue = right.asset.value;\\n\\n        if (feeSide == LibFeeSide.FeeSide.LEFT) {\\n            totalLeftValue = doTransfersWithFees(left, right, protocolFee);\\n            transferPayouts(right.asset.assetType, right.asset.value, right.from, left.payouts, right.proxy);\\n        } else if (feeSide == LibFeeSide.FeeSide.RIGHT) {\\n            totalRightValue = doTransfersWithFees(right, left,protocolFee);\\n            transferPayouts(left.asset.assetType, left.asset.value, left.from, right.payouts, left.proxy);\\n        } else {\\n            transferPayouts(left.asset.assetType, left.asset.value, left.from, right.payouts, left.proxy);\\n            transferPayouts(right.asset.assetType, right.asset.value, right.from, left.payouts, right.proxy);\\n        }\\n    }\\n\\n    /**\\n        @notice executes the fee-side transfers (payment + fees)\\n        @param paymentSide DealSide of the fee-side order\\n        @param nftSide  DealSide of the nft-side order\\n        @param _protocolFee protocol fee data\\n        @return totalAmount of fee-side asset\\n    */\\n    function doTransfersWithFees(\\n        LibDeal.DealSide memory paymentSide,\\n        LibDeal.DealSide memory nftSide,\\n        ProtocolFeeData memory _protocolFee\\n    ) internal returns (uint totalAmount) {\\n        totalAmount = calculateTotalAmount(paymentSide.asset.value, _protocolFee, paymentSide.originFees);\\n        uint rest = transferProtocolFee(totalAmount, paymentSide.asset.value, paymentSide.from, _protocolFee, paymentSide.asset.assetType, paymentSide.proxy);\\n\\n        rest = transferRoyalties(paymentSide.asset.assetType, nftSide.asset.assetType, nftSide.payouts, rest, paymentSide.asset.value, paymentSide.from, paymentSide.proxy);\\n        if (\\n            paymentSide.originFees.length  == 1 &&\\n            nftSide.originFees.length  == 1 &&\\n            nftSide.originFees[0].account == paymentSide.originFees[0].account\\n        ) { \\n            LibPart.Part[] memory origin = new  LibPart.Part[](1);\\n            origin[0].account = nftSide.originFees[0].account;\\n            origin[0].value = nftSide.originFees[0].value + paymentSide.originFees[0].value;\\n            (rest,) = transferFees(paymentSide.asset.assetType, rest, paymentSide.asset.value, origin, paymentSide.from, paymentSide.proxy);\\n        } else {\\n            (rest,) = transferFees(paymentSide.asset.assetType, rest, paymentSide.asset.value, paymentSide.originFees, paymentSide.from, paymentSide.proxy);\\n            (rest,) = transferFees(paymentSide.asset.assetType, rest, paymentSide.asset.value, nftSide.originFees, paymentSide.from, paymentSide.proxy);\\n        }\\n        transferPayouts(paymentSide.asset.assetType, rest, paymentSide.from, nftSide.payouts, paymentSide.proxy);\\n    }\\n\\n    function transferProtocolFee(\\n        uint totalAmount,\\n        uint amount,\\n        address from,\\n        ProtocolFeeData memory _protocolFee,\\n        LibAsset.AssetType memory matchCalculate,\\n        address proxy\\n    ) internal returns (uint) {\\n        (uint rest, uint fee) = subFeeInBp(totalAmount, amount, _protocolFee.buyerAmount + _protocolFee.sellerAmount);\\n        if (fee > 0) {\\n            transfer(LibAsset.Asset(matchCalculate, fee), from, _protocolFee.receiver, proxy);\\n        }\\n        return rest;\\n    }\\n\\n    /**\\n        @notice Transfer royalties. If there is only one royalties receiver and one address in payouts and they match,\\n           nothing is transferred in this function\\n        @param paymentAssetType Asset Type which represents payment\\n        @param nftAssetType Asset Type which represents NFT to pay royalties for\\n        @param payouts Payouts to be made\\n        @param rest How much of the amount left after previous transfers\\n        @param from owner of the Asset to transfer\\n        @param proxy Transfer proxy to use\\n        @return How much left after transferring royalties\\n    */\\n    function transferRoyalties(\\n        LibAsset.AssetType memory paymentAssetType,\\n        LibAsset.AssetType memory nftAssetType,\\n        LibPart.Part[] memory payouts,\\n        uint rest,\\n        uint amount,\\n        address from,\\n        address proxy\\n    ) internal returns (uint) {\\n        LibPart.Part[] memory royalties = getRoyaltiesByAssetType(nftAssetType);\\n        if (\\n            royalties.length == 1 &&\\n            payouts.length == 1 &&\\n            royalties[0].account == payouts[0].account\\n        ) {\\n            require(royalties[0].value <= 5000, \\\"Royalties are too high (>50%)\\\");\\n            return rest;\\n        }\\n        (uint result, uint totalRoyalties) = transferFees(paymentAssetType, rest, amount, royalties, from, proxy);\\n        require(totalRoyalties <= 5000, \\\"Royalties are too high (>50%)\\\");\\n        return result;\\n    }\\n\\n    /**\\n        @notice calculates royalties by asset type. If it's a lazy NFT, then royalties are extracted from asset. otherwise using royaltiesRegistry\\n        @param nftAssetType NFT Asset Type to calculate royalties for\\n        @return calculated royalties (Array of LibPart.Part)\\n    */\\n    function getRoyaltiesByAssetType(LibAsset.AssetType memory nftAssetType) internal returns (LibPart.Part[] memory) {\\n        if (nftAssetType.assetClass == LibAsset.ERC1155_ASSET_CLASS || nftAssetType.assetClass == LibAsset.ERC721_ASSET_CLASS) {\\n            (address token, uint tokenId) = abi.decode(nftAssetType.data, (address, uint));\\n            return royaltiesRegistry.getRoyalties(token, tokenId);\\n        } else if (nftAssetType.assetClass == LibERC1155LazyMint.ERC1155_LAZY_ASSET_CLASS) {\\n            (, LibERC1155LazyMint.Mint1155Data memory data) = abi.decode(nftAssetType.data, (address, LibERC1155LazyMint.Mint1155Data));\\n            return data.royalties;\\n        } else if (nftAssetType.assetClass == LibERC721LazyMint.ERC721_LAZY_ASSET_CLASS) {\\n            (, LibERC721LazyMint.Mint721Data memory data) = abi.decode(nftAssetType.data, (address, LibERC721LazyMint.Mint721Data));\\n            return data.royalties;\\n        }\\n        LibPart.Part[] memory empty;\\n        return empty;\\n    }\\n\\n    /**\\n        @notice Transfer fees\\n        @param assetType Asset Type to transfer\\n        @param rest How much of the amount left after previous transfers\\n        @param amount Total amount of the Asset. Used as a base to calculate part from (100%)\\n        @param fees Array of LibPart.Part which represents fees to pay\\n        @param from owner of the Asset to transfer\\n        @param proxy Transfer proxy to use\\n        @return newRest how much left after transferring fees\\n        @return totalFees total number of fees in bp\\n    */\\n    function transferFees(\\n        LibAsset.AssetType memory assetType,\\n        uint rest,\\n        uint amount,\\n        LibPart.Part[] memory fees,\\n        address from,\\n        address proxy\\n    ) internal returns (uint newRest, uint totalFees) {\\n        totalFees = 0;\\n        newRest = rest;\\n        for (uint256 i = 0; i < fees.length; ++i) {\\n            totalFees = totalFees.add(fees[i].value);\\n            uint feeValue;\\n            (newRest, feeValue) = subFeeInBp(newRest, amount, fees[i].value);\\n            if (feeValue > 0) {\\n                transfer(LibAsset.Asset(assetType, feeValue), from, fees[i].account, proxy);\\n            }\\n        }\\n    }\\n\\n    /**\\n        @notice transfers main part of the asset (payout)\\n        @param assetType Asset Type to transfer\\n        @param amount Amount of the asset to transfer\\n        @param from Current owner of the asset\\n        @param payouts List of payouts - receivers of the Asset\\n        @param proxy Transfer Proxy to use\\n    */\\n    function transferPayouts(\\n        LibAsset.AssetType memory assetType,\\n        uint amount,\\n        address from,\\n        LibPart.Part[] memory payouts,\\n        address proxy\\n    ) internal {\\n        require(payouts.length > 0, \\\"transferPayouts: nothing to transfer\\\");\\n        uint sumBps = 0;\\n        uint rest = amount;\\n        for (uint256 i = 0; i < payouts.length - 1; ++i) {\\n            uint currentAmount = amount.bp(payouts[i].value);\\n            sumBps = sumBps.add(payouts[i].value);\\n            if (currentAmount > 0) {\\n                rest = rest.sub(currentAmount);\\n                transfer(LibAsset.Asset(assetType, currentAmount), from, payouts[i].account, proxy);\\n            }\\n        }\\n        LibPart.Part memory lastPayout = payouts[payouts.length - 1];\\n        sumBps = sumBps.add(lastPayout.value);\\n        require(sumBps == 10000, \\\"Sum payouts Bps not equal 100%\\\");\\n        if (rest > 0) {\\n            transfer(LibAsset.Asset(assetType, rest), from, lastPayout.account, proxy);\\n        }\\n    }\\n    \\n    /**\\n        @notice calculates total amount of fee-side asset that is going to be used in match\\n        @param amount fee-side order value\\n        @param _protocolFee protocol fee\\n        @param orderOriginFees fee-side order's origin fee (it adds on top of the amount)\\n        @return total amount of fee-side asset\\n    */\\n    function calculateTotalAmount(\\n        uint amount,\\n        ProtocolFeeData memory _protocolFee,\\n        LibPart.Part[] memory orderOriginFees\\n    ) internal pure returns (uint) {\\n        \\n        uint fees = _protocolFee.buyerAmount;\\n        for (uint256 i = 0; i < orderOriginFees.length; ++i) {\\n            require(orderOriginFees[i].value <= 10000, \\\"origin fee is too big\\\");\\n            fees = fees + orderOriginFees[i].value;\\n        }\\n\\n        return amount.add(amount.bp(fees));\\n    }\\n\\n    function subFeeInBp(uint value, uint total, uint feeInBp) internal pure returns (uint newValue, uint realFee) {\\n        return subFee(value, total.bp(feeInBp));\\n    }\\n\\n    function subFee(uint value, uint fee) internal pure returns (uint newValue, uint realFee) {\\n        if (value > fee) {\\n            newValue = value.sub(fee);\\n            realFee = fee;\\n        } else {\\n            newValue = 0;\\n            realFee = value;\\n        }\\n    }\\n\\n    uint256[46] private __gap;\\n}\\n\",\"keccak256\":\"0x6ff9cb17b44f520b917e2bd113a6c03db0ab4fed76badb374ed5946b387e9862\",\"license\":\"MIT\"},\"@rarible/transfer-manager/contracts/TransferExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@rarible/exchange-interfaces/contracts/ITransferProxy.sol\\\";\\nimport \\\"@rarible/exchange-interfaces/contracts/INftTransferProxy.sol\\\";\\nimport \\\"@rarible/exchange-interfaces/contracts/IERC20TransferProxy.sol\\\";\\nimport \\\"./interfaces/ITransferExecutor.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport \\\"./lib/LibTransfer.sol\\\";\\n\\nabstract contract TransferExecutor is Initializable, OwnableUpgradeable, ITransferExecutor {\\n    using LibTransfer for address;\\n\\n    mapping (bytes4 => address) internal proxies;\\n\\n    event ProxyChange(bytes4 indexed assetType, address proxy);\\n\\n    function __TransferExecutor_init_unchained(address transferProxy, address erc20TransferProxy) internal { \\n        proxies[LibAsset.ERC20_ASSET_CLASS] = address(erc20TransferProxy);\\n        proxies[LibAsset.ERC721_ASSET_CLASS] = address(transferProxy);\\n        proxies[LibAsset.ERC1155_ASSET_CLASS] = address(transferProxy);\\n    }\\n\\n    function setTransferProxy(bytes4 assetType, address proxy) external onlyOwner {\\n        proxies[assetType] = proxy;\\n        emit ProxyChange(assetType, proxy);\\n    }\\n\\n    function _setTransferProxy(bytes4 assetType, address proxy) internal {\\n        proxies[assetType] = proxy;\\n        emit ProxyChange(assetType, proxy);\\n    }\\n\\n    function transfer(\\n        LibAsset.Asset memory asset,\\n        address from,\\n        address to,\\n        address proxy\\n    ) internal override {\\n        if (asset.assetType.assetClass == LibAsset.ERC721_ASSET_CLASS) {\\n            //not using transfer proxy when transfering from this contract\\n            (address token, uint tokenId) = abi.decode(asset.assetType.data, (address, uint256));\\n            require(asset.value == 1, \\\"erc721 value error\\\");\\n            if (from == address(this)){\\n                IERC721Upgradeable(token).safeTransferFrom(address(this), to, tokenId);\\n            } else {\\n                INftTransferProxy(proxy).erc721safeTransferFrom(IERC721Upgradeable(token), from, to, tokenId);\\n            }\\n        } else if (asset.assetType.assetClass == LibAsset.ERC20_ASSET_CLASS) {\\n            //not using transfer proxy when transfering from this contract\\n            (address token) = abi.decode(asset.assetType.data, (address));\\n            if (from == address(this)){\\n                require(IERC20Upgradeable(token).transfer(to, asset.value), \\\"erc20 transfer failed\\\");\\n            } else {\\n                IERC20TransferProxy(proxy).erc20safeTransferFrom(IERC20Upgradeable(token), from, to, asset.value);\\n            }\\n        } else if (asset.assetType.assetClass == LibAsset.ERC1155_ASSET_CLASS) {\\n            //not using transfer proxy when transfering from this contract\\n            (address token, uint tokenId) = abi.decode(asset.assetType.data, (address, uint256));\\n            if (from == address(this)){\\n                IERC1155Upgradeable(token).safeTransferFrom(address(this), to, tokenId, asset.value, \\\"\\\");\\n            } else {\\n                INftTransferProxy(proxy).erc1155safeTransferFrom(IERC1155Upgradeable(token), from, to, tokenId, asset.value, \\\"\\\");  \\n            }\\n        } else if (asset.assetType.assetClass == LibAsset.ETH_ASSET_CLASS) {\\n            if (to != address(this)) {\\n                to.transferEth(asset.value);\\n            }\\n        } else {\\n            ITransferProxy(proxy).transfer(asset, from, to);\\n        }\\n    }\\n    \\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xea639616c66696b5ae9b278d3c6c9a85839bb5e815a4db046b4fd0225cd86625\",\"license\":\"MIT\"},\"@rarible/transfer-manager/contracts/interfaces/ITransferExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@rarible/lib-asset/contracts/LibAsset.sol\\\";\\n\\nabstract contract ITransferExecutor {\\n    function transfer(\\n        LibAsset.Asset memory asset,\\n        address from,\\n        address to,\\n        address proxy\\n    ) internal virtual;\\n}\\n\",\"keccak256\":\"0xe7f4318d4576876f4fbc273f3602aa0973bc2c63d393b2764789edc8f8508b7d\",\"license\":\"MIT\"},\"@rarible/transfer-manager/contracts/interfaces/ITransferManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"../lib/LibDeal.sol\\\";\\nimport \\\"./ITransferExecutor.sol\\\";\\n\\nabstract contract ITransferManager is ITransferExecutor {\\n\\n    function doTransfers(\\n        LibDeal.DealSide memory left,\\n        LibDeal.DealSide memory right,\\n        LibFeeSide.FeeSide feeSide\\n    ) internal virtual returns (uint totalMakeValue, uint totalTakeValue);\\n}\",\"keccak256\":\"0x4ee97ebeee379c623507e56833b644ff6c3ef96f5a7ee5cc92ec191a13c3505e\",\"license\":\"MIT\"},\"@rarible/transfer-manager/contracts/lib/LibDeal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@rarible/lib-part/contracts/LibPart.sol\\\";\\nimport \\\"@rarible/lib-asset/contracts/LibAsset.sol\\\";\\nimport \\\"./LibFeeSide.sol\\\";\\n\\nlibrary LibDeal {\\n    struct DealSide {\\n        LibAsset.Asset asset;\\n        LibPart.Part[] payouts;\\n        LibPart.Part[] originFees;\\n        address proxy;\\n        address from;\\n    }\\n}\\n\",\"keccak256\":\"0xb80d953b7854e95b87e8596732c18e3cc244d4b4d3318a2304ee5167302e2006\",\"license\":\"MIT\"},\"@rarible/transfer-manager/contracts/lib/LibFeeSide.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@rarible/lib-asset/contracts/LibAsset.sol\\\";\\n\\nlibrary LibFeeSide {\\n\\n    enum FeeSide {NONE, LEFT, RIGHT}\\n\\n    function getFeeSide(bytes4 leftClass, bytes4 rightClass) internal pure returns (FeeSide) {\\n        if (leftClass == LibAsset.ETH_ASSET_CLASS) {\\n            return FeeSide.LEFT;\\n        }\\n        if (rightClass == LibAsset.ETH_ASSET_CLASS) {\\n            return FeeSide.RIGHT;\\n        }\\n        if (leftClass == LibAsset.ERC20_ASSET_CLASS) {\\n            return FeeSide.LEFT;\\n        }\\n        if (rightClass == LibAsset.ERC20_ASSET_CLASS) {\\n            return FeeSide.RIGHT;\\n        }\\n        if (leftClass == LibAsset.ERC1155_ASSET_CLASS) {\\n            return FeeSide.LEFT;\\n        }\\n        if (rightClass == LibAsset.ERC1155_ASSET_CLASS) {\\n            return FeeSide.RIGHT;\\n        }\\n        return FeeSide.NONE;\\n    }\\n}\\n\",\"keccak256\":\"0xbbb3298e900bd2b0b5bc934fb3e006ff876b8fae6310675e82d35e949e1c039b\",\"license\":\"MIT\"},\"@rarible/transfer-manager/contracts/lib/LibTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nlibrary LibTransfer {\\n    function transferEth(address to, uint value) internal {\\n        (bool success,) = to.call{ value: value }(\\\"\\\");\\n        require(success, \\\"transfer failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x01cf87ba2ef274b5fa9d75731912b5a81eb1a50a870bf975288c65596cad2c85\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615df280620000216000396000f3fe60806040526004361061012a5760003560e01c8063715018a6116100ab578063bc158c2d1161006f578063bc158c2d146102fd578063d6ca6ab71461031d578063e2864fe31461033d578063e99a3f801461035d578063eae3ad6f14610370578063f2fde38b146103905761012a565b8063715018a61461026f5780638da5cb5b14610284578063b0e21e8a14610299578063b39deb46146102bd578063b74c8e9a146102dd5761012a565b80632d0335ab116100f25780632d0335ab146101da57806330c642f1146101fa5780633be899221461021a57806367d49a3b1461023a5780636d8f06941461024d5761012a565b80630c53c51c1461012f5780630d5f7d35146101585780631372a6251461016d57806320158c441461018d5780632bed54d6146101ba575b600080fd5b61014261013d36600461519d565b6103b0565b60405161014f9190615731565b60405180910390f35b61016b610166366004615305565b610729565b005b34801561017957600080fd5b5061016b610188366004615056565b610a46565b34801561019957600080fd5b506101ad6101a8366004615299565b610b63565b60405161014f919061570d565b3480156101c657600080fd5b5061016b6101d53660046150bd565b610b76565b3480156101e657600080fd5b506101ad6101f5366004614e01565b610cf0565b34801561020657600080fd5b5061016b6102153660046152cd565b610d0c565b34801561022657600080fd5b5061016b610235366004614e01565b610ddc565b61016b610248366004615305565b610e61565b34801561025957600080fd5b50610262611141565b60405161014f9190615641565b34801561027b57600080fd5b5061016b611151565b34801561029057600080fd5b506102626111fd565b3480156102a557600080fd5b506102ae61120d565b60405161014f939291906156e4565b3480156102c957600080fd5b5061016b6102d83660046152cd565b611238565b3480156102e957600080fd5b5061016b6102f8366004615209565b6112fc565b34801561030957600080fd5b5061016b610318366004614e01565b61137e565b34801561032957600080fd5b5061016b6103383660046155d3565b61144b565b34801561034957600080fd5b5061016b6103583660046154fa565b611525565b61016b61036b36600461552c565b6115e6565b34801561037c57600080fd5b5061016b61038b3660046155d3565b6115fc565b34801561039c57600080fd5b5061016b6103ab366004614e01565b6116d3565b606060006103bd866117d6565b90506000356001600160e01b03199081169082161415610424576040805162461bcd60e51b815260206004820152601760248201527f57726f6e672066756e6374696f6e5369676e6174757265000000000000000000604482015290519081900360640190fd5b604080516060810182526001600160a01b038916600081815261019360209081529084902054835282015290810187905261046288828888886117f6565b61049d5760405162461bcd60e51b8152600401808060200182810382526021815260200180615d9c6021913960400191505060405180910390fd5b6001600160a01b038816600090815261019360205260409020546104c29060016118e0565b61019360008a6001600160a01b03166001600160a01b0316815260200190815260200160002081905550600080306001600160a01b0316898b6040516020018083805190602001908083835b6020831061052d5780518252601f19909201916020918201910161050e565b6001836020036101000a038019825116818451168082178552505050505050905001826001600160a01b031660601b8152601401925050506040516020818303038152906040526040518082805190602001908083835b602083106105a35780518252601f199092019160209182019101610584565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610605576040519150601f19603f3d011682016040523d82523d6000602084013e61060a565b606091505b509150915081610661576040805162461bcd60e51b815260206004820152601c60248201527f46756e6374696f6e2063616c6c206e6f74207375636365737366756c00000000604482015290519081900360640190fd5b7f5845892132946850460bff5a0083f71031bc5bf9aadcd40f1de79423eac9b10b8a338b60405180846001600160a01b03168152602001836001600160a01b0316815260200180602001828103825283818151815260200191508051906020019080838360005b838110156106e05781810151838201526020016106c8565b50505050905090810190601f16801561070d5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a19998505050505050505050565b600061074361073e60c0840160a08501614e01565b611943565b604080516101208101909152909150600090806107636020860186614e01565b6001600160a01b031681526020016040518060400160405280604051806040016040528088604001602081019061079a91906152b1565b6001600160e01b03191681526020016107b660608a018a615b36565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250939094525050918352506020888101359281019290925291835282810191909152604080518082018252868152608080890135938201939093529083015260c080870135606084015260e08701359183019190915261010086013560a083015201610859610140860161012087016152b1565b6001600160e01b0319168152602001610876610140860186615b36565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509390945250506040805161012081018252828152815180830183528781526101808901356020828101919091528201528082018390528151608081018352949550919391925060608084019291829182820191829161090a91908c01908c016152b1565b6001600160e01b031916815260200161092660608b018b615b36565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250939094525050918352506101a08901356020928301529183528201819052604082018190526060820152608001610995610140870161012088016152b1565b6001600160e01b03191681526020016109b26101c0870187615b36565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509152509050610a36826109fc610160870187615b36565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506119a692505050565b610a4082826119bd565b50505050565b600054610100900460ff1680610a5f5750610a5f611c0f565b80610a6d575060005460ff16155b610aa85760405162461bcd60e51b815260040180806020018281038252602e815260200180615d0b602e913960400191505060405180910390fd5b600054610100900460ff16158015610ad3576000805460ff1961ff0019909116610100171660011790555b610adb611c20565b610ae3611cc2565b610aeb611dbb565b610b346040518060400160405280600e81526020016d22bc31b430b733b2a6b2ba30ab1960911b815250604051806040016040528060018152602001603160f81b815250611e8b565b610b3e8686611f1b565b610b49848484611fc5565b8015610b5b576000805461ff00191690555b505050505050565b61012f6020526000908152604090205481565b600054610100900460ff1680610b8f5750610b8f611c0f565b80610b9d575060005460ff16155b610bd85760405162461bcd60e51b815260040180806020018281038252602e815260200180615d0b602e913960400191505060405180910390fd5b600054610100900460ff16158015610c03576000805460ff1961ff0019909116610100171660011790555b610c0b611c20565b610c13611cc2565b610c1b611dbb565b610c646040518060400160405280600e81526020016d22bc31b430b733b2a6b2ba30ab1960911b815250604051806040016040528060018152602001603160f81b815250611e8b565b610c6e8b8b611f1b565b610c79898989611fc5565b60005b8551811015610cbd57610cb5868281518110610c9457fe5b6020026020010151868381518110610ca857fe5b6020026020010151610d6e565b600101610c7c565b50610cc8838361129a565b610cd1866116d3565b8015610ce3576000805461ff00191690555b5050505050505050505050565b6001600160a01b03166000908152610193602052604090205490565b610d14612085565b6001600160a01b0316610d256111fd565b6001600160a01b031614610d6e576040805162461bcd60e51b81526020600482018190526024820152600080516020615d7c833981519152604482015290519081900360640190fd5b6001600160e01b031982166000818152609760205260409081902080546001600160a01b0319166001600160a01b038516179055517f4b5aced933c0c9a88aeac3f0b3b72c5aaf75df8ebaf53225773248c4c315359390610dd0908490615641565b60405180910390a25050565b610de4612085565b6001600160a01b0316610df56111fd565b6001600160a01b031614610e3e576040805162461bcd60e51b81526020600482018190526024820152600080516020615d7c833981519152604482015290519081900360640190fd5b61016280546001600160a01b0319166001600160a01b0392909216919091179055565b6000610e7661073e60c0840160a08501614e01565b60408051610120810190915290915060009080610e966020860186614e01565b6001600160a01b0316815260200160405180604001604052808581526020018660800135815250815260200160006001600160a01b0316815260200160405180604001604052806040518060400160405280886040016020810190610efb91906152b1565b6001600160e01b0319168152602001610f1760608a018a615b36565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505091525081526020878101359181019190915290825260c08601359082015260e085013560408201526101008501356060820152608001610f92610140860161012087016152b1565b6001600160e01b0319168152602001610faf610140860186615b36565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525093909452505060408051610120810182528281528151608081018352949550919391925060208301919081908181019081906110219060608c01908c016152b1565b6001600160e01b031916815260200161103d60608b018b615b36565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250939094525050918352506101a08901356020928301529183528281018290526040805180820182528881526101808a013592810192909252830152606082018190526080820181905260a082015260c0016110d0610140870161012088016152b1565b6001600160e01b03191681526020016110ed6101c0870187615b36565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509152509050611137826109fc610160870187615b36565b610a4081836119bd565b610162546001600160a01b031681565b611159612085565b6001600160a01b031661116a6111fd565b6001600160a01b0316146111b3576040805162461bcd60e51b81526020600482018190526024820152600080516020615d7c833981519152604482015290519081900360640190fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b6033546001600160a01b03165b90565b610161546001600160a01b0381169065ffffffffffff600160a01b8204811691600160d01b90041683565b611240612085565b6001600160a01b03166112516111fd565b6001600160a01b03161461129a576040805162461bcd60e51b81526020600482018190526024820152600080516020615d7c833981519152604482015290519081900360640190fd5b6001600160e01b031982166000818152606560205260409081902080546001600160a01b0319166001600160a01b038516179055517fd2bf91075f105d0fd80328da28e20ebdad1c1261839711183bc29a44cbe6c72f90610dd0908490615641565b611304612085565b6001600160a01b03166113156111fd565b6001600160a01b03161461135e576040805162461bcd60e51b81526020600482018190526024820152600080516020615d7c833981519152604482015290519081900360640190fd5b6113678361137e565b6113708261144b565b611379816115fc565b505050565b611386612085565b6001600160a01b03166113976111fd565b6001600160a01b0316146113e0576040805162461bcd60e51b81526020600482018190526024820152600080516020615d7c833981519152604482015290519081900360640190fd5b610161546040517fa4b009cc442411b602eaf94bc0579b6abdb8fd90b4ef5b9426e270038906bd0391611420916001600160a01b03909116908490615655565b60405180910390a161016180546001600160a01b0319166001600160a01b0392909216919091179055565b611453612085565b6001600160a01b03166114646111fd565b6001600160a01b0316146114ad576040805162461bcd60e51b81526020600482018190526024820152600080516020615d7c833981519152604482015290519081900360640190fd5b610161546040517f70bba4f904a93ba5c1af3a1bb602bc9c058551dbe963dfe0b6cb5bc11c5fea9e916114f291600160a01b90910465ffffffffffff16908490615b1d565b60405180910390a1610161805465ffffffffffff909216600160a01b0265ffffffffffff60a01b19909216919091179055565b80516001600160a01b0316611538612085565b6001600160a01b0316146115675760405162461bcd60e51b815260040161155e90615a8d565b60405180910390fd5b60808101516115885760405162461bcd60e51b815260040161155e9061581f565b600061159382612094565b600081815261012f6020526040908190206000199055519091507fe8d9861dbc9c663ed3accd261bbe2fe01e0d3d9e5f51fa38523b265c7757a93a906115da90839061570d565b60405180910390a15050565b6115f28484848461221c565b610a4084836119bd565b611604612085565b6001600160a01b03166116156111fd565b6001600160a01b03161461165e576040805162461bcd60e51b81526020600482018190526024820152600080516020615d7c833981519152604482015290519081900360640190fd5b610161546040517fa8af9093caa9beb61d20432227c66258ceef926f21879b80f3adf22a4d19f131916116a391600160d01b90910465ffffffffffff16908490615b1d565b60405180910390a1610161805465ffffffffffff909216600160d01b026001600160d01b03909216919091179055565b6116db612085565b6001600160a01b03166116ec6111fd565b6001600160a01b031614611735576040805162461bcd60e51b81526020600482018190526024820152600080516020615d7c833981519152604482015290519081900360640190fd5b6001600160a01b03811661177a5760405162461bcd60e51b8152600401808060200182810382526026815260200180615c766026913960400191505060405180910390fd5b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b60008151600014156117ea575060006117f1565b5060208101515b919050565b600080600161180c611807886122e8565b61236b565b84878760405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015611863573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166118bf576040805162461bcd60e51b8152602060048201526011602482015270496e76616c6964207369676e617475726560781b604482015290519081900360640190fd5b866001600160a01b0316816001600160a01b03161491505095945050505050565b60008282018381101561193a576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b61194b614930565b611953614930565b6001600160a01b038316611970576355575f5d60e11b815261193d565b6322ba176160e21b815260405161198b908490602001615641565b60408051601f19818403018152919052602082015292915050565b6119af826123b7565b6119b98282612481565b5050565b6000806119ca8484612730565b9150915060008060006119dd87876127c9565b925092509250600080611b366040518060a0016040528060405180604001604052808b8152602001876000015181525081526020018760000151815260200187602001518152602001609760008b600001516001600160e01b0319166001600160e01b031916815260200190815260200160002060009054906101000a90046001600160a01b03166001600160a01b031681526020018b600001516001600160a01b03168152506040518060a0016040528060405180604001604052808b8152602001886020015181525081526020018760000151815260200187602001518152602001609760008b600001516001600160e01b0319166001600160e01b031916815260200190815260200160002060009054906101000a90046001600160a01b03166001600160a01b031681526020018b600001516001600160a01b0316815250611b318a600001518a60000151612878565b612949565b885191935091506001600160e01b0319166355575f5d60e11b1415611bb55785516001600160e01b0319166355575f5d60e11b1415611b7457600080fd5b81341015611b945760405162461bcd60e51b815260040161155e90615a65565b81341115611bb057611bb0611ba93484612ac0565b3390612b1d565b611c04565b85516001600160e01b0319166355575f5d60e11b1415611c045780341015611bef5760405162461bcd60e51b815260040161155e90615a65565b80341115611c0457611c04611ba93483612ac0565b505050505050505050565b6000611c1a30612bb5565b15905090565b600054610100900460ff1680611c395750611c39611c0f565b80611c47575060005460ff16155b611c825760405162461bcd60e51b815260040180806020018281038252602e815260200180615d0b602e913960400191505060405180910390fd5b600054610100900460ff16158015611cad576000805460ff1961ff0019909116610100171660011790555b8015611cbf576000805461ff00191690555b50565b600054610100900460ff1680611cdb5750611cdb611c0f565b80611ce9575060005460ff16155b611d245760405162461bcd60e51b815260040180806020018281038252602e815260200180615d0b602e913960400191505060405180910390fd5b600054610100900460ff16158015611d4f576000805460ff1961ff0019909116610100171660011790555b6000611d59612085565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015611cbf576000805461ff001916905550565b600054610100900460ff1680611dd45750611dd4611c0f565b80611de2575060005460ff16155b611e1d5760405162461bcd60e51b815260040180806020018281038252602e815260200180615d0b602e913960400191505060405180910390fd5b600054610100900460ff16158015611e48576000805460ff1961ff0019909116610100171660011790555b611cad6040518060400160405280600881526020016745786368616e676560c01b815250604051806040016040528060018152602001601960f91b815250612bbb565b7f36c25de3e541d5d970f66e4210d728721220fff5c077cc6cd008b3a0c62adab78280519060200120828051906020012030611ec5612c7b565b60405160200180868152602001858152602001848152602001836001600160a01b031681526020018281526020019550505050505060405160208183030381529060405280519060200120610194819055505050565b60976020527f4532fa16f071d6234e30e1a1e69b9806f04095edf37a1ca7a25c8d6af7861cc080546001600160a01b039283166001600160a01b0319918216179091557f30a684095c937b5aa064dcf94f9903a7d808e3efb22d8389dbd43080ad4ed3d5805493909216928116831790915563025ceed960e61b6000527f4b5822151ea34b7c8d9e37c3e466bcecb631efe6a9f26a4a4054110a93dd316f80549091169091179055565b600054610100900460ff1680611fde5750611fde611c0f565b80611fec575060005460ff16155b6120275760405162461bcd60e51b815260040180806020018281038252602e815260200180615d0b602e913960400191505060405180910390fd5b600054610100900460ff16158015612052576000805460ff1961ff0019909116610100171660011790555b61016280546001600160a01b0319166001600160a01b0384161790558015610a40576000805461ff001916905550505050565b600061208f612c85565b905090565b60e08101516000906001600160e01b031916632611a13360e11b14806120c8575060e08201516001600160e01b0319908116145b1561213d5781516020830151516120de90612ce1565b6060840151516120ed90612ce1565b846080015160405160200180856001600160a01b031681526020018481526020018381526020018281526020019450505050506040516020818303038152906040528051906020012090506117f1565b815160208301515161214e90612ce1565b60608401515161215d90612ce1565b846080015185610100015160405160200180866001600160a01b0316815260200185815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156121c95781810151838201526020016121b1565b50505050905090810190601f1680156121f65780820380516001836020036101000a031916815260200191505b5096505050505050506040516020818303038152906040528051906020012090506117f1565b61222684846119a6565b61223082826119a6565b60408401516001600160a01b03161561228c5781516001600160a01b03161561228c5783604001516001600160a01b031682600001516001600160a01b03161461228c5760405162461bcd60e51b815260040161155e90615a22565b60408201516001600160a01b031615610a405783516001600160a01b031615610a405783600001516001600160a01b031682604001516001600160a01b031614610a405760405162461bcd60e51b815260040161155e90615891565b6000604051806080016040528060438152602001615c3360439139805190602001208260000151836020015184604001518051906020012060405160200180858152602001848152602001836001600160a01b03168152602001828152602001945050505050604051602081830303815290604052805190602001209050919050565b6000612375612d4b565b82604051602001808061190160f01b81525060020183815260200182815260200192505050604051602081830303815290604052805190602001209050919050565b60a081015115806123cb5750428160a00151105b61241c576040805162461bcd60e51b815260206004820152601d60248201527f4f726465722073746172742076616c69646174696f6e206661696c6564000000604482015290519081900360640190fd5b60c081015115806124305750428160c00151115b611cbf576040805162461bcd60e51b815260206004820152601b60248201527f4f7264657220656e642076616c69646174696f6e206661696c65640000000000604482015290519081900360640190fd5b60808201516125065781516001600160a01b0316156125015781516001600160a01b03166124ad612085565b6001600160a01b031614612501576040805162461bcd60e51b815260206004820152601660248201527536b0b5b2b91034b9903737ba103a3c1039b2b73232b960511b604482015290519081900360640190fd5b6119b9565b81516001600160a01b0316612519612085565b6001600160a01b0316146119b957600061253283612d52565b905061254a83600001516001600160a01b0316612bb5565b15612686578251630b135d3f60e11b906001600160a01b0316631626ba7e61257184612e42565b856040518363ffffffff1660e01b81526004018083815260200180602001828103825283818151815260200191508051906020019080838360005b838110156125c45781810151838201526020016125ac565b50505050905090810190601f1680156125f15780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b15801561260f57600080fd5b505afa158015612623573d6000803e3d6000fd5b505050506040513d602081101561263957600080fd5b50516001600160e01b031916146126815760405162461bcd60e51b815260040180806020018281038252602b815260200180615ce0602b913960400191505060405180910390fd5b611379565b82516001600160a01b03166126a48361269e84612e42565b90612e4c565b6001600160a01b0316146126e95760405162461bcd60e51b8152600401808060200182810382526022815260200180615cbe6022913960400191505060405180910390fd5b82516001600160a01b0316611379576040805162461bcd60e51b815260206004820152600860248201526737379036b0b5b2b960c11b604482015290519081900360640190fd5b612738614930565b612740614930565b6020840151516060840151516127569190612ecc565b80519092506001600160e01b0319166127815760405162461bcd60e51b815260040161155e906159f6565b6060840151516020840151516127979190612ecc565b80519091506001600160e01b0319166127c25760405162461bcd60e51b815260040161155e906159f6565b9250929050565b6127d1614948565b6127d9614948565b6127e161496b565b60006127ec86612094565b905060006127f986612094565b90506000612805612085565b88519091506001600160a01b0316612824576001600160a01b03811688525b86516001600160a01b0316612840576001600160a01b03811687525b61284988612f0c565b955061285487612f0c565b945061286c888885858a604001518a60400151613005565b93505050509250925092565b60006001600160e01b031983166355575f5d60e11b141561289b5750600161193d565b6001600160e01b031982166355575f5d60e11b14156128bc5750600261193d565b6001600160e01b031983166322ba176160e21b14156128dd5750600161193d565b6001600160e01b031982166322ba176160e21b14156128fe5750600261193d565b6001600160e01b0319831663025ceed960e61b141561291f5750600161193d565b6001600160e01b0319821663025ceed960e61b14156129405750600261193d565b50600092915050565b8251602090810151835190910151600183600281111561296557fe5b14156129e75760408051606081018252610161546001600160a01b038116825265ffffffffffff600160a01b820481166020840152600160d01b90910416918101919091526129b790869086906131c0565b91506129e284600001516000015185600001516020015186608001518860200151886060015161343a565b612ab8565b60028360028111156129f557fe5b1415612a725760408051606081018252610161546001600160a01b038116825265ffffffffffff600160a01b820481166020840152600160d01b9091041691810191909152612a4790859087906131c0565b90506129e285600001516000015186600001516020015187608001518760200151896060015161343a565b845180516020918201516080880151928701516060890151612a9594919061343a565b835180516020918201516080870151928801516060880151612ab894919061343a565b935093915050565b600082821115612b17576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6040516000906001600160a01b0384169083908381818185875af1925050503d8060008114612b68576040519150601f19603f3d011682016040523d82523d6000602084013e612b6d565b606091505b5050905080611379576040805162461bcd60e51b815260206004820152600f60248201526e1d1c985b9cd9995c8819985a5b1959608a1b604482015290519081900360640190fd5b3b151590565b600054610100900460ff1680612bd45750612bd4611c0f565b80612be2575060005460ff16155b612c1d5760405162461bcd60e51b815260040180806020018281038252602e815260200180615d0b602e913960400191505060405180910390fd5b600054610100900460ff16158015612c48576000805460ff1961ff0019909116610100171660011790555b825160208085019190912083519184019190912060c99190915560ca558015611379576000805461ff0019169055505050565b600061208f6135be565b600033301415612cdc57600080368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b0316915061120a9050565b503390565b8051602091820151805190830120604080517f452a0dc408cb0d27ffc3b3caff933a5208040a53a9dbecd8d89cad2c0d40e00c818601526001600160e01b031990931683820152606080840192909252805180840390920182526080909201909152805191012090565b6101945490565b60007f477ed43b8020849b755512278536c3766a3b4ab547519949a75f483372493f8d8260000151612d8784602001516135c2565b8460400151612d9986606001516135c2565b86608001518760a001518860c001518960e001518a610100015180519060200120604051602001808b81526020018a6001600160a01b03168152602001898152602001886001600160a01b03168152602001878152602001868152602001858152602001848152602001836001600160e01b03191681526020018281526020019a5050505050505050505050604051602081830303815290604052805190602001209050919050565b6000612375613632565b60008151604114612ea4576040805162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015290519081900360640190fd5b60208201516040830151606084015160001a612ec28682858561366d565b9695505050505050565b612ed4614930565b6000612ee084846138c3565b80519091506001600160e01b031916612f0557612efd83856138c3565b91505061193d565b905061193d565b612f14614948565b60e08201516001600160e01b031916632611a13360e11b1415612f60576000826101000151806020019051810190612f4c91906153c2565b805183526020908101519083015250612fec565b60e08201516001600160e01b0319166323d235ef60e01b1415612fb8576000826101000151806020019051810190612f98919061544e565b805183526020808201519084015260409081015115159083015250612fec565b60e08201516001600160e01b03199081161415612fd457612fec565b60405162461bcd60e51b815260040161155e90615988565b8051516117f1578151612ffe90613adf565b8152919050565b61300d61496b565b600061301d886080015187613b7a565b9050600061302f886080015187613b7a565b905060006130418a8a85858a8a613b9f565b90508960200151602001516000141580613062575060608901516020015115155b156130855780516130855760405162461bcd60e51b815260040161155e90615901565b60608a0151602001511515806130a157506020808a0151015115155b156130ca5760008160200151116130ca5760405162461bcd60e51b815260040161155e90615901565b60808a01511561311d5785156130fc5780516130e79084906118e0565b600089815261012f602052604090205561311d565b602081015161310c9084906118e0565b600089815261012f60205260409020555b60808901511561317057841561315257602081015161313d9083906118e0565b600088815261012f6020526040902055613170565b805161315f9083906118e0565b600088815261012f60205260409020555b602081015181516040517f956cd63ee4cdcd81fda5f0ec7c6c36dceda99e1b412f4a650a5d26055dc3c450926131ab928c928c929190615716565b60405180910390a19998505050505050505050565b60006131d9846000015160200151838660400151613c38565b90506000613203828660000151602001518760800151868960000151600001518a60600151613ce5565b8551805186515160208089015193015160808a015160608b0151959650613231959394929387929190613d42565b9050846040015151600114801561324d57508360400151516001145b80156132a25750846040015160008151811061326557fe5b6020026020010151600001516001600160a01b0316846040015160008151811061328b57fe5b6020026020010151600001516001600160a01b0316145b156133b857604080516001808252818301909252600091816020015b6132c6614985565b8152602001906001900390816132be57905050905084604001516000815181106132ec57fe5b6020026020010151600001518160008151811061330557fe5b60209081029190910101516001600160a01b0390911690526040860151805160009061332d57fe5b602002602001015160200151856040015160008151811061334a57fe5b602002602001015160200151018160008151811061336457fe5b6020026020010151602001906001600160601b031690816001600160601b0316815250506133ae86600001516000015183886000015160200151848a608001518b60600151613e47565b5091506134119050565b6133e285600001516000015182876000015160200151886040015189608001518a60600151613e47565b50855180516020909101516040870151608089015160608a015194955061340d948693929190613e47565b5090505b6134328560000151600001518287608001518760200151896060015161343a565b509392505050565b600082511161345b5760405162461bcd60e51b815260040161155e9061584d565b600084815b600185510381101561352a5760006134a186838151811061347d57fe5b6020026020010151602001516001600160601b031689613efc90919063ffffffff16565b90506134d68683815181106134b257fe5b6020026020010151602001516001600160601b0316856118e090919063ffffffff16565b93508015613521576134e88382612ac0565b925061352160405180604001604052808b8152602001838152508888858151811061350f57fe5b60200260200101516000015188613f14565b50600101613460565b5060008460018651038151811061353d57fe5b6020026020010151905061356781602001516001600160601b0316846118e090919063ffffffff16565b9250826127101461358a5760405162461bcd60e51b815260040161155e906159bf565b81156135b4576135b460405180604001604052808a81526020018481525087836000015187613f14565b5050505050505050565b4690565b60007fdb6f72e915676cfc289da13bc4ece054fd17b1df6d77ffc4a60510718c236b086135f28360000151612ce1565b8360200151604051602001808481526020018381526020018281526020019350505050604051602081830303815290604052805190602001209050919050565b600061208f7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f61366061431c565b613668614322565b614328565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156136ce5760405162461bcd60e51b8152600401808060200182810382526022815260200180615c9c6022913960400191505060405180910390fd5b6000601e8560ff1611156137a8576004850360ff16601b14806136f757506004850360ff16601c145b6137325760405162461bcd60e51b8152600401808060200182810382526022815260200180615d396022913960400191505060405180910390fd5b600161373d8761438a565b60048703868660405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015613797573d6000803e3d6000fd5b50505060206040510351905061385f565b8460ff16601b14806137bd57508460ff16601c145b6137f85760405162461bcd60e51b8152600401808060200182810382526022815260200180615d396022913960400191505060405180910390fd5b60018686868660405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015613852573d6000803e3d6000fd5b5050506020604051035190505b6001600160a01b0381166138ba576040805162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015290519081900360640190fd5b95945050505050565b6138cb614930565b825182516001600160e01b031982166355575f5d60e11b1415613936576001600160e01b031981166355575f5d60e11b141561390b57849250505061193d565b505060408051808201825260008082528251602081810190945290815291810191909152905061193d565b6001600160e01b031982166322ba176160e21b141561397b576001600160e01b031981166322ba176160e21b141561390b5761397285856143db565b9250505061193d565b6001600160e01b031982166339d690a360e11b14156139b7576001600160e01b031981166339d690a360e11b141561390b5761397285856143db565b6001600160e01b0319821663025ceed960e61b14156139f3576001600160e01b0319811663025ceed960e61b141561390b5761397285856143db565b6001600160e01b031982166000908152606560205260409020546001600160a01b03168015613aa8576040516306d3f7cb60e41b81526001600160a01b03821690636d3f7cb090613a4a9089908990600401615ab2565b60006040518083038186803b158015613a6257600080fd5b505afa158015613a76573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613a9e9190810190615337565b935050505061193d565b6001600160e01b03198381169083161415613ac757613a9e86866143db565b60405162461bcd60e51b815260040161155e906157b1565b60408051600180825281830190925260609160009190816020015b613b02614985565b815260200190600190039081613afa5790505090508281600081518110613b2557fe5b6020026020010151600001906001600160a01b031690816001600160a01b03168152505061271081600081518110613b5957fe5b6020908102919091018101516001600160601b039092169101529050919050565b600082613b895750600061193d565b50600090815261012f6020526040902054919050565b613ba761496b565b600080613bb5898887614438565b91509150600080613bc78a8988614438565b9150915083811180613be157508381148015613be1575083155b15613c0d57613c0284848c60200151602001518d60600151602001516144b1565b945050505050612ec2565b613c298b60200151602001518c60600151602001518484614536565b9b9a5050505050505050505050565b602082015160009065ffffffffffff16815b8351811015613cc557612710848281518110613c6257fe5b6020026020010151602001516001600160601b03161115613c955760405162461bcd60e51b815260040161155e90615959565b838181518110613ca157fe5b6020026020010151602001516001600160601b031682019150806001019050613c4a565b50613cda613cd38683613efc565b86906118e0565b9150505b9392505050565b6000806000613d078989886040015189602001510165ffffffffffff166145bc565b90925090508015613d3657613d3660405180604001604052808781526020018381525088886000015187613f14565b50979650505050505050565b600080613d4e886145de565b905080516001148015613d62575086516001145b8015613daf575086600081518110613d7657fe5b6020026020010151600001516001600160a01b031681600081518110613d9857fe5b6020026020010151600001516001600160a01b0316145b15613e005761138881600081518110613dc457fe5b6020026020010151602001516001600160601b03161115613df75760405162461bcd60e51b815260040161155e906157e8565b85915050613e3c565b600080613e118b8989868a8a613e47565b91509150611388811115613e375760405162461bcd60e51b815260040161155e906157e8565b509150505b979650505050505050565b846000805b8551811015613ef057613e88868281518110613e6457fe5b6020026020010151602001516001600160601b0316836118e090919063ffffffff16565b91506000613eb78489898581518110613e9d57fe5b6020026020010151602001516001600160601b03166145bc565b90945090508015613ee757613ee760405180604001604052808c8152602001838152508789858151811061350f57fe5b50600101613e4c565b50965096945050505050565b600061193a612710613f0e8585614753565b906147ac565b8351516001600160e01b0319166339d690a360e11b141561405a57600080856000015160200151806020019051810190613f4e9190615029565b915091508560200151600114613f765760405162461bcd60e51b815260040161155e906158d5565b6001600160a01b038516301415613fee57604051632142170760e11b81526001600160a01b038316906342842e0e90613fb79030908890869060040161566f565b600060405180830381600087803b158015613fd157600080fd5b505af1158015613fe5573d6000803e3d6000fd5b50505050614053565b604051637b84dc8360e11b81526001600160a01b0384169063f709b90690614020908590899089908790600401615787565b600060405180830381600087803b15801561403a57600080fd5b505af115801561404e573d6000803e3d6000fd5b505050505b5050610a40565b8351516001600160e01b0319166322ba176160e21b14156141b85760008460000151602001518060200190518101906140939190614e1d565b90506001600160a01b03841630141561414a57602085015160405163a9059cbb60e01b81526001600160a01b0383169163a9059cbb916140d79187916004016156cb565b602060405180830381600087803b1580156140f157600080fd5b505af1158015614105573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614129919061527f565b6141455760405162461bcd60e51b815260040161155e9061592a565b6141b2565b602085015160405163776062c360e01b81526001600160a01b0384169163776062c39161417f91859189918991600401615787565b600060405180830381600087803b15801561419957600080fd5b505af11580156141ad573d6000803e3d6000fd5b505050505b50610a40565b8351516001600160e01b03191663025ceed960e61b1415614275576000808560000151602001518060200190518101906141f29190615029565b90925090506001600160a01b03851630141561423d576020860151604051637921219560e11b81526001600160a01b0384169163f242432a91613fb791309189918791600401615693565b6020860151604051639c1c2ee960e01b81526001600160a01b03851691639c1c2ee9916140209186918a918a91889190600401615744565b8351516001600160e01b0319166355575f5d60e11b14156142be576001600160a01b03821630146142b95760208401516142b9906001600160a01b03841690612b1d565b610a40565b6040516354bc0cf160e01b81526001600160a01b038216906354bc0cf1906142ee90879087908790600401615ad7565b600060405180830381600087803b15801561430857600080fd5b505af11580156135b4573d6000803e3d6000fd5b60c95490565b60ca5490565b60008383836143356135be565b3060405160200180868152602001858152602001848152602001838152602001826001600160a01b03168152602001955050505050506040516020818303038152906040528051906020012090509392505050565b604080517f19457468657265756d205369676e6564204d6573736167653a0a333200000000602080830191909152603c8083019490945282518083039094018452605c909101909152815191012090565b6143e3614930565b6020808401518051908201208382015180519201919091208082141561440d57849250505061193d565b5050604080518082018252600080825282516020808201909452908152918101919091529392505050565b60008082156144775760208086015101516144539085612ac0565b915061447085606001516020015186602001516020015184614813565b9050612ab8565b60608501516020015161448a9085612ac0565b90506144a785602001516020015186606001516020015183614813565b9150935093915050565b6144b961496b565b60006144c6858585614813565b90508581111561451d576040805162461bcd60e51b815260206004820152601860248201527f66696c6c4c6566743a20756e61626c6520746f2066696c6c0000000000000000604482015290519081900360640190fd5b5050604080518082019091529384525050602082015290565b61453e61496b565b600061454b838787614813565b9050838111156145a2576040805162461bcd60e51b815260206004820152601960248201527f66696c6c52696768743a20756e61626c6520746f2066696c6c00000000000000604482015290519081900360640190fd5b604080518082019091529283526020830152509392505050565b6000806145d2856145cd8686613efc565b614879565b91509150935093915050565b80516060906001600160e01b03191663025ceed960e61b1480614612575081516001600160e01b0319166339d690a360e11b145b156146c85760008083602001518060200190518101906146329190615029565b61016254604051634e53ee3d60e11b81529294509092506001600160a01b031690639ca7dc7a9061466990859085906004016156cb565b600060405180830381600087803b15801561468357600080fd5b505af1158015614697573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526146bf919081019061524d565b925050506117f1565b81516001600160e01b03191662737ea960e61b141561470957600082602001518060200190518101906146fb9190614e39565b6080015192506117f1915050565b81516001600160e01b03191663d8f960c160e01b141561474b576000826020015180602001905181019061473d9190614f36565b6060015192506117f1915050565b506060919050565b6000826147625750600061193d565b8282028284828161476f57fe5b041461193a5760405162461bcd60e51b8152600401808060200182810382526021815260200180615d5b6021913960400191505060405180910390fd5b6000808211614802576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161480b57fe5b049392505050565b60006148208484846148a1565b15614863576040805162461bcd60e51b815260206004820152600e60248201526d3937bab73234b7339032b93937b960911b604482015290519081900360640190fd5b61487183613f0e8685614753565b949350505050565b600080828411156148985761488e8484612ac0565b91508290506127c2565b50600093915050565b6000826148e8576040805162461bcd60e51b815260206004820152601060248201526f6469766973696f6e206279207a65726f60801b604482015290519081900360640190fd5b8115806148f3575083155b1561490057506000613cde565b6000838061490a57fe5b85840990506149198584614753565b614925826103e8614753565b101595945050505050565b60408051808201909152600081526060602082015290565b604051806060016040528060608152602001606081526020016000151581525090565b604051806040016040528060008152602001600081525090565b604080518082019091526000808252602082015290565b80356117f181615c07565b600082601f8301126149b7578081fd5b813560206149cc6149c783615b9d565b615b7a565b82815281810190858301838502870184018810156149e8578586fd5b855b85811015614a0f5781356149fd81615c07565b845292840192908401906001016149ea565b5090979650505050505050565b600082601f830112614a2c578081fd5b81356020614a3c6149c783615b9d565b8281528181019085830183850287018401881015614a58578586fd5b855b85811015614a0f578135614a6d81615c1c565b84529284019290840190600101614a5a565b600082601f830112614a8f578081fd5b81516020614a9f6149c783615b9d565b82815281810190858301855b85811015614a0f57614ac2898684518b0101614bf6565b84529284019290840190600101614aab565b600082601f830112614ae4578081fd5b81516020614af46149c783615b9d565b82815281810190858301604080860288018501891015614b12578687fd5b865b86811015614b815781838b031215614b2a578788fd5b81518281018181106001600160401b0382111715614b4457fe5b83528351614b5181615c07565b8152838701516001600160601b0381168114614b6b57898afd5b8188015285529385019391810191600101614b14565b509198975050505050505050565b805180151581146117f157600080fd5b80356117f181615c1c565b600082601f830112614bba578081fd5b8135614bc86149c782615bba565b818152846020838601011115614bdc578283fd5b816020850160208301379081016020019190915292915050565b600082601f830112614c06578081fd5b8151614c146149c782615bba565b818152846020838601011115614c28578283fd5b614871826020830160208701615bdb565b60006101e08284031215614c4b578081fd5b50919050565b60006040808385031215614c63578182fd5b80518181016001600160401b038282108183111715614c7e57fe5b818452829450853581811115614c9357600080fd5b8601808803851315614ca457600080fd5b608084018381108382111715614cb657fe5b909452833593614cc585615c1c565b93825260208401359381851115614cdb57600080fd5b614ce788868301614baa565b60608501525050815260209384013593019290925292915050565b6000610120808385031215614d15578182fd5b614d1e81615b7a565b915050614d2a8261499c565b815260208201356001600160401b0380821115614d4657600080fd5b614d5285838601614c51565b6020840152614d636040850161499c565b60408401526060840135915080821115614d7c57600080fd5b614d8885838601614c51565b60608401526080840135608084015260a084013560a084015260c084013560c0840152614db760e08501614b9f565b60e084015261010091508184013581811115614dd257600080fd5b614dde86828701614baa565b8385015250505092915050565b803565ffffffffffff811681146117f157600080fd5b600060208284031215614e12578081fd5b813561193a81615c07565b600060208284031215614e2e578081fd5b815161193a81615c07565b60008060408385031215614e4b578081fd5b8251614e5681615c07565b60208401519092506001600160401b0380821115614e72578283fd5b9084019060c08287031215614e85578283fd5b614e8f60c0615b7a565b82518152602083015182811115614ea4578485fd5b614eb088828601614bf6565b60208301525060408301516040820152606083015182811115614ed1578485fd5b614edd88828601614ad4565b606083015250608083015182811115614ef4578485fd5b614f0088828601614ad4565b60808301525060a083015182811115614f17578485fd5b614f2388828601614a7f565b60a0830152508093505050509250929050565b60008060408385031215614f48578182fd5b8251614f5381615c07565b60208401519092506001600160401b0380821115614f6f578283fd5b9084019060a08287031215614f82578283fd5b614f8c60a0615b7a565b82518152602083015182811115614fa1578485fd5b614fad88828601614bf6565b602083015250604083015182811115614fc4578485fd5b614fd088828601614ad4565b604083015250606083015182811115614fe7578485fd5b614ff388828601614ad4565b60608301525060808301518281111561500a578485fd5b61501688828601614a7f565b6080830152508093505050509250929050565b6000806040838503121561503b578182fd5b825161504681615c07565b6020939093015192949293505050565b600080600080600060a0868803121561506d578081fd5b853561507881615c07565b9450602086013561508881615c07565b935060408601359250606086013561509f81615c07565b915060808601356150af81615c07565b809150509295509295909350565b6000806000806000806000806000806101408b8d0312156150dc578788fd5b6150e58b61499c565b99506150f360208c0161499c565b985060408b0135975061510860608c0161499c565b965061511660808c0161499c565b955061512460a08c0161499c565b945060c08b01356001600160401b038082111561513f578586fd5b61514b8e838f01614a1c565b955060e08d0135915080821115615160578485fd5b5061516d8d828e016149a7565b93505061517d6101008c01614b9f565b915061518c6101208c0161499c565b90509295989b9194979a5092959850565b600080600080600060a086880312156151b4578283fd5b85356151bf81615c07565b945060208601356001600160401b038111156151d9578384fd5b6151e588828901614baa565b9450506040860135925060608601359150608086013560ff811681146150af578182fd5b60008060006060848603121561521d578081fd5b833561522881615c07565b925061523660208501614deb565b915061524460408501614deb565b90509250925092565b60006020828403121561525e578081fd5b81516001600160401b03811115615273578182fd5b61487184828501614ad4565b600060208284031215615290578081fd5b61193a82614b8f565b6000602082840312156152aa578081fd5b5035919050565b6000602082840312156152c2578081fd5b813561193a81615c1c565b600080604083850312156152df578182fd5b82356152ea81615c1c565b915060208301356152fa81615c07565b809150509250929050565b600060208284031215615316578081fd5b81356001600160401b0381111561532b578182fd5b61487184828501614c39565b600060208284031215615348578081fd5b81516001600160401b038082111561535e578283fd5b9083019060408286031215615371578283fd5b60405160408101818110838211171561538657fe5b604052825161539481615c1c565b81526020830151828111156153a7578485fd5b6153b387828601614bf6565b60208301525095945050505050565b6000602082840312156153d3578081fd5b81516001600160401b03808211156153e9578283fd5b90830190604082860312156153fc578283fd5b60405160408101818110838211171561541157fe5b604052825182811115615422578485fd5b61542e87828601614ad4565b825250602083015182811115615442578485fd5b6153b387828601614ad4565b60006020828403121561545f578081fd5b81516001600160401b0380821115615475578283fd5b9083019060608286031215615488578283fd5b60405160608101818110838211171561549d57fe5b6040528251828111156154ae578485fd5b6154ba87828601614ad4565b8252506020830151828111156154ce578485fd5b6154da87828601614ad4565b6020830152506154ec60408401614b8f565b604082015295945050505050565b60006020828403121561550b578081fd5b81356001600160401b03811115615520578182fd5b61487184828501614d02565b60008060008060808587031215615541578182fd5b84356001600160401b0380821115615557578384fd5b61556388838901614d02565b95506020870135915080821115615578578384fd5b61558488838901614baa565b94506040870135915080821115615599578384fd5b6155a588838901614d02565b935060608701359150808211156155ba578283fd5b506155c787828801614baa565b91505092959194509250565b6000602082840312156155e4578081fd5b61193a82614deb565b60008151808452615605816020860160208601615bdb565b601f01601f19169290920160200192915050565b600063ffffffff60e01b825116835260208201516040602085015261487160408501826155ed565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a06080820181905260009082015260c00190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0393909316835265ffffffffffff918216602084015216604082015260600190565b90815260200190565b93845260208401929092526040830152606082015260800190565b60006020825261193a60208301846155ed565b6001600160a01b03958616815293851660208501529190931660408301526060820192909252608081019190915260c060a0820181905260009082015260e00190565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b60208082526017908201527f6e6f7420666f756e64204941737365744d617463686572000000000000000000604082015260600190565b6020808252601d908201527f526f79616c746965732061726520746f6f206869676820283e35302529000000604082015260600190565b6020808252601490820152730c081cd85b1d0818d85b89dd081899481d5cd95960621b604082015260600190565b60208082526024908201527f7472616e736665725061796f7574733a206e6f7468696e6720746f207472616e60408201526339b332b960e11b606082015260800190565b60208082526024908201527f72696768744f726465722e74616b657220766572696669636174696f6e2066616040820152631a5b195960e21b606082015260800190565b60208082526012908201527132b9319b9918903b30b63ab29032b93937b960711b604082015260600190565b6020808252600f908201526e1b9bdd1a1a5b99c81d1bc8199a5b1b608a1b604082015260600190565b602080825260159082015274195c98cc8c081d1c985b9cd9995c8819985a5b1959605a1b604082015260600190565b6020808252601590820152746f726967696e2066656520697320746f6f2062696760581b604082015260600190565b60208082526017908201527f556e6b6e6f776e204f7264657220646174612074797065000000000000000000604082015260600190565b6020808252601e908201527f53756d207061796f75747320427073206e6f7420657175616c20313030250000604082015260600190565b6020808252601290820152710c2e6e6cae8e640c8dedc4ee840dac2e8c6d60731b604082015260600190565b60208082526023908201527f6c6566744f726465722e74616b657220766572696669636174696f6e206661696040820152621b195960ea1b606082015260800190565b6020808252600e908201526d0dcdee840cadcdeeaced040cae8d60931b604082015260600190565b6020808252600b908201526a3737ba10309036b0b5b2b960a91b604082015260600190565b600060408252615ac56040830185615619565b8281036020840152613cda8185615619565b600060608252845160406060840152615af360a0840182615619565b60209687015160808501526001600160a01b03958616968401969096525050911660409091015290565b65ffffffffffff92831681529116602082015260400190565b6000808335601e19843603018112615b4c578283fd5b8301803591506001600160401b03821115615b65578283fd5b6020019150368190038213156127c257600080fd5b6040518181016001600160401b0381118282101715615b9557fe5b604052919050565b60006001600160401b03821115615bb057fe5b5060209081020190565b60006001600160401b03821115615bcd57fe5b50601f01601f191660200190565b60005b83811015615bf6578181015183820152602001615bde565b83811115610a405750506000910152565b6001600160a01b0381168114611cbf57600080fd5b6001600160e01b031981168114611cbf57600080fdfe4d6574615472616e73616374696f6e2875696e74323536206e6f6e63652c616464726573732066726f6d2c62797465732066756e6374696f6e5369676e6174757265294f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737345434453413a20696e76616c6964207369676e6174757265202773272076616c75656f72646572207369676e617475726520766572696669636174696f6e206572726f72636f6e7472616374206f72646572207369676e617475726520766572696669636174696f6e206572726f72496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a656445434453413a20696e76616c6964207369676e6174757265202776272076616c7565536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725369676e657220616e64207369676e617475726520646f206e6f74206d61746368a2646970667358221220853fb7961aafe6e2183b94b8e1ed04009e1c58f763f151673e596f036a33a5d064736f6c63430007060033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "directAcceptBid((address,uint256,bytes4,bytes,uint256,address,uint256,uint256,uint256,bytes4,bytes,bytes,uint256,uint256,bytes))": {
        "details": "function, generate sellOrder and buyOrder from parameters and call validateAndMatch() for accept bid transaction",
        "params": {
          "direct": "struct with parameters for accept bid operation"
        }
      },
      "directPurchase((address,uint256,bytes4,bytes,uint256,address,uint256,uint256,uint256,bytes4,bytes,bytes,uint256,uint256,bytes))": {
        "details": "function, generate sellOrder and buyOrder from parameters and call validateAndMatch() for purchase transaction"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 739,
        "contract": "@rarible/exchange-v2/contracts/ExchangeMetaV2.sol:ExchangeMetaV2",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 742,
        "contract": "@rarible/exchange-v2/contracts/ExchangeMetaV2.sol:ExchangeMetaV2",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4256,
        "contract": "@rarible/exchange-v2/contracts/ExchangeMetaV2.sol:ExchangeMetaV2",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "@rarible/exchange-v2/contracts/ExchangeMetaV2.sol:ExchangeMetaV2",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 129,
        "contract": "@rarible/exchange-v2/contracts/ExchangeMetaV2.sol:ExchangeMetaV2",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11953,
        "contract": "@rarible/exchange-v2/contracts/ExchangeMetaV2.sol:ExchangeMetaV2",
        "label": "matchers",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes4,t_address)"
      },
      {
        "astId": 12218,
        "contract": "@rarible/exchange-v2/contracts/ExchangeMetaV2.sol:ExchangeMetaV2",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 31747,
        "contract": "@rarible/exchange-v2/contracts/ExchangeMetaV2.sol:ExchangeMetaV2",
        "label": "proxies",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes4,t_address)"
      },
      {
        "astId": 32063,
        "contract": "@rarible/exchange-v2/contracts/ExchangeMetaV2.sol:ExchangeMetaV2",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 138,
        "contract": "@rarible/exchange-v2/contracts/ExchangeMetaV2.sol:ExchangeMetaV2",
        "label": "_HASHED_NAME",
        "offset": 0,
        "slot": "201",
        "type": "t_bytes32"
      },
      {
        "astId": 140,
        "contract": "@rarible/exchange-v2/contracts/ExchangeMetaV2.sol:ExchangeMetaV2",
        "label": "_HASHED_VERSION",
        "offset": 0,
        "slot": "202",
        "type": "t_bytes32"
      },
      {
        "astId": 289,
        "contract": "@rarible/exchange-v2/contracts/ExchangeMetaV2.sol:ExchangeMetaV2",
        "label": "__gap",
        "offset": 0,
        "slot": "203",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 13603,
        "contract": "@rarible/exchange-v2/contracts/ExchangeMetaV2.sol:ExchangeMetaV2",
        "label": "__gap",
        "offset": 0,
        "slot": "253",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 12535,
        "contract": "@rarible/exchange-v2/contracts/ExchangeMetaV2.sol:ExchangeMetaV2",
        "label": "fills",
        "offset": 0,
        "slot": "303",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 13467,
        "contract": "@rarible/exchange-v2/contracts/ExchangeMetaV2.sol:ExchangeMetaV2",
        "label": "__gap",
        "offset": 0,
        "slot": "304",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 30674,
        "contract": "@rarible/exchange-v2/contracts/ExchangeMetaV2.sol:ExchangeMetaV2",
        "label": "protocolFee",
        "offset": 0,
        "slot": "353",
        "type": "t_struct(ProtocolFeeData)30710_storage"
      },
      {
        "astId": 30676,
        "contract": "@rarible/exchange-v2/contracts/ExchangeMetaV2.sol:ExchangeMetaV2",
        "label": "royaltiesRegistry",
        "offset": 0,
        "slot": "354",
        "type": "t_contract(IRoyaltiesProvider)11922"
      },
      {
        "astId": 30678,
        "contract": "@rarible/exchange-v2/contracts/ExchangeMetaV2.sol:ExchangeMetaV2",
        "label": "defaultFeeReceiver",
        "offset": 0,
        "slot": "355",
        "type": "t_address"
      },
      {
        "astId": 30682,
        "contract": "@rarible/exchange-v2/contracts/ExchangeMetaV2.sol:ExchangeMetaV2",
        "label": "feeReceivers",
        "offset": 0,
        "slot": "356",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 31723,
        "contract": "@rarible/exchange-v2/contracts/ExchangeMetaV2.sol:ExchangeMetaV2",
        "label": "__gap",
        "offset": 0,
        "slot": "357",
        "type": "t_array(t_uint256)46_storage"
      },
      {
        "astId": 19515,
        "contract": "@rarible/exchange-v2/contracts/ExchangeMetaV2.sol:ExchangeMetaV2",
        "label": "nonces",
        "offset": 0,
        "slot": "403",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 19517,
        "contract": "@rarible/exchange-v2/contracts/ExchangeMetaV2.sol:ExchangeMetaV2",
        "label": "domainSeparator",
        "offset": 0,
        "slot": "404",
        "type": "t_bytes32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)46_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[46]",
        "numberOfBytes": "1472"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_contract(IRoyaltiesProvider)11922": {
        "encoding": "inplace",
        "label": "contract IRoyaltiesProvider",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes4,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(ProtocolFeeData)30710_storage": {
        "encoding": "inplace",
        "label": "struct RaribleTransferManager.ProtocolFeeData",
        "members": [
          {
            "astId": 30705,
            "contract": "@rarible/exchange-v2/contracts/ExchangeMetaV2.sol:ExchangeMetaV2",
            "label": "receiver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 30707,
            "contract": "@rarible/exchange-v2/contracts/ExchangeMetaV2.sol:ExchangeMetaV2",
            "label": "buyerAmount",
            "offset": 20,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 30709,
            "contract": "@rarible/exchange-v2/contracts/ExchangeMetaV2.sol:ExchangeMetaV2",
            "label": "sellerAmount",
            "offset": 26,
            "slot": "0",
            "type": "t_uint48"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      }
    }
  }
}