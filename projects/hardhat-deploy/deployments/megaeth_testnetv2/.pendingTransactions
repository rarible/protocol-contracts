{
  "0x4aa71ef0f74da0aff1ee634c688063ad3f3f1f375ce1821067f06d7795494135": {
    "name": "ExchangeMetaV2_Implementation",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "ExchangeMetaV2",
      "sourceName": "@rarible/exchange-v2/contracts/ExchangeMetaV2.sol",
      "abi": [
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "oldValue",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "newValue",
              "type": "uint256"
            }
          ],
          "name": "BuyerFeeAmountChanged",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "bytes32",
              "name": "hash",
              "type": "bytes32"
            }
          ],
          "name": "Cancel",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "oldValue",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "newValue",
              "type": "address"
            }
          ],
          "name": "FeeReceiverChanged",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "bytes32",
              "name": "leftHash",
              "type": "bytes32"
            },
            {
              "indexed": false,
              "internalType": "bytes32",
              "name": "rightHash",
              "type": "bytes32"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "newLeftFill",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "newRightFill",
              "type": "uint256"
            }
          ],
          "name": "Match",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "bytes4",
              "name": "assetType",
              "type": "bytes4"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "matcher",
              "type": "address"
            }
          ],
          "name": "MatcherChange",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "userAddress",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "address payable",
              "name": "relayerAddress",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "bytes",
              "name": "functionSignature",
              "type": "bytes"
            }
          ],
          "name": "MetaTransactionExecuted",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "previousOwner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "OwnershipTransferred",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "bytes4",
              "name": "assetType",
              "type": "bytes4"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "proxy",
              "type": "address"
            }
          ],
          "name": "ProxyChange",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "oldValue",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "newValue",
              "type": "uint256"
            }
          ],
          "name": "SellerFeeAmountChanged",
          "type": "event"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_transferProxy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_erc20TransferProxy",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "newProtocolFee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "newDefaultFeeReceiver",
              "type": "address"
            },
            {
              "internalType": "contract IRoyaltiesProvider",
              "name": "newRoyaltiesProvider",
              "type": "address"
            }
          ],
          "name": "__ExchangeV2_init",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "maker",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "bytes4",
                          "name": "assetClass",
                          "type": "bytes4"
                        },
                        {
                          "internalType": "bytes",
                          "name": "data",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct LibAsset.AssetType",
                      "name": "assetType",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct LibAsset.Asset",
                  "name": "makeAsset",
                  "type": "tuple"
                },
                {
                  "internalType": "address",
                  "name": "taker",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "bytes4",
                          "name": "assetClass",
                          "type": "bytes4"
                        },
                        {
                          "internalType": "bytes",
                          "name": "data",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct LibAsset.AssetType",
                      "name": "assetType",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct LibAsset.Asset",
                  "name": "takeAsset",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "salt",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "start",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "end",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes4",
                  "name": "dataType",
                  "type": "bytes4"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "internalType": "struct LibOrder.Order",
              "name": "order",
              "type": "tuple"
            }
          ],
          "name": "cancel",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "bidMaker",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "bidNftAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes4",
                  "name": "nftAssetClass",
                  "type": "bytes4"
                },
                {
                  "internalType": "bytes",
                  "name": "nftData",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "bidPaymentAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "paymentToken",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "bidSalt",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "bidStart",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "bidEnd",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes4",
                  "name": "bidDataType",
                  "type": "bytes4"
                },
                {
                  "internalType": "bytes",
                  "name": "bidData",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "bidSignature",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "sellOrderPaymentAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "sellOrderNftAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "sellOrderData",
                  "type": "bytes"
                }
              ],
              "internalType": "struct LibDirectTransfer.AcceptBid",
              "name": "direct",
              "type": "tuple"
            }
          ],
          "name": "directAcceptBid",
          "outputs": [],
          "stateMutability": "payable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "sellOrderMaker",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "sellOrderNftAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes4",
                  "name": "nftAssetClass",
                  "type": "bytes4"
                },
                {
                  "internalType": "bytes",
                  "name": "nftData",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "sellOrderPaymentAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "paymentToken",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "sellOrderSalt",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "sellOrderStart",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "sellOrderEnd",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes4",
                  "name": "sellOrderDataType",
                  "type": "bytes4"
                },
                {
                  "internalType": "bytes",
                  "name": "sellOrderData",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "sellOrderSignature",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "buyOrderPaymentAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "buyOrderNftAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "buyOrderData",
                  "type": "bytes"
                }
              ],
              "internalType": "struct LibDirectTransfer.Purchase",
              "name": "direct",
              "type": "tuple"
            }
          ],
          "name": "directPurchase",
          "outputs": [],
          "stateMutability": "payable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "userAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "functionSignature",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "sigR",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "sigS",
              "type": "bytes32"
            },
            {
              "internalType": "uint8",
              "name": "sigV",
              "type": "uint8"
            }
          ],
          "name": "executeMetaTransaction",
          "outputs": [
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes"
            }
          ],
          "stateMutability": "payable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "name": "fills",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            }
          ],
          "name": "getNonce",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "maker",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "bytes4",
                          "name": "assetClass",
                          "type": "bytes4"
                        },
                        {
                          "internalType": "bytes",
                          "name": "data",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct LibAsset.AssetType",
                      "name": "assetType",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct LibAsset.Asset",
                  "name": "makeAsset",
                  "type": "tuple"
                },
                {
                  "internalType": "address",
                  "name": "taker",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "bytes4",
                          "name": "assetClass",
                          "type": "bytes4"
                        },
                        {
                          "internalType": "bytes",
                          "name": "data",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct LibAsset.AssetType",
                      "name": "assetType",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct LibAsset.Asset",
                  "name": "takeAsset",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "salt",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "start",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "end",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes4",
                  "name": "dataType",
                  "type": "bytes4"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "internalType": "struct LibOrder.Order",
              "name": "orderLeft",
              "type": "tuple"
            },
            {
              "internalType": "bytes",
              "name": "signatureLeft",
              "type": "bytes"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "maker",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "bytes4",
                          "name": "assetClass",
                          "type": "bytes4"
                        },
                        {
                          "internalType": "bytes",
                          "name": "data",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct LibAsset.AssetType",
                      "name": "assetType",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct LibAsset.Asset",
                  "name": "makeAsset",
                  "type": "tuple"
                },
                {
                  "internalType": "address",
                  "name": "taker",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "bytes4",
                          "name": "assetClass",
                          "type": "bytes4"
                        },
                        {
                          "internalType": "bytes",
                          "name": "data",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct LibAsset.AssetType",
                      "name": "assetType",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct LibAsset.Asset",
                  "name": "takeAsset",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "salt",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "start",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "end",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes4",
                  "name": "dataType",
                  "type": "bytes4"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "internalType": "struct LibOrder.Order",
              "name": "orderRight",
              "type": "tuple"
            },
            {
              "internalType": "bytes",
              "name": "signatureRight",
              "type": "bytes"
            }
          ],
          "name": "matchOrders",
          "outputs": [],
          "stateMutability": "payable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "protocolFee",
          "outputs": [
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint48",
              "name": "buyerAmount",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "sellerAmount",
              "type": "uint48"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "renounceOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "royaltiesRegistry",
          "outputs": [
            {
              "internalType": "contract IRoyaltiesProvider",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_receiver",
              "type": "address"
            },
            {
              "internalType": "uint48",
              "name": "_buyerAmount",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "_sellerAmount",
              "type": "uint48"
            }
          ],
          "name": "setAllProtocolFeeData",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "assetType",
              "type": "bytes4"
            },
            {
              "internalType": "address",
              "name": "matcher",
              "type": "address"
            }
          ],
          "name": "setAssetMatcher",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint48",
              "name": "_buyerAmount",
              "type": "uint48"
            }
          ],
          "name": "setPrtocolFeeBuyerAmount",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_receiver",
              "type": "address"
            }
          ],
          "name": "setPrtocolFeeReceiver",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint48",
              "name": "_sellerAmount",
              "type": "uint48"
            }
          ],
          "name": "setPrtocolFeeSellerAmount",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "contract IRoyaltiesProvider",
              "name": "newRoyaltiesRegistry",
              "type": "address"
            }
          ],
          "name": "setRoyaltiesRegistry",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "assetType",
              "type": "bytes4"
            },
            {
              "internalType": "address",
              "name": "proxy",
              "type": "address"
            }
          ],
          "name": "setTransferProxy",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "transferOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        }
      ],
      "bytecode": "",
      "deployedBytecode": "",
      "linkReferences": {},
      "deployedLinkReferences": {},
      "devdoc": {
        "kind": "dev",
        "methods": {
          "directAcceptBid((address,uint256,bytes4,bytes,uint256,address,uint256,uint256,uint256,bytes4,bytes,bytes,uint256,uint256,bytes))": {
            "details": "function, generate sellOrder and buyOrder from parameters and call validateAndMatch() for accept bid transaction",
            "params": {
              "direct": "struct with parameters for accept bid operation"
            }
          },
          "directPurchase((address,uint256,bytes4,bytes,uint256,address,uint256,uint256,uint256,bytes4,bytes,bytes,uint256,uint256,bytes))": {
            "details": "function, generate sellOrder and buyOrder from parameters and call validateAndMatch() for purchase transaction"
          },
          "owner()": {
            "details": "Returns the address of the current owner."
          },
          "renounceOwnership()": {
            "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
          },
          "transferOwnership(address)": {
            "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
          }
        },
        "version": 1
      },
      "evm": {
        "bytecode": {
          "generatedSources": [],
          "linkReferences": {},
          "object": "",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5B6C DUP1 PUSH3 0x21 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x11F JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0xA0 JUMPI DUP1 PUSH4 0xD6CA6AB7 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xD6CA6AB7 EQ PUSH2 0x2F2 JUMPI DUP1 PUSH4 0xE2864FE3 EQ PUSH2 0x312 JUMPI DUP1 PUSH4 0xE99A3F80 EQ PUSH2 0x332 JUMPI DUP1 PUSH4 0xEAE3AD6F EQ PUSH2 0x345 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x365 JUMPI PUSH2 0x11F JUMP JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x259 JUMPI DUP1 PUSH4 0xB0E21E8A EQ PUSH2 0x26E JUMPI DUP1 PUSH4 0xB39DEB46 EQ PUSH2 0x292 JUMPI DUP1 PUSH4 0xB74C8E9A EQ PUSH2 0x2B2 JUMPI DUP1 PUSH4 0xBC158C2D EQ PUSH2 0x2D2 JUMPI PUSH2 0x11F JUMP JUMPDEST DUP1 PUSH4 0x30C642F1 GT PUSH2 0xE7 JUMPI DUP1 PUSH4 0x30C642F1 EQ PUSH2 0x1CF JUMPI DUP1 PUSH4 0x3BE89922 EQ PUSH2 0x1EF JUMPI DUP1 PUSH4 0x67D49A3B EQ PUSH2 0x20F JUMPI DUP1 PUSH4 0x6D8F0694 EQ PUSH2 0x222 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x244 JUMPI PUSH2 0x11F JUMP JUMPDEST DUP1 PUSH4 0xC53C51C EQ PUSH2 0x124 JUMPI DUP1 PUSH4 0xD5F7D35 EQ PUSH2 0x14D JUMPI DUP1 PUSH4 0x1372A625 EQ PUSH2 0x162 JUMPI DUP1 PUSH4 0x20158C44 EQ PUSH2 0x182 JUMPI DUP1 PUSH4 0x2D0335AB EQ PUSH2 0x1AF JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x137 PUSH2 0x132 CALLDATASIZE PUSH1 0x4 PUSH2 0x4F91 JUMP JUMPDEST PUSH2 0x385 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x144 SWAP2 SWAP1 PUSH2 0x54AB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x160 PUSH2 0x15B CALLDATASIZE PUSH1 0x4 PUSH2 0x50F9 JUMP JUMPDEST PUSH2 0x6FE JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x16E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x160 PUSH2 0x17D CALLDATASIZE PUSH1 0x4 PUSH2 0x4F2A JUMP JUMPDEST PUSH2 0xA1B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x18E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A2 PUSH2 0x19D CALLDATASIZE PUSH1 0x4 PUSH2 0x508D JUMP JUMPDEST PUSH2 0xB38 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x144 SWAP2 SWAP1 PUSH2 0x5487 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A2 PUSH2 0x1CA CALLDATASIZE PUSH1 0x4 PUSH2 0x4CD5 JUMP JUMPDEST PUSH2 0xB4B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x160 PUSH2 0x1EA CALLDATASIZE PUSH1 0x4 PUSH2 0x50C1 JUMP JUMPDEST PUSH2 0xB67 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x160 PUSH2 0x20A CALLDATASIZE PUSH1 0x4 PUSH2 0x4CD5 JUMP JUMPDEST PUSH2 0xC37 JUMP JUMPDEST PUSH2 0x160 PUSH2 0x21D CALLDATASIZE PUSH1 0x4 PUSH2 0x50F9 JUMP JUMPDEST PUSH2 0xCBC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x237 PUSH2 0xF9C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x144 SWAP2 SWAP1 PUSH2 0x53BB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x250 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x160 PUSH2 0xFAC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x265 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x237 PUSH2 0x1058 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x27A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x283 PUSH2 0x1068 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x144 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x545E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x29E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x160 PUSH2 0x2AD CALLDATASIZE PUSH1 0x4 PUSH2 0x50C1 JUMP JUMPDEST PUSH2 0x1093 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x160 PUSH2 0x2CD CALLDATASIZE PUSH1 0x4 PUSH2 0x4FFD JUMP JUMPDEST PUSH2 0x1157 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x160 PUSH2 0x2ED CALLDATASIZE PUSH1 0x4 PUSH2 0x4CD5 JUMP JUMPDEST PUSH2 0x11D9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x160 PUSH2 0x30D CALLDATASIZE PUSH1 0x4 PUSH2 0x534D JUMP JUMPDEST PUSH2 0x12A6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x31E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x160 PUSH2 0x32D CALLDATASIZE PUSH1 0x4 PUSH2 0x5274 JUMP JUMPDEST PUSH2 0x1380 JUMP JUMPDEST PUSH2 0x160 PUSH2 0x340 CALLDATASIZE PUSH1 0x4 PUSH2 0x52A6 JUMP JUMPDEST PUSH2 0x1441 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x351 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x160 PUSH2 0x360 CALLDATASIZE PUSH1 0x4 PUSH2 0x534D JUMP JUMPDEST PUSH2 0x1457 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x371 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x160 PUSH2 0x380 CALLDATASIZE PUSH1 0x4 PUSH2 0x4CD5 JUMP JUMPDEST PUSH2 0x152E JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x392 DUP7 PUSH2 0x1631 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 DUP2 AND SWAP1 DUP3 AND EQ ISZERO PUSH2 0x3F9 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x57726F6E672066756E6374696F6E5369676E6174757265000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH2 0x193 PUSH1 0x20 SWAP1 DUP2 MSTORE SWAP1 DUP5 SWAP1 KECCAK256 SLOAD DUP4 MSTORE DUP3 ADD MSTORE SWAP1 DUP2 ADD DUP8 SWAP1 MSTORE PUSH2 0x437 DUP9 DUP3 DUP9 DUP9 DUP9 PUSH2 0x1651 JUMP JUMPDEST PUSH2 0x472 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x5B16 PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x193 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x497 SWAP1 PUSH1 0x1 PUSH2 0x173B JUMP JUMPDEST PUSH2 0x193 PUSH1 0x0 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x0 DUP1 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 DUP12 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x502 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x4E3 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x60 SHL DUP2 MSTORE PUSH1 0x14 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x578 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x559 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x5DA JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5DF JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x636 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E2063616C6C206E6F74207375636365737366756C00000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH32 0x5845892132946850460BFF5A0083F71031BC5BF9AADCD40F1DE79423EAC9B10B DUP11 CALLER DUP12 PUSH1 0x40 MLOAD DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x6B5 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x69D JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x6E2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP5 POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x718 PUSH2 0x713 PUSH1 0xC0 DUP5 ADD PUSH1 0xA0 DUP6 ADD PUSH2 0x4CD5 JUMP JUMPDEST PUSH2 0x179E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x120 DUP2 ADD SWAP1 SWAP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 DUP1 PUSH2 0x738 PUSH1 0x20 DUP7 ADD DUP7 PUSH2 0x4CD5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH1 0x40 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x76F SWAP2 SWAP1 PUSH2 0x50A5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x78B PUSH1 0x60 DUP11 ADD DUP11 PUSH2 0x58B0 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD DUP3 SWAP1 MSTORE POP SWAP4 SWAP1 SWAP5 MSTORE POP POP SWAP2 DUP4 MSTORE POP PUSH1 0x20 DUP9 DUP2 ADD CALLDATALOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP2 DUP4 MSTORE DUP3 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE DUP7 DUP2 MSTORE PUSH1 0x80 DUP1 DUP10 ADD CALLDATALOAD SWAP4 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP1 DUP4 ADD MSTORE PUSH1 0xC0 DUP1 DUP8 ADD CALLDATALOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0xE0 DUP8 ADD CALLDATALOAD SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x100 DUP7 ADD CALLDATALOAD PUSH1 0xA0 DUP4 ADD MSTORE ADD PUSH2 0x82E PUSH2 0x140 DUP7 ADD PUSH2 0x120 DUP8 ADD PUSH2 0x50A5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x84B PUSH2 0x140 DUP7 ADD DUP7 PUSH2 0x58B0 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD DUP3 SWAP1 MSTORE POP SWAP4 SWAP1 SWAP5 MSTORE POP POP PUSH1 0x40 DUP1 MLOAD PUSH2 0x120 DUP2 ADD DUP3 MSTORE DUP3 DUP2 MSTORE DUP2 MLOAD DUP1 DUP4 ADD DUP4 MSTORE DUP8 DUP2 MSTORE PUSH2 0x180 DUP10 ADD CALLDATALOAD PUSH1 0x20 DUP3 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 ADD MSTORE DUP1 DUP3 ADD DUP4 SWAP1 MSTORE DUP2 MLOAD PUSH1 0x80 DUP2 ADD DUP4 MSTORE SWAP5 SWAP6 POP SWAP2 SWAP4 SWAP2 SWAP3 POP PUSH1 0x60 DUP1 DUP5 ADD SWAP3 SWAP2 DUP3 SWAP2 DUP3 DUP3 ADD SWAP2 DUP3 SWAP2 PUSH2 0x8DF SWAP2 SWAP1 DUP13 ADD SWAP1 DUP13 ADD PUSH2 0x50A5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x8FB PUSH1 0x60 DUP12 ADD DUP12 PUSH2 0x58B0 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD DUP3 SWAP1 MSTORE POP SWAP4 SWAP1 SWAP5 MSTORE POP POP SWAP2 DUP4 MSTORE POP PUSH2 0x1A0 DUP10 ADD CALLDATALOAD PUSH1 0x20 SWAP3 DUP4 ADD MSTORE SWAP2 DUP4 MSTORE DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD PUSH2 0x96A PUSH2 0x140 DUP8 ADD PUSH2 0x120 DUP9 ADD PUSH2 0x50A5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x987 PUSH2 0x1C0 DUP8 ADD DUP8 PUSH2 0x58B0 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP POP POP SWAP2 MSTORE POP SWAP1 POP PUSH2 0xA0B DUP3 PUSH2 0x9D1 PUSH2 0x160 DUP8 ADD DUP8 PUSH2 0x58B0 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x1801 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xA15 DUP3 DUP3 PUSH2 0x1818 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0xA34 JUMPI POP PUSH2 0xA34 PUSH2 0x1A82 JUMP JUMPDEST DUP1 PUSH2 0xA42 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0xA7D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x5A85 PUSH1 0x2E SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0xAA8 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT PUSH2 0xFF00 NOT SWAP1 SWAP2 AND PUSH2 0x100 OR AND PUSH1 0x1 OR SWAP1 SSTORE JUMPDEST PUSH2 0xAB0 PUSH2 0x1A93 JUMP JUMPDEST PUSH2 0xAB8 PUSH2 0x1B35 JUMP JUMPDEST PUSH2 0xAC0 PUSH2 0x1C2E JUMP JUMPDEST PUSH2 0xB09 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xE DUP2 MSTORE PUSH1 0x20 ADD PUSH14 0x22BC31B430B733B2A6B2BA30AB19 PUSH1 0x91 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x31 PUSH1 0xF8 SHL DUP2 MSTORE POP PUSH2 0x1CFE JUMP JUMPDEST PUSH2 0xB13 DUP7 DUP7 PUSH2 0x1D8E JUMP JUMPDEST PUSH2 0xB1E DUP5 DUP5 DUP5 PUSH2 0x1E38 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xB30 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x12F PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x193 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xB6F PUSH2 0x1EF8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xB80 PUSH2 0x1058 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xBC9 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5AF6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x97 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND OR SWAP1 SSTORE MLOAD PUSH32 0x4B5ACED933C0C9A88AEAC3F0B3B72C5AAF75DF8EBAF53225773248C4C3153593 SWAP1 PUSH2 0xC2B SWAP1 DUP5 SWAP1 PUSH2 0x53BB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH2 0xC3F PUSH2 0x1EF8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xC50 PUSH2 0x1058 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xC99 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5AF6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x162 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCD1 PUSH2 0x713 PUSH1 0xC0 DUP5 ADD PUSH1 0xA0 DUP6 ADD PUSH2 0x4CD5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x120 DUP2 ADD SWAP1 SWAP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 DUP1 PUSH2 0xCF1 PUSH1 0x20 DUP7 ADD DUP7 PUSH2 0x4CD5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x80 ADD CALLDATALOAD DUP2 MSTORE POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH1 0x40 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xD56 SWAP2 SWAP1 PUSH2 0x50A5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xD72 PUSH1 0x60 DUP11 ADD DUP11 PUSH2 0x58B0 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP POP POP SWAP2 MSTORE POP DUP2 MSTORE PUSH1 0x20 DUP8 DUP2 ADD CALLDATALOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE PUSH1 0xC0 DUP7 ADD CALLDATALOAD SWAP1 DUP3 ADD MSTORE PUSH1 0xE0 DUP6 ADD CALLDATALOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x100 DUP6 ADD CALLDATALOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD PUSH2 0xDED PUSH2 0x140 DUP7 ADD PUSH2 0x120 DUP8 ADD PUSH2 0x50A5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE0A PUSH2 0x140 DUP7 ADD DUP7 PUSH2 0x58B0 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD DUP3 SWAP1 MSTORE POP SWAP4 SWAP1 SWAP5 MSTORE POP POP PUSH1 0x40 DUP1 MLOAD PUSH2 0x120 DUP2 ADD DUP3 MSTORE DUP3 DUP2 MSTORE DUP2 MLOAD PUSH1 0x80 DUP2 ADD DUP4 MSTORE SWAP5 SWAP6 POP SWAP2 SWAP4 SWAP2 SWAP3 POP PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 DUP2 SWAP1 DUP2 DUP2 ADD SWAP1 DUP2 SWAP1 PUSH2 0xE7C SWAP1 PUSH1 0x60 DUP13 ADD SWAP1 DUP13 ADD PUSH2 0x50A5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE98 PUSH1 0x60 DUP12 ADD DUP12 PUSH2 0x58B0 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD DUP3 SWAP1 MSTORE POP SWAP4 SWAP1 SWAP5 MSTORE POP POP SWAP2 DUP4 MSTORE POP PUSH2 0x1A0 DUP10 ADD CALLDATALOAD PUSH1 0x20 SWAP3 DUP4 ADD MSTORE SWAP2 DUP4 MSTORE DUP3 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE DUP9 DUP2 MSTORE PUSH2 0x180 DUP11 ADD CALLDATALOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD PUSH2 0xF2B PUSH2 0x140 DUP8 ADD PUSH2 0x120 DUP9 ADD PUSH2 0x50A5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xF48 PUSH2 0x1C0 DUP8 ADD DUP8 PUSH2 0x58B0 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP POP POP SWAP2 MSTORE POP SWAP1 POP PUSH2 0xF92 DUP3 PUSH2 0x9D1 PUSH2 0x160 DUP8 ADD DUP8 PUSH2 0x58B0 JUMP JUMPDEST PUSH2 0xA15 DUP2 DUP4 PUSH2 0x1818 JUMP JUMPDEST PUSH2 0x162 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0xFB4 PUSH2 0x1EF8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xFC5 PUSH2 0x1058 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x100E JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5AF6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x40 MLOAD PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP4 SWAP1 LOG3 PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x161 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 PUSH6 0xFFFFFFFFFFFF PUSH1 0x1 PUSH1 0xA0 SHL DUP3 DIV DUP2 AND SWAP2 PUSH1 0x1 PUSH1 0xD0 SHL SWAP1 DIV AND DUP4 JUMP JUMPDEST PUSH2 0x109B PUSH2 0x1EF8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x10AC PUSH2 0x1058 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x10F5 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5AF6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND OR SWAP1 SSTORE MLOAD PUSH32 0xD2BF91075F105D0FD80328DA28E20EBDAD1C1261839711183BC29A44CBE6C72F SWAP1 PUSH2 0xC2B SWAP1 DUP5 SWAP1 PUSH2 0x53BB JUMP JUMPDEST PUSH2 0x115F PUSH2 0x1EF8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1170 PUSH2 0x1058 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x11B9 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5AF6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x11C2 DUP4 PUSH2 0x11D9 JUMP JUMPDEST PUSH2 0x11CB DUP3 PUSH2 0x12A6 JUMP JUMPDEST PUSH2 0x11D4 DUP2 PUSH2 0x1457 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x11E1 PUSH2 0x1EF8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x11F2 PUSH2 0x1058 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x123B JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5AF6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x161 SLOAD PUSH1 0x40 MLOAD PUSH32 0xA4B009CC442411B602EAF94BC0579B6ABDB8FD90B4EF5B9426E270038906BD03 SWAP2 PUSH2 0x127B SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 DUP5 SWAP1 PUSH2 0x53CF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0x161 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x12AE PUSH2 0x1EF8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x12BF PUSH2 0x1058 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1308 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5AF6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x161 SLOAD PUSH1 0x40 MLOAD PUSH32 0x70BBA4F904A93BA5C1AF3A1BB602BC9C058551DBE963DFE0B6CB5BC11C5FEA9E SWAP2 PUSH2 0x134D SWAP2 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP2 DIV PUSH6 0xFFFFFFFFFFFF AND SWAP1 DUP5 SWAP1 PUSH2 0x5897 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0x161 DUP1 SLOAD PUSH6 0xFFFFFFFFFFFF SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0xA0 SHL MUL PUSH6 0xFFFFFFFFFFFF PUSH1 0xA0 SHL NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1393 PUSH2 0x1EF8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x13C2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13B9 SWAP1 PUSH2 0x5807 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x80 DUP2 ADD MLOAD PUSH2 0x13E3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13B9 SWAP1 PUSH2 0x5599 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x13EE DUP3 PUSH2 0x1F07 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH2 0x12F PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x0 NOT SWAP1 SSTORE MLOAD SWAP1 SWAP2 POP PUSH32 0xE8D9861DBC9C663ED3ACCD261BBE2FE01E0D3D9E5F51FA38523B265C7757A93A SWAP1 PUSH2 0x1435 SWAP1 DUP4 SWAP1 PUSH2 0x5487 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH2 0x144D DUP5 DUP5 DUP5 DUP5 PUSH2 0x208F JUMP JUMPDEST PUSH2 0xA15 DUP5 DUP4 PUSH2 0x1818 JUMP JUMPDEST PUSH2 0x145F PUSH2 0x1EF8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1470 PUSH2 0x1058 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x14B9 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5AF6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x161 SLOAD PUSH1 0x40 MLOAD PUSH32 0xA8AF9093CAA9BEB61D20432227C66258CEEF926F21879B80F3ADF22A4D19F131 SWAP2 PUSH2 0x14FE SWAP2 PUSH1 0x1 PUSH1 0xD0 SHL SWAP1 SWAP2 DIV PUSH6 0xFFFFFFFFFFFF AND SWAP1 DUP5 SWAP1 PUSH2 0x5897 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0x161 DUP1 SLOAD PUSH6 0xFFFFFFFFFFFF SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0xD0 SHL MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x1536 PUSH2 0x1EF8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1547 PUSH2 0x1058 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1590 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5AF6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x15D5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x59F0 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND SWAP3 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1645 JUMPI POP PUSH1 0x0 PUSH2 0x164C JUMP JUMPDEST POP PUSH1 0x20 DUP2 ADD MLOAD JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH2 0x1667 PUSH2 0x1662 DUP9 PUSH2 0x215B JUMP JUMPDEST PUSH2 0x21DE JUMP JUMPDEST DUP5 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x16BE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x171A JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x496E76616C6964207369676E6174757265 PUSH1 0x78 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ SWAP2 POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x1795 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x17A6 PUSH2 0x482E JUMP JUMPDEST PUSH2 0x17AE PUSH2 0x482E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x17CB JUMPI PUSH4 0x55575F5D PUSH1 0xE1 SHL DUP2 MSTORE PUSH2 0x1798 JUMP JUMPDEST PUSH4 0x22BA1761 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x40 MLOAD PUSH2 0x17E6 SWAP1 DUP5 SWAP1 PUSH1 0x20 ADD PUSH2 0x53BB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x180A DUP3 PUSH2 0x222A JUMP JUMPDEST PUSH2 0x1814 DUP3 DUP3 PUSH2 0x22F4 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1825 DUP5 DUP5 PUSH2 0x25A3 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1838 DUP8 DUP8 PUSH2 0x263C JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH1 0x0 DUP1 PUSH2 0x19A9 PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP12 DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x0 ADD MLOAD DUP2 MSTORE POP DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x20 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x97 PUSH1 0x0 DUP12 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP12 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x60 ADD MLOAD ISZERO ISZERO DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP12 DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x20 ADD MLOAD DUP2 MSTORE POP DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x20 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x97 PUSH1 0x0 DUP12 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP12 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x60 ADD MLOAD ISZERO ISZERO DUP2 MSTORE POP PUSH2 0x19A4 DUP11 PUSH1 0x0 ADD MLOAD DUP11 PUSH1 0x0 ADD MLOAD PUSH2 0x26EB JUMP JUMPDEST PUSH2 0x27BC JUMP JUMPDEST DUP9 MLOAD SWAP2 SWAP4 POP SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0x55575F5D PUSH1 0xE1 SHL EQ ISZERO PUSH2 0x1A28 JUMPI DUP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0x55575F5D PUSH1 0xE1 SHL EQ ISZERO PUSH2 0x19E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLVALUE LT ISZERO PUSH2 0x1A07 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13B9 SWAP1 PUSH2 0x57DF JUMP JUMPDEST DUP2 CALLVALUE GT ISZERO PUSH2 0x1A23 JUMPI PUSH2 0x1A23 PUSH2 0x1A1C CALLVALUE DUP5 PUSH2 0x2933 JUMP JUMPDEST CALLER SWAP1 PUSH2 0x2990 JUMP JUMPDEST PUSH2 0x1A77 JUMP JUMPDEST DUP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0x55575F5D PUSH1 0xE1 SHL EQ ISZERO PUSH2 0x1A77 JUMPI DUP1 CALLVALUE LT ISZERO PUSH2 0x1A62 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13B9 SWAP1 PUSH2 0x57DF JUMP JUMPDEST DUP1 CALLVALUE GT ISZERO PUSH2 0x1A77 JUMPI PUSH2 0x1A77 PUSH2 0x1A1C CALLVALUE DUP4 PUSH2 0x2933 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A8D ADDRESS PUSH2 0x2A28 JUMP JUMPDEST ISZERO SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0x1AAC JUMPI POP PUSH2 0x1AAC PUSH2 0x1A82 JUMP JUMPDEST DUP1 PUSH2 0x1ABA JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0x1AF5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x5A85 PUSH1 0x2E SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0x1B20 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT PUSH2 0xFF00 NOT SWAP1 SWAP2 AND PUSH2 0x100 OR AND PUSH1 0x1 OR SWAP1 SSTORE JUMPDEST DUP1 ISZERO PUSH2 0x1B32 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0x1B4E JUMPI POP PUSH2 0x1B4E PUSH2 0x1A82 JUMP JUMPDEST DUP1 PUSH2 0x1B5C JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0x1B97 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x5A85 PUSH1 0x2E SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0x1BC2 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT PUSH2 0xFF00 NOT SWAP1 SWAP2 AND PUSH2 0x100 OR AND PUSH1 0x1 OR SWAP1 SSTORE JUMPDEST PUSH1 0x0 PUSH2 0x1BCC PUSH2 0x1EF8 JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP3 POP SWAP1 PUSH1 0x0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 POP DUP1 ISZERO PUSH2 0x1B32 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0x1C47 JUMPI POP PUSH2 0x1C47 PUSH2 0x1A82 JUMP JUMPDEST DUP1 PUSH2 0x1C55 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0x1C90 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x5A85 PUSH1 0x2E SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0x1CBB JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT PUSH2 0xFF00 NOT SWAP1 SWAP2 AND PUSH2 0x100 OR AND PUSH1 0x1 OR SWAP1 SSTORE JUMPDEST PUSH2 0x1B20 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x8 DUP2 MSTORE PUSH1 0x20 ADD PUSH8 0x45786368616E6765 PUSH1 0xC0 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x19 PUSH1 0xF9 SHL DUP2 MSTORE POP PUSH2 0x2A2E JUMP JUMPDEST PUSH32 0x36C25DE3E541D5D970F66E4210D728721220FFF5C077CC6CD008B3A0C62ADAB7 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 ADDRESS PUSH2 0x1D38 PUSH2 0x2AEE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP6 POP POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH2 0x194 DUP2 SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x97 PUSH1 0x20 MSTORE PUSH32 0x4532FA16F071D6234E30E1A1E69B9806F04095EDF37A1CA7A25C8D6AF7861CC0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP2 DUP3 AND OR SWAP1 SWAP2 SSTORE PUSH32 0x30A684095C937B5AA064DCF94F9903A7D808E3EFB22D8389DBD43080AD4ED3D5 DUP1 SLOAD SWAP4 SWAP1 SWAP3 AND SWAP3 DUP2 AND DUP4 OR SWAP1 SWAP2 SSTORE PUSH4 0x25CEED9 PUSH1 0xE6 SHL PUSH1 0x0 MSTORE PUSH32 0x4B5822151EA34B7C8D9E37C3E466BCECB631EFE6A9F26A4A4054110A93DD316F DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0x1E51 JUMPI POP PUSH2 0x1E51 PUSH2 0x1A82 JUMP JUMPDEST DUP1 PUSH2 0x1E5F JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0x1E9A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x5A85 PUSH1 0x2E SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0x1EC5 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT PUSH2 0xFF00 NOT SWAP1 SWAP2 AND PUSH2 0x100 OR AND PUSH1 0x1 OR SWAP1 SSTORE JUMPDEST PUSH2 0x162 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0xA15 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F02 PUSH2 0x2AF8 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0xE0 DUP2 ADD MLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0x2611A133 PUSH1 0xE1 SHL EQ DUP1 PUSH2 0x1F3B JUMPI POP PUSH1 0xE0 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 DUP2 AND EQ JUMPDEST ISZERO PUSH2 0x1FB0 JUMPI DUP2 MLOAD PUSH1 0x20 DUP4 ADD MLOAD MLOAD PUSH2 0x1F51 SWAP1 PUSH2 0x2B54 JUMP JUMPDEST PUSH1 0x60 DUP5 ADD MLOAD MLOAD PUSH2 0x1F60 SWAP1 PUSH2 0x2B54 JUMP JUMPDEST DUP5 PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH2 0x164C JUMP JUMPDEST DUP2 MLOAD PUSH1 0x20 DUP4 ADD MLOAD MLOAD PUSH2 0x1FC1 SWAP1 PUSH2 0x2B54 JUMP JUMPDEST PUSH1 0x60 DUP5 ADD MLOAD MLOAD PUSH2 0x1FD0 SWAP1 PUSH2 0x2B54 JUMP JUMPDEST DUP5 PUSH1 0x80 ADD MLOAD DUP6 PUSH2 0x100 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x203C JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2024 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x2069 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP7 POP POP POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH2 0x164C JUMP JUMPDEST PUSH2 0x2099 DUP5 DUP5 PUSH2 0x1801 JUMP JUMPDEST PUSH2 0x20A3 DUP3 DUP3 PUSH2 0x1801 JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x20FF JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x20FF JUMPI DUP4 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x20FF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13B9 SWAP1 PUSH2 0x579C JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0xA15 JUMPI DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0xA15 JUMPI DUP4 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xA15 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13B9 SWAP1 PUSH2 0x560B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x43 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x59AD PUSH1 0x43 SWAP2 CODECOPY DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP3 PUSH1 0x0 ADD MLOAD DUP4 PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x40 ADD MLOAD DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x21E8 PUSH2 0x2BBE JUMP JUMPDEST DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP1 PUSH2 0x1901 PUSH1 0xF0 SHL DUP2 MSTORE POP PUSH1 0x2 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0xA0 DUP2 ADD MLOAD ISZERO DUP1 PUSH2 0x223E JUMPI POP TIMESTAMP DUP2 PUSH1 0xA0 ADD MLOAD LT JUMPDEST PUSH2 0x228F JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F726465722073746172742076616C69646174696F6E206661696C6564000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0xC0 DUP2 ADD MLOAD ISZERO DUP1 PUSH2 0x22A3 JUMPI POP TIMESTAMP DUP2 PUSH1 0xC0 ADD MLOAD GT JUMPDEST PUSH2 0x1B32 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F7264657220656E642076616C69646174696F6E206661696C65640000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x2379 JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x2374 JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2320 PUSH2 0x1EF8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x2374 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x36B0B5B2B91034B9903737BA103A3C1039B2B73232B9 PUSH1 0x51 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x1814 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x238C PUSH2 0x1EF8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1814 JUMPI PUSH1 0x0 PUSH2 0x23A5 DUP4 PUSH2 0x2BC5 JUMP JUMPDEST SWAP1 POP PUSH2 0x23BD DUP4 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2A28 JUMP JUMPDEST ISZERO PUSH2 0x24F9 JUMPI DUP3 MLOAD PUSH4 0xB135D3F PUSH1 0xE1 SHL SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1626BA7E PUSH2 0x23E4 DUP5 PUSH2 0x2CB5 JUMP JUMPDEST DUP6 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2437 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x241F JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x2464 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP4 POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2482 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2496 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x24AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND EQ PUSH2 0x24F4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x5A5A PUSH1 0x2B SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x11D4 JUMP JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2517 DUP4 PUSH2 0x2511 DUP5 PUSH2 0x2CB5 JUMP JUMPDEST SWAP1 PUSH2 0x2CBF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x255C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x5A38 PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x11D4 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x8 PUSH1 0x24 DUP3 ADD MSTORE PUSH8 0x37379036B0B5B2B9 PUSH1 0xC1 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x25AB PUSH2 0x482E JUMP JUMPDEST PUSH2 0x25B3 PUSH2 0x482E JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD MLOAD PUSH1 0x60 DUP5 ADD MLOAD MLOAD PUSH2 0x25C9 SWAP2 SWAP1 PUSH2 0x2D3F JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH2 0x25F4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13B9 SWAP1 PUSH2 0x5770 JUMP JUMPDEST PUSH1 0x60 DUP5 ADD MLOAD MLOAD PUSH1 0x20 DUP5 ADD MLOAD MLOAD PUSH2 0x260A SWAP2 SWAP1 PUSH2 0x2D3F JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH2 0x2635 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13B9 SWAP1 PUSH2 0x5770 JUMP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x2644 PUSH2 0x4846 JUMP JUMPDEST PUSH2 0x264C PUSH2 0x4846 JUMP JUMPDEST PUSH2 0x2654 PUSH2 0x4872 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x265F DUP7 PUSH2 0x1F07 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x266C DUP7 PUSH2 0x1F07 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2678 PUSH2 0x1EF8 JUMP JUMPDEST DUP9 MLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2697 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP9 MSTORE JUMPDEST DUP7 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x26B3 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP8 MSTORE JUMPDEST PUSH2 0x26BC DUP9 PUSH2 0x2D7F JUMP JUMPDEST SWAP6 POP PUSH2 0x26C7 DUP8 PUSH2 0x2D7F JUMP JUMPDEST SWAP5 POP PUSH2 0x26DF DUP9 DUP9 DUP6 DUP6 DUP11 PUSH1 0x40 ADD MLOAD DUP11 PUSH1 0x40 ADD MLOAD PUSH2 0x2EDE JUMP JUMPDEST SWAP4 POP POP POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND PUSH4 0x55575F5D PUSH1 0xE1 SHL EQ ISZERO PUSH2 0x270E JUMPI POP PUSH1 0x1 PUSH2 0x1798 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x55575F5D PUSH1 0xE1 SHL EQ ISZERO PUSH2 0x272F JUMPI POP PUSH1 0x2 PUSH2 0x1798 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND PUSH4 0x22BA1761 PUSH1 0xE2 SHL EQ ISZERO PUSH2 0x2750 JUMPI POP PUSH1 0x1 PUSH2 0x1798 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x22BA1761 PUSH1 0xE2 SHL EQ ISZERO PUSH2 0x2771 JUMPI POP PUSH1 0x2 PUSH2 0x1798 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND PUSH4 0x25CEED9 PUSH1 0xE6 SHL EQ ISZERO PUSH2 0x2792 JUMPI POP PUSH1 0x1 PUSH2 0x1798 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x25CEED9 PUSH1 0xE6 SHL EQ ISZERO PUSH2 0x27B3 JUMPI POP PUSH1 0x2 PUSH2 0x1798 JUMP JUMPDEST POP PUSH1 0x0 SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 MLOAD PUSH1 0x20 SWAP1 DUP2 ADD MLOAD DUP4 MLOAD SWAP1 SWAP2 ADD MLOAD PUSH1 0x1 DUP4 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x27D8 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x285A JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH2 0x161 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP3 MSTORE PUSH6 0xFFFFFFFFFFFF PUSH1 0x1 PUSH1 0xA0 SHL DUP3 DIV DUP2 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0xD0 SHL SWAP1 SWAP2 DIV AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x282A SWAP1 DUP7 SWAP1 DUP7 SWAP1 PUSH2 0x3099 JUMP JUMPDEST SWAP2 POP PUSH2 0x2855 DUP5 PUSH1 0x0 ADD MLOAD PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x80 ADD MLOAD DUP9 PUSH1 0x20 ADD MLOAD DUP9 PUSH1 0x60 ADD MLOAD PUSH2 0x335A JUMP JUMPDEST PUSH2 0x292B JUMP JUMPDEST PUSH1 0x2 DUP4 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x2868 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x28E5 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH2 0x161 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP3 MSTORE PUSH6 0xFFFFFFFFFFFF PUSH1 0x1 PUSH1 0xA0 SHL DUP3 DIV DUP2 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0xD0 SHL SWAP1 SWAP2 DIV AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x28BA SWAP1 DUP6 SWAP1 DUP8 SWAP1 PUSH2 0x3099 JUMP JUMPDEST SWAP1 POP PUSH2 0x2855 DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x0 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x80 ADD MLOAD DUP8 PUSH1 0x20 ADD MLOAD DUP10 PUSH1 0x60 ADD MLOAD PUSH2 0x335A JUMP JUMPDEST DUP5 MLOAD DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD MLOAD PUSH1 0x80 DUP9 ADD MLOAD SWAP3 DUP8 ADD MLOAD PUSH1 0x60 DUP10 ADD MLOAD PUSH2 0x2908 SWAP5 SWAP2 SWAP1 PUSH2 0x335A JUMP JUMPDEST DUP4 MLOAD DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD MLOAD PUSH1 0x80 DUP8 ADD MLOAD SWAP3 DUP9 ADD MLOAD PUSH1 0x60 DUP9 ADD MLOAD PUSH2 0x292B SWAP5 SWAP2 SWAP1 PUSH2 0x335A JUMP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x298A JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP4 SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x29DB JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x29E0 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x11D4 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x1D1C985B9CD9995C8819985A5B1959 PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0x2A47 JUMPI POP PUSH2 0x2A47 PUSH2 0x1A82 JUMP JUMPDEST DUP1 PUSH2 0x2A55 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0x2A90 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x5A85 PUSH1 0x2E SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0x2ABB JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT PUSH2 0xFF00 NOT SWAP1 SWAP2 AND PUSH2 0x100 OR AND PUSH1 0x1 OR SWAP1 SSTORE JUMPDEST DUP3 MLOAD PUSH1 0x20 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 KECCAK256 DUP4 MLOAD SWAP2 DUP5 ADD SWAP2 SWAP1 SWAP2 KECCAK256 PUSH1 0xC9 SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0xCA SSTORE DUP1 ISZERO PUSH2 0x11D4 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F02 PUSH2 0x34DE JUMP JUMPDEST PUSH1 0x0 CALLER ADDRESS EQ ISZERO PUSH2 0x2B4F JUMPI PUSH1 0x0 DUP1 CALLDATASIZE DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP POP POP POP CALLDATASIZE ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 POP PUSH2 0x1065 SWAP1 POP JUMP JUMPDEST POP CALLER SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD MLOAD DUP1 MLOAD SWAP1 DUP4 ADD KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH32 0x452A0DC408CB0D27FFC3B3CAFF933A5208040A53A9DBECD8D89CAD2C0D40E00C DUP2 DUP7 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND DUP4 DUP3 ADD MSTORE PUSH1 0x60 DUP1 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP1 MLOAD DUP1 DUP5 SUB SWAP1 SWAP3 ADD DUP3 MSTORE PUSH1 0x80 SWAP1 SWAP3 ADD SWAP1 SWAP2 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x194 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x477ED43B8020849B755512278536C3766A3B4AB547519949A75F483372493F8D DUP3 PUSH1 0x0 ADD MLOAD PUSH2 0x2BFA DUP5 PUSH1 0x20 ADD MLOAD PUSH2 0x34E2 JUMP JUMPDEST DUP5 PUSH1 0x40 ADD MLOAD PUSH2 0x2C0C DUP7 PUSH1 0x60 ADD MLOAD PUSH2 0x34E2 JUMP JUMPDEST DUP7 PUSH1 0x80 ADD MLOAD DUP8 PUSH1 0xA0 ADD MLOAD DUP9 PUSH1 0xC0 ADD MLOAD DUP10 PUSH1 0xE0 ADD MLOAD DUP11 PUSH2 0x100 ADD MLOAD DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP12 DUP2 MSTORE PUSH1 0x20 ADD DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP11 POP POP POP POP POP POP POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x21E8 PUSH2 0x3552 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x41 EQ PUSH2 0x2D17 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x0 BYTE PUSH2 0x2D35 DUP7 DUP3 DUP6 DUP6 PUSH2 0x358D JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2D47 PUSH2 0x482E JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2D53 DUP5 DUP5 PUSH2 0x37E3 JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH2 0x2D78 JUMPI PUSH2 0x2D70 DUP4 DUP6 PUSH2 0x37E3 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1798 JUMP JUMPDEST SWAP1 POP PUSH2 0x1798 JUMP JUMPDEST PUSH2 0x2D87 PUSH2 0x4846 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0xE0 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0x2611A133 PUSH1 0xE1 SHL EQ ISZERO PUSH2 0x2DDA JUMPI PUSH1 0x0 DUP3 PUSH2 0x100 ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x2DC6 SWAP2 SWAP1 PUSH2 0x51B6 JUMP JUMPDEST DUP1 MLOAD DUP4 MSTORE PUSH1 0x20 SWAP1 DUP2 ADD MLOAD SWAP1 DUP4 ADD MSTORE POP PUSH2 0x2EC5 JUMP JUMPDEST PUSH1 0xE0 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0x23D235EF PUSH1 0xE0 SHL EQ ISZERO PUSH2 0x2E32 JUMPI PUSH1 0x0 DUP3 PUSH2 0x100 ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x2E12 SWAP2 SWAP1 PUSH2 0x5242 JUMP JUMPDEST DUP1 MLOAD DUP4 MSTORE PUSH1 0x20 DUP1 DUP3 ADD MLOAD SWAP1 DUP5 ADD MSTORE PUSH1 0x40 SWAP1 DUP2 ADD MLOAD ISZERO ISZERO SWAP1 DUP4 ADD MSTORE POP PUSH2 0x2EC5 JUMP JUMPDEST PUSH1 0xE0 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0x256F2A65 PUSH1 0xE1 SHL EQ ISZERO PUSH2 0x2E91 JUMPI PUSH1 0x0 DUP3 PUSH2 0x100 ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x2E6A SWAP2 SWAP1 PUSH2 0x5242 JUMP JUMPDEST DUP1 MLOAD DUP4 MSTORE PUSH1 0x20 DUP1 DUP3 ADD MLOAD SWAP1 DUP5 ADD MSTORE PUSH1 0x40 SWAP1 DUP2 ADD MLOAD ISZERO ISZERO SWAP1 DUP4 ADD MSTORE POP PUSH1 0x1 PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x2EC5 JUMP JUMPDEST PUSH1 0xE0 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 DUP2 AND EQ ISZERO PUSH2 0x2EAD JUMPI PUSH2 0x2EC5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13B9 SWAP1 PUSH2 0x5702 JUMP JUMPDEST DUP1 MLOAD MLOAD PUSH2 0x164C JUMPI DUP2 MLOAD PUSH2 0x2ED7 SWAP1 PUSH2 0x39FF JUMP JUMPDEST DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2EE6 PUSH2 0x4872 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2EF6 DUP9 PUSH1 0x80 ADD MLOAD DUP8 PUSH2 0x3A9A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2F08 DUP9 PUSH1 0x80 ADD MLOAD DUP8 PUSH2 0x3A9A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2F1A DUP11 DUP11 DUP6 DUP6 DUP11 DUP11 PUSH2 0x3ABF JUMP JUMPDEST SWAP1 POP DUP10 PUSH1 0x20 ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH1 0x0 EQ ISZERO DUP1 PUSH2 0x2F3B JUMPI POP PUSH1 0x60 DUP10 ADD MLOAD PUSH1 0x20 ADD MLOAD ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x2F5E JUMPI DUP1 MLOAD PUSH2 0x2F5E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13B9 SWAP1 PUSH2 0x567B JUMP JUMPDEST PUSH1 0x60 DUP11 ADD MLOAD PUSH1 0x20 ADD MLOAD ISZERO ISZERO DUP1 PUSH2 0x2F7A JUMPI POP PUSH1 0x20 DUP1 DUP11 ADD MLOAD ADD MLOAD ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x2FA3 JUMPI PUSH1 0x0 DUP2 PUSH1 0x20 ADD MLOAD GT PUSH2 0x2FA3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13B9 SWAP1 PUSH2 0x567B JUMP JUMPDEST PUSH1 0x80 DUP11 ADD MLOAD ISZERO PUSH2 0x2FF6 JUMPI DUP6 ISZERO PUSH2 0x2FD5 JUMPI DUP1 MLOAD PUSH2 0x2FC0 SWAP1 DUP5 SWAP1 PUSH2 0x173B JUMP JUMPDEST PUSH1 0x0 DUP10 DUP2 MSTORE PUSH2 0x12F PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH2 0x2FF6 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH2 0x2FE5 SWAP1 DUP5 SWAP1 PUSH2 0x173B JUMP JUMPDEST PUSH1 0x0 DUP10 DUP2 MSTORE PUSH2 0x12F PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE JUMPDEST PUSH1 0x80 DUP10 ADD MLOAD ISZERO PUSH2 0x3049 JUMPI DUP5 ISZERO PUSH2 0x302B JUMPI PUSH1 0x20 DUP2 ADD MLOAD PUSH2 0x3016 SWAP1 DUP4 SWAP1 PUSH2 0x173B JUMP JUMPDEST PUSH1 0x0 DUP9 DUP2 MSTORE PUSH2 0x12F PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH2 0x3049 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x3038 SWAP1 DUP4 SWAP1 PUSH2 0x173B JUMP JUMPDEST PUSH1 0x0 DUP9 DUP2 MSTORE PUSH2 0x12F PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD DUP2 MLOAD PUSH1 0x40 MLOAD PUSH32 0x956CD63EE4CDCD81FDA5F0EC7C6C36DCEDA99E1B412F4A650A5D26055DC3C450 SWAP3 PUSH2 0x3084 SWAP3 DUP13 SWAP3 DUP13 SWAP3 SWAP2 SWAP1 PUSH2 0x5490 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0xA0 ADD MLOAD PUSH2 0x30AC JUMPI PUSH1 0x0 PUSH2 0x30B2 JUMP JUMPDEST DUP3 PUSH1 0x20 ADD MLOAD JUMPDEST PUSH6 0xFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 DUP5 PUSH1 0xA0 ADD MLOAD PUSH2 0x30CE JUMPI PUSH1 0x0 PUSH2 0x30D4 JUMP JUMPDEST DUP4 PUSH1 0x40 ADD MLOAD JUMPDEST PUSH6 0xFFFFFFFFFFFF AND SWAP1 POP PUSH2 0x30F5 DUP7 PUSH1 0x0 ADD MLOAD PUSH1 0x20 ADD MLOAD DUP4 DUP9 PUSH1 0x40 ADD MLOAD PUSH2 0x3B58 JUMP JUMPDEST DUP7 MLOAD PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x80 DUP10 ADD MLOAD DUP8 MLOAD SWAP3 MLOAD PUSH1 0x60 DUP12 ADD MLOAD SWAP5 SWAP8 POP PUSH1 0x0 SWAP5 PUSH2 0x3121 SWAP5 DUP10 SWAP5 SWAP4 SWAP3 DUP10 DUP10 ADD SWAP3 PUSH2 0x3BF8 JUMP JUMPDEST DUP8 MLOAD DUP1 MLOAD DUP9 MLOAD MLOAD PUSH1 0x20 DUP1 DUP12 ADD MLOAD SWAP4 ADD MLOAD PUSH1 0x80 DUP13 ADD MLOAD PUSH1 0x60 DUP14 ADD MLOAD SWAP6 SWAP7 POP PUSH2 0x314F SWAP6 SWAP4 SWAP5 SWAP3 SWAP4 DUP8 SWAP3 SWAP2 SWAP1 PUSH2 0x3C42 JUMP JUMPDEST SWAP1 POP DUP7 PUSH1 0x40 ADD MLOAD MLOAD PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0x316B JUMPI POP DUP6 PUSH1 0x40 ADD MLOAD MLOAD PUSH1 0x1 EQ JUMPDEST DUP1 ISZERO PUSH2 0x31C0 JUMPI POP DUP7 PUSH1 0x40 ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3183 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x40 ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x31A9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST ISZERO PUSH2 0x32D6 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x0 SWAP2 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x31E4 PUSH2 0x488C JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x31DC JUMPI SWAP1 POP POP SWAP1 POP DUP7 PUSH1 0x40 ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x320A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3223 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 MSTORE PUSH1 0x40 DUP9 ADD MLOAD DUP1 MLOAD PUSH1 0x0 SWAP1 PUSH2 0x324B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x40 ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3268 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD ADD DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3282 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP2 MSTORE POP POP PUSH2 0x32CC DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x0 ADD MLOAD DUP4 DUP11 PUSH1 0x0 ADD MLOAD PUSH1 0x20 ADD MLOAD DUP5 DUP13 PUSH1 0x80 ADD MLOAD DUP14 PUSH1 0x60 ADD MLOAD PUSH2 0x3D45 JUMP JUMPDEST POP SWAP2 POP PUSH2 0x332F SWAP1 POP JUMP JUMPDEST PUSH2 0x3300 DUP8 PUSH1 0x0 ADD MLOAD PUSH1 0x0 ADD MLOAD DUP3 DUP10 PUSH1 0x0 ADD MLOAD PUSH1 0x20 ADD MLOAD DUP11 PUSH1 0x40 ADD MLOAD DUP12 PUSH1 0x80 ADD MLOAD DUP13 PUSH1 0x60 ADD MLOAD PUSH2 0x3D45 JUMP JUMPDEST POP DUP8 MLOAD DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD PUSH1 0x40 DUP10 ADD MLOAD PUSH1 0x80 DUP12 ADD MLOAD PUSH1 0x60 DUP13 ADD MLOAD SWAP5 SWAP6 POP PUSH2 0x332B SWAP5 DUP7 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3D45 JUMP JUMPDEST POP SWAP1 POP JUMPDEST PUSH2 0x3350 DUP8 PUSH1 0x0 ADD MLOAD PUSH1 0x0 ADD MLOAD DUP3 DUP10 PUSH1 0x80 ADD MLOAD DUP10 PUSH1 0x20 ADD MLOAD DUP12 PUSH1 0x60 ADD MLOAD PUSH2 0x335A JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT PUSH2 0x337B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13B9 SWAP1 PUSH2 0x55C7 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 JUMPDEST PUSH1 0x1 DUP6 MLOAD SUB DUP2 LT ISZERO PUSH2 0x344A JUMPI PUSH1 0x0 PUSH2 0x33C1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x339D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP10 PUSH2 0x3DFA SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0x33F6 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x33D2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP6 PUSH2 0x173B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP4 POP DUP1 ISZERO PUSH2 0x3441 JUMPI PUSH2 0x3408 DUP4 DUP3 PUSH2 0x2933 JUMP JUMPDEST SWAP3 POP PUSH2 0x3441 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP12 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE POP DUP9 DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x342F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD DUP9 PUSH2 0x3E12 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x3380 JUMP JUMPDEST POP PUSH1 0x0 DUP5 PUSH1 0x1 DUP7 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x345D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH2 0x3487 DUP2 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP5 PUSH2 0x173B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x2710 EQ PUSH2 0x34AA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13B9 SWAP1 PUSH2 0x5739 JUMP JUMPDEST DUP2 ISZERO PUSH2 0x34D4 JUMPI PUSH2 0x34D4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP11 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE POP DUP8 DUP4 PUSH1 0x0 ADD MLOAD DUP8 PUSH2 0x3E12 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST CHAINID SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0xDB6F72E915676CFC289DA13BC4ECE054FD17B1DF6D77FFC4A60510718C236B08 PUSH2 0x3512 DUP4 PUSH1 0x0 ADD MLOAD PUSH2 0x2B54 JUMP JUMPDEST DUP4 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F02 PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH2 0x3580 PUSH2 0x421A JUMP JUMPDEST PUSH2 0x3588 PUSH2 0x4220 JUMP JUMPDEST PUSH2 0x4226 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP3 GT ISZERO PUSH2 0x35EE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x5A16 PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1E DUP6 PUSH1 0xFF AND GT ISZERO PUSH2 0x36C8 JUMPI PUSH1 0x4 DUP6 SUB PUSH1 0xFF AND PUSH1 0x1B EQ DUP1 PUSH2 0x3617 JUMPI POP PUSH1 0x4 DUP6 SUB PUSH1 0xFF AND PUSH1 0x1C EQ JUMPDEST PUSH2 0x3652 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x5AB3 PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH2 0x365D DUP8 PUSH2 0x4288 JUMP JUMPDEST PUSH1 0x4 DUP8 SUB DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x36B7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP1 POP PUSH2 0x377F JUMP JUMPDEST DUP5 PUSH1 0xFF AND PUSH1 0x1B EQ DUP1 PUSH2 0x36DD JUMPI POP DUP5 PUSH1 0xFF AND PUSH1 0x1C EQ JUMPDEST PUSH2 0x3718 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x5AB3 PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP7 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3772 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP1 POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x37DA JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x37EB PUSH2 0x482E JUMP JUMPDEST DUP3 MLOAD DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x55575F5D PUSH1 0xE1 SHL EQ ISZERO PUSH2 0x3856 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0x55575F5D PUSH1 0xE1 SHL EQ ISZERO PUSH2 0x382B JUMPI DUP5 SWAP3 POP POP POP PUSH2 0x1798 JUMP JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE DUP3 MLOAD PUSH1 0x20 DUP2 DUP2 ADD SWAP1 SWAP5 MSTORE SWAP1 DUP2 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 POP PUSH2 0x1798 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x22BA1761 PUSH1 0xE2 SHL EQ ISZERO PUSH2 0x389B JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0x22BA1761 PUSH1 0xE2 SHL EQ ISZERO PUSH2 0x382B JUMPI PUSH2 0x3892 DUP6 DUP6 PUSH2 0x42D9 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x1798 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x39D690A3 PUSH1 0xE1 SHL EQ ISZERO PUSH2 0x38D7 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0x39D690A3 PUSH1 0xE1 SHL EQ ISZERO PUSH2 0x382B JUMPI PUSH2 0x3892 DUP6 DUP6 PUSH2 0x42D9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x25CEED9 PUSH1 0xE6 SHL EQ ISZERO PUSH2 0x3913 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0x25CEED9 PUSH1 0xE6 SHL EQ ISZERO PUSH2 0x382B JUMPI PUSH2 0x3892 DUP6 DUP6 PUSH2 0x42D9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 ISZERO PUSH2 0x39C8 JUMPI PUSH1 0x40 MLOAD PUSH4 0x6D3F7CB PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x6D3F7CB0 SWAP1 PUSH2 0x396A SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x582C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3982 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3996 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x39BE SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x512B JUMP JUMPDEST SWAP4 POP POP POP POP PUSH2 0x1798 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 DUP2 AND SWAP1 DUP4 AND EQ ISZERO PUSH2 0x39E7 JUMPI PUSH2 0x39BE DUP7 DUP7 PUSH2 0x42D9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13B9 SWAP1 PUSH2 0x552B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x0 SWAP2 SWAP1 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x3A22 PUSH2 0x488C JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x3A1A JUMPI SWAP1 POP POP SWAP1 POP DUP3 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3A45 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP PUSH2 0x2710 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3A79 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP1 SWAP3 AND SWAP2 ADD MSTORE SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x3AA9 JUMPI POP PUSH1 0x0 PUSH2 0x1798 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x12F PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3AC7 PUSH2 0x4872 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3AD5 DUP10 DUP9 DUP8 PUSH2 0x4336 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP1 PUSH2 0x3AE7 DUP11 DUP10 DUP9 PUSH2 0x4336 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP4 DUP2 GT DUP1 PUSH2 0x3B01 JUMPI POP DUP4 DUP2 EQ DUP1 ISZERO PUSH2 0x3B01 JUMPI POP DUP4 ISZERO JUMPDEST ISZERO PUSH2 0x3B2D JUMPI PUSH2 0x3B22 DUP5 DUP5 DUP13 PUSH1 0x20 ADD MLOAD PUSH1 0x20 ADD MLOAD DUP14 PUSH1 0x60 ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH2 0x43AF JUMP JUMPDEST SWAP5 POP POP POP POP POP PUSH2 0x2D35 JUMP JUMPDEST PUSH2 0x3B49 DUP12 PUSH1 0x20 ADD MLOAD PUSH1 0x20 ADD MLOAD DUP13 PUSH1 0x60 ADD MLOAD PUSH1 0x20 ADD MLOAD DUP5 DUP5 PUSH2 0x4434 JUMP JUMPDEST SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x3BD8 JUMPI PUSH2 0x2710 DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3B75 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND GT ISZERO PUSH2 0x3BA8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13B9 SWAP1 PUSH2 0x56D3 JUMP JUMPDEST DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x3BB4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP3 ADD SWAP2 POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x3B5D JUMP JUMPDEST POP PUSH2 0x3BED PUSH2 0x3BE6 DUP7 DUP4 PUSH2 0x3DFA JUMP JUMPDEST DUP7 SWAP1 PUSH2 0x173B JUMP JUMPDEST SWAP2 POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x3C08 DUP11 DUP11 DUP10 PUSH2 0x44BA JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP DUP1 ISZERO PUSH2 0x3C33 JUMPI PUSH2 0x3C33 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE POP DUP10 DUP9 DUP8 PUSH2 0x3E12 JUMP JUMPDEST POP SWAP1 POP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3C4E DUP9 PUSH2 0x44DC JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0x3C62 JUMPI POP DUP7 MLOAD PUSH1 0x1 EQ JUMPDEST DUP1 ISZERO PUSH2 0x3CAF JUMPI POP DUP7 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3C76 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3C98 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST ISZERO PUSH2 0x3D00 JUMPI PUSH2 0x1388 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3CC4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND GT ISZERO PUSH2 0x3CF7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13B9 SWAP1 PUSH2 0x5562 JUMP JUMPDEST DUP6 SWAP2 POP POP PUSH2 0x3C37 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3D11 DUP12 DUP10 DUP10 DUP7 DUP11 DUP11 PUSH2 0x3D45 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x1388 DUP2 GT ISZERO PUSH2 0x3D37 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13B9 SWAP1 PUSH2 0x5562 JUMP JUMPDEST POP SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP5 PUSH1 0x0 DUP1 JUMPDEST DUP6 MLOAD DUP2 LT ISZERO PUSH2 0x3DEE JUMPI PUSH2 0x3D86 DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3D62 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP4 PUSH2 0x173B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP2 POP PUSH1 0x0 PUSH2 0x3DB5 DUP5 DUP10 DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x3D9B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x44BA JUMP JUMPDEST SWAP1 SWAP5 POP SWAP1 POP DUP1 ISZERO PUSH2 0x3DE5 JUMPI PUSH2 0x3DE5 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP13 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE POP DUP8 DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x342F JUMPI INVALID JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x3D4A JUMP JUMPDEST POP SWAP7 POP SWAP7 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1795 PUSH2 0x2710 PUSH2 0x3E0C DUP6 DUP6 PUSH2 0x4651 JUMP JUMPDEST SWAP1 PUSH2 0x46AA JUMP JUMPDEST DUP4 MLOAD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0x39D690A3 PUSH1 0xE1 SHL EQ ISZERO PUSH2 0x3F58 JUMPI PUSH1 0x0 DUP1 DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x20 ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x3E4C SWAP2 SWAP1 PUSH2 0x4EFD JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP6 PUSH1 0x20 ADD MLOAD PUSH1 0x1 EQ PUSH2 0x3E74 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13B9 SWAP1 PUSH2 0x564F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND ADDRESS EQ ISZERO PUSH2 0x3EEC JUMPI PUSH1 0x40 MLOAD PUSH4 0x21421707 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x42842E0E SWAP1 PUSH2 0x3EB5 SWAP1 ADDRESS SWAP1 DUP9 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x53E9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3ECF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3EE3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x3F51 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x7B84DC83 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xF709B906 SWAP1 PUSH2 0x3F1E SWAP1 DUP6 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x5501 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3F38 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3F4C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST POP POP PUSH2 0xA15 JUMP JUMPDEST DUP4 MLOAD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0x22BA1761 PUSH1 0xE2 SHL EQ ISZERO PUSH2 0x40B6 JUMPI PUSH1 0x0 DUP5 PUSH1 0x0 ADD MLOAD PUSH1 0x20 ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x3F91 SWAP2 SWAP1 PUSH2 0x4CF1 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ADDRESS EQ ISZERO PUSH2 0x4048 JUMPI PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP2 PUSH4 0xA9059CBB SWAP2 PUSH2 0x3FD5 SWAP2 DUP8 SWAP2 PUSH1 0x4 ADD PUSH2 0x5445 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3FEF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4003 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4027 SWAP2 SWAP1 PUSH2 0x5073 JUMP JUMPDEST PUSH2 0x4043 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13B9 SWAP1 PUSH2 0x56A4 JUMP JUMPDEST PUSH2 0x40B0 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x40 MLOAD PUSH4 0x776062C3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP2 PUSH4 0x776062C3 SWAP2 PUSH2 0x407D SWAP2 DUP6 SWAP2 DUP10 SWAP2 DUP10 SWAP2 PUSH1 0x4 ADD PUSH2 0x5501 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4097 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x40AB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST POP PUSH2 0xA15 JUMP JUMPDEST DUP4 MLOAD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0x25CEED9 PUSH1 0xE6 SHL EQ ISZERO PUSH2 0x4173 JUMPI PUSH1 0x0 DUP1 DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x20 ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x40F0 SWAP2 SWAP1 PUSH2 0x4EFD JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND ADDRESS EQ ISZERO PUSH2 0x413B JUMPI PUSH1 0x20 DUP7 ADD MLOAD PUSH1 0x40 MLOAD PUSH4 0x79212195 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP2 PUSH4 0xF242432A SWAP2 PUSH2 0x3EB5 SWAP2 ADDRESS SWAP2 DUP10 SWAP2 DUP8 SWAP2 PUSH1 0x4 ADD PUSH2 0x540D JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MLOAD PUSH1 0x40 MLOAD PUSH4 0x9C1C2EE9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP2 PUSH4 0x9C1C2EE9 SWAP2 PUSH2 0x3F1E SWAP2 DUP7 SWAP2 DUP11 SWAP2 DUP11 SWAP2 DUP9 SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x54BE JUMP JUMPDEST DUP4 MLOAD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0x55575F5D PUSH1 0xE1 SHL EQ ISZERO PUSH2 0x41BC JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ADDRESS EQ PUSH2 0x41B7 JUMPI PUSH1 0x20 DUP5 ADD MLOAD PUSH2 0x41B7 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH2 0x2990 JUMP JUMPDEST PUSH2 0xA15 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x54BC0CF1 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x54BC0CF1 SWAP1 PUSH2 0x41EC SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x5851 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4206 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x34D4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST PUSH1 0xC9 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0xCA SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP4 DUP4 PUSH2 0x4233 PUSH2 0x34DE JUMP JUMPDEST ADDRESS PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP6 POP POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A333200000000 PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x3C DUP1 DUP4 ADD SWAP5 SWAP1 SWAP5 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP5 ADD DUP5 MSTORE PUSH1 0x5C SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE DUP2 MLOAD SWAP2 ADD KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x42E1 PUSH2 0x482E JUMP JUMPDEST PUSH1 0x20 DUP1 DUP5 ADD MLOAD DUP1 MLOAD SWAP1 DUP3 ADD KECCAK256 DUP4 DUP3 ADD MLOAD DUP1 MLOAD SWAP3 ADD SWAP2 SWAP1 SWAP2 KECCAK256 DUP1 DUP3 EQ ISZERO PUSH2 0x430B JUMPI DUP5 SWAP3 POP POP POP PUSH2 0x1798 JUMP JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE DUP3 MLOAD PUSH1 0x20 DUP1 DUP3 ADD SWAP1 SWAP5 MSTORE SWAP1 DUP2 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 ISZERO PUSH2 0x4375 JUMPI PUSH1 0x20 DUP1 DUP7 ADD MLOAD ADD MLOAD PUSH2 0x4351 SWAP1 DUP6 PUSH2 0x2933 JUMP JUMPDEST SWAP2 POP PUSH2 0x436E DUP6 PUSH1 0x60 ADD MLOAD PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x20 ADD MLOAD PUSH1 0x20 ADD MLOAD DUP5 PUSH2 0x4711 JUMP JUMPDEST SWAP1 POP PUSH2 0x292B JUMP JUMPDEST PUSH1 0x60 DUP6 ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH2 0x4388 SWAP1 DUP6 PUSH2 0x2933 JUMP JUMPDEST SWAP1 POP PUSH2 0x43A5 DUP6 PUSH1 0x20 ADD MLOAD PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x60 ADD MLOAD PUSH1 0x20 ADD MLOAD DUP4 PUSH2 0x4711 JUMP JUMPDEST SWAP2 POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x43B7 PUSH2 0x4872 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x43C4 DUP6 DUP6 DUP6 PUSH2 0x4711 JUMP JUMPDEST SWAP1 POP DUP6 DUP2 GT ISZERO PUSH2 0x441B JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x66696C6C4C6566743A20756E61626C6520746F2066696C6C0000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE SWAP4 DUP5 MSTORE POP POP PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH2 0x443C PUSH2 0x4872 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4449 DUP4 DUP8 DUP8 PUSH2 0x4711 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 GT ISZERO PUSH2 0x44A0 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x66696C6C52696768743A20756E61626C6520746F2066696C6C00000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD MSTORE POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x44D0 DUP6 PUSH2 0x44CB DUP7 DUP7 PUSH2 0x3DFA JUMP JUMPDEST PUSH2 0x4777 JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0x25CEED9 PUSH1 0xE6 SHL EQ DUP1 PUSH2 0x4510 JUMPI POP DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0x39D690A3 PUSH1 0xE1 SHL EQ JUMPDEST ISZERO PUSH2 0x45C6 JUMPI PUSH1 0x0 DUP1 DUP4 PUSH1 0x20 ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x4530 SWAP2 SWAP1 PUSH2 0x4EFD JUMP JUMPDEST PUSH2 0x162 SLOAD PUSH1 0x40 MLOAD PUSH4 0x4E53EE3D PUSH1 0xE1 SHL DUP2 MSTORE SWAP3 SWAP5 POP SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x9CA7DC7A SWAP1 PUSH2 0x4567 SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x5445 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4581 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4595 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x45BD SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x5041 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x164C JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH3 0x737EA9 PUSH1 0xE6 SHL EQ ISZERO PUSH2 0x4607 JUMPI PUSH1 0x0 DUP3 PUSH1 0x20 ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x45F9 SWAP2 SWAP1 PUSH2 0x4D0D JUMP JUMPDEST PUSH1 0x80 ADD MLOAD SWAP3 POP PUSH2 0x164C SWAP2 POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xD8F960C1 PUSH1 0xE0 SHL EQ ISZERO PUSH2 0x4649 JUMPI PUSH1 0x0 DUP3 PUSH1 0x20 ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x463B SWAP2 SWAP1 PUSH2 0x4E0A JUMP JUMPDEST PUSH1 0x60 ADD MLOAD SWAP3 POP PUSH2 0x164C SWAP2 POP POP JUMP JUMPDEST POP PUSH1 0x60 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x4660 JUMPI POP PUSH1 0x0 PUSH2 0x1798 JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x466D JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x1795 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x5AD5 PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x4700 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206469766973696F6E206279207A65726F000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x4709 JUMPI INVALID JUMPDEST DIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x471E DUP5 DUP5 DUP5 PUSH2 0x479F JUMP JUMPDEST ISZERO PUSH2 0x4761 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x3937BAB73234B7339032B93937B9 PUSH1 0x91 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x476F DUP4 PUSH2 0x3E0C DUP7 DUP6 PUSH2 0x4651 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 GT ISZERO PUSH2 0x4796 JUMPI PUSH2 0x478C DUP5 DUP5 PUSH2 0x2933 JUMP JUMPDEST SWAP2 POP DUP3 SWAP1 POP PUSH2 0x2635 JUMP JUMPDEST POP PUSH1 0x0 SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x47E6 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x6469766973696F6E206279207A65726F PUSH1 0x80 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 ISZERO DUP1 PUSH2 0x47F1 JUMPI POP DUP4 ISZERO JUMPDEST ISZERO PUSH2 0x47FE JUMPI POP PUSH1 0x0 PUSH2 0x3BF1 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP1 PUSH2 0x4808 JUMPI INVALID JUMPDEST DUP6 DUP5 MULMOD SWAP1 POP PUSH2 0x4817 DUP6 DUP5 PUSH2 0x4651 JUMP JUMPDEST PUSH2 0x4823 DUP3 PUSH2 0x3E8 PUSH2 0x4651 JUMP JUMPDEST LT ISZERO SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x164C DUP2 PUSH2 0x5981 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x48BE JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x20 PUSH2 0x48D3 PUSH2 0x48CE DUP4 PUSH2 0x5917 JUMP JUMPDEST PUSH2 0x58F4 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP2 DUP2 ADD SWAP1 DUP6 DUP4 ADD DUP6 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x4908 JUMPI PUSH2 0x48F6 DUP10 DUP7 DUP5 MLOAD DUP12 ADD ADD PUSH2 0x4A37 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x48DF JUMP JUMPDEST POP SWAP1 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x4925 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x20 PUSH2 0x4935 PUSH2 0x48CE DUP4 PUSH2 0x5917 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP2 DUP2 ADD SWAP1 DUP6 DUP4 ADD PUSH1 0x40 DUP1 DUP7 MUL DUP9 ADD DUP6 ADD DUP10 LT ISZERO PUSH2 0x4953 JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 JUMPDEST DUP7 DUP2 LT ISZERO PUSH2 0x49C2 JUMPI DUP2 DUP4 DUP12 SUB SLT ISZERO PUSH2 0x496B JUMPI DUP8 DUP9 REVERT JUMPDEST DUP2 MLOAD DUP3 DUP2 ADD DUP2 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR ISZERO PUSH2 0x4985 JUMPI INVALID JUMPDEST DUP4 MSTORE DUP4 MLOAD PUSH2 0x4992 DUP2 PUSH2 0x5981 JUMP JUMPDEST DUP2 MSTORE DUP4 DUP8 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x49AC JUMPI DUP10 DUP11 REVERT JUMPDEST DUP2 DUP9 ADD MSTORE DUP6 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP2 DUP2 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x4955 JUMP JUMPDEST POP SWAP2 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x164C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x164C DUP2 PUSH2 0x5996 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x49FB JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x4A09 PUSH2 0x48CE DUP3 PUSH2 0x5934 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x4A1D JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY SWAP1 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x4A47 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x4A55 PUSH2 0x48CE DUP3 PUSH2 0x5934 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x4A69 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x476F DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x5955 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4A8C JUMPI DUP1 DUP2 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4AA4 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 MLOAD DUP2 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 DUP3 LT DUP2 DUP4 GT OR ISZERO PUSH2 0x4ABF JUMPI INVALID JUMPDEST DUP2 DUP5 MSTORE DUP3 SWAP5 POP DUP6 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x4AD4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 ADD DUP1 DUP9 SUB DUP6 SGT ISZERO PUSH2 0x4AE5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x80 DUP5 ADD DUP4 DUP2 LT DUP4 DUP3 GT OR ISZERO PUSH2 0x4AF7 JUMPI INVALID JUMPDEST SWAP1 SWAP5 MSTORE DUP4 CALLDATALOAD SWAP4 PUSH2 0x4B06 DUP6 PUSH2 0x5996 JUMP JUMPDEST SWAP4 DUP3 MSTORE PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP4 DUP2 DUP6 GT ISZERO PUSH2 0x4B1C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4B28 DUP9 DUP7 DUP4 ADD PUSH2 0x49EB JUMP JUMPDEST PUSH1 0x60 DUP6 ADD MSTORE POP POP DUP2 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD CALLDATALOAD SWAP4 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4B54 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x60 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 DUP3 LT DUP2 DUP4 GT OR ISZERO PUSH2 0x4B71 JUMPI INVALID JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 SWAP4 POP DUP5 MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x4B89 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4B95 DUP7 DUP4 DUP8 ADD PUSH2 0x4915 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x20 DUP6 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x4BAB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4BB8 DUP6 DUP3 DUP7 ADD PUSH2 0x4915 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH2 0x4BCA PUSH1 0x40 DUP5 ADD PUSH2 0x49D0 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x120 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4BE9 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x4BF2 DUP2 PUSH2 0x58F4 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x4BFE DUP3 PUSH2 0x48A3 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x4C1A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4C26 DUP6 DUP4 DUP7 ADD PUSH2 0x4A92 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x4C37 PUSH1 0x40 DUP6 ADD PUSH2 0x48A3 JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP5 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x4C50 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4C5C DUP6 DUP4 DUP7 ADD PUSH2 0x4A92 JUMP JUMPDEST PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP5 ADD CALLDATALOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0xA0 DUP5 ADD CALLDATALOAD PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0xC0 DUP5 ADD CALLDATALOAD PUSH1 0xC0 DUP5 ADD MSTORE PUSH2 0x4C8B PUSH1 0xE0 DUP6 ADD PUSH2 0x49E0 JUMP JUMPDEST PUSH1 0xE0 DUP5 ADD MSTORE PUSH2 0x100 SWAP2 POP DUP2 DUP5 ADD CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x4CA6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4CB2 DUP7 DUP3 DUP8 ADD PUSH2 0x49EB JUMP JUMPDEST DUP4 DUP6 ADD MSTORE POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH6 0xFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x164C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4CE6 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1795 DUP2 PUSH2 0x5981 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4D02 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1795 DUP2 PUSH2 0x5981 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4D1F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x4D2A DUP2 PUSH2 0x5981 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x4D46 JUMPI DUP3 DUP4 REVERT JUMPDEST SWAP1 DUP5 ADD SWAP1 PUSH1 0xC0 DUP3 DUP8 SUB SLT ISZERO PUSH2 0x4D59 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x4D63 PUSH1 0xC0 PUSH2 0x58F4 JUMP JUMPDEST DUP3 MLOAD DUP2 MSTORE PUSH1 0x20 DUP4 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH2 0x4D78 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x4D84 DUP9 DUP3 DUP7 ADD PUSH2 0x4A37 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH2 0x4DA5 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x4DB1 DUP9 DUP3 DUP7 ADD PUSH2 0x4915 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 DUP4 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH2 0x4DC8 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x4DD4 DUP9 DUP3 DUP7 ADD PUSH2 0x4915 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP PUSH1 0xA0 DUP4 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH2 0x4DEB JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x4DF7 DUP9 DUP3 DUP7 ADD PUSH2 0x48AE JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE POP DUP1 SWAP4 POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4E1C JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x4E27 DUP2 PUSH2 0x5981 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x4E43 JUMPI DUP3 DUP4 REVERT JUMPDEST SWAP1 DUP5 ADD SWAP1 PUSH1 0xA0 DUP3 DUP8 SUB SLT ISZERO PUSH2 0x4E56 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x4E60 PUSH1 0xA0 PUSH2 0x58F4 JUMP JUMPDEST DUP3 MLOAD DUP2 MSTORE PUSH1 0x20 DUP4 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH2 0x4E75 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x4E81 DUP9 DUP3 DUP7 ADD PUSH2 0x4A37 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 DUP4 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH2 0x4E98 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x4EA4 DUP9 DUP3 DUP7 ADD PUSH2 0x4915 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 DUP4 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH2 0x4EBB JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x4EC7 DUP9 DUP3 DUP7 ADD PUSH2 0x4915 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 DUP4 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH2 0x4EDE JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x4EEA DUP9 DUP3 DUP7 ADD PUSH2 0x48AE JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP DUP1 SWAP4 POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4F0F JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x4F1A DUP2 PUSH2 0x5981 JUMP JUMPDEST PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD MLOAD SWAP3 SWAP5 SWAP3 SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x4F41 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x4F4C DUP2 PUSH2 0x5981 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x4F5C DUP2 PUSH2 0x5981 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH2 0x4F73 DUP2 PUSH2 0x5981 JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH2 0x4F83 DUP2 PUSH2 0x5981 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x4FA8 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x4FB3 DUP2 PUSH2 0x5981 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x4FCD JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x4FD9 DUP9 DUP3 DUP10 ADD PUSH2 0x49EB JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x4F83 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x5011 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x501C DUP2 PUSH2 0x5981 JUMP JUMPDEST SWAP3 POP PUSH2 0x502A PUSH1 0x20 DUP6 ADD PUSH2 0x4CBF JUMP JUMPDEST SWAP2 POP PUSH2 0x5038 PUSH1 0x40 DUP6 ADD PUSH2 0x4CBF JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5052 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x5067 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x476F DUP5 DUP3 DUP6 ADD PUSH2 0x4915 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5084 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x1795 DUP3 PUSH2 0x49D0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x509E JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x50B6 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1795 DUP2 PUSH2 0x5996 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x50D3 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x50DE DUP2 PUSH2 0x5996 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x50EE DUP2 PUSH2 0x5981 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x510A JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x511F JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x476F DUP5 DUP3 DUP6 ADD PUSH2 0x4A7A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x513C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x5152 JUMPI DUP3 DUP4 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH1 0x40 DUP3 DUP7 SUB SLT ISZERO PUSH2 0x5165 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x40 DUP2 ADD DUP2 DUP2 LT DUP4 DUP3 GT OR ISZERO PUSH2 0x517A JUMPI INVALID JUMPDEST PUSH1 0x40 MSTORE DUP3 MLOAD PUSH2 0x5188 DUP2 PUSH2 0x5996 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP4 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH2 0x519B JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x51A7 DUP8 DUP3 DUP7 ADD PUSH2 0x4A37 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x51C7 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x51DD JUMPI DUP3 DUP4 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH1 0x40 DUP3 DUP7 SUB SLT ISZERO PUSH2 0x51F0 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x40 DUP2 ADD DUP2 DUP2 LT DUP4 DUP3 GT OR ISZERO PUSH2 0x5205 JUMPI INVALID JUMPDEST PUSH1 0x40 MSTORE DUP3 MLOAD DUP3 DUP2 GT ISZERO PUSH2 0x5216 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x5222 DUP8 DUP3 DUP7 ADD PUSH2 0x4915 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 DUP4 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH2 0x5236 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x51A7 DUP8 DUP3 DUP7 ADD PUSH2 0x4915 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5253 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x5268 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x476F DUP5 DUP3 DUP6 ADD PUSH2 0x4B43 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5285 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x529A JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x476F DUP5 DUP3 DUP6 ADD PUSH2 0x4BD6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x52BB JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x52D1 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x52DD DUP9 DUP4 DUP10 ADD PUSH2 0x4BD6 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x52F2 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x52FE DUP9 DUP4 DUP10 ADD PUSH2 0x49EB JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x5313 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x531F DUP9 DUP4 DUP10 ADD PUSH2 0x4BD6 JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x5334 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x5341 DUP8 DUP3 DUP9 ADD PUSH2 0x49EB JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x535E JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x1795 DUP3 PUSH2 0x4CBF JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x537F DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x5955 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL DUP3 MLOAD AND DUP4 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 PUSH1 0x20 DUP6 ADD MSTORE PUSH2 0x476F PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x5367 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP2 MSTORE SWAP3 SWAP1 SWAP4 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 DUP3 ADD MSTORE PUSH1 0xC0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP4 MSTORE PUSH6 0xFFFFFFFFFFFF SWAP2 DUP3 AND PUSH1 0x20 DUP5 ADD MSTORE AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x1795 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x5367 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND DUP2 MSTORE SWAP4 DUP6 AND PUSH1 0x20 DUP6 ADD MSTORE SWAP2 SWAP1 SWAP4 AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xC0 PUSH1 0xA0 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 DUP3 ADD MSTORE PUSH1 0xE0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP2 MSTORE SWAP3 DUP5 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP3 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x6E6F7420666F756E64204941737365744D617463686572000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1D SWAP1 DUP3 ADD MSTORE PUSH32 0x526F79616C746965732061726520746F6F206869676820283E35302529000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH20 0xC081CD85B1D0818D85B89DD081899481D5CD959 PUSH1 0x62 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x7472616E736665725061796F7574733A206E6F7468696E6720746F207472616E PUSH1 0x40 DUP3 ADD MSTORE PUSH4 0x39B332B9 PUSH1 0xE1 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x72696768744F726465722E74616B657220766572696669636174696F6E206661 PUSH1 0x40 DUP3 ADD MSTORE PUSH4 0x1A5B1959 PUSH1 0xE2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x12 SWAP1 DUP3 ADD MSTORE PUSH18 0x32B9319B9918903B30B63AB29032B93937B9 PUSH1 0x71 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH15 0x1B9BDD1A1A5B99C81D1BC8199A5B1B PUSH1 0x8A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH21 0x195C98CC8C081D1C985B9CD9995C8819985A5B1959 PUSH1 0x5A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH21 0x6F726967696E2066656520697320746F6F20626967 PUSH1 0x58 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x556E6B6E6F776E204F7264657220646174612074797065000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1E SWAP1 DUP3 ADD MSTORE PUSH32 0x53756D207061796F75747320427073206E6F7420657175616C20313030250000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x12 SWAP1 DUP3 ADD MSTORE PUSH18 0xC2E6E6CAE8E640C8DEDC4EE840DAC2E8C6D PUSH1 0x73 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x23 SWAP1 DUP3 ADD MSTORE PUSH32 0x6C6566744F726465722E74616B657220766572696669636174696F6E20666169 PUSH1 0x40 DUP3 ADD MSTORE PUSH3 0x1B1959 PUSH1 0xEA SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH14 0xDCDEE840CADCDEEACED040CAE8D PUSH1 0x93 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xB SWAP1 DUP3 ADD MSTORE PUSH11 0x3737BA10309036B0B5B2B9 PUSH1 0xA9 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x583F PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x5393 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x3BED DUP2 DUP6 PUSH2 0x5393 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 MSTORE DUP5 MLOAD PUSH1 0x40 PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x586D PUSH1 0xA0 DUP5 ADD DUP3 PUSH2 0x5393 JUMP JUMPDEST PUSH1 0x20 SWAP7 DUP8 ADD MLOAD PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND SWAP7 DUP5 ADD SWAP7 SWAP1 SWAP7 MSTORE POP POP SWAP2 AND PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x58C6 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x58DF JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x2635 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x590F JUMPI INVALID JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x592A JUMPI INVALID JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x5947 JUMPI INVALID JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x5970 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x5958 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xA15 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1B32 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x1B32 JUMPI PUSH1 0x0 DUP1 REVERT INVALID 0x4D PUSH6 0x74615472616E PUSH20 0x616374696F6E2875696E74323536206E6F6E6365 0x2C PUSH2 0x6464 PUSH19 0x6573732066726F6D2C62797465732066756E63 PUSH21 0x696F6E5369676E6174757265294F776E61626C653A KECCAK256 PUSH15 0x6577206F776E657220697320746865 KECCAK256 PUSH27 0x65726F206164647265737345434453413A20696E76616C69642073 PUSH10 0x676E6174757265202773 0x27 KECCAK256 PUSH23 0x616C75656F72646572207369676E617475726520766572 PUSH10 0x6669636174696F6E2065 PUSH19 0x726F72636F6E7472616374206F726465722073 PUSH10 0x676E6174757265207665 PUSH19 0x696669636174696F6E206572726F72496E6974 PUSH10 0x616C697A61626C653A20 PUSH4 0x6F6E7472 PUSH2 0x6374 KECCAK256 PUSH10 0x7320616C726561647920 PUSH10 0x6E697469616C697A6564 GASLIMIT NUMBER DIFFICULTY MSTORE8 COINBASE GASPRICE KECCAK256 PUSH10 0x6E76616C696420736967 PUSH15 0x6174757265202776272076616C7565 MSTORE8 PUSH2 0x6665 0x4D PUSH2 0x7468 GASPRICE KECCAK256 PUSH14 0x756C7469706C69636174696F6E20 PUSH16 0x766572666C6F774F776E61626C653A20 PUSH4 0x616C6C65 PUSH19 0x206973206E6F7420746865206F776E65725369 PUSH8 0x6E657220616E6420 PUSH20 0x69676E617475726520646F206E6F74206D617463 PUSH9 0xA26469706673582212 KECCAK256 0xD2 PUSH31 0xCDDF6DC922EC759FD1009325766BDD3BF64FA8DA52596FE45FD60D28E48964 PUSH20 0x6F6C634300070600330000000000000000000000 ",
          "sourceMap": "245:885:47:-:0;;;;;;;;;;;;;;;;;;;"
        },
        "deployedBytecode": {
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:34048:154",
                "statements": [
                  {
                    "nodeType": "YulBlock",
                    "src": "6:3:154",
                    "statements": []
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "65:87:154",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "75:29:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "97:6:154"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "84:12:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "84:20:154"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "75:5:154"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "140:5:154"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_t_address",
                              "nodeType": "YulIdentifier",
                              "src": "113:26:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "113:33:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "113:33:154"
                        }
                      ]
                    },
                    "name": "abi_decode_t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "44:6:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "55:5:154",
                        "type": ""
                      }
                    ],
                    "src": "14:138:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "236:598:154",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "285:24:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "array",
                                      "nodeType": "YulIdentifier",
                                      "src": "294:5:154"
                                    },
                                    {
                                      "name": "array",
                                      "nodeType": "YulIdentifier",
                                      "src": "301:5:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "287:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "287:20:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "287:20:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "264:6:154"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "272:4:154",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "260:3:154"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "260:17:154"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "279:3:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "256:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "256:27:154"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "249:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "249:35:154"
                          },
                          "nodeType": "YulIf",
                          "src": "246:2:154"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "318:23:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "334:6:154"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "328:5:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "328:13:154"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "322:2:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "350:14:154",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "360:4:154",
                            "type": "",
                            "value": "0x20"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "354:2:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "373:74:154",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "443:2:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "array_allocation_size_t_array$_t_bytes_$dyn",
                                  "nodeType": "YulIdentifier",
                                  "src": "399:43:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "399:47:154"
                              }
                            ],
                            "functionName": {
                              "name": "allocateMemory",
                              "nodeType": "YulIdentifier",
                              "src": "384:14:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "384:63:154"
                          },
                          "variables": [
                            {
                              "name": "dst",
                              "nodeType": "YulTypedName",
                              "src": "377:3:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "456:16:154",
                          "value": {
                            "name": "dst",
                            "nodeType": "YulIdentifier",
                            "src": "469:3:154"
                          },
                          "variables": [
                            {
                              "name": "dst_1",
                              "nodeType": "YulTypedName",
                              "src": "460:5:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "dst",
                                "nodeType": "YulIdentifier",
                                "src": "488:3:154"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "493:2:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "481:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "481:15:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "481:15:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "505:19:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "dst",
                                "nodeType": "YulIdentifier",
                                "src": "516:3:154"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "521:2:154"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "512:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "512:12:154"
                          },
                          "variableNames": [
                            {
                              "name": "dst",
                              "nodeType": "YulIdentifier",
                              "src": "505:3:154"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "533:26:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "548:6:154"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "556:2:154"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "544:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "544:15:154"
                          },
                          "variables": [
                            {
                              "name": "src",
                              "nodeType": "YulTypedName",
                              "src": "537:3:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "568:14:154",
                          "value": {
                            "name": "array",
                            "nodeType": "YulIdentifier",
                            "src": "577:5:154"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "572:1:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "636:169:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "657:3:154"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "name": "offset",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "700:6:154"
                                                },
                                                {
                                                  "arguments": [
                                                    {
                                                      "name": "src",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "714:3:154"
                                                    }
                                                  ],
                                                  "functionName": {
                                                    "name": "mload",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "708:5:154"
                                                  },
                                                  "nodeType": "YulFunctionCall",
                                                  "src": "708:10:154"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "add",
                                                "nodeType": "YulIdentifier",
                                                "src": "696:3:154"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "696:23:154"
                                            },
                                            {
                                              "name": "_2",
                                              "nodeType": "YulIdentifier",
                                              "src": "721:2:154"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "692:3:154"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "692:32:154"
                                        },
                                        {
                                          "name": "end",
                                          "nodeType": "YulIdentifier",
                                          "src": "726:3:154"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "abi_decode_t_bytes_fromMemory",
                                        "nodeType": "YulIdentifier",
                                        "src": "662:29:154"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "662:68:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "650:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "650:81:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "650:81:154"
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "744:19:154",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "755:3:154"
                                    },
                                    {
                                      "name": "_2",
                                      "nodeType": "YulIdentifier",
                                      "src": "760:2:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "751:3:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "751:12:154"
                                },
                                "variableNames": [
                                  {
                                    "name": "dst",
                                    "nodeType": "YulIdentifier",
                                    "src": "744:3:154"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "776:19:154",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "src",
                                      "nodeType": "YulIdentifier",
                                      "src": "787:3:154"
                                    },
                                    {
                                      "name": "_2",
                                      "nodeType": "YulIdentifier",
                                      "src": "792:2:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "783:3:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "783:12:154"
                                },
                                "variableNames": [
                                  {
                                    "name": "src",
                                    "nodeType": "YulIdentifier",
                                    "src": "776:3:154"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "602:1:154"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "605:2:154"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "599:2:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "599:9:154"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "609:18:154",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "611:14:154",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "620:1:154"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "623:1:154",
                                      "type": "",
                                      "value": "1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "616:3:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "616:9:154"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "611:1:154"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "595:3:154",
                            "statements": []
                          },
                          "src": "591:214:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "814:14:154",
                          "value": {
                            "name": "dst_1",
                            "nodeType": "YulIdentifier",
                            "src": "823:5:154"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nodeType": "YulIdentifier",
                              "src": "814:5:154"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_t_array$_t_bytes_$dyn_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "210:6:154",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "218:3:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "226:5:154",
                        "type": ""
                      }
                    ],
                    "src": "157:677:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "925:1220:154",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "974:24:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "array",
                                      "nodeType": "YulIdentifier",
                                      "src": "983:5:154"
                                    },
                                    {
                                      "name": "array",
                                      "nodeType": "YulIdentifier",
                                      "src": "990:5:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "976:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "976:20:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "976:20:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "953:6:154"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "961:4:154",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "949:3:154"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "949:17:154"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "968:3:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "945:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "945:27:154"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "938:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "938:35:154"
                          },
                          "nodeType": "YulIf",
                          "src": "935:2:154"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1007:23:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "1023:6:154"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "1017:5:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1017:13:154"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "1011:2:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1039:14:154",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1049:4:154",
                            "type": "",
                            "value": "0x20"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "1043:2:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1062:74:154",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "1132:2:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "array_allocation_size_t_array$_t_bytes_$dyn",
                                  "nodeType": "YulIdentifier",
                                  "src": "1088:43:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1088:47:154"
                              }
                            ],
                            "functionName": {
                              "name": "allocateMemory",
                              "nodeType": "YulIdentifier",
                              "src": "1073:14:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1073:63:154"
                          },
                          "variables": [
                            {
                              "name": "dst",
                              "nodeType": "YulTypedName",
                              "src": "1066:3:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1145:16:154",
                          "value": {
                            "name": "dst",
                            "nodeType": "YulIdentifier",
                            "src": "1158:3:154"
                          },
                          "variables": [
                            {
                              "name": "dst_1",
                              "nodeType": "YulTypedName",
                              "src": "1149:5:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "dst",
                                "nodeType": "YulIdentifier",
                                "src": "1177:3:154"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "1182:2:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1170:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1170:15:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1170:15:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1194:19:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "dst",
                                "nodeType": "YulIdentifier",
                                "src": "1205:3:154"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "1210:2:154"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1201:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1201:12:154"
                          },
                          "variableNames": [
                            {
                              "name": "dst",
                              "nodeType": "YulIdentifier",
                              "src": "1194:3:154"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1222:26:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "1237:6:154"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "1245:2:154"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1233:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1233:15:154"
                          },
                          "variables": [
                            {
                              "name": "src",
                              "nodeType": "YulTypedName",
                              "src": "1226:3:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1257:14:154",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1267:4:154",
                            "type": "",
                            "value": "0x40"
                          },
                          "variables": [
                            {
                              "name": "_3",
                              "nodeType": "YulTypedName",
                              "src": "1261:2:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1326:24:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "array",
                                      "nodeType": "YulIdentifier",
                                      "src": "1335:5:154"
                                    },
                                    {
                                      "name": "array",
                                      "nodeType": "YulIdentifier",
                                      "src": "1342:5:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1328:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1328:20:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1328:20:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "1294:6:154"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "name": "_1",
                                            "nodeType": "YulIdentifier",
                                            "src": "1306:2:154"
                                          },
                                          {
                                            "name": "_3",
                                            "nodeType": "YulIdentifier",
                                            "src": "1310:2:154"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "mul",
                                          "nodeType": "YulIdentifier",
                                          "src": "1302:3:154"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1302:11:154"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1290:3:154"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1290:24:154"
                                  },
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "1316:2:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1286:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1286:33:154"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "1321:3:154"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1283:2:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1283:42:154"
                          },
                          "nodeType": "YulIf",
                          "src": "1280:2:154"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1359:14:154",
                          "value": {
                            "name": "array",
                            "nodeType": "YulIdentifier",
                            "src": "1368:5:154"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "1363:1:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1427:689:154",
                            "statements": [
                              {
                                "body": {
                                  "nodeType": "YulBlock",
                                  "src": "1467:24:154",
                                  "statements": [
                                    {
                                      "expression": {
                                        "arguments": [
                                          {
                                            "name": "array",
                                            "nodeType": "YulIdentifier",
                                            "src": "1476:5:154"
                                          },
                                          {
                                            "name": "array",
                                            "nodeType": "YulIdentifier",
                                            "src": "1483:5:154"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "revert",
                                          "nodeType": "YulIdentifier",
                                          "src": "1469:6:154"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1469:20:154"
                                      },
                                      "nodeType": "YulExpressionStatement",
                                      "src": "1469:20:154"
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "end",
                                          "nodeType": "YulIdentifier",
                                          "src": "1452:3:154"
                                        },
                                        {
                                          "name": "src",
                                          "nodeType": "YulIdentifier",
                                          "src": "1457:3:154"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "sub",
                                        "nodeType": "YulIdentifier",
                                        "src": "1448:3:154"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1448:13:154"
                                    },
                                    {
                                      "name": "_3",
                                      "nodeType": "YulIdentifier",
                                      "src": "1463:2:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "slt",
                                    "nodeType": "YulIdentifier",
                                    "src": "1444:3:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1444:22:154"
                                },
                                "nodeType": "YulIf",
                                "src": "1441:2:154"
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "1504:23:154",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "_3",
                                      "nodeType": "YulIdentifier",
                                      "src": "1524:2:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mload",
                                    "nodeType": "YulIdentifier",
                                    "src": "1518:5:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1518:9:154"
                                },
                                "variables": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulTypedName",
                                    "src": "1508:6:154",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "1540:33:154",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "memPtr",
                                      "nodeType": "YulIdentifier",
                                      "src": "1562:6:154"
                                    },
                                    {
                                      "name": "_3",
                                      "nodeType": "YulIdentifier",
                                      "src": "1570:2:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "1558:3:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1558:15:154"
                                },
                                "variables": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulTypedName",
                                    "src": "1544:10:154",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "body": {
                                  "nodeType": "YulBlock",
                                  "src": "1652:13:154",
                                  "statements": [
                                    {
                                      "expression": {
                                        "arguments": [],
                                        "functionName": {
                                          "name": "invalid",
                                          "nodeType": "YulIdentifier",
                                          "src": "1654:7:154"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1654:9:154"
                                      },
                                      "nodeType": "YulExpressionStatement",
                                      "src": "1654:9:154"
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "newFreePtr",
                                          "nodeType": "YulIdentifier",
                                          "src": "1595:10:154"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1607:18:154",
                                          "type": "",
                                          "value": "0xffffffffffffffff"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "gt",
                                        "nodeType": "YulIdentifier",
                                        "src": "1592:2:154"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1592:34:154"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "newFreePtr",
                                          "nodeType": "YulIdentifier",
                                          "src": "1631:10:154"
                                        },
                                        {
                                          "name": "memPtr",
                                          "nodeType": "YulIdentifier",
                                          "src": "1643:6:154"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "lt",
                                        "nodeType": "YulIdentifier",
                                        "src": "1628:2:154"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1628:22:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "or",
                                    "nodeType": "YulIdentifier",
                                    "src": "1589:2:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1589:62:154"
                                },
                                "nodeType": "YulIf",
                                "src": "1586:2:154"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "_3",
                                      "nodeType": "YulIdentifier",
                                      "src": "1685:2:154"
                                    },
                                    {
                                      "name": "newFreePtr",
                                      "nodeType": "YulIdentifier",
                                      "src": "1689:10:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "1678:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1678:22:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1678:22:154"
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "1713:23:154",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "src",
                                      "nodeType": "YulIdentifier",
                                      "src": "1732:3:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mload",
                                    "nodeType": "YulIdentifier",
                                    "src": "1726:5:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1726:10:154"
                                },
                                "variables": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulTypedName",
                                    "src": "1717:5:154",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value",
                                      "nodeType": "YulIdentifier",
                                      "src": "1776:5:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "validator_revert_t_address",
                                    "nodeType": "YulIdentifier",
                                    "src": "1749:26:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1749:33:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1749:33:154"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "memPtr",
                                      "nodeType": "YulIdentifier",
                                      "src": "1802:6:154"
                                    },
                                    {
                                      "name": "value",
                                      "nodeType": "YulIdentifier",
                                      "src": "1810:5:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "1795:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1795:21:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1795:21:154"
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "1829:34:154",
                                "value": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "src",
                                          "nodeType": "YulIdentifier",
                                          "src": "1854:3:154"
                                        },
                                        {
                                          "name": "_2",
                                          "nodeType": "YulIdentifier",
                                          "src": "1859:2:154"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "1850:3:154"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1850:12:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mload",
                                    "nodeType": "YulIdentifier",
                                    "src": "1844:5:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1844:19:154"
                                },
                                "variables": [
                                  {
                                    "name": "value_1",
                                    "nodeType": "YulTypedName",
                                    "src": "1833:7:154",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "body": {
                                  "nodeType": "YulBlock",
                                  "src": "1941:24:154",
                                  "statements": [
                                    {
                                      "expression": {
                                        "arguments": [
                                          {
                                            "name": "array",
                                            "nodeType": "YulIdentifier",
                                            "src": "1950:5:154"
                                          },
                                          {
                                            "name": "array",
                                            "nodeType": "YulIdentifier",
                                            "src": "1957:5:154"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "revert",
                                          "nodeType": "YulIdentifier",
                                          "src": "1943:6:154"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1943:20:154"
                                      },
                                      "nodeType": "YulExpressionStatement",
                                      "src": "1943:20:154"
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "value_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "1889:7:154"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "value_1",
                                              "nodeType": "YulIdentifier",
                                              "src": "1902:7:154"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "1911:26:154",
                                              "type": "",
                                              "value": "0xffffffffffffffffffffffff"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "and",
                                            "nodeType": "YulIdentifier",
                                            "src": "1898:3:154"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "1898:40:154"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "eq",
                                        "nodeType": "YulIdentifier",
                                        "src": "1886:2:154"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1886:53:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "iszero",
                                    "nodeType": "YulIdentifier",
                                    "src": "1879:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1879:61:154"
                                },
                                "nodeType": "YulIf",
                                "src": "1876:2:154"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "memPtr",
                                          "nodeType": "YulIdentifier",
                                          "src": "1989:6:154"
                                        },
                                        {
                                          "name": "_2",
                                          "nodeType": "YulIdentifier",
                                          "src": "1997:2:154"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "1985:3:154"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1985:15:154"
                                    },
                                    {
                                      "name": "value_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "2002:7:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "1978:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1978:32:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1978:32:154"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "2030:3:154"
                                    },
                                    {
                                      "name": "memPtr",
                                      "nodeType": "YulIdentifier",
                                      "src": "2035:6:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "2023:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2023:19:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2023:19:154"
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "2055:19:154",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "2066:3:154"
                                    },
                                    {
                                      "name": "_2",
                                      "nodeType": "YulIdentifier",
                                      "src": "2071:2:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "2062:3:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2062:12:154"
                                },
                                "variableNames": [
                                  {
                                    "name": "dst",
                                    "nodeType": "YulIdentifier",
                                    "src": "2055:3:154"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "2087:19:154",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "src",
                                      "nodeType": "YulIdentifier",
                                      "src": "2098:3:154"
                                    },
                                    {
                                      "name": "_3",
                                      "nodeType": "YulIdentifier",
                                      "src": "2103:2:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "2094:3:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2094:12:154"
                                },
                                "variableNames": [
                                  {
                                    "name": "src",
                                    "nodeType": "YulIdentifier",
                                    "src": "2087:3:154"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "1393:1:154"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "1396:2:154"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "1390:2:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1390:9:154"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "1400:18:154",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "1402:14:154",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "1411:1:154"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1414:1:154",
                                      "type": "",
                                      "value": "1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "1407:3:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1407:9:154"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "1402:1:154"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "1386:3:154",
                            "statements": []
                          },
                          "src": "1382:734:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2125:14:154",
                          "value": {
                            "name": "dst_1",
                            "nodeType": "YulIdentifier",
                            "src": "2134:5:154"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nodeType": "YulIdentifier",
                              "src": "2125:5:154"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_t_array$_t_struct$_Part_$dyn_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "899:6:154",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "907:3:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "915:5:154",
                        "type": ""
                      }
                    ],
                    "src": "839:1306:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2209:107:154",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "2219:22:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "2234:6:154"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "2228:5:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2228:13:154"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "2219:5:154"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2294:16:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2303:1:154",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2306:1:154",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2296:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2296:12:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2296:12:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "2263:5:154"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "2284:5:154"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nodeType": "YulIdentifier",
                                          "src": "2277:6:154"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2277:13:154"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "2270:6:154"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2270:21:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "2260:2:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2260:32:154"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "2253:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2253:40:154"
                          },
                          "nodeType": "YulIf",
                          "src": "2250:2:154"
                        }
                      ]
                    },
                    "name": "abi_decode_t_bool_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "2188:6:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "2199:5:154",
                        "type": ""
                      }
                    ],
                    "src": "2150:166:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2371:86:154",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "2381:29:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "2403:6:154"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2390:12:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2390:20:154"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "2381:5:154"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "2445:5:154"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_t_bytes4",
                              "nodeType": "YulIdentifier",
                              "src": "2419:25:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2419:32:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2419:32:154"
                        }
                      ]
                    },
                    "name": "abi_decode_t_bytes4",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "2350:6:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "2361:5:154",
                        "type": ""
                      }
                    ],
                    "src": "2321:136:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2516:431:154",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2565:24:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "array",
                                      "nodeType": "YulIdentifier",
                                      "src": "2574:5:154"
                                    },
                                    {
                                      "name": "array",
                                      "nodeType": "YulIdentifier",
                                      "src": "2581:5:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2567:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2567:20:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2567:20:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "2544:6:154"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2552:4:154",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "2540:3:154"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2540:17:154"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "2559:3:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "2536:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2536:27:154"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "2529:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2529:35:154"
                          },
                          "nodeType": "YulIf",
                          "src": "2526:2:154"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2598:30:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "2621:6:154"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2608:12:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2608:20:154"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "2602:2:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2637:64:154",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "2697:2:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "array_allocation_size_t_bytes",
                                  "nodeType": "YulIdentifier",
                                  "src": "2667:29:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2667:33:154"
                              }
                            ],
                            "functionName": {
                              "name": "allocateMemory",
                              "nodeType": "YulIdentifier",
                              "src": "2652:14:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2652:49:154"
                          },
                          "variables": [
                            {
                              "name": "array_1",
                              "nodeType": "YulTypedName",
                              "src": "2641:7:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "array_1",
                                "nodeType": "YulIdentifier",
                                "src": "2717:7:154"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "2726:2:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2710:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2710:19:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2710:19:154"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2777:24:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "array",
                                      "nodeType": "YulIdentifier",
                                      "src": "2786:5:154"
                                    },
                                    {
                                      "name": "array",
                                      "nodeType": "YulIdentifier",
                                      "src": "2793:5:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2779:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2779:20:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2779:20:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "2752:6:154"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "2760:2:154"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "2748:3:154"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2748:15:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2765:4:154",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2744:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2744:26:154"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "2772:3:154"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "2741:2:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2741:35:154"
                          },
                          "nodeType": "YulIf",
                          "src": "2738:2:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "array_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "2827:7:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2836:4:154",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2823:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2823:18:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "2847:6:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2855:4:154",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2843:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2843:17:154"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "2862:2:154"
                              }
                            ],
                            "functionName": {
                              "name": "calldatacopy",
                              "nodeType": "YulIdentifier",
                              "src": "2810:12:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2810:55:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2810:55:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "array_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "2889:7:154"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "2898:2:154"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "2885:3:154"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2885:16:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2903:4:154",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2881:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2881:27:154"
                              },
                              {
                                "name": "array",
                                "nodeType": "YulIdentifier",
                                "src": "2910:5:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2874:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2874:42:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2874:42:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2925:16:154",
                          "value": {
                            "name": "array_1",
                            "nodeType": "YulIdentifier",
                            "src": "2934:7:154"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nodeType": "YulIdentifier",
                              "src": "2925:5:154"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_t_bytes",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "2490:6:154",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "2498:3:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "2506:5:154",
                        "type": ""
                      }
                    ],
                    "src": "2462:485:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3017:382:154",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3066:24:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "array",
                                      "nodeType": "YulIdentifier",
                                      "src": "3075:5:154"
                                    },
                                    {
                                      "name": "array",
                                      "nodeType": "YulIdentifier",
                                      "src": "3082:5:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3068:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3068:20:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3068:20:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "3045:6:154"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3053:4:154",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "3041:3:154"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3041:17:154"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "3060:3:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "3037:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3037:27:154"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "3030:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3030:35:154"
                          },
                          "nodeType": "YulIf",
                          "src": "3027:2:154"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3099:23:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "3115:6:154"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "3109:5:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3109:13:154"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "3103:2:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3131:64:154",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "3191:2:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "array_allocation_size_t_bytes",
                                  "nodeType": "YulIdentifier",
                                  "src": "3161:29:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3161:33:154"
                              }
                            ],
                            "functionName": {
                              "name": "allocateMemory",
                              "nodeType": "YulIdentifier",
                              "src": "3146:14:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3146:49:154"
                          },
                          "variables": [
                            {
                              "name": "array_1",
                              "nodeType": "YulTypedName",
                              "src": "3135:7:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "array_1",
                                "nodeType": "YulIdentifier",
                                "src": "3211:7:154"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "3220:2:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3204:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3204:19:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3204:19:154"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3271:24:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "array",
                                      "nodeType": "YulIdentifier",
                                      "src": "3280:5:154"
                                    },
                                    {
                                      "name": "array",
                                      "nodeType": "YulIdentifier",
                                      "src": "3287:5:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3273:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3273:20:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3273:20:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "3246:6:154"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "3254:2:154"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "3242:3:154"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3242:15:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3259:4:154",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3238:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3238:26:154"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "3266:3:154"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "3235:2:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3235:35:154"
                          },
                          "nodeType": "YulIf",
                          "src": "3232:2:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "3330:6:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3338:4:154",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3326:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3326:17:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "array_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "3349:7:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3358:4:154",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3345:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3345:18:154"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "3365:2:154"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory",
                              "nodeType": "YulIdentifier",
                              "src": "3304:21:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3304:64:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3304:64:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3377:16:154",
                          "value": {
                            "name": "array_1",
                            "nodeType": "YulIdentifier",
                            "src": "3386:7:154"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nodeType": "YulIdentifier",
                              "src": "3377:5:154"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_t_bytes_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "2991:6:154",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "2999:3:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "3007:5:154",
                        "type": ""
                      }
                    ],
                    "src": "2952:447:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3479:94:154",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3519:24:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value",
                                      "nodeType": "YulIdentifier",
                                      "src": "3528:5:154"
                                    },
                                    {
                                      "name": "value",
                                      "nodeType": "YulIdentifier",
                                      "src": "3535:5:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3521:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3521:20:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3521:20:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "3500:3:154"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "3505:6:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "3496:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3496:16:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3514:3:154",
                                "type": "",
                                "value": "480"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "3492:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3492:26:154"
                          },
                          "nodeType": "YulIf",
                          "src": "3489:2:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3552:15:154",
                          "value": {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "3561:6:154"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "3552:5:154"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_t_struct$_AcceptBid_calldata",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "3453:6:154",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "3461:3:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "3469:5:154",
                        "type": ""
                      }
                    ],
                    "src": "3404:169:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3643:1062:154",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3653:14:154",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3663:4:154",
                            "type": "",
                            "value": "0x40"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "3657:2:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3708:24:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value",
                                      "nodeType": "YulIdentifier",
                                      "src": "3717:5:154"
                                    },
                                    {
                                      "name": "value",
                                      "nodeType": "YulIdentifier",
                                      "src": "3724:5:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3710:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3710:20:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3710:20:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "3687:3:154"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3692:9:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "3683:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3683:19:154"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "3704:2:154"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "3679:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3679:28:154"
                          },
                          "nodeType": "YulIf",
                          "src": "3676:2:154"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3741:23:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "3761:2:154"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "3755:5:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3755:9:154"
                          },
                          "variables": [
                            {
                              "name": "memPtr",
                              "nodeType": "YulTypedName",
                              "src": "3745:6:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3773:33:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "3795:6:154"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "3803:2:154"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3791:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3791:15:154"
                          },
                          "variables": [
                            {
                              "name": "newFreePtr",
                              "nodeType": "YulTypedName",
                              "src": "3777:10:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3815:28:154",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3825:18:154",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "3819:2:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3902:13:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "invalid",
                                    "nodeType": "YulIdentifier",
                                    "src": "3904:7:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3904:9:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3904:9:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "3861:10:154"
                                  },
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "3873:2:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "3858:2:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3858:18:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "3881:10:154"
                                  },
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "3893:6:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "3878:2:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3878:22:154"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "3855:2:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3855:46:154"
                          },
                          "nodeType": "YulIf",
                          "src": "3852:2:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "3931:2:154"
                              },
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "3935:10:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3924:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3924:22:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3924:22:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3955:15:154",
                          "value": {
                            "name": "memPtr",
                            "nodeType": "YulIdentifier",
                            "src": "3964:6:154"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "3955:5:154"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3979:37:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4006:9:154"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "3993:12:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3993:23:154"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "3983:6:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4043:16:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4052:1:154",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4055:1:154",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4045:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4045:12:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4045:12:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "4031:6:154"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "4039:2:154"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "4028:2:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4028:14:154"
                          },
                          "nodeType": "YulIf",
                          "src": "4025:2:154"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4068:32:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4082:9:154"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "4093:6:154"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4078:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4078:22:154"
                          },
                          "variables": [
                            {
                              "name": "_3",
                              "nodeType": "YulTypedName",
                              "src": "4072:2:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4134:16:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4143:1:154",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4146:1:154",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4136:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4136:12:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4136:12:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "4120:3:154"
                                  },
                                  {
                                    "name": "_3",
                                    "nodeType": "YulIdentifier",
                                    "src": "4125:2:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "4116:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4116:12:154"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "4130:2:154"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "4112:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4112:21:154"
                          },
                          "nodeType": "YulIf",
                          "src": "4109:2:154"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4159:36:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "4183:6:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4191:3:154",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4179:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4179:16:154"
                          },
                          "variables": [
                            {
                              "name": "newFreePtr_1",
                              "nodeType": "YulTypedName",
                              "src": "4163:12:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4262:13:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "invalid",
                                    "nodeType": "YulIdentifier",
                                    "src": "4264:7:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4264:9:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4264:9:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "4213:12:154"
                                  },
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "4227:2:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "4210:2:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4210:20:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "4235:12:154"
                                  },
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "4249:10:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "4232:2:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4232:28:154"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "4207:2:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4207:54:154"
                          },
                          "nodeType": "YulIf",
                          "src": "4204:2:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "4291:2:154"
                              },
                              {
                                "name": "newFreePtr_1",
                                "nodeType": "YulIdentifier",
                                "src": "4295:12:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4284:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4284:24:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4284:24:154"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4317:31:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "_3",
                                "nodeType": "YulIdentifier",
                                "src": "4345:2:154"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "4332:12:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4332:16:154"
                          },
                          "variables": [
                            {
                              "name": "value_1",
                              "nodeType": "YulTypedName",
                              "src": "4321:7:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "4383:7:154"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_t_bytes4",
                              "nodeType": "YulIdentifier",
                              "src": "4357:25:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4357:34:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4357:34:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "4407:10:154"
                              },
                              {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "4419:7:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4400:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4400:27:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4400:27:154"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4436:41:154",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_3",
                                    "nodeType": "YulIdentifier",
                                    "src": "4469:2:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4473:2:154",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4465:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4465:11:154"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "4452:12:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4452:25:154"
                          },
                          "variables": [
                            {
                              "name": "offset_1",
                              "nodeType": "YulTypedName",
                              "src": "4440:8:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4506:16:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4515:1:154",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4518:1:154",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4508:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4508:12:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4508:12:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_1",
                                "nodeType": "YulIdentifier",
                                "src": "4492:8:154"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "4502:2:154"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "4489:2:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4489:16:154"
                          },
                          "nodeType": "YulIf",
                          "src": "4486:2:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "4542:6:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4550:2:154",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4538:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4538:15:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_3",
                                        "nodeType": "YulIdentifier",
                                        "src": "4578:2:154"
                                      },
                                      {
                                        "name": "offset_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "4582:8:154"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4574:3:154"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4574:17:154"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "4593:3:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_bytes",
                                  "nodeType": "YulIdentifier",
                                  "src": "4555:18:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4555:42:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4531:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4531:67:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4531:67:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "4614:6:154"
                              },
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "4622:10:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4607:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4607:26:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4607:26:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "4653:6:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4661:2:154",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4649:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4649:15:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "4683:9:154"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4694:2:154",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4679:3:154"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4679:18:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "4666:12:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4666:32:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4642:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4642:57:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4642:57:154"
                        }
                      ]
                    },
                    "name": "abi_decode_t_struct$_Asset",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3614:9:154",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "3625:3:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "3633:5:154",
                        "type": ""
                      }
                    ],
                    "src": "3578:1127:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4787:792:154",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4831:24:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value",
                                      "nodeType": "YulIdentifier",
                                      "src": "4840:5:154"
                                    },
                                    {
                                      "name": "value",
                                      "nodeType": "YulIdentifier",
                                      "src": "4847:5:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4833:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4833:20:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4833:20:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "4808:3:154"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4813:9:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "4804:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4804:19:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4825:4:154",
                                "type": "",
                                "value": "0x60"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "4800:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4800:30:154"
                          },
                          "nodeType": "YulIf",
                          "src": "4797:2:154"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4864:23:154",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4884:2:154",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "4878:5:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4878:9:154"
                          },
                          "variables": [
                            {
                              "name": "memPtr",
                              "nodeType": "YulTypedName",
                              "src": "4868:6:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4896:35:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "4918:6:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4926:4:154",
                                "type": "",
                                "value": "0x60"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4914:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4914:17:154"
                          },
                          "variables": [
                            {
                              "name": "newFreePtr",
                              "nodeType": "YulTypedName",
                              "src": "4900:10:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4940:28:154",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4950:18:154",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "4944:2:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5027:13:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "invalid",
                                    "nodeType": "YulIdentifier",
                                    "src": "5029:7:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5029:9:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5029:9:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "4986:10:154"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "4998:2:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "4983:2:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4983:18:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "5006:10:154"
                                  },
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "5018:6:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "5003:2:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5003:22:154"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "4980:2:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4980:46:154"
                          },
                          "nodeType": "YulIf",
                          "src": "4977:2:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5056:2:154",
                                "type": "",
                                "value": "64"
                              },
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "5060:10:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5049:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5049:22:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5049:22:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5080:15:154",
                          "value": {
                            "name": "memPtr",
                            "nodeType": "YulIdentifier",
                            "src": "5089:6:154"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "5080:5:154"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5104:30:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5124:9:154"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "5118:5:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5118:16:154"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "5108:6:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5161:16:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5170:1:154",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5173:1:154",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "5163:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5163:12:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5163:12:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "5149:6:154"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "5157:2:154"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "5146:2:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5146:14:154"
                          },
                          "nodeType": "YulIf",
                          "src": "5143:2:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "5193:6:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "5256:9:154"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "5267:6:154"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5252:3:154"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5252:22:154"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "5276:3:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_array$_t_struct$_Part_$dyn_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "5201:50:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5201:79:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5186:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5186:95:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5186:95:154"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5290:41:154",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5316:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5327:2:154",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5312:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5312:18:154"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "5306:5:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5306:25:154"
                          },
                          "variables": [
                            {
                              "name": "offset_1",
                              "nodeType": "YulTypedName",
                              "src": "5294:8:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5360:16:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5369:1:154",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5372:1:154",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "5362:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5362:12:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5362:12:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_1",
                                "nodeType": "YulIdentifier",
                                "src": "5346:8:154"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "5356:2:154"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "5343:2:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5343:16:154"
                          },
                          "nodeType": "YulIf",
                          "src": "5340:2:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "5396:6:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5404:2:154",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5392:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5392:15:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "5464:9:154"
                                      },
                                      {
                                        "name": "offset_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "5475:8:154"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5460:3:154"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5460:24:154"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "5486:3:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_array$_t_struct$_Part_$dyn_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "5409:50:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5409:81:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5385:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5385:106:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5385:106:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "5511:6:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5519:2:154",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5507:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5507:15:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "5557:9:154"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5568:2:154",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5553:3:154"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5553:18:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_bool_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "5524:28:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5524:48:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5500:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5500:73:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5500:73:154"
                        }
                      ]
                    },
                    "name": "abi_decode_t_struct$_DataV2_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4758:9:154",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "4769:3:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "4777:5:154",
                        "type": ""
                      }
                    ],
                    "src": "4710:869:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5649:1157:154",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5659:16:154",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5669:6:154",
                            "type": "",
                            "value": "0x0120"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "5663:2:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5716:24:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value",
                                      "nodeType": "YulIdentifier",
                                      "src": "5725:5:154"
                                    },
                                    {
                                      "name": "value",
                                      "nodeType": "YulIdentifier",
                                      "src": "5732:5:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "5718:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5718:20:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5718:20:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "5695:3:154"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5700:9:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "5691:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5691:19:154"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "5712:2:154"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "5687:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5687:28:154"
                          },
                          "nodeType": "YulIf",
                          "src": "5684:2:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5749:27:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "5773:2:154"
                              }
                            ],
                            "functionName": {
                              "name": "allocateMemory",
                              "nodeType": "YulIdentifier",
                              "src": "5758:14:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5758:18:154"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "5749:5:154"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "5792:5:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5820:9:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_address",
                                  "nodeType": "YulIdentifier",
                                  "src": "5799:20:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5799:31:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5785:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5785:46:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5785:46:154"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5840:46:154",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5871:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5882:2:154",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5867:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5867:18:154"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "5854:12:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5854:32:154"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "5844:6:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5895:28:154",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5905:18:154",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "5899:2:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5950:16:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5959:1:154",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5962:1:154",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "5952:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5952:12:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5952:12:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "5938:6:154"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "5946:2:154"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "5935:2:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5935:14:154"
                          },
                          "nodeType": "YulIf",
                          "src": "5932:2:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "5986:5:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5993:2:154",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5982:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5982:14:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "6029:9:154"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "6040:6:154"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "6025:3:154"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6025:22:154"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "6049:3:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_struct$_Asset",
                                  "nodeType": "YulIdentifier",
                                  "src": "5998:26:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5998:55:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5975:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5975:79:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5975:79:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "6074:5:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6081:2:154",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6070:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6070:14:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "6111:9:154"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6122:2:154",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "6107:3:154"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6107:18:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_address",
                                  "nodeType": "YulIdentifier",
                                  "src": "6086:20:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6086:40:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6063:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6063:64:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6063:64:154"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6136:48:154",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6169:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6180:2:154",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6165:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6165:18:154"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "6152:12:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6152:32:154"
                          },
                          "variables": [
                            {
                              "name": "offset_1",
                              "nodeType": "YulTypedName",
                              "src": "6140:8:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "6213:16:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6222:1:154",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6225:1:154",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "6215:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6215:12:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "6215:12:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_1",
                                "nodeType": "YulIdentifier",
                                "src": "6199:8:154"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "6209:2:154"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "6196:2:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6196:16:154"
                          },
                          "nodeType": "YulIf",
                          "src": "6193:2:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "6249:5:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6256:2:154",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6245:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6245:14:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "6292:9:154"
                                      },
                                      {
                                        "name": "offset_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "6303:8:154"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "6288:3:154"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6288:24:154"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "6314:3:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_struct$_Asset",
                                  "nodeType": "YulIdentifier",
                                  "src": "6261:26:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6261:57:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6238:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6238:81:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6238:81:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "6339:5:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6346:3:154",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6335:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6335:15:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "6369:9:154"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6380:3:154",
                                        "type": "",
                                        "value": "128"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "6365:3:154"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6365:19:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "6352:12:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6352:33:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6328:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6328:58:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6328:58:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "6406:5:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6413:3:154",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6402:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6402:15:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "6436:9:154"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6447:3:154",
                                        "type": "",
                                        "value": "160"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "6432:3:154"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6432:19:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "6419:12:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6419:33:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6395:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6395:58:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6395:58:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "6473:5:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6480:3:154",
                                    "type": "",
                                    "value": "192"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6469:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6469:15:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "6503:9:154"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6514:3:154",
                                        "type": "",
                                        "value": "192"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "6499:3:154"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6499:19:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "6486:12:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6486:33:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6462:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6462:58:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6462:58:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "6540:5:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6547:3:154",
                                    "type": "",
                                    "value": "224"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6536:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6536:15:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "6577:9:154"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6588:3:154",
                                        "type": "",
                                        "value": "224"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "6573:3:154"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6573:19:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_bytes4",
                                  "nodeType": "YulIdentifier",
                                  "src": "6553:19:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6553:40:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6529:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6529:65:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6529:65:154"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6603:13:154",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6613:3:154",
                            "type": "",
                            "value": "256"
                          },
                          "variables": [
                            {
                              "name": "_3",
                              "nodeType": "YulTypedName",
                              "src": "6607:2:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6625:48:154",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6658:9:154"
                                  },
                                  {
                                    "name": "_3",
                                    "nodeType": "YulIdentifier",
                                    "src": "6669:2:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6654:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6654:18:154"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "6641:12:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6641:32:154"
                          },
                          "variables": [
                            {
                              "name": "offset_2",
                              "nodeType": "YulTypedName",
                              "src": "6629:8:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "6702:16:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6711:1:154",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6714:1:154",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "6704:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6704:12:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "6704:12:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_2",
                                "nodeType": "YulIdentifier",
                                "src": "6688:8:154"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "6698:2:154"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "6685:2:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6685:16:154"
                          },
                          "nodeType": "YulIf",
                          "src": "6682:2:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "6738:5:154"
                                  },
                                  {
                                    "name": "_3",
                                    "nodeType": "YulIdentifier",
                                    "src": "6745:2:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6734:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6734:14:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "6773:9:154"
                                      },
                                      {
                                        "name": "offset_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "6784:8:154"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "6769:3:154"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6769:24:154"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "6795:3:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_bytes",
                                  "nodeType": "YulIdentifier",
                                  "src": "6750:18:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6750:49:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6727:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6727:73:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6727:73:154"
                        }
                      ]
                    },
                    "name": "abi_decode_t_struct$_Order",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5620:9:154",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "5631:3:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "5639:5:154",
                        "type": ""
                      }
                    ],
                    "src": "5584:1222:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6861:119:154",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "6871:29:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "6893:6:154"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "6880:12:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6880:20:154"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "6871:5:154"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "6958:16:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6967:1:154",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6970:1:154",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "6960:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6960:12:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "6960:12:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "6922:5:154"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "6933:5:154"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6940:14:154",
                                        "type": "",
                                        "value": "0xffffffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "6929:3:154"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6929:26:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "6919:2:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6919:37:154"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "6912:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6912:45:154"
                          },
                          "nodeType": "YulIf",
                          "src": "6909:2:154"
                        }
                      ]
                    },
                    "name": "abi_decode_t_uint48",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "6840:6:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "6851:5:154",
                        "type": ""
                      }
                    ],
                    "src": "6811:169:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7055:189:154",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "7101:26:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "7110:6:154"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "7118:6:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "7103:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7103:22:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "7103:22:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "7076:7:154"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7085:9:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "7072:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7072:23:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7097:2:154",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "7068:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7068:32:154"
                          },
                          "nodeType": "YulIf",
                          "src": "7065:2:154"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7136:36:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7162:9:154"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "7149:12:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7149:23:154"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "7140:5:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "7208:5:154"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_t_address",
                              "nodeType": "YulIdentifier",
                              "src": "7181:26:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7181:33:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7181:33:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7223:15:154",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "7233:5:154"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "7223:6:154"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7021:9:154",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "7032:7:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "7044:6:154",
                        "type": ""
                      }
                    ],
                    "src": "6985:259:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7338:182:154",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "7384:26:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "7393:6:154"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "7401:6:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "7386:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7386:22:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "7386:22:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "7359:7:154"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7368:9:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "7355:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7355:23:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7380:2:154",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "7351:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7351:32:154"
                          },
                          "nodeType": "YulIf",
                          "src": "7348:2:154"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7419:29:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7438:9:154"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "7432:5:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7432:16:154"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "7423:5:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "7484:5:154"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_t_address",
                              "nodeType": "YulIdentifier",
                              "src": "7457:26:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7457:33:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7457:33:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7499:15:154",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "7509:5:154"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "7499:6:154"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address_payable_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7304:9:154",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "7315:7:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "7327:6:154",
                        "type": ""
                      }
                    ],
                    "src": "7249:271:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7662:1405:154",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "7708:26:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "7717:6:154"
                                    },
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "7725:6:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "7710:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7710:22:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "7710:22:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "7683:7:154"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7692:9:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "7679:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7679:23:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7704:2:154",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "7675:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7675:32:154"
                          },
                          "nodeType": "YulIf",
                          "src": "7672:2:154"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7743:29:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7762:9:154"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "7756:5:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7756:16:154"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "7747:5:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "7808:5:154"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_t_address",
                              "nodeType": "YulIdentifier",
                              "src": "7781:26:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7781:33:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7781:33:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7823:15:154",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "7833:5:154"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "7823:6:154"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7847:39:154",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7871:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7882:2:154",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7867:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7867:18:154"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "7861:5:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7861:25:154"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "7851:6:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7895:28:154",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7905:18:154",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "7899:2:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "7950:26:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "7959:6:154"
                                    },
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "7967:6:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "7952:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7952:22:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "7952:22:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "7938:6:154"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "7946:2:154"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "7935:2:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7935:14:154"
                          },
                          "nodeType": "YulIf",
                          "src": "7932:2:154"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7985:32:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7999:9:154"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "8010:6:154"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7995:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7995:22:154"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "7989:2:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "8057:26:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "8066:6:154"
                                    },
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "8074:6:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "8059:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8059:22:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "8059:22:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "8037:7:154"
                                  },
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "8046:2:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "8033:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8033:16:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8051:4:154",
                                "type": "",
                                "value": "0xc0"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "8029:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8029:27:154"
                          },
                          "nodeType": "YulIf",
                          "src": "8026:2:154"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "8092:35:154",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8122:4:154",
                                "type": "",
                                "value": "0xc0"
                              }
                            ],
                            "functionName": {
                              "name": "allocateMemory",
                              "nodeType": "YulIdentifier",
                              "src": "8107:14:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8107:20:154"
                          },
                          "variables": [
                            {
                              "name": "value_1",
                              "nodeType": "YulTypedName",
                              "src": "8096:7:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "8143:7:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "8158:2:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "8152:5:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8152:9:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8136:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8136:26:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8136:26:154"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "8171:34:154",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "8197:2:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8201:2:154",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8193:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8193:11:154"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "8187:5:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8187:18:154"
                          },
                          "variables": [
                            {
                              "name": "offset_1",
                              "nodeType": "YulTypedName",
                              "src": "8175:8:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "8234:26:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "8243:6:154"
                                    },
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "8251:6:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "8236:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8236:22:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "8236:22:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_1",
                                "nodeType": "YulIdentifier",
                                "src": "8220:8:154"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "8230:2:154"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "8217:2:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8217:16:154"
                          },
                          "nodeType": "YulIf",
                          "src": "8214:2:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "8280:7:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8289:2:154",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8276:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8276:16:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "8328:2:154"
                                      },
                                      {
                                        "name": "offset_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "8332:8:154"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "8324:3:154"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8324:17:154"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "8343:7:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_bytes_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "8294:29:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8294:57:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8269:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8269:83:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8269:83:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "8372:7:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8381:2:154",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8368:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8368:16:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "8396:2:154"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "8400:2:154",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "8392:3:154"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8392:11:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "8386:5:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8386:18:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8361:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8361:44:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8361:44:154"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "8414:34:154",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "8440:2:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8444:2:154",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8436:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8436:11:154"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "8430:5:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8430:18:154"
                          },
                          "variables": [
                            {
                              "name": "offset_2",
                              "nodeType": "YulTypedName",
                              "src": "8418:8:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "8477:26:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "8486:6:154"
                                    },
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "8494:6:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "8479:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8479:22:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "8479:22:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_2",
                                "nodeType": "YulIdentifier",
                                "src": "8463:8:154"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "8473:2:154"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "8460:2:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8460:16:154"
                          },
                          "nodeType": "YulIf",
                          "src": "8457:2:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "8523:7:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8532:2:154",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8519:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8519:16:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "8592:2:154"
                                      },
                                      {
                                        "name": "offset_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "8596:8:154"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "8588:3:154"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8588:17:154"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "8607:7:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_array$_t_struct$_Part_$dyn_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "8537:50:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8537:78:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8512:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8512:104:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8512:104:154"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "8625:35:154",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "8651:2:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8655:3:154",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8647:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8647:12:154"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "8641:5:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8641:19:154"
                          },
                          "variables": [
                            {
                              "name": "offset_3",
                              "nodeType": "YulTypedName",
                              "src": "8629:8:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "8689:26:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "8698:6:154"
                                    },
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "8706:6:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "8691:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8691:22:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "8691:22:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_3",
                                "nodeType": "YulIdentifier",
                                "src": "8675:8:154"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "8685:2:154"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "8672:2:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8672:16:154"
                          },
                          "nodeType": "YulIf",
                          "src": "8669:2:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "8735:7:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8744:3:154",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8731:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8731:17:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "8805:2:154"
                                      },
                                      {
                                        "name": "offset_3",
                                        "nodeType": "YulIdentifier",
                                        "src": "8809:8:154"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "8801:3:154"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8801:17:154"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "8820:7:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_array$_t_struct$_Part_$dyn_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "8750:50:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8750:78:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8724:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8724:105:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8724:105:154"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "8838:35:154",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "8864:2:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8868:3:154",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8860:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8860:12:154"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "8854:5:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8854:19:154"
                          },
                          "variables": [
                            {
                              "name": "offset_4",
                              "nodeType": "YulTypedName",
                              "src": "8842:8:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "8902:26:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "8911:6:154"
                                    },
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "8919:6:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "8904:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8904:22:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "8904:22:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_4",
                                "nodeType": "YulIdentifier",
                                "src": "8888:8:154"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "8898:2:154"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "8885:2:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8885:16:154"
                          },
                          "nodeType": "YulIf",
                          "src": "8882:2:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "8948:7:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8957:3:154",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8944:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8944:17:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "9011:2:154"
                                      },
                                      {
                                        "name": "offset_4",
                                        "nodeType": "YulIdentifier",
                                        "src": "9015:8:154"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "9007:3:154"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9007:17:154"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "9026:7:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_array$_t_bytes_$dyn_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "8963:43:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8963:71:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8937:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8937:98:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8937:98:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9044:17:154",
                          "value": {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "9054:7:154"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "9044:6:154"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address_payablet_struct$_Mint1155Data_$11122_memory_ptr_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7620:9:154",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "7631:7:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "7643:6:154",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "7651:6:154",
                        "type": ""
                      }
                    ],
                    "src": "7525:1542:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9208:1350:154",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "9254:26:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "9263:6:154"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "9271:6:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "9256:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "9256:22:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "9256:22:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "9229:7:154"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9238:9:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "9225:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9225:23:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9250:2:154",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "9221:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9221:32:154"
                          },
                          "nodeType": "YulIf",
                          "src": "9218:2:154"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "9289:29:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9308:9:154"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "9302:5:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9302:16:154"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "9293:5:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "9354:5:154"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_t_address",
                              "nodeType": "YulIdentifier",
                              "src": "9327:26:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9327:33:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9327:33:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9369:15:154",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "9379:5:154"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "9369:6:154"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "9393:39:154",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9417:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9428:2:154",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9413:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9413:18:154"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "9407:5:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9407:25:154"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "9397:6:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "9441:28:154",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "9451:18:154",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "9445:2:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "9496:26:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "9505:6:154"
                                    },
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "9513:6:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "9498:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "9498:22:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "9498:22:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "9484:6:154"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "9492:2:154"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "9481:2:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9481:14:154"
                          },
                          "nodeType": "YulIf",
                          "src": "9478:2:154"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "9531:32:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9545:9:154"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "9556:6:154"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9541:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9541:22:154"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "9535:2:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "9603:26:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "9612:6:154"
                                    },
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "9620:6:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "9605:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "9605:22:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "9605:22:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "9583:7:154"
                                  },
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "9592:2:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "9579:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9579:16:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9597:4:154",
                                "type": "",
                                "value": "0xa0"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "9575:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9575:27:154"
                          },
                          "nodeType": "YulIf",
                          "src": "9572:2:154"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "9638:35:154",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9668:4:154",
                                "type": "",
                                "value": "0xa0"
                              }
                            ],
                            "functionName": {
                              "name": "allocateMemory",
                              "nodeType": "YulIdentifier",
                              "src": "9653:14:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9653:20:154"
                          },
                          "variables": [
                            {
                              "name": "value_1",
                              "nodeType": "YulTypedName",
                              "src": "9642:7:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "9689:7:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "9704:2:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "9698:5:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9698:9:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9682:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9682:26:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9682:26:154"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "9717:34:154",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "9743:2:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9747:2:154",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9739:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9739:11:154"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "9733:5:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9733:18:154"
                          },
                          "variables": [
                            {
                              "name": "offset_1",
                              "nodeType": "YulTypedName",
                              "src": "9721:8:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "9780:26:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "9789:6:154"
                                    },
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "9797:6:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "9782:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "9782:22:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "9782:22:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_1",
                                "nodeType": "YulIdentifier",
                                "src": "9766:8:154"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "9776:2:154"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "9763:2:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9763:16:154"
                          },
                          "nodeType": "YulIf",
                          "src": "9760:2:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "9826:7:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9835:2:154",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9822:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9822:16:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "9874:2:154"
                                      },
                                      {
                                        "name": "offset_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "9878:8:154"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "9870:3:154"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9870:17:154"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "9889:7:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_bytes_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "9840:29:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9840:57:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9815:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9815:83:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9815:83:154"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "9907:34:154",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "9933:2:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9937:2:154",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9929:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9929:11:154"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "9923:5:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9923:18:154"
                          },
                          "variables": [
                            {
                              "name": "offset_2",
                              "nodeType": "YulTypedName",
                              "src": "9911:8:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "9970:26:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "9979:6:154"
                                    },
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "9987:6:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "9972:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "9972:22:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "9972:22:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_2",
                                "nodeType": "YulIdentifier",
                                "src": "9956:8:154"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "9966:2:154"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "9953:2:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9953:16:154"
                          },
                          "nodeType": "YulIf",
                          "src": "9950:2:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "10016:7:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10025:2:154",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10012:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10012:16:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "10085:2:154"
                                      },
                                      {
                                        "name": "offset_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "10089:8:154"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "10081:3:154"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10081:17:154"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "10100:7:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_array$_t_struct$_Part_$dyn_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "10030:50:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10030:78:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10005:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10005:104:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10005:104:154"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10118:34:154",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "10144:2:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10148:2:154",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10140:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10140:11:154"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "10134:5:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10134:18:154"
                          },
                          "variables": [
                            {
                              "name": "offset_3",
                              "nodeType": "YulTypedName",
                              "src": "10122:8:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "10181:26:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "10190:6:154"
                                    },
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "10198:6:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "10183:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "10183:22:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "10183:22:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_3",
                                "nodeType": "YulIdentifier",
                                "src": "10167:8:154"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "10177:2:154"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "10164:2:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10164:16:154"
                          },
                          "nodeType": "YulIf",
                          "src": "10161:2:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "10227:7:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10236:2:154",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10223:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10223:16:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "10296:2:154"
                                      },
                                      {
                                        "name": "offset_3",
                                        "nodeType": "YulIdentifier",
                                        "src": "10300:8:154"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "10292:3:154"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10292:17:154"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "10311:7:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_array$_t_struct$_Part_$dyn_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "10241:50:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10241:78:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10216:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10216:104:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10216:104:154"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10329:35:154",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "10355:2:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10359:3:154",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10351:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10351:12:154"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "10345:5:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10345:19:154"
                          },
                          "variables": [
                            {
                              "name": "offset_4",
                              "nodeType": "YulTypedName",
                              "src": "10333:8:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "10393:26:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "10402:6:154"
                                    },
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "10410:6:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "10395:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "10395:22:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "10395:22:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_4",
                                "nodeType": "YulIdentifier",
                                "src": "10379:8:154"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "10389:2:154"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "10376:2:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10376:16:154"
                          },
                          "nodeType": "YulIf",
                          "src": "10373:2:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "10439:7:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10448:3:154",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10435:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10435:17:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "10502:2:154"
                                      },
                                      {
                                        "name": "offset_4",
                                        "nodeType": "YulIdentifier",
                                        "src": "10506:8:154"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "10498:3:154"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10498:17:154"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "10517:7:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_array$_t_bytes_$dyn_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "10454:43:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10454:71:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10428:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10428:98:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10428:98:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10535:17:154",
                          "value": {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "10545:7:154"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "10535:6:154"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address_payablet_struct$_Mint721Data_$11304_memory_ptr_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "9166:9:154",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "9177:7:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "9189:6:154",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "9197:6:154",
                        "type": ""
                      }
                    ],
                    "src": "9072:1486:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10669:226:154",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "10715:26:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "10724:6:154"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "10732:6:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "10717:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "10717:22:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "10717:22:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "10690:7:154"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10699:9:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "10686:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10686:23:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10711:2:154",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "10682:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10682:32:154"
                          },
                          "nodeType": "YulIf",
                          "src": "10679:2:154"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10750:29:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10769:9:154"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "10763:5:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10763:16:154"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "10754:5:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "10815:5:154"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_t_address",
                              "nodeType": "YulIdentifier",
                              "src": "10788:26:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10788:33:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10788:33:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10830:15:154",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "10840:5:154"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "10830:6:154"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10854:35:154",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10874:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10885:2:154",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10870:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10870:18:154"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "10864:5:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10864:25:154"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "10854:6:154"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address_payablet_uint256_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "10627:9:154",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "10638:7:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "10650:6:154",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "10658:6:154",
                        "type": ""
                      }
                    ],
                    "src": "10563:332:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11065:620:154",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "11112:26:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value4",
                                      "nodeType": "YulIdentifier",
                                      "src": "11121:6:154"
                                    },
                                    {
                                      "name": "value4",
                                      "nodeType": "YulIdentifier",
                                      "src": "11129:6:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "11114:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "11114:22:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "11114:22:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "11086:7:154"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11095:9:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "11082:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11082:23:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11107:3:154",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "11078:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11078:33:154"
                          },
                          "nodeType": "YulIf",
                          "src": "11075:2:154"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "11147:36:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11173:9:154"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "11160:12:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11160:23:154"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "11151:5:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "11219:5:154"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_t_address",
                              "nodeType": "YulIdentifier",
                              "src": "11192:26:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11192:33:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11192:33:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11234:15:154",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "11244:5:154"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "11234:6:154"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "11258:47:154",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11290:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11301:2:154",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11286:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11286:18:154"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "11273:12:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11273:32:154"
                          },
                          "variables": [
                            {
                              "name": "value_1",
                              "nodeType": "YulTypedName",
                              "src": "11262:7:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "11341:7:154"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_t_address",
                              "nodeType": "YulIdentifier",
                              "src": "11314:26:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11314:35:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11314:35:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11358:17:154",
                          "value": {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "11368:7:154"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "11358:6:154"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11384:42:154",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11411:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11422:2:154",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11407:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11407:18:154"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "11394:12:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11394:32:154"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "11384:6:154"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "11435:47:154",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11467:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11478:2:154",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11463:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11463:18:154"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "11450:12:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11450:32:154"
                          },
                          "variables": [
                            {
                              "name": "value_2",
                              "nodeType": "YulTypedName",
                              "src": "11439:7:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_2",
                                "nodeType": "YulIdentifier",
                                "src": "11518:7:154"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_t_address",
                              "nodeType": "YulIdentifier",
                              "src": "11491:26:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11491:35:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11491:35:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11535:17:154",
                          "value": {
                            "name": "value_2",
                            "nodeType": "YulIdentifier",
                            "src": "11545:7:154"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "11535:6:154"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "11561:48:154",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11593:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11604:3:154",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11589:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11589:19:154"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "11576:12:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11576:33:154"
                          },
                          "variables": [
                            {
                              "name": "value_3",
                              "nodeType": "YulTypedName",
                              "src": "11565:7:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_3",
                                "nodeType": "YulIdentifier",
                                "src": "11645:7:154"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_t_address",
                              "nodeType": "YulIdentifier",
                              "src": "11618:26:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11618:35:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11618:35:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11662:17:154",
                          "value": {
                            "name": "value_3",
                            "nodeType": "YulIdentifier",
                            "src": "11672:7:154"
                          },
                          "variableNames": [
                            {
                              "name": "value4",
                              "nodeType": "YulIdentifier",
                              "src": "11662:6:154"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_addresst_uint256t_addresst_contract$_IRoyaltiesProvider_$5469",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "10999:9:154",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "11010:7:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "11022:6:154",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "11030:6:154",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "11038:6:154",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "11046:6:154",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "11054:6:154",
                        "type": ""
                      }
                    ],
                    "src": "10900:785:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11835:647:154",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "11882:26:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value2",
                                      "nodeType": "YulIdentifier",
                                      "src": "11891:6:154"
                                    },
                                    {
                                      "name": "value2",
                                      "nodeType": "YulIdentifier",
                                      "src": "11899:6:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "11884:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "11884:22:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "11884:22:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "11856:7:154"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11865:9:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "11852:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11852:23:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11877:3:154",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "11848:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11848:33:154"
                          },
                          "nodeType": "YulIf",
                          "src": "11845:2:154"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "11917:36:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11943:9:154"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "11930:12:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11930:23:154"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "11921:5:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "11989:5:154"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_t_address",
                              "nodeType": "YulIdentifier",
                              "src": "11962:26:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11962:33:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11962:33:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12004:15:154",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "12014:5:154"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "12004:6:154"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "12028:46:154",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12059:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12070:2:154",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12055:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12055:18:154"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "12042:12:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12042:32:154"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "12032:6:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "12117:26:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value2",
                                      "nodeType": "YulIdentifier",
                                      "src": "12126:6:154"
                                    },
                                    {
                                      "name": "value2",
                                      "nodeType": "YulIdentifier",
                                      "src": "12134:6:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "12119:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "12119:22:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "12119:22:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "12089:6:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12097:18:154",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "12086:2:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12086:30:154"
                          },
                          "nodeType": "YulIf",
                          "src": "12083:2:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12152:61:154",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12185:9:154"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "12196:6:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12181:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12181:22:154"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "12205:7:154"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_t_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "12162:18:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12162:51:154"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "12152:6:154"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12222:42:154",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12249:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12260:2:154",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12245:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12245:18:154"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "12232:12:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12232:32:154"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "12222:6:154"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12273:42:154",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12300:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12311:2:154",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12296:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12296:18:154"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "12283:12:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12283:32:154"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "12273:6:154"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "12324:48:154",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12356:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12367:3:154",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12352:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12352:19:154"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "12339:12:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12339:33:154"
                          },
                          "variables": [
                            {
                              "name": "value_1",
                              "nodeType": "YulTypedName",
                              "src": "12328:7:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "12424:26:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value4",
                                      "nodeType": "YulIdentifier",
                                      "src": "12433:6:154"
                                    },
                                    {
                                      "name": "value4",
                                      "nodeType": "YulIdentifier",
                                      "src": "12441:6:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "12426:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "12426:22:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "12426:22:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "12394:7:154"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "12407:7:154"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "12416:4:154",
                                        "type": "",
                                        "value": "0xff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "12403:3:154"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12403:18:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "12391:2:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12391:31:154"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "12384:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12384:39:154"
                          },
                          "nodeType": "YulIf",
                          "src": "12381:2:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12459:17:154",
                          "value": {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "12469:7:154"
                          },
                          "variableNames": [
                            {
                              "name": "value4",
                              "nodeType": "YulIdentifier",
                              "src": "12459:6:154"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_bytes_memory_ptrt_bytes32t_bytes32t_uint8",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "11769:9:154",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "11780:7:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "11792:6:154",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "11800:6:154",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "11808:6:154",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "11816:6:154",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "11824:6:154",
                        "type": ""
                      }
                    ],
                    "src": "11690:792:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12589:305:154",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "12635:26:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value2",
                                      "nodeType": "YulIdentifier",
                                      "src": "12644:6:154"
                                    },
                                    {
                                      "name": "value2",
                                      "nodeType": "YulIdentifier",
                                      "src": "12652:6:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "12637:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "12637:22:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "12637:22:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "12610:7:154"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12619:9:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "12606:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12606:23:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12631:2:154",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "12602:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12602:32:154"
                          },
                          "nodeType": "YulIf",
                          "src": "12599:2:154"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "12670:36:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12696:9:154"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "12683:12:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12683:23:154"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "12674:5:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "12742:5:154"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_t_address",
                              "nodeType": "YulIdentifier",
                              "src": "12715:26:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12715:33:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12715:33:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12757:15:154",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "12767:5:154"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "12757:6:154"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12781:49:154",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12815:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12826:2:154",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12811:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12811:18:154"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_t_uint48",
                              "nodeType": "YulIdentifier",
                              "src": "12791:19:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12791:39:154"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "12781:6:154"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12839:49:154",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12873:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12884:2:154",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12869:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12869:18:154"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_t_uint48",
                              "nodeType": "YulIdentifier",
                              "src": "12849:19:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12849:39:154"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "12839:6:154"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_uint48t_uint48",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "12539:9:154",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "12550:7:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "12562:6:154",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "12570:6:154",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "12578:6:154",
                        "type": ""
                      }
                    ],
                    "src": "12487:407:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13028:288:154",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "13074:26:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "13083:6:154"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "13091:6:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "13076:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13076:22:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "13076:22:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "13049:7:154"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13058:9:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "13045:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13045:23:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13070:2:154",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "13041:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13041:32:154"
                          },
                          "nodeType": "YulIf",
                          "src": "13038:2:154"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "13109:30:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13129:9:154"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "13123:5:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13123:16:154"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "13113:6:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "13182:26:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "13191:6:154"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "13199:6:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "13184:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13184:22:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "13184:22:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "13154:6:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13162:18:154",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "13151:2:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13151:30:154"
                          },
                          "nodeType": "YulIf",
                          "src": "13148:2:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "13217:93:154",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13282:9:154"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "13293:6:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13278:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13278:22:154"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "13302:7:154"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_t_array$_t_struct$_Part_$dyn_fromMemory",
                              "nodeType": "YulIdentifier",
                              "src": "13227:50:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13227:83:154"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "13217:6:154"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_array$_t_struct$_Part_$11574_memory_ptr_$dyn_memory_ptr_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "12994:9:154",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "13005:7:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "13017:6:154",
                        "type": ""
                      }
                    ],
                    "src": "12899:417:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13399:136:154",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "13445:26:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "13454:6:154"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "13462:6:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "13447:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13447:22:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "13447:22:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "13420:7:154"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13429:9:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "13416:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13416:23:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13441:2:154",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "13412:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13412:32:154"
                          },
                          "nodeType": "YulIf",
                          "src": "13409:2:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "13480:49:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13519:9:154"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_t_bool_fromMemory",
                              "nodeType": "YulIdentifier",
                              "src": "13490:28:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13490:39:154"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "13480:6:154"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bool_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "13365:9:154",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "13376:7:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "13388:6:154",
                        "type": ""
                      }
                    ],
                    "src": "13321:214:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13610:120:154",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "13656:26:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "13665:6:154"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "13673:6:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "13658:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13658:22:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "13658:22:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "13631:7:154"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13640:9:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "13627:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13627:23:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13652:2:154",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "13623:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13623:32:154"
                          },
                          "nodeType": "YulIf",
                          "src": "13620:2:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "13691:33:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13714:9:154"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "13701:12:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13701:23:154"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "13691:6:154"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes32",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "13576:9:154",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "13587:7:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "13599:6:154",
                        "type": ""
                      }
                    ],
                    "src": "13540:190:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13804:188:154",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "13850:26:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "13859:6:154"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "13867:6:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "13852:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13852:22:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "13852:22:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "13825:7:154"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13834:9:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "13821:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13821:23:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13846:2:154",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "13817:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13817:32:154"
                          },
                          "nodeType": "YulIf",
                          "src": "13814:2:154"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "13885:36:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13911:9:154"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "13898:12:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13898:23:154"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "13889:5:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "13956:5:154"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_t_bytes4",
                              "nodeType": "YulIdentifier",
                              "src": "13930:25:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13930:32:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13930:32:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "13971:15:154",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "13981:5:154"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "13971:6:154"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes4",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "13770:9:154",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "13781:7:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "13793:6:154",
                        "type": ""
                      }
                    ],
                    "src": "13735:257:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14083:314:154",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "14129:26:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "14138:6:154"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "14146:6:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "14131:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "14131:22:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "14131:22:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "14104:7:154"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14113:9:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "14100:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14100:23:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14125:2:154",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "14096:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14096:32:154"
                          },
                          "nodeType": "YulIf",
                          "src": "14093:2:154"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "14164:36:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14190:9:154"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "14177:12:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14177:23:154"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "14168:5:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "14235:5:154"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_t_bytes4",
                              "nodeType": "YulIdentifier",
                              "src": "14209:25:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14209:32:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14209:32:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "14250:15:154",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "14260:5:154"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "14250:6:154"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "14274:47:154",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14306:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14317:2:154",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14302:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14302:18:154"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "14289:12:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14289:32:154"
                          },
                          "variables": [
                            {
                              "name": "value_1",
                              "nodeType": "YulTypedName",
                              "src": "14278:7:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "14357:7:154"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_t_address",
                              "nodeType": "YulIdentifier",
                              "src": "14330:26:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14330:35:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14330:35:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "14374:17:154",
                          "value": {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "14384:7:154"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "14374:6:154"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes4t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "14041:9:154",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "14052:7:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "14064:6:154",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "14072:6:154",
                        "type": ""
                      }
                    ],
                    "src": "13997:400:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14499:189:154",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "14545:26:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "14554:6:154"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "14562:6:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "14547:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "14547:22:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "14547:22:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "14520:7:154"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14529:9:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "14516:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14516:23:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14541:2:154",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "14512:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14512:32:154"
                          },
                          "nodeType": "YulIf",
                          "src": "14509:2:154"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "14580:36:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14606:9:154"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "14593:12:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14593:23:154"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "14584:5:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "14652:5:154"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_t_address",
                              "nodeType": "YulIdentifier",
                              "src": "14625:26:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14625:33:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14625:33:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "14667:15:154",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "14677:5:154"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "14667:6:154"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_contract$_IRoyaltiesProvider_$5469",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "14465:9:154",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "14476:7:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "14488:6:154",
                        "type": ""
                      }
                    ],
                    "src": "14402:286:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14792:284:154",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "14838:26:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "14847:6:154"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "14855:6:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "14840:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "14840:22:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "14840:22:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "14813:7:154"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14822:9:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "14809:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14809:23:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14834:2:154",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "14805:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14805:32:154"
                          },
                          "nodeType": "YulIf",
                          "src": "14802:2:154"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "14873:37:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14900:9:154"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "14887:12:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14887:23:154"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "14877:6:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "14953:26:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "14962:6:154"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "14970:6:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "14955:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "14955:22:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "14955:22:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "14925:6:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14933:18:154",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "14922:2:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14922:30:154"
                          },
                          "nodeType": "YulIf",
                          "src": "14919:2:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "14988:82:154",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15042:9:154"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "15053:6:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15038:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15038:22:154"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "15062:7:154"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_t_struct$_AcceptBid_calldata",
                              "nodeType": "YulIdentifier",
                              "src": "14998:39:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14998:72:154"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "14988:6:154"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_struct$_AcceptBid_$7038_calldata_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "14758:9:154",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "14769:7:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "14781:6:154",
                        "type": ""
                      }
                    ],
                    "src": "14693:383:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15190:813:154",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "15236:26:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "15245:6:154"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "15253:6:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "15238:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "15238:22:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "15238:22:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "15211:7:154"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15220:9:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "15207:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15207:23:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15232:2:154",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "15203:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15203:32:154"
                          },
                          "nodeType": "YulIf",
                          "src": "15200:2:154"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "15271:30:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15291:9:154"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "15285:5:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15285:16:154"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "15275:6:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "15310:28:154",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "15320:18:154",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "15314:2:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "15365:26:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "15374:6:154"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "15382:6:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "15367:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "15367:22:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "15367:22:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "15353:6:154"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "15361:2:154"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "15350:2:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15350:14:154"
                          },
                          "nodeType": "YulIf",
                          "src": "15347:2:154"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "15400:32:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15414:9:154"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "15425:6:154"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15410:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15410:22:154"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "15404:2:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "15472:26:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "15481:6:154"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "15489:6:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "15474:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "15474:22:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "15474:22:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "15452:7:154"
                                  },
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "15461:2:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "15448:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15448:16:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15466:4:154",
                                "type": "",
                                "value": "0x40"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "15444:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15444:27:154"
                          },
                          "nodeType": "YulIf",
                          "src": "15441:2:154"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "15507:25:154",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15527:4:154",
                                "type": "",
                                "value": "0x40"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "15521:5:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15521:11:154"
                          },
                          "variables": [
                            {
                              "name": "memPtr",
                              "nodeType": "YulTypedName",
                              "src": "15511:6:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "15541:35:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "15563:6:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15571:4:154",
                                "type": "",
                                "value": "0x40"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15559:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15559:17:154"
                          },
                          "variables": [
                            {
                              "name": "newFreePtr",
                              "nodeType": "YulTypedName",
                              "src": "15545:10:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "15635:13:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "invalid",
                                    "nodeType": "YulIdentifier",
                                    "src": "15637:7:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "15637:9:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "15637:9:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "15594:10:154"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "15606:2:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "15591:2:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15591:18:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "15614:10:154"
                                  },
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "15626:6:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "15611:2:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15611:22:154"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "15588:2:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15588:46:154"
                          },
                          "nodeType": "YulIf",
                          "src": "15585:2:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15664:4:154",
                                "type": "",
                                "value": "0x40"
                              },
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "15670:10:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15657:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15657:24:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15657:24:154"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "15690:22:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "15709:2:154"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "15703:5:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15703:9:154"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "15694:5:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "15747:5:154"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_t_bytes4",
                              "nodeType": "YulIdentifier",
                              "src": "15721:25:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15721:32:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15721:32:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "15769:6:154"
                              },
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "15777:5:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15762:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15762:21:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15762:21:154"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "15792:34:154",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "15818:2:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15822:2:154",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15814:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15814:11:154"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "15808:5:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15808:18:154"
                          },
                          "variables": [
                            {
                              "name": "offset_1",
                              "nodeType": "YulTypedName",
                              "src": "15796:8:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "15855:26:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "15864:6:154"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "15872:6:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "15857:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "15857:22:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "15857:22:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_1",
                                "nodeType": "YulIdentifier",
                                "src": "15841:8:154"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "15851:2:154"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "15838:2:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15838:16:154"
                          },
                          "nodeType": "YulIf",
                          "src": "15835:2:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "15901:6:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15909:2:154",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15897:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15897:15:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "15948:2:154"
                                      },
                                      {
                                        "name": "offset_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "15952:8:154"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "15944:3:154"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "15944:17:154"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "15963:7:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_bytes_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "15914:29:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15914:57:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15890:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15890:82:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15890:82:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "15981:16:154",
                          "value": {
                            "name": "memPtr",
                            "nodeType": "YulIdentifier",
                            "src": "15991:6:154"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "15981:6:154"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_struct$_AssetType_$11489_memory_ptr_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "15156:9:154",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "15167:7:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "15179:6:154",
                        "type": ""
                      }
                    ],
                    "src": "15081:922:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "16113:924:154",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "16159:26:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "16168:6:154"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "16176:6:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "16161:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "16161:22:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "16161:22:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "16134:7:154"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16143:9:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "16130:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16130:23:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16155:2:154",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "16126:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16126:32:154"
                          },
                          "nodeType": "YulIf",
                          "src": "16123:2:154"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "16194:30:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16214:9:154"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "16208:5:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16208:16:154"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "16198:6:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "16233:28:154",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "16243:18:154",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "16237:2:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "16288:26:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "16297:6:154"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "16305:6:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "16290:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "16290:22:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "16290:22:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "16276:6:154"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "16284:2:154"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "16273:2:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16273:14:154"
                          },
                          "nodeType": "YulIf",
                          "src": "16270:2:154"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "16323:32:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16337:9:154"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "16348:6:154"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16333:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16333:22:154"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "16327:2:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "16395:26:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "16404:6:154"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "16412:6:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "16397:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "16397:22:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "16397:22:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "16375:7:154"
                                  },
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "16384:2:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "16371:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16371:16:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16389:4:154",
                                "type": "",
                                "value": "0x40"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "16367:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16367:27:154"
                          },
                          "nodeType": "YulIf",
                          "src": "16364:2:154"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "16430:25:154",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16450:4:154",
                                "type": "",
                                "value": "0x40"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "16444:5:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16444:11:154"
                          },
                          "variables": [
                            {
                              "name": "memPtr",
                              "nodeType": "YulTypedName",
                              "src": "16434:6:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "16464:35:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "16486:6:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16494:4:154",
                                "type": "",
                                "value": "0x40"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16482:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16482:17:154"
                          },
                          "variables": [
                            {
                              "name": "newFreePtr",
                              "nodeType": "YulTypedName",
                              "src": "16468:10:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "16558:13:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "invalid",
                                    "nodeType": "YulIdentifier",
                                    "src": "16560:7:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "16560:9:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "16560:9:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "16517:10:154"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "16529:2:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "16514:2:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16514:18:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "16537:10:154"
                                  },
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "16549:6:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "16534:2:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16534:22:154"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "16511:2:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16511:46:154"
                          },
                          "nodeType": "YulIf",
                          "src": "16508:2:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16587:4:154",
                                "type": "",
                                "value": "0x40"
                              },
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "16593:10:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16580:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16580:24:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16580:24:154"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "16613:25:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "16635:2:154"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "16629:5:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16629:9:154"
                          },
                          "variables": [
                            {
                              "name": "offset_1",
                              "nodeType": "YulTypedName",
                              "src": "16617:8:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "16667:26:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "16676:6:154"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "16684:6:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "16669:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "16669:22:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "16669:22:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_1",
                                "nodeType": "YulIdentifier",
                                "src": "16653:8:154"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "16663:2:154"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "16650:2:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16650:16:154"
                          },
                          "nodeType": "YulIf",
                          "src": "16647:2:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "16709:6:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "16772:2:154"
                                      },
                                      {
                                        "name": "offset_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "16776:8:154"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "16768:3:154"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "16768:17:154"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "16787:7:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_array$_t_struct$_Part_$dyn_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "16717:50:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16717:78:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16702:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16702:94:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16702:94:154"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "16805:34:154",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "16831:2:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16835:2:154",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16827:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16827:11:154"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "16821:5:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16821:18:154"
                          },
                          "variables": [
                            {
                              "name": "offset_2",
                              "nodeType": "YulTypedName",
                              "src": "16809:8:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "16868:26:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "16877:6:154"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "16885:6:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "16870:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "16870:22:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "16870:22:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_2",
                                "nodeType": "YulIdentifier",
                                "src": "16854:8:154"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "16864:2:154"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "16851:2:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16851:16:154"
                          },
                          "nodeType": "YulIf",
                          "src": "16848:2:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "16914:6:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16922:2:154",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16910:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16910:15:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "16982:2:154"
                                      },
                                      {
                                        "name": "offset_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "16986:8:154"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "16978:3:154"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "16978:17:154"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "16997:7:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_array$_t_struct$_Part_$dyn_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "16927:50:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16927:78:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16903:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16903:103:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16903:103:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "17015:16:154",
                          "value": {
                            "name": "memPtr",
                            "nodeType": "YulIdentifier",
                            "src": "17025:6:154"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "17015:6:154"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_struct$_DataV1_$8054_memory_ptr_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "16079:9:154",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "16090:7:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "16102:6:154",
                        "type": ""
                      }
                    ],
                    "src": "16008:1029:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17147:276:154",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "17193:26:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "17202:6:154"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "17210:6:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "17195:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "17195:22:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "17195:22:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "17168:7:154"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17177:9:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "17164:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17164:23:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17189:2:154",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "17160:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17160:32:154"
                          },
                          "nodeType": "YulIf",
                          "src": "17157:2:154"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "17228:30:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17248:9:154"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "17242:5:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17242:16:154"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "17232:6:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "17301:26:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "17310:6:154"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "17318:6:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "17303:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "17303:22:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "17303:22:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "17273:6:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17281:18:154",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "17270:2:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17270:30:154"
                          },
                          "nodeType": "YulIf",
                          "src": "17267:2:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "17336:81:154",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17389:9:154"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "17400:6:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17385:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17385:22:154"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "17409:7:154"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_t_struct$_DataV2_fromMemory",
                              "nodeType": "YulIdentifier",
                              "src": "17346:38:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17346:71:154"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "17336:6:154"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_struct$_DataV2_$8076_memory_ptr_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "17113:9:154",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "17124:7:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "17136:6:154",
                        "type": ""
                      }
                    ],
                    "src": "17042:381:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17533:276:154",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "17579:26:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "17588:6:154"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "17596:6:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "17581:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "17581:22:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "17581:22:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "17554:7:154"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17563:9:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "17550:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17550:23:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17575:2:154",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "17546:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17546:32:154"
                          },
                          "nodeType": "YulIf",
                          "src": "17543:2:154"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "17614:30:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17634:9:154"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "17628:5:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17628:16:154"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "17618:6:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "17687:26:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "17696:6:154"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "17704:6:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "17689:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "17689:22:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "17689:22:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "17659:6:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17667:18:154",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "17656:2:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17656:30:154"
                          },
                          "nodeType": "YulIf",
                          "src": "17653:2:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "17722:81:154",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17775:9:154"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "17786:6:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17771:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17771:22:154"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "17795:7:154"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_t_struct$_DataV2_fromMemory",
                              "nodeType": "YulIdentifier",
                              "src": "17732:38:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17732:71:154"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "17722:6:154"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_struct$_DataV3_$8098_memory_ptr_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "17499:9:154",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "17510:7:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "17522:6:154",
                        "type": ""
                      }
                    ],
                    "src": "17428:381:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17907:271:154",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "17953:26:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "17962:6:154"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "17970:6:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "17955:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "17955:22:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "17955:22:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "17928:7:154"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17937:9:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "17924:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17924:23:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17949:2:154",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "17920:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17920:32:154"
                          },
                          "nodeType": "YulIf",
                          "src": "17917:2:154"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "17988:37:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18015:9:154"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "18002:12:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18002:23:154"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "17992:6:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "18068:26:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "18077:6:154"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "18085:6:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "18070:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "18070:22:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "18070:22:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "18040:6:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18048:18:154",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "18037:2:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18037:30:154"
                          },
                          "nodeType": "YulIf",
                          "src": "18034:2:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "18103:69:154",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18144:9:154"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "18155:6:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18140:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18140:22:154"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "18164:7:154"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_t_struct$_Order",
                              "nodeType": "YulIdentifier",
                              "src": "18113:26:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18113:59:154"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "18103:6:154"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_struct$_Order_$7434_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "17873:9:154",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "17884:7:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "17896:6:154",
                        "type": ""
                      }
                    ],
                    "src": "17814:364:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "18368:853:154",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "18415:26:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value2",
                                      "nodeType": "YulIdentifier",
                                      "src": "18424:6:154"
                                    },
                                    {
                                      "name": "value2",
                                      "nodeType": "YulIdentifier",
                                      "src": "18432:6:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "18417:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "18417:22:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "18417:22:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "18389:7:154"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18398:9:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "18385:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18385:23:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18410:3:154",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "18381:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18381:33:154"
                          },
                          "nodeType": "YulIf",
                          "src": "18378:2:154"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "18450:37:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18477:9:154"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "18464:12:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18464:23:154"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "18454:6:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "18496:28:154",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "18506:18:154",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "18500:2:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "18551:26:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value2",
                                      "nodeType": "YulIdentifier",
                                      "src": "18560:6:154"
                                    },
                                    {
                                      "name": "value2",
                                      "nodeType": "YulIdentifier",
                                      "src": "18568:6:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "18553:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "18553:22:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "18553:22:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "18539:6:154"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "18547:2:154"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "18536:2:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18536:14:154"
                          },
                          "nodeType": "YulIf",
                          "src": "18533:2:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "18586:69:154",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18627:9:154"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "18638:6:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18623:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18623:22:154"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "18647:7:154"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_t_struct$_Order",
                              "nodeType": "YulIdentifier",
                              "src": "18596:26:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18596:59:154"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "18586:6:154"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "18664:48:154",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18697:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18708:2:154",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18693:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18693:18:154"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "18680:12:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18680:32:154"
                          },
                          "variables": [
                            {
                              "name": "offset_1",
                              "nodeType": "YulTypedName",
                              "src": "18668:8:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "18741:26:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value2",
                                      "nodeType": "YulIdentifier",
                                      "src": "18750:6:154"
                                    },
                                    {
                                      "name": "value2",
                                      "nodeType": "YulIdentifier",
                                      "src": "18758:6:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "18743:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "18743:22:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "18743:22:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_1",
                                "nodeType": "YulIdentifier",
                                "src": "18727:8:154"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "18737:2:154"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "18724:2:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18724:16:154"
                          },
                          "nodeType": "YulIf",
                          "src": "18721:2:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "18776:63:154",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18809:9:154"
                                  },
                                  {
                                    "name": "offset_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "18820:8:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18805:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18805:24:154"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "18831:7:154"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_t_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "18786:18:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18786:53:154"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "18776:6:154"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "18848:48:154",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18881:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18892:2:154",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18877:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18877:18:154"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "18864:12:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18864:32:154"
                          },
                          "variables": [
                            {
                              "name": "offset_2",
                              "nodeType": "YulTypedName",
                              "src": "18852:8:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "18925:26:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value2",
                                      "nodeType": "YulIdentifier",
                                      "src": "18934:6:154"
                                    },
                                    {
                                      "name": "value2",
                                      "nodeType": "YulIdentifier",
                                      "src": "18942:6:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "18927:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "18927:22:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "18927:22:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_2",
                                "nodeType": "YulIdentifier",
                                "src": "18911:8:154"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "18921:2:154"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "18908:2:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18908:16:154"
                          },
                          "nodeType": "YulIf",
                          "src": "18905:2:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "18960:71:154",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19001:9:154"
                                  },
                                  {
                                    "name": "offset_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "19012:8:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18997:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18997:24:154"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "19023:7:154"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_t_struct$_Order",
                              "nodeType": "YulIdentifier",
                              "src": "18970:26:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18970:61:154"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "18960:6:154"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "19040:48:154",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19073:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19084:2:154",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19069:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19069:18:154"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "19056:12:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19056:32:154"
                          },
                          "variables": [
                            {
                              "name": "offset_3",
                              "nodeType": "YulTypedName",
                              "src": "19044:8:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "19117:26:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value3",
                                      "nodeType": "YulIdentifier",
                                      "src": "19126:6:154"
                                    },
                                    {
                                      "name": "value3",
                                      "nodeType": "YulIdentifier",
                                      "src": "19134:6:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "19119:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "19119:22:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "19119:22:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_3",
                                "nodeType": "YulIdentifier",
                                "src": "19103:8:154"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "19113:2:154"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "19100:2:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19100:16:154"
                          },
                          "nodeType": "YulIf",
                          "src": "19097:2:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "19152:63:154",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19185:9:154"
                                  },
                                  {
                                    "name": "offset_3",
                                    "nodeType": "YulIdentifier",
                                    "src": "19196:8:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19181:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19181:24:154"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "19207:7:154"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_t_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "19162:18:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19162:53:154"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "19152:6:154"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_struct$_Order_$7434_memory_ptrt_bytes_memory_ptrt_struct$_Order_$7434_memory_ptrt_bytes_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "18310:9:154",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "18321:7:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "18333:6:154",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "18341:6:154",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "18349:6:154",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "18357:6:154",
                        "type": ""
                      }
                    ],
                    "src": "18183:1038:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "19324:284:154",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "19370:26:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "19379:6:154"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "19387:6:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "19372:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "19372:22:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "19372:22:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "19345:7:154"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19354:9:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "19341:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19341:23:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19366:2:154",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "19337:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19337:32:154"
                          },
                          "nodeType": "YulIf",
                          "src": "19334:2:154"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "19405:37:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19432:9:154"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "19419:12:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19419:23:154"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "19409:6:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "19485:26:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "19494:6:154"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "19502:6:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "19487:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "19487:22:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "19487:22:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "19457:6:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19465:18:154",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "19454:2:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19454:30:154"
                          },
                          "nodeType": "YulIf",
                          "src": "19451:2:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "19520:82:154",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19574:9:154"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "19585:6:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19570:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19570:22:154"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "19594:7:154"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_t_struct$_AcceptBid_calldata",
                              "nodeType": "YulIdentifier",
                              "src": "19530:39:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19530:72:154"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "19520:6:154"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_struct$_Purchase_$7007_calldata_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "19290:9:154",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "19301:7:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "19313:6:154",
                        "type": ""
                      }
                    ],
                    "src": "19226:382:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "19682:127:154",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "19728:26:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "19737:6:154"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "19745:6:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "19730:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "19730:22:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "19730:22:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "19703:7:154"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19712:9:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "19699:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19699:23:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19724:2:154",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "19695:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19695:32:154"
                          },
                          "nodeType": "YulIf",
                          "src": "19692:2:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "19763:40:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19793:9:154"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_t_uint48",
                              "nodeType": "YulIdentifier",
                              "src": "19773:19:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19773:30:154"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "19763:6:154"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint48",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "19648:9:154",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "19659:7:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "19671:6:154",
                        "type": ""
                      }
                    ],
                    "src": "19613:196:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "19865:208:154",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "19875:26:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "19895:5:154"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "19889:5:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19889:12:154"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "19879:6:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "19917:3:154"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "19922:6:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19910:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19910:19:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19910:19:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "19964:5:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19971:4:154",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19960:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19960:16:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "19982:3:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19987:4:154",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19978:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19978:14:154"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "19994:6:154"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory",
                              "nodeType": "YulIdentifier",
                              "src": "19938:21:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19938:63:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19938:63:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "20010:57:154",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "20025:3:154"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "length",
                                            "nodeType": "YulIdentifier",
                                            "src": "20038:6:154"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "20046:2:154",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "20034:3:154"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "20034:15:154"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "20055:2:154",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "20051:3:154"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "20051:7:154"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "20030:3:154"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "20030:29:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20021:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20021:39:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20062:4:154",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20017:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20017:50:154"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "20010:3:154"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_bytes",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "19842:5:154",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "19849:3:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "19857:3:154",
                        "type": ""
                      }
                    ],
                    "src": "19814:259:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "20141:221:154",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "20158:3:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "20173:5:154"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mload",
                                      "nodeType": "YulIdentifier",
                                      "src": "20167:5:154"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "20167:12:154"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "20185:3:154",
                                        "type": "",
                                        "value": "224"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "20190:10:154",
                                        "type": "",
                                        "value": "0xffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "20181:3:154"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "20181:20:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "20163:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20163:39:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20151:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20151:52:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20151:52:154"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "20212:43:154",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "20242:5:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20249:4:154",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20238:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20238:16:154"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "20232:5:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20232:23:154"
                          },
                          "variables": [
                            {
                              "name": "memberValue0",
                              "nodeType": "YulTypedName",
                              "src": "20216:12:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "20275:3:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20280:4:154",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20271:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20271:14:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20287:4:154",
                                "type": "",
                                "value": "0x40"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20264:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20264:28:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20264:28:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "20301:55:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "memberValue0",
                                "nodeType": "YulIdentifier",
                                "src": "20327:12:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "20345:3:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20350:4:154",
                                    "type": "",
                                    "value": "0x40"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20341:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20341:14:154"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "20308:18:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20308:48:154"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "20301:3:154"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_struct$_AssetType",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "20118:5:154",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "20125:3:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "20133:3:154",
                        "type": ""
                      }
                    ],
                    "src": "20078:284:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "20468:102:154",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "20478:26:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20490:9:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20501:2:154",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20486:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20486:18:154"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "20478:4:154"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20520:9:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "20535:6:154"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "20551:3:154",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "20556:1:154",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "20547:3:154"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "20547:11:154"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "20560:1:154",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "20543:3:154"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "20543:19:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "20531:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20531:32:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20513:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20513:51:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20513:51:154"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "20437:9:154",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "20448:6:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "20459:4:154",
                        "type": ""
                      }
                    ],
                    "src": "20367:203:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "20704:175:154",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "20714:26:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20726:9:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20737:2:154",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20722:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20722:18:154"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "20714:4:154"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "20749:29:154",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20767:3:154",
                                    "type": "",
                                    "value": "160"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20772:1:154",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "20763:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20763:11:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20776:1:154",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "20759:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20759:19:154"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "20753:2:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20794:9:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "20809:6:154"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "20817:2:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "20805:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20805:15:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20787:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20787:34:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20787:34:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20841:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20852:2:154",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20837:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20837:18:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "20861:6:154"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "20869:2:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "20857:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20857:15:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20830:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20830:43:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20830:43:154"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "20665:9:154",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "20676:6:154",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "20684:6:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "20695:4:154",
                        "type": ""
                      }
                    ],
                    "src": "20575:304:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "21041:218:154",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "21051:26:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21063:9:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21074:2:154",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "21059:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21059:18:154"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "21051:4:154"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "21086:29:154",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21104:3:154",
                                    "type": "",
                                    "value": "160"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21109:1:154",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "21100:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21100:11:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21113:1:154",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "21096:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21096:19:154"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "21090:2:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21131:9:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "21146:6:154"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "21154:2:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "21142:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21142:15:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21124:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21124:34:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21124:34:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21178:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21189:2:154",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21174:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21174:18:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "21198:6:154"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "21206:2:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "21194:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21194:15:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21167:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21167:43:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21167:43:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21230:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21241:2:154",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21226:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21226:18:154"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "21246:6:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21219:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21219:34:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21219:34:154"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "20994:9:154",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "21005:6:154",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "21013:6:154",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "21021:6:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "21032:4:154",
                        "type": ""
                      }
                    ],
                    "src": "20884:375:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "21549:345:154",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "21559:29:154",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21577:3:154",
                                    "type": "",
                                    "value": "160"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21582:1:154",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "21573:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21573:11:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21586:1:154",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "21569:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21569:19:154"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "21563:2:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21604:9:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "21619:6:154"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "21627:2:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "21615:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21615:15:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21597:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21597:34:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21597:34:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21651:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21662:2:154",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21647:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21647:18:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "21671:6:154"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "21679:2:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "21667:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21667:15:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21640:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21640:43:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21640:43:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21703:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21714:2:154",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21699:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21699:18:154"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "21719:6:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21692:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21692:34:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21692:34:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21746:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21757:2:154",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21742:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21742:18:154"
                              },
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "21762:6:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21735:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21735:34:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21735:34:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21789:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21800:3:154",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21785:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21785:19:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21806:3:154",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21778:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21778:32:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21778:32:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21830:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21841:3:154",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21826:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21826:19:154"
                              },
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "21847:4:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21819:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21819:33:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21819:33:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "21861:27:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21873:9:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21884:3:154",
                                "type": "",
                                "value": "192"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "21869:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21869:19:154"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "21861:4:154"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "21494:9:154",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "21505:6:154",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "21513:6:154",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "21521:6:154",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "21529:6:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "21540:4:154",
                        "type": ""
                      }
                    ],
                    "src": "21264:630:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "22028:145:154",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "22038:26:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "22050:9:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22061:2:154",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "22046:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22046:18:154"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "22038:4:154"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "22080:9:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "22095:6:154"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "22111:3:154",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "22116:1:154",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "22107:3:154"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "22107:11:154"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "22120:1:154",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "22103:3:154"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "22103:19:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "22091:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22091:32:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22073:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22073:51:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22073:51:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22144:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22155:2:154",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22140:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22140:18:154"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "22160:6:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22133:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22133:34:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22133:34:154"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "21989:9:154",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "22000:6:154",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "22008:6:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "22019:4:154",
                        "type": ""
                      }
                    ],
                    "src": "21899:274:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "22331:239:154",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "22341:26:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "22353:9:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22364:2:154",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "22349:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22349:18:154"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "22341:4:154"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "22383:9:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "22398:6:154"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "22414:3:154",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "22419:1:154",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "22410:3:154"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "22410:11:154"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "22423:1:154",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "22406:3:154"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "22406:19:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "22394:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22394:32:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22376:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22376:51:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22376:51:154"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "22436:24:154",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "22446:14:154",
                            "type": "",
                            "value": "0xffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "22440:2:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22480:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22491:2:154",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22476:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22476:18:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "22500:6:154"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "22508:2:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "22496:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22496:15:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22469:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22469:43:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22469:43:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22532:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22543:2:154",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22528:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22528:18:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value2",
                                    "nodeType": "YulIdentifier",
                                    "src": "22552:6:154"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "22560:2:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "22548:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22548:15:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22521:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22521:43:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22521:43:154"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_uint48_t_uint48__to_t_address_t_uint48_t_uint48__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "22284:9:154",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "22295:6:154",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "22303:6:154",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "22311:6:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "22322:4:154",
                        "type": ""
                      }
                    ],
                    "src": "22178:392:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "22676:76:154",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "22686:26:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "22698:9:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22709:2:154",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "22694:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22694:18:154"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "22686:4:154"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "22728:9:154"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "22739:6:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22721:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22721:25:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22721:25:154"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "22645:9:154",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "22656:6:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "22667:4:154",
                        "type": ""
                      }
                    ],
                    "src": "22575:177:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "22942:206:154",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "22952:27:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "22964:9:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22975:3:154",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "22960:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22960:19:154"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "22952:4:154"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "22995:9:154"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "23006:6:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22988:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22988:25:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22988:25:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "23033:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23044:2:154",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23029:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23029:18:154"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "23049:6:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23022:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23022:34:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23022:34:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "23076:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23087:2:154",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23072:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23072:18:154"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "23092:6:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23065:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23065:34:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23065:34:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "23119:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23130:2:154",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23115:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23115:18:154"
                              },
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "23135:6:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23108:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23108:34:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23108:34:154"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes32_t_bytes32_t_uint256_t_uint256__to_t_bytes32_t_bytes32_t_uint256_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "22887:9:154",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "22898:6:154",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "22906:6:154",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "22914:6:154",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "22922:6:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "22933:4:154",
                        "type": ""
                      }
                    ],
                    "src": "22757:391:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "23272:100:154",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "23289:9:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23300:2:154",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23282:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23282:21:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23282:21:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "23312:54:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "23339:6:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "23351:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23362:2:154",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23347:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23347:18:154"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "23320:18:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23320:46:154"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "23312:4:154"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "23241:9:154",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "23252:6:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "23263:4:154",
                        "type": ""
                      }
                    ],
                    "src": "23153:219:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "23718:398:154",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "23728:29:154",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23746:3:154",
                                    "type": "",
                                    "value": "160"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23751:1:154",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "23742:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23742:11:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23755:1:154",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "23738:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23738:19:154"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "23732:2:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "23773:9:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "23788:6:154"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "23796:2:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "23784:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23784:15:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23766:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23766:34:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23766:34:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "23820:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23831:2:154",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23816:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23816:18:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "23840:6:154"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "23848:2:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "23836:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23836:15:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23809:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23809:43:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23809:43:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "23872:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23883:2:154",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23868:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23868:18:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value2",
                                    "nodeType": "YulIdentifier",
                                    "src": "23892:6:154"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "23900:2:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "23888:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23888:15:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23861:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23861:43:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23861:43:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "23924:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23935:2:154",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23920:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23920:18:154"
                              },
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "23940:6:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23913:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23913:34:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23913:34:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "23967:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23978:3:154",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23963:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23963:19:154"
                              },
                              {
                                "name": "value4",
                                "nodeType": "YulIdentifier",
                                "src": "23984:6:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23956:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23956:35:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23956:35:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24011:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24022:3:154",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "24007:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24007:19:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24028:3:154",
                                "type": "",
                                "value": "192"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24000:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24000:32:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24000:32:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24052:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24063:3:154",
                                    "type": "",
                                    "value": "192"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "24048:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24048:19:154"
                              },
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "24069:4:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24041:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24041:33:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24041:33:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "24083:27:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "24095:9:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24106:3:154",
                                "type": "",
                                "value": "224"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "24091:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24091:19:154"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "24083:4:154"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_contract$_IERC1155Upgradeable_$1339_t_address_t_address_t_uint256_t_uint256_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "23655:9:154",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "23666:6:154",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "23674:6:154",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "23682:6:154",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "23690:6:154",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "23698:6:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "23709:4:154",
                        "type": ""
                      }
                    ],
                    "src": "23377:739:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "24332:271:154",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "24342:27:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "24354:9:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24365:3:154",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "24350:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24350:19:154"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "24342:4:154"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "24378:29:154",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24396:3:154",
                                    "type": "",
                                    "value": "160"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24401:1:154",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "24392:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24392:11:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24405:1:154",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "24388:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24388:19:154"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "24382:2:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "24423:9:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "24438:6:154"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "24446:2:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "24434:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24434:15:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24416:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24416:34:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24416:34:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24470:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24481:2:154",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "24466:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24466:18:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "24490:6:154"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "24498:2:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "24486:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24486:15:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24459:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24459:43:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24459:43:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24522:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24533:2:154",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "24518:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24518:18:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value2",
                                    "nodeType": "YulIdentifier",
                                    "src": "24542:6:154"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "24550:2:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "24538:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24538:15:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24511:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24511:43:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24511:43:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24574:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24585:2:154",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "24570:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24570:18:154"
                              },
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "24590:6:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24563:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24563:34:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24563:34:154"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_contract$_IERC20Upgradeable_$1947_t_address_t_address_t_uint256__to_t_address_t_address_t_address_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "24277:9:154",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "24288:6:154",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "24296:6:154",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "24304:6:154",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "24312:6:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "24323:4:154",
                        "type": ""
                      }
                    ],
                    "src": "24121:482:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "24820:271:154",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "24830:27:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "24842:9:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24853:3:154",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "24838:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24838:19:154"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "24830:4:154"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "24866:29:154",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24884:3:154",
                                    "type": "",
                                    "value": "160"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24889:1:154",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "24880:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24880:11:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24893:1:154",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "24876:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24876:19:154"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "24870:2:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "24911:9:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "24926:6:154"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "24934:2:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "24922:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24922:15:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24904:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24904:34:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24904:34:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24958:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24969:2:154",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "24954:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24954:18:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "24978:6:154"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "24986:2:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "24974:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24974:15:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24947:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24947:43:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24947:43:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25010:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25021:2:154",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25006:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25006:18:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value2",
                                    "nodeType": "YulIdentifier",
                                    "src": "25030:6:154"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "25038:2:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "25026:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25026:15:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24999:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24999:43:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24999:43:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25062:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25073:2:154",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25058:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25058:18:154"
                              },
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "25078:6:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25051:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25051:34:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25051:34:154"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_contract$_IERC721Upgradeable_$2139_t_address_t_address_t_uint256__to_t_address_t_address_t_address_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "24765:9:154",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "24776:6:154",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "24784:6:154",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "24792:6:154",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "24800:6:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "24811:4:154",
                        "type": ""
                      }
                    ],
                    "src": "24608:483:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "25224:102:154",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "25234:26:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "25246:9:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25257:2:154",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "25242:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25242:18:154"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "25234:4:154"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "25276:9:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "25291:6:154"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "25307:3:154",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "25312:1:154",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "25303:3:154"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "25303:11:154"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "25316:1:154",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "25299:3:154"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "25299:19:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "25287:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25287:32:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25269:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25269:51:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25269:51:154"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_contract$_IRoyaltiesProvider_$5469__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "25193:9:154",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "25204:6:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "25215:4:154",
                        "type": ""
                      }
                    ],
                    "src": "25096:230:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "25505:173:154",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "25522:9:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25533:2:154",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25515:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25515:21:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25515:21:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25556:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25567:2:154",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25552:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25552:18:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25572:2:154",
                                "type": "",
                                "value": "23"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25545:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25545:30:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25545:30:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25595:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25606:2:154",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25591:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25591:18:154"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "25611:25:154",
                                "type": "",
                                "value": "not found IAssetMatcher"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25584:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25584:53:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25584:53:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "25646:26:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "25658:9:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25669:2:154",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "25654:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25654:18:154"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "25646:4:154"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_0c57eb6f42259d1e3092185f3dd28292ea5e8dcde054022007806750bd9885d6__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "25482:9:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "25496:4:154",
                        "type": ""
                      }
                    ],
                    "src": "25331:347:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "25857:179:154",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "25874:9:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25885:2:154",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25867:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25867:21:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25867:21:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25908:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25919:2:154",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25904:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25904:18:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25924:2:154",
                                "type": "",
                                "value": "29"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25897:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25897:30:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25897:30:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25947:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25958:2:154",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25943:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25943:18:154"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "25963:31:154",
                                "type": "",
                                "value": "Royalties are too high (>50%)"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25936:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25936:59:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25936:59:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "26004:26:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "26016:9:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26027:2:154",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "26012:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26012:18:154"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "26004:4:154"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_0d6a531b613b22de3789297ff1426e049b434d7c250c87f8aa6d31c39b711f5c__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "25834:9:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "25848:4:154",
                        "type": ""
                      }
                    ],
                    "src": "25683:353:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "26215:170:154",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "26232:9:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26243:2:154",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "26225:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26225:21:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "26225:21:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "26266:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "26277:2:154",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "26262:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26262:18:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26282:2:154",
                                "type": "",
                                "value": "20"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "26255:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26255:30:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "26255:30:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "26305:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "26316:2:154",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "26301:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26301:18:154"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "26321:22:154",
                                "type": "",
                                "value": "0 salt can't be used"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "26294:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26294:50:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "26294:50:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "26353:26:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "26365:9:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26376:2:154",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "26361:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26361:18:154"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "26353:4:154"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_2a54609e2a39cfed033292f045a5e18f320567a8c17fea6363660379c0b2b703__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "26192:9:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "26206:4:154",
                        "type": ""
                      }
                    ],
                    "src": "26041:344:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "26564:226:154",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "26581:9:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26592:2:154",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "26574:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26574:21:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "26574:21:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "26615:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "26626:2:154",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "26611:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26611:18:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26631:2:154",
                                "type": "",
                                "value": "36"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "26604:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26604:30:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "26604:30:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "26654:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "26665:2:154",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "26650:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26650:18:154"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "26670:34:154",
                                "type": "",
                                "value": "transferPayouts: nothing to tran"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "26643:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26643:62:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "26643:62:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "26725:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "26736:2:154",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "26721:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26721:18:154"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "26741:6:154",
                                "type": "",
                                "value": "sfer"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "26714:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26714:34:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "26714:34:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "26757:27:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "26769:9:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26780:3:154",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "26765:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26765:19:154"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "26757:4:154"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_3de44fe251e621489871b7acda51716782a0ca65294ed78865fc06109172fbd4__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "26541:9:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "26555:4:154",
                        "type": ""
                      }
                    ],
                    "src": "26390:400:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "26969:226:154",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "26986:9:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26997:2:154",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "26979:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26979:21:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "26979:21:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "27020:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "27031:2:154",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "27016:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27016:18:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27036:2:154",
                                "type": "",
                                "value": "36"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "27009:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27009:30:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "27009:30:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "27059:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "27070:2:154",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "27055:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27055:18:154"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "27075:34:154",
                                "type": "",
                                "value": "rightOrder.taker verification fa"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "27048:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27048:62:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "27048:62:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "27130:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "27141:2:154",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "27126:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27126:18:154"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "27146:6:154",
                                "type": "",
                                "value": "iled"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "27119:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27119:34:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "27119:34:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "27162:27:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "27174:9:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27185:3:154",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "27170:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27170:19:154"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "27162:4:154"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_653ab491ff02a6248b97a43613283e04cb49bbcd2579a02dfca519158a7f6d7c__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "26946:9:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "26960:4:154",
                        "type": ""
                      }
                    ],
                    "src": "26795:400:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "27374:168:154",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "27391:9:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27402:2:154",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "27384:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27384:21:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "27384:21:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "27425:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "27436:2:154",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "27421:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27421:18:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27441:2:154",
                                "type": "",
                                "value": "18"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "27414:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27414:30:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "27414:30:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "27464:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "27475:2:154",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "27460:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27460:18:154"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "27480:20:154",
                                "type": "",
                                "value": "erc721 value error"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "27453:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27453:48:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "27453:48:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "27510:26:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "27522:9:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27533:2:154",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "27518:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27518:18:154"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "27510:4:154"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_736a45f1fa5356e0bc76a3607b7ebc72103f22067139f7fd70e178e22247d91a__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "27351:9:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "27365:4:154",
                        "type": ""
                      }
                    ],
                    "src": "27200:342:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "27721:165:154",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "27738:9:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27749:2:154",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "27731:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27731:21:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "27731:21:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "27772:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "27783:2:154",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "27768:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27768:18:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27788:2:154",
                                "type": "",
                                "value": "15"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "27761:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27761:30:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "27761:30:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "27811:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "27822:2:154",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "27807:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27807:18:154"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "27827:17:154",
                                "type": "",
                                "value": "nothing to fill"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "27800:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27800:45:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "27800:45:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "27854:26:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "27866:9:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27877:2:154",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "27862:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27862:18:154"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "27854:4:154"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_99c54eb9ed32adddd848a8e2315700764966121b5fb51bdbca14d8852017582f__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "27698:9:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "27712:4:154",
                        "type": ""
                      }
                    ],
                    "src": "27547:339:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "28065:171:154",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "28082:9:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28093:2:154",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "28075:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28075:21:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "28075:21:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "28116:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "28127:2:154",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "28112:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "28112:18:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28132:2:154",
                                "type": "",
                                "value": "21"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "28105:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28105:30:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "28105:30:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "28155:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "28166:2:154",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "28151:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "28151:18:154"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "28171:23:154",
                                "type": "",
                                "value": "erc20 transfer failed"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "28144:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28144:51:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "28144:51:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "28204:26:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "28216:9:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28227:2:154",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "28212:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28212:18:154"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "28204:4:154"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_a0374a8e5f11dd7faae107e84db5308145b84a54db63612ff00e119787377d38__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "28042:9:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "28056:4:154",
                        "type": ""
                      }
                    ],
                    "src": "27891:345:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "28415:171:154",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "28432:9:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28443:2:154",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "28425:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28425:21:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "28425:21:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "28466:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "28477:2:154",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "28462:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "28462:18:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28482:2:154",
                                "type": "",
                                "value": "21"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "28455:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28455:30:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "28455:30:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "28505:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "28516:2:154",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "28501:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "28501:18:154"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "28521:23:154",
                                "type": "",
                                "value": "origin fee is too big"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "28494:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28494:51:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "28494:51:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "28554:26:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "28566:9:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28577:2:154",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "28562:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28562:18:154"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "28554:4:154"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_a2d1dd9c22c43b94c9f40fe466a6e170d993cce47b01f3a3d9aa5de12e7a0006__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "28392:9:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "28406:4:154",
                        "type": ""
                      }
                    ],
                    "src": "28241:345:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "28765:173:154",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "28782:9:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28793:2:154",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "28775:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28775:21:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "28775:21:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "28816:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "28827:2:154",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "28812:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "28812:18:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28832:2:154",
                                "type": "",
                                "value": "23"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "28805:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28805:30:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "28805:30:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "28855:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "28866:2:154",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "28851:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "28851:18:154"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "28871:25:154",
                                "type": "",
                                "value": "Unknown Order data type"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "28844:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28844:53:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "28844:53:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "28906:26:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "28918:9:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28929:2:154",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "28914:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28914:18:154"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "28906:4:154"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_a8d4179c57d21bb0adffe74c6e7a4d43bf1559a57e0b833a295fb2cf352d9f77__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "28742:9:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "28756:4:154",
                        "type": ""
                      }
                    ],
                    "src": "28591:347:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "29117:180:154",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "29134:9:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29145:2:154",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "29127:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29127:21:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "29127:21:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "29168:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "29179:2:154",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "29164:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "29164:18:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29184:2:154",
                                "type": "",
                                "value": "30"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "29157:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29157:30:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "29157:30:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "29207:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "29218:2:154",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "29203:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "29203:18:154"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "29223:32:154",
                                "type": "",
                                "value": "Sum payouts Bps not equal 100%"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "29196:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29196:60:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "29196:60:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "29265:26:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "29277:9:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29288:2:154",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "29273:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29273:18:154"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "29265:4:154"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_b48e3c99943e085eac87623ac486ebce51c0c61d29c41f60dcfbbf3e2beaabae__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "29094:9:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "29108:4:154",
                        "type": ""
                      }
                    ],
                    "src": "28943:354:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "29476:168:154",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "29493:9:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29504:2:154",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "29486:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29486:21:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "29486:21:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "29527:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "29538:2:154",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "29523:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "29523:18:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29543:2:154",
                                "type": "",
                                "value": "18"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "29516:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29516:30:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "29516:30:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "29566:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "29577:2:154",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "29562:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "29562:18:154"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "29582:20:154",
                                "type": "",
                                "value": "assets don't match"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "29555:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29555:48:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "29555:48:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "29612:26:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "29624:9:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29635:2:154",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "29620:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29620:18:154"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "29612:4:154"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_c48362a3fad4fc10587f361cd89d92c9a72c1a6e2fe4e5c5b5aabc0b03c74327__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "29453:9:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "29467:4:154",
                        "type": ""
                      }
                    ],
                    "src": "29302:342:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "29823:225:154",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "29840:9:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29851:2:154",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "29833:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29833:21:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "29833:21:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "29874:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "29885:2:154",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "29870:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "29870:18:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29890:2:154",
                                "type": "",
                                "value": "35"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "29863:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29863:30:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "29863:30:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "29913:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "29924:2:154",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "29909:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "29909:18:154"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "29929:34:154",
                                "type": "",
                                "value": "leftOrder.taker verification fai"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "29902:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29902:62:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "29902:62:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "29984:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "29995:2:154",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "29980:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "29980:18:154"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "30000:5:154",
                                "type": "",
                                "value": "led"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "29973:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29973:33:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "29973:33:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "30015:27:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "30027:9:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "30038:3:154",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "30023:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30023:19:154"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "30015:4:154"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_e2988d5921d0b0b980c95629752e1ae33544ef2a29d168957ce2afee9edae127__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "29800:9:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "29814:4:154",
                        "type": ""
                      }
                    ],
                    "src": "29649:399:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "30227:164:154",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "30244:9:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "30255:2:154",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "30237:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30237:21:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "30237:21:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "30278:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "30289:2:154",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "30274:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "30274:18:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "30294:2:154",
                                "type": "",
                                "value": "14"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "30267:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30267:30:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "30267:30:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "30317:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "30328:2:154",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "30313:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "30313:18:154"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "30333:16:154",
                                "type": "",
                                "value": "not enough eth"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "30306:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30306:44:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "30306:44:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "30359:26:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "30371:9:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "30382:2:154",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "30367:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30367:18:154"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "30359:4:154"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_f38787fedbd8f1d66c237a0aae7262ee866033b9295a240f1f05b891b71df4a6__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "30204:9:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "30218:4:154",
                        "type": ""
                      }
                    ],
                    "src": "30053:338:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "30570:161:154",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "30587:9:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "30598:2:154",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "30580:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30580:21:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "30580:21:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "30621:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "30632:2:154",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "30617:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "30617:18:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "30637:2:154",
                                "type": "",
                                "value": "11"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "30610:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30610:30:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "30610:30:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "30660:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "30671:2:154",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "30656:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "30656:18:154"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "30676:13:154",
                                "type": "",
                                "value": "not a maker"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "30649:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30649:41:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "30649:41:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "30699:26:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "30711:9:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "30722:2:154",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "30707:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30707:18:154"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "30699:4:154"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_fd4c9442ac3849165940560d9b5b7d5dbb57d9aa9db87ab293290bd9c49a184e__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "30547:9:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "30561:4:154",
                        "type": ""
                      }
                    ],
                    "src": "30396:335:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "30977:240:154",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "30994:9:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "31005:2:154",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "30987:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30987:21:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "30987:21:154"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "31017:72:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "31062:6:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "31074:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "31085:2:154",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "31070:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "31070:18:154"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_struct$_AssetType",
                              "nodeType": "YulIdentifier",
                              "src": "31031:30:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31031:58:154"
                          },
                          "variables": [
                            {
                              "name": "tail_1",
                              "nodeType": "YulTypedName",
                              "src": "31021:6:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "31109:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "31120:2:154",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "31105:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "31105:18:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "31129:6:154"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "31137:9:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "31125:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "31125:22:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "31098:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31098:50:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "31098:50:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "31157:54:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "31196:6:154"
                              },
                              {
                                "name": "tail_1",
                                "nodeType": "YulIdentifier",
                                "src": "31204:6:154"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_struct$_AssetType",
                              "nodeType": "YulIdentifier",
                              "src": "31165:30:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31165:46:154"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "31157:4:154"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_struct$_AssetType_$11489_memory_ptr_t_struct$_AssetType_$11489_memory_ptr__to_t_struct$_AssetType_$11489_memory_ptr_t_struct$_AssetType_$11489_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "30938:9:154",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "30949:6:154",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "30957:6:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "30968:4:154",
                        "type": ""
                      }
                    ],
                    "src": "30736:481:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "31427:439:154",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "31444:9:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "31455:2:154",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "31437:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31437:21:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "31437:21:154"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "31467:33:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "31493:6:154"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "31487:5:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31487:13:154"
                          },
                          "variables": [
                            {
                              "name": "memberValue0",
                              "nodeType": "YulTypedName",
                              "src": "31471:12:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "31520:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "31531:2:154",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "31516:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "31516:18:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "31536:4:154",
                                "type": "",
                                "value": "0x40"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "31509:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31509:32:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "31509:32:154"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "31550:79:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "memberValue0",
                                "nodeType": "YulIdentifier",
                                "src": "31595:12:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "31613:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "31624:3:154",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "31609:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "31609:19:154"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_struct$_AssetType",
                              "nodeType": "YulIdentifier",
                              "src": "31564:30:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31564:65:154"
                          },
                          "variables": [
                            {
                              "name": "tail_1",
                              "nodeType": "YulTypedName",
                              "src": "31554:6:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "31649:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "31660:3:154",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "31645:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "31645:19:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "31676:6:154"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "31684:4:154",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "31672:3:154"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "31672:17:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "31666:5:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "31666:24:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "31638:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31638:53:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "31638:53:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "31700:14:154",
                          "value": {
                            "name": "tail_1",
                            "nodeType": "YulIdentifier",
                            "src": "31708:6:154"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "31700:4:154"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "31723:29:154",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "31741:3:154",
                                    "type": "",
                                    "value": "160"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "31746:1:154",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "31737:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "31737:11:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "31750:1:154",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "31733:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31733:19:154"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "31727:2:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "31772:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "31783:4:154",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "31768:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "31768:20:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "31794:6:154"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "31802:2:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "31790:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "31790:15:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "31761:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31761:45:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "31761:45:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "31826:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "31837:4:154",
                                    "type": "",
                                    "value": "0x40"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "31822:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "31822:20:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value2",
                                    "nodeType": "YulIdentifier",
                                    "src": "31848:6:154"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "31856:2:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "31844:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "31844:15:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "31815:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31815:45:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "31815:45:154"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_struct$_Asset_$11494_memory_ptr_t_address_t_address__to_t_struct$_Asset_$11494_memory_ptr_t_address_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "31380:9:154",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "31391:6:154",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "31399:6:154",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "31407:6:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "31418:4:154",
                        "type": ""
                      }
                    ],
                    "src": "31222:644:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "31972:76:154",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "31982:26:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "31994:9:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "32005:2:154",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "31990:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31990:18:154"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "31982:4:154"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "32024:9:154"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "32035:6:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "32017:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32017:25:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "32017:25:154"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "31941:9:154",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "31952:6:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "31963:4:154",
                        "type": ""
                      }
                    ],
                    "src": "31871:177:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "32180:170:154",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "32190:26:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "32202:9:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "32213:2:154",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "32198:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32198:18:154"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "32190:4:154"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "32225:24:154",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "32235:14:154",
                            "type": "",
                            "value": "0xffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "32229:2:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "32265:9:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "32280:6:154"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "32288:2:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "32276:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "32276:15:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "32258:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32258:34:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "32258:34:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "32312:9:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "32323:2:154",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "32308:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "32308:18:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "32332:6:154"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "32340:2:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "32328:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "32328:15:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "32301:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32301:43:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "32301:43:154"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint48_t_uint48__to_t_uint256_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "32141:9:154",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "32152:6:154",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "32160:6:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "32171:4:154",
                        "type": ""
                      }
                    ],
                    "src": "32053:297:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "32449:439:154",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "32459:51:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "ptr_to_tail",
                                "nodeType": "YulIdentifier",
                                "src": "32498:11:154"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "32485:12:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32485:25:154"
                          },
                          "variables": [
                            {
                              "name": "rel_offset_of_tail",
                              "nodeType": "YulTypedName",
                              "src": "32463:18:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "32599:22:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "addr",
                                      "nodeType": "YulIdentifier",
                                      "src": "32608:4:154"
                                    },
                                    {
                                      "name": "addr",
                                      "nodeType": "YulIdentifier",
                                      "src": "32614:4:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "32601:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "32601:18:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "32601:18:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "rel_offset_of_tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "32533:18:154"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [],
                                            "functionName": {
                                              "name": "calldatasize",
                                              "nodeType": "YulIdentifier",
                                              "src": "32561:12:154"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "32561:14:154"
                                          },
                                          {
                                            "name": "base_ref",
                                            "nodeType": "YulIdentifier",
                                            "src": "32577:8:154"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nodeType": "YulIdentifier",
                                          "src": "32557:3:154"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "32557:29:154"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "32592:2:154",
                                            "type": "",
                                            "value": "30"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "32588:3:154"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "32588:7:154"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "32553:3:154"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "32553:43:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "32529:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "32529:68:154"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "32522:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32522:76:154"
                          },
                          "nodeType": "YulIf",
                          "src": "32519:2:154"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "32630:47:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "base_ref",
                                "nodeType": "YulIdentifier",
                                "src": "32648:8:154"
                              },
                              {
                                "name": "rel_offset_of_tail",
                                "nodeType": "YulIdentifier",
                                "src": "32658:18:154"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "32644:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32644:33:154"
                          },
                          "variables": [
                            {
                              "name": "addr_1",
                              "nodeType": "YulTypedName",
                              "src": "32634:6:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "32686:30:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "addr_1",
                                "nodeType": "YulIdentifier",
                                "src": "32709:6:154"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "32696:12:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32696:20:154"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "32686:6:154"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "32759:22:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "addr",
                                      "nodeType": "YulIdentifier",
                                      "src": "32768:4:154"
                                    },
                                    {
                                      "name": "addr",
                                      "nodeType": "YulIdentifier",
                                      "src": "32774:4:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "32761:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "32761:18:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "32761:18:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "32731:6:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "32739:18:154",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "32728:2:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32728:30:154"
                          },
                          "nodeType": "YulIf",
                          "src": "32725:2:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "32790:25:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "addr_1",
                                "nodeType": "YulIdentifier",
                                "src": "32802:6:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "32810:4:154",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "32798:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32798:17:154"
                          },
                          "variableNames": [
                            {
                              "name": "addr",
                              "nodeType": "YulIdentifier",
                              "src": "32790:4:154"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "32866:16:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "32875:1:154",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "32878:1:154",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "32868:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "32868:12:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "32868:12:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "addr",
                                "nodeType": "YulIdentifier",
                                "src": "32831:4:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [],
                                    "functionName": {
                                      "name": "calldatasize",
                                      "nodeType": "YulIdentifier",
                                      "src": "32841:12:154"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "32841:14:154"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "32857:6:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "32837:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "32837:27:154"
                              }
                            ],
                            "functionName": {
                              "name": "sgt",
                              "nodeType": "YulIdentifier",
                              "src": "32827:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32827:38:154"
                          },
                          "nodeType": "YulIf",
                          "src": "32824:2:154"
                        }
                      ]
                    },
                    "name": "access_calldata_tail_t_bytes_calldata_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "base_ref",
                        "nodeType": "YulTypedName",
                        "src": "32406:8:154",
                        "type": ""
                      },
                      {
                        "name": "ptr_to_tail",
                        "nodeType": "YulTypedName",
                        "src": "32416:11:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "addr",
                        "nodeType": "YulTypedName",
                        "src": "32432:4:154",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "32438:6:154",
                        "type": ""
                      }
                    ],
                    "src": "32355:533:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "32937:198:154",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "32947:19:154",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "32963:2:154",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "32957:5:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32957:9:154"
                          },
                          "variableNames": [
                            {
                              "name": "memPtr",
                              "nodeType": "YulIdentifier",
                              "src": "32947:6:154"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "32975:35:154",
                          "value": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "32997:6:154"
                              },
                              {
                                "name": "size",
                                "nodeType": "YulIdentifier",
                                "src": "33005:4:154"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "32993:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32993:17:154"
                          },
                          "variables": [
                            {
                              "name": "newFreePtr",
                              "nodeType": "YulTypedName",
                              "src": "32979:10:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "33085:13:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "invalid",
                                    "nodeType": "YulIdentifier",
                                    "src": "33087:7:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "33087:9:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "33087:9:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "33028:10:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "33040:18:154",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "33025:2:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "33025:34:154"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "33064:10:154"
                                  },
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "33076:6:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "33061:2:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "33061:22:154"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "33022:2:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33022:62:154"
                          },
                          "nodeType": "YulIf",
                          "src": "33019:2:154"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "33114:2:154",
                                "type": "",
                                "value": "64"
                              },
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "33118:10:154"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "33107:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33107:22:154"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "33107:22:154"
                        }
                      ]
                    },
                    "name": "allocateMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "size",
                        "nodeType": "YulTypedName",
                        "src": "32917:4:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "32926:6:154",
                        "type": ""
                      }
                    ],
                    "src": "32893:242:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "33213:108:154",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "33257:13:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "invalid",
                                    "nodeType": "YulIdentifier",
                                    "src": "33259:7:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "33259:9:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "33259:9:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "33229:6:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "33237:18:154",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "33226:2:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33226:30:154"
                          },
                          "nodeType": "YulIf",
                          "src": "33223:2:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "33279:36:154",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "33295:6:154"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "33303:4:154",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "mul",
                                  "nodeType": "YulIdentifier",
                                  "src": "33291:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "33291:17:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "33310:4:154",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "33287:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33287:28:154"
                          },
                          "variableNames": [
                            {
                              "name": "size",
                              "nodeType": "YulIdentifier",
                              "src": "33279:4:154"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_allocation_size_t_array$_t_bytes_$dyn",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "33193:6:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "size",
                        "nodeType": "YulTypedName",
                        "src": "33204:4:154",
                        "type": ""
                      }
                    ],
                    "src": "33140:181:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "33385:122:154",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "33429:13:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "invalid",
                                    "nodeType": "YulIdentifier",
                                    "src": "33431:7:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "33431:9:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "33431:9:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "33401:6:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "33409:18:154",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "33398:2:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33398:30:154"
                          },
                          "nodeType": "YulIf",
                          "src": "33395:2:154"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "33451:50:154",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "length",
                                        "nodeType": "YulIdentifier",
                                        "src": "33471:6:154"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "33479:4:154",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "33467:3:154"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "33467:17:154"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "33490:2:154",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "33486:3:154"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "33486:7:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "33463:3:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "33463:31:154"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "33496:4:154",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "33459:3:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33459:42:154"
                          },
                          "variableNames": [
                            {
                              "name": "size",
                              "nodeType": "YulIdentifier",
                              "src": "33451:4:154"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_allocation_size_t_bytes",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "33365:6:154",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "size",
                        "nodeType": "YulTypedName",
                        "src": "33376:4:154",
                        "type": ""
                      }
                    ],
                    "src": "33326:181:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "33565:205:154",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "33575:10:154",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "33584:1:154",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "33579:1:154",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "33644:63:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "33669:3:154"
                                        },
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "33674:1:154"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "33665:3:154"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "33665:11:154"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "src",
                                              "nodeType": "YulIdentifier",
                                              "src": "33688:3:154"
                                            },
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "33693:1:154"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "33684:3:154"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "33684:11:154"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "33678:5:154"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "33678:18:154"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "33658:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "33658:39:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "33658:39:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "33605:1:154"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "33608:6:154"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "33602:2:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33602:13:154"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "33616:19:154",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "33618:15:154",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "33627:1:154"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "33630:2:154",
                                      "type": "",
                                      "value": "32"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "33623:3:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "33623:10:154"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "33618:1:154"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "33598:3:154",
                            "statements": []
                          },
                          "src": "33594:113:154"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "33733:31:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "33746:3:154"
                                        },
                                        {
                                          "name": "length",
                                          "nodeType": "YulIdentifier",
                                          "src": "33751:6:154"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "33742:3:154"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "33742:16:154"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "33760:1:154",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "33735:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "33735:27:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "33735:27:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "33722:1:154"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "33725:6:154"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "33719:2:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33719:13:154"
                          },
                          "nodeType": "YulIf",
                          "src": "33716:2:154"
                        }
                      ]
                    },
                    "name": "copy_memory_to_memory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "src",
                        "nodeType": "YulTypedName",
                        "src": "33543:3:154",
                        "type": ""
                      },
                      {
                        "name": "dst",
                        "nodeType": "YulTypedName",
                        "src": "33548:3:154",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "33553:6:154",
                        "type": ""
                      }
                    ],
                    "src": "33512:258:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "33822:86:154",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "33886:16:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "33895:1:154",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "33898:1:154",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "33888:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "33888:12:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "33888:12:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "33845:5:154"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "33856:5:154"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "33871:3:154",
                                                "type": "",
                                                "value": "160"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "33876:1:154",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "33867:3:154"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "33867:11:154"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "33880:1:154",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nodeType": "YulIdentifier",
                                          "src": "33863:3:154"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "33863:19:154"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "33852:3:154"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "33852:31:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "33842:2:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "33842:42:154"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "33835:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33835:50:154"
                          },
                          "nodeType": "YulIf",
                          "src": "33832:2:154"
                        }
                      ]
                    },
                    "name": "validator_revert_t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "33811:5:154",
                        "type": ""
                      }
                    ],
                    "src": "33775:133:154"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "33959:87:154",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "34024:16:154",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "34033:1:154",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "34036:1:154",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "34026:6:154"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "34026:12:154"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "34026:12:154"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "33982:5:154"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "33993:5:154"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "34004:3:154",
                                            "type": "",
                                            "value": "224"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "34009:10:154",
                                            "type": "",
                                            "value": "0xffffffff"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "34000:3:154"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "34000:20:154"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "33989:3:154"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "33989:32:154"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "33979:2:154"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "33979:43:154"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "33972:6:154"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33972:51:154"
                          },
                          "nodeType": "YulIf",
                          "src": "33969:2:154"
                        }
                      ]
                    },
                    "name": "validator_revert_t_bytes4",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "33948:5:154",
                        "type": ""
                      }
                    ],
                    "src": "33913:133:154"
                  }
                ]
              },
              "contents": "{\n    { }\n    function abi_decode_t_address(offset) -> value\n    {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n    function abi_decode_t_array$_t_bytes_$dyn_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(array, array) }\n        let _1 := mload(offset)\n        let _2 := 0x20\n        let dst := allocateMemory(array_allocation_size_t_array$_t_bytes_$dyn(_1))\n        let dst_1 := dst\n        mstore(dst, _1)\n        dst := add(dst, _2)\n        let src := add(offset, _2)\n        let i := array\n        for { } lt(i, _1) { i := add(i, 1) }\n        {\n            mstore(dst, abi_decode_t_bytes_fromMemory(add(add(offset, mload(src)), _2), end))\n            dst := add(dst, _2)\n            src := add(src, _2)\n        }\n        array := dst_1\n    }\n    function abi_decode_t_array$_t_struct$_Part_$dyn_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(array, array) }\n        let _1 := mload(offset)\n        let _2 := 0x20\n        let dst := allocateMemory(array_allocation_size_t_array$_t_bytes_$dyn(_1))\n        let dst_1 := dst\n        mstore(dst, _1)\n        dst := add(dst, _2)\n        let src := add(offset, _2)\n        let _3 := 0x40\n        if gt(add(add(offset, mul(_1, _3)), _2), end) { revert(array, array) }\n        let i := array\n        for { } lt(i, _1) { i := add(i, 1) }\n        {\n            if slt(sub(end, src), _3) { revert(array, array) }\n            let memPtr := mload(_3)\n            let newFreePtr := add(memPtr, _3)\n            if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { invalid() }\n            mstore(_3, newFreePtr)\n            let value := mload(src)\n            validator_revert_t_address(value)\n            mstore(memPtr, value)\n            let value_1 := mload(add(src, _2))\n            if iszero(eq(value_1, and(value_1, 0xffffffffffffffffffffffff))) { revert(array, array) }\n            mstore(add(memPtr, _2), value_1)\n            mstore(dst, memPtr)\n            dst := add(dst, _2)\n            src := add(src, _3)\n        }\n        array := dst_1\n    }\n    function abi_decode_t_bool_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n    }\n    function abi_decode_t_bytes4(offset) -> value\n    {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n    function abi_decode_t_bytes(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(array, array) }\n        let _1 := calldataload(offset)\n        let array_1 := allocateMemory(array_allocation_size_t_bytes(_1))\n        mstore(array_1, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(array, array) }\n        calldatacopy(add(array_1, 0x20), add(offset, 0x20), _1)\n        mstore(add(add(array_1, _1), 0x20), array)\n        array := array_1\n    }\n    function abi_decode_t_bytes_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(array, array) }\n        let _1 := mload(offset)\n        let array_1 := allocateMemory(array_allocation_size_t_bytes(_1))\n        mstore(array_1, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(array, array) }\n        copy_memory_to_memory(add(offset, 0x20), add(array_1, 0x20), _1)\n        array := array_1\n    }\n    function abi_decode_t_struct$_AcceptBid_calldata(offset, end) -> value\n    {\n        if slt(sub(end, offset), 480) { revert(value, value) }\n        value := offset\n    }\n    function abi_decode_t_struct$_Asset(headStart, end) -> value\n    {\n        let _1 := 0x40\n        if slt(sub(end, headStart), _1) { revert(value, value) }\n        let memPtr := mload(_1)\n        let newFreePtr := add(memPtr, _1)\n        let _2 := 0xffffffffffffffff\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { invalid() }\n        mstore(_1, newFreePtr)\n        value := memPtr\n        let offset := calldataload(headStart)\n        if gt(offset, _2) { revert(0, 0) }\n        let _3 := add(headStart, offset)\n        if slt(sub(end, _3), _1) { revert(0, 0) }\n        let newFreePtr_1 := add(memPtr, 128)\n        if or(gt(newFreePtr_1, _2), lt(newFreePtr_1, newFreePtr)) { invalid() }\n        mstore(_1, newFreePtr_1)\n        let value_1 := calldataload(_3)\n        validator_revert_t_bytes4(value_1)\n        mstore(newFreePtr, value_1)\n        let offset_1 := calldataload(add(_3, 32))\n        if gt(offset_1, _2) { revert(0, 0) }\n        mstore(add(memPtr, 96), abi_decode_t_bytes(add(_3, offset_1), end))\n        mstore(memPtr, newFreePtr)\n        mstore(add(memPtr, 32), calldataload(add(headStart, 32)))\n    }\n    function abi_decode_t_struct$_DataV2_fromMemory(headStart, end) -> value\n    {\n        if slt(sub(end, headStart), 0x60) { revert(value, value) }\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, 0x60)\n        let _1 := 0xffffffffffffffff\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { invalid() }\n        mstore(64, newFreePtr)\n        value := memPtr\n        let offset := mload(headStart)\n        if gt(offset, _1) { revert(0, 0) }\n        mstore(memPtr, abi_decode_t_array$_t_struct$_Part_$dyn_fromMemory(add(headStart, offset), end))\n        let offset_1 := mload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        mstore(add(memPtr, 32), abi_decode_t_array$_t_struct$_Part_$dyn_fromMemory(add(headStart, offset_1), end))\n        mstore(add(memPtr, 64), abi_decode_t_bool_fromMemory(add(headStart, 64)))\n    }\n    function abi_decode_t_struct$_Order(headStart, end) -> value\n    {\n        let _1 := 0x0120\n        if slt(sub(end, headStart), _1) { revert(value, value) }\n        value := allocateMemory(_1)\n        mstore(value, abi_decode_t_address(headStart))\n        let offset := calldataload(add(headStart, 32))\n        let _2 := 0xffffffffffffffff\n        if gt(offset, _2) { revert(0, 0) }\n        mstore(add(value, 32), abi_decode_t_struct$_Asset(add(headStart, offset), end))\n        mstore(add(value, 64), abi_decode_t_address(add(headStart, 64)))\n        let offset_1 := calldataload(add(headStart, 96))\n        if gt(offset_1, _2) { revert(0, 0) }\n        mstore(add(value, 96), abi_decode_t_struct$_Asset(add(headStart, offset_1), end))\n        mstore(add(value, 128), calldataload(add(headStart, 128)))\n        mstore(add(value, 160), calldataload(add(headStart, 160)))\n        mstore(add(value, 192), calldataload(add(headStart, 192)))\n        mstore(add(value, 224), abi_decode_t_bytes4(add(headStart, 224)))\n        let _3 := 256\n        let offset_2 := calldataload(add(headStart, _3))\n        if gt(offset_2, _2) { revert(0, 0) }\n        mstore(add(value, _3), abi_decode_t_bytes(add(headStart, offset_2), end))\n    }\n    function abi_decode_t_uint48(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := calldataload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_address_payable_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := mload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_address_payablet_struct$_Mint1155Data_$11122_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value1, value1) }\n        let value := mload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n        let offset := mload(add(headStart, 32))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(value1, value1) }\n        let _2 := add(headStart, offset)\n        if slt(sub(dataEnd, _2), 0xc0) { revert(value1, value1) }\n        let value_1 := allocateMemory(0xc0)\n        mstore(value_1, mload(_2))\n        let offset_1 := mload(add(_2, 32))\n        if gt(offset_1, _1) { revert(value1, value1) }\n        mstore(add(value_1, 32), abi_decode_t_bytes_fromMemory(add(_2, offset_1), dataEnd))\n        mstore(add(value_1, 64), mload(add(_2, 64)))\n        let offset_2 := mload(add(_2, 96))\n        if gt(offset_2, _1) { revert(value1, value1) }\n        mstore(add(value_1, 96), abi_decode_t_array$_t_struct$_Part_$dyn_fromMemory(add(_2, offset_2), dataEnd))\n        let offset_3 := mload(add(_2, 128))\n        if gt(offset_3, _1) { revert(value1, value1) }\n        mstore(add(value_1, 128), abi_decode_t_array$_t_struct$_Part_$dyn_fromMemory(add(_2, offset_3), dataEnd))\n        let offset_4 := mload(add(_2, 160))\n        if gt(offset_4, _1) { revert(value1, value1) }\n        mstore(add(value_1, 160), abi_decode_t_array$_t_bytes_$dyn_fromMemory(add(_2, offset_4), dataEnd))\n        value1 := value_1\n    }\n    function abi_decode_tuple_t_address_payablet_struct$_Mint721Data_$11304_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        let value := mload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n        let offset := mload(add(headStart, 32))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(value1, value1) }\n        let _2 := add(headStart, offset)\n        if slt(sub(dataEnd, _2), 0xa0) { revert(value1, value1) }\n        let value_1 := allocateMemory(0xa0)\n        mstore(value_1, mload(_2))\n        let offset_1 := mload(add(_2, 32))\n        if gt(offset_1, _1) { revert(value1, value1) }\n        mstore(add(value_1, 32), abi_decode_t_bytes_fromMemory(add(_2, offset_1), dataEnd))\n        let offset_2 := mload(add(_2, 64))\n        if gt(offset_2, _1) { revert(value1, value1) }\n        mstore(add(value_1, 64), abi_decode_t_array$_t_struct$_Part_$dyn_fromMemory(add(_2, offset_2), dataEnd))\n        let offset_3 := mload(add(_2, 96))\n        if gt(offset_3, _1) { revert(value1, value1) }\n        mstore(add(value_1, 96), abi_decode_t_array$_t_struct$_Part_$dyn_fromMemory(add(_2, offset_3), dataEnd))\n        let offset_4 := mload(add(_2, 128))\n        if gt(offset_4, _1) { revert(value1, value1) }\n        mstore(add(value_1, 128), abi_decode_t_array$_t_bytes_$dyn_fromMemory(add(_2, offset_4), dataEnd))\n        value1 := value_1\n    }\n    function abi_decode_tuple_t_address_payablet_uint256_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        let value := mload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n        value1 := mload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_addresst_contract$_IRoyaltiesProvider_$5469(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(value4, value4) }\n        let value := calldataload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_t_address(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n        let value_2 := calldataload(add(headStart, 96))\n        validator_revert_t_address(value_2)\n        value3 := value_2\n        let value_3 := calldataload(add(headStart, 128))\n        validator_revert_t_address(value_3)\n        value4 := value_3\n    }\n    function abi_decode_tuple_t_addresst_bytes_memory_ptrt_bytes32t_bytes32t_uint8(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(value2, value2) }\n        let value := calldataload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(value2, value2) }\n        value1 := abi_decode_t_bytes(add(headStart, offset), dataEnd)\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        let value_1 := calldataload(add(headStart, 128))\n        if iszero(eq(value_1, and(value_1, 0xff))) { revert(value4, value4) }\n        value4 := value_1\n    }\n    function abi_decode_tuple_t_addresst_uint48t_uint48(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(value2, value2) }\n        let value := calldataload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n        value1 := abi_decode_t_uint48(add(headStart, 32))\n        value2 := abi_decode_t_uint48(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_array$_t_struct$_Part_$11574_memory_ptr_$dyn_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let offset := mload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(value0, value0) }\n        value0 := abi_decode_t_array$_t_struct$_Part_$dyn_fromMemory(add(headStart, offset), dataEnd)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := abi_decode_t_bool_fromMemory(headStart)\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := calldataload(headStart)\n        validator_revert_t_bytes4(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_bytes4t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        let value := calldataload(headStart)\n        validator_revert_t_bytes4(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_t_address(value_1)\n        value1 := value_1\n    }\n    function abi_decode_tuple_t_contract$_IRoyaltiesProvider_$5469(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := calldataload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_struct$_AcceptBid_$7038_calldata_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(value0, value0) }\n        value0 := abi_decode_t_struct$_AcceptBid_calldata(add(headStart, offset), dataEnd)\n    }\n    function abi_decode_tuple_t_struct$_AssetType_$11489_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let offset := mload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(value0, value0) }\n        let _2 := add(headStart, offset)\n        if slt(sub(dataEnd, _2), 0x40) { revert(value0, value0) }\n        let memPtr := mload(0x40)\n        let newFreePtr := add(memPtr, 0x40)\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { invalid() }\n        mstore(0x40, newFreePtr)\n        let value := mload(_2)\n        validator_revert_t_bytes4(value)\n        mstore(memPtr, value)\n        let offset_1 := mload(add(_2, 32))\n        if gt(offset_1, _1) { revert(value0, value0) }\n        mstore(add(memPtr, 32), abi_decode_t_bytes_fromMemory(add(_2, offset_1), dataEnd))\n        value0 := memPtr\n    }\n    function abi_decode_tuple_t_struct$_DataV1_$8054_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let offset := mload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(value0, value0) }\n        let _2 := add(headStart, offset)\n        if slt(sub(dataEnd, _2), 0x40) { revert(value0, value0) }\n        let memPtr := mload(0x40)\n        let newFreePtr := add(memPtr, 0x40)\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { invalid() }\n        mstore(0x40, newFreePtr)\n        let offset_1 := mload(_2)\n        if gt(offset_1, _1) { revert(value0, value0) }\n        mstore(memPtr, abi_decode_t_array$_t_struct$_Part_$dyn_fromMemory(add(_2, offset_1), dataEnd))\n        let offset_2 := mload(add(_2, 32))\n        if gt(offset_2, _1) { revert(value0, value0) }\n        mstore(add(memPtr, 32), abi_decode_t_array$_t_struct$_Part_$dyn_fromMemory(add(_2, offset_2), dataEnd))\n        value0 := memPtr\n    }\n    function abi_decode_tuple_t_struct$_DataV2_$8076_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let offset := mload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(value0, value0) }\n        value0 := abi_decode_t_struct$_DataV2_fromMemory(add(headStart, offset), dataEnd)\n    }\n    function abi_decode_tuple_t_struct$_DataV3_$8098_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let offset := mload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(value0, value0) }\n        value0 := abi_decode_t_struct$_DataV2_fromMemory(add(headStart, offset), dataEnd)\n    }\n    function abi_decode_tuple_t_struct$_Order_$7434_memory_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(value0, value0) }\n        value0 := abi_decode_t_struct$_Order(add(headStart, offset), dataEnd)\n    }\n    function abi_decode_tuple_t_struct$_Order_$7434_memory_ptrt_bytes_memory_ptrt_struct$_Order_$7434_memory_ptrt_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(value2, value2) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(value2, value2) }\n        value0 := abi_decode_t_struct$_Order(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(value2, value2) }\n        value1 := abi_decode_t_bytes(add(headStart, offset_1), dataEnd)\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, _1) { revert(value2, value2) }\n        value2 := abi_decode_t_struct$_Order(add(headStart, offset_2), dataEnd)\n        let offset_3 := calldataload(add(headStart, 96))\n        if gt(offset_3, _1) { revert(value3, value3) }\n        value3 := abi_decode_t_bytes(add(headStart, offset_3), dataEnd)\n    }\n    function abi_decode_tuple_t_struct$_Purchase_$7007_calldata_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(value0, value0) }\n        value0 := abi_decode_t_struct$_AcceptBid_calldata(add(headStart, offset), dataEnd)\n    }\n    function abi_decode_tuple_t_uint48(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := abi_decode_t_uint48(headStart)\n    }\n    function abi_encode_t_bytes(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_t_struct$_AssetType(value, pos) -> end\n    {\n        mstore(pos, and(mload(value), shl(224, 0xffffffff)))\n        let memberValue0 := mload(add(value, 0x20))\n        mstore(add(pos, 0x20), 0x40)\n        end := abi_encode_t_bytes(memberValue0, add(pos, 0x40))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), 160)\n        mstore(add(headStart, 160), tail)\n        tail := add(headStart, 192)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_address_t_uint48_t_uint48__to_t_address_t_uint48_t_uint48__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        let _1 := 0xffffffffffff\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, _1))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_uint256_t_uint256__to_t_bytes32_t_bytes32_t_uint256_t_uint256__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_t_bytes(value0, add(headStart, 32))\n    }\n    function abi_encode_tuple_t_contract$_IERC1155Upgradeable_$1339_t_address_t_address_t_uint256_t_uint256_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, _1))\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n        mstore(add(headStart, 160), 192)\n        mstore(add(headStart, 192), tail)\n        tail := add(headStart, 224)\n    }\n    function abi_encode_tuple_t_contract$_IERC20Upgradeable_$1947_t_address_t_address_t_uint256__to_t_address_t_address_t_address_t_uint256__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, _1))\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_encode_tuple_t_contract$_IERC721Upgradeable_$2139_t_address_t_address_t_uint256__to_t_address_t_address_t_address_t_uint256__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, _1))\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_encode_tuple_t_contract$_IRoyaltiesProvider_$5469__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_stringliteral_0c57eb6f42259d1e3092185f3dd28292ea5e8dcde054022007806750bd9885d6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"not found IAssetMatcher\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_0d6a531b613b22de3789297ff1426e049b434d7c250c87f8aa6d31c39b711f5c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Royalties are too high (>50%)\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_2a54609e2a39cfed033292f045a5e18f320567a8c17fea6363660379c0b2b703__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"0 salt can't be used\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_3de44fe251e621489871b7acda51716782a0ca65294ed78865fc06109172fbd4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"transferPayouts: nothing to tran\")\n        mstore(add(headStart, 96), \"sfer\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_653ab491ff02a6248b97a43613283e04cb49bbcd2579a02dfca519158a7f6d7c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"rightOrder.taker verification fa\")\n        mstore(add(headStart, 96), \"iled\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_736a45f1fa5356e0bc76a3607b7ebc72103f22067139f7fd70e178e22247d91a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 18)\n        mstore(add(headStart, 64), \"erc721 value error\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_99c54eb9ed32adddd848a8e2315700764966121b5fb51bdbca14d8852017582f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 15)\n        mstore(add(headStart, 64), \"nothing to fill\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_a0374a8e5f11dd7faae107e84db5308145b84a54db63612ff00e119787377d38__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 21)\n        mstore(add(headStart, 64), \"erc20 transfer failed\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_a2d1dd9c22c43b94c9f40fe466a6e170d993cce47b01f3a3d9aa5de12e7a0006__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 21)\n        mstore(add(headStart, 64), \"origin fee is too big\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_a8d4179c57d21bb0adffe74c6e7a4d43bf1559a57e0b833a295fb2cf352d9f77__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"Unknown Order data type\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_b48e3c99943e085eac87623ac486ebce51c0c61d29c41f60dcfbbf3e2beaabae__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 30)\n        mstore(add(headStart, 64), \"Sum payouts Bps not equal 100%\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_c48362a3fad4fc10587f361cd89d92c9a72c1a6e2fe4e5c5b5aabc0b03c74327__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 18)\n        mstore(add(headStart, 64), \"assets don't match\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_e2988d5921d0b0b980c95629752e1ae33544ef2a29d168957ce2afee9edae127__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"leftOrder.taker verification fai\")\n        mstore(add(headStart, 96), \"led\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_f38787fedbd8f1d66c237a0aae7262ee866033b9295a240f1f05b891b71df4a6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 14)\n        mstore(add(headStart, 64), \"not enough eth\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_fd4c9442ac3849165940560d9b5b7d5dbb57d9aa9db87ab293290bd9c49a184e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 11)\n        mstore(add(headStart, 64), \"not a maker\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_struct$_AssetType_$11489_memory_ptr_t_struct$_AssetType_$11489_memory_ptr__to_t_struct$_AssetType_$11489_memory_ptr_t_struct$_AssetType_$11489_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 64)\n        let tail_1 := abi_encode_t_struct$_AssetType(value0, add(headStart, 64))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        tail := abi_encode_t_struct$_AssetType(value1, tail_1)\n    }\n    function abi_encode_tuple_t_struct$_Asset_$11494_memory_ptr_t_address_t_address__to_t_struct$_Asset_$11494_memory_ptr_t_address_t_address__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, 96)\n        let memberValue0 := mload(value0)\n        mstore(add(headStart, 96), 0x40)\n        let tail_1 := abi_encode_t_struct$_AssetType(memberValue0, add(headStart, 160))\n        mstore(add(headStart, 128), mload(add(value0, 0x20)))\n        tail := tail_1\n        let _1 := sub(shl(160, 1), 1)\n        mstore(add(headStart, 0x20), and(value1, _1))\n        mstore(add(headStart, 0x40), and(value2, _1))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint48_t_uint48__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := 0xffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function access_calldata_tail_t_bytes_calldata_ptr(base_ref, ptr_to_tail) -> addr, length\n    {\n        let rel_offset_of_tail := calldataload(ptr_to_tail)\n        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), not(30)))) { revert(addr, addr) }\n        let addr_1 := add(base_ref, rel_offset_of_tail)\n        length := calldataload(addr_1)\n        if gt(length, 0xffffffffffffffff) { revert(addr, addr) }\n        addr := add(addr_1, 0x20)\n        if sgt(addr, sub(calldatasize(), length)) { revert(0, 0) }\n    }\n    function allocateMemory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, size)\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { invalid() }\n        mstore(64, newFreePtr)\n    }\n    function array_allocation_size_t_array$_t_bytes_$dyn(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { invalid() }\n        size := add(mul(length, 0x20), 0x20)\n    }\n    function array_allocation_size_t_bytes(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { invalid() }\n        size := add(and(add(length, 0x1f), not(31)), 0x20)\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function validator_revert_t_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function validator_revert_t_bytes4(value)\n    {\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n    }\n}",
              "id": 154,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "immutableReferences": {},
          "linkReferences": {},
          "object": "",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x11F JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0xA0 JUMPI DUP1 PUSH4 0xD6CA6AB7 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xD6CA6AB7 EQ PUSH2 0x2F2 JUMPI DUP1 PUSH4 0xE2864FE3 EQ PUSH2 0x312 JUMPI DUP1 PUSH4 0xE99A3F80 EQ PUSH2 0x332 JUMPI DUP1 PUSH4 0xEAE3AD6F EQ PUSH2 0x345 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x365 JUMPI PUSH2 0x11F JUMP JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x259 JUMPI DUP1 PUSH4 0xB0E21E8A EQ PUSH2 0x26E JUMPI DUP1 PUSH4 0xB39DEB46 EQ PUSH2 0x292 JUMPI DUP1 PUSH4 0xB74C8E9A EQ PUSH2 0x2B2 JUMPI DUP1 PUSH4 0xBC158C2D EQ PUSH2 0x2D2 JUMPI PUSH2 0x11F JUMP JUMPDEST DUP1 PUSH4 0x30C642F1 GT PUSH2 0xE7 JUMPI DUP1 PUSH4 0x30C642F1 EQ PUSH2 0x1CF JUMPI DUP1 PUSH4 0x3BE89922 EQ PUSH2 0x1EF JUMPI DUP1 PUSH4 0x67D49A3B EQ PUSH2 0x20F JUMPI DUP1 PUSH4 0x6D8F0694 EQ PUSH2 0x222 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x244 JUMPI PUSH2 0x11F JUMP JUMPDEST DUP1 PUSH4 0xC53C51C EQ PUSH2 0x124 JUMPI DUP1 PUSH4 0xD5F7D35 EQ PUSH2 0x14D JUMPI DUP1 PUSH4 0x1372A625 EQ PUSH2 0x162 JUMPI DUP1 PUSH4 0x20158C44 EQ PUSH2 0x182 JUMPI DUP1 PUSH4 0x2D0335AB EQ PUSH2 0x1AF JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x137 PUSH2 0x132 CALLDATASIZE PUSH1 0x4 PUSH2 0x4F91 JUMP JUMPDEST PUSH2 0x385 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x144 SWAP2 SWAP1 PUSH2 0x54AB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x160 PUSH2 0x15B CALLDATASIZE PUSH1 0x4 PUSH2 0x50F9 JUMP JUMPDEST PUSH2 0x6FE JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x16E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x160 PUSH2 0x17D CALLDATASIZE PUSH1 0x4 PUSH2 0x4F2A JUMP JUMPDEST PUSH2 0xA1B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x18E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A2 PUSH2 0x19D CALLDATASIZE PUSH1 0x4 PUSH2 0x508D JUMP JUMPDEST PUSH2 0xB38 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x144 SWAP2 SWAP1 PUSH2 0x5487 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A2 PUSH2 0x1CA CALLDATASIZE PUSH1 0x4 PUSH2 0x4CD5 JUMP JUMPDEST PUSH2 0xB4B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x160 PUSH2 0x1EA CALLDATASIZE PUSH1 0x4 PUSH2 0x50C1 JUMP JUMPDEST PUSH2 0xB67 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x160 PUSH2 0x20A CALLDATASIZE PUSH1 0x4 PUSH2 0x4CD5 JUMP JUMPDEST PUSH2 0xC37 JUMP JUMPDEST PUSH2 0x160 PUSH2 0x21D CALLDATASIZE PUSH1 0x4 PUSH2 0x50F9 JUMP JUMPDEST PUSH2 0xCBC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x237 PUSH2 0xF9C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x144 SWAP2 SWAP1 PUSH2 0x53BB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x250 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x160 PUSH2 0xFAC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x265 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x237 PUSH2 0x1058 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x27A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x283 PUSH2 0x1068 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x144 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x545E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x29E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x160 PUSH2 0x2AD CALLDATASIZE PUSH1 0x4 PUSH2 0x50C1 JUMP JUMPDEST PUSH2 0x1093 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x160 PUSH2 0x2CD CALLDATASIZE PUSH1 0x4 PUSH2 0x4FFD JUMP JUMPDEST PUSH2 0x1157 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x160 PUSH2 0x2ED CALLDATASIZE PUSH1 0x4 PUSH2 0x4CD5 JUMP JUMPDEST PUSH2 0x11D9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x160 PUSH2 0x30D CALLDATASIZE PUSH1 0x4 PUSH2 0x534D JUMP JUMPDEST PUSH2 0x12A6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x31E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x160 PUSH2 0x32D CALLDATASIZE PUSH1 0x4 PUSH2 0x5274 JUMP JUMPDEST PUSH2 0x1380 JUMP JUMPDEST PUSH2 0x160 PUSH2 0x340 CALLDATASIZE PUSH1 0x4 PUSH2 0x52A6 JUMP JUMPDEST PUSH2 0x1441 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x351 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x160 PUSH2 0x360 CALLDATASIZE PUSH1 0x4 PUSH2 0x534D JUMP JUMPDEST PUSH2 0x1457 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x371 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x160 PUSH2 0x380 CALLDATASIZE PUSH1 0x4 PUSH2 0x4CD5 JUMP JUMPDEST PUSH2 0x152E JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x392 DUP7 PUSH2 0x1631 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 DUP2 AND SWAP1 DUP3 AND EQ ISZERO PUSH2 0x3F9 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x57726F6E672066756E6374696F6E5369676E6174757265000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH2 0x193 PUSH1 0x20 SWAP1 DUP2 MSTORE SWAP1 DUP5 SWAP1 KECCAK256 SLOAD DUP4 MSTORE DUP3 ADD MSTORE SWAP1 DUP2 ADD DUP8 SWAP1 MSTORE PUSH2 0x437 DUP9 DUP3 DUP9 DUP9 DUP9 PUSH2 0x1651 JUMP JUMPDEST PUSH2 0x472 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x5B16 PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x193 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x497 SWAP1 PUSH1 0x1 PUSH2 0x173B JUMP JUMPDEST PUSH2 0x193 PUSH1 0x0 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x0 DUP1 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 DUP12 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x502 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x4E3 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x60 SHL DUP2 MSTORE PUSH1 0x14 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x578 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x559 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x5DA JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5DF JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x636 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E2063616C6C206E6F74207375636365737366756C00000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH32 0x5845892132946850460BFF5A0083F71031BC5BF9AADCD40F1DE79423EAC9B10B DUP11 CALLER DUP12 PUSH1 0x40 MLOAD DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x6B5 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x69D JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x6E2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP5 POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x718 PUSH2 0x713 PUSH1 0xC0 DUP5 ADD PUSH1 0xA0 DUP6 ADD PUSH2 0x4CD5 JUMP JUMPDEST PUSH2 0x179E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x120 DUP2 ADD SWAP1 SWAP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 DUP1 PUSH2 0x738 PUSH1 0x20 DUP7 ADD DUP7 PUSH2 0x4CD5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH1 0x40 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x76F SWAP2 SWAP1 PUSH2 0x50A5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x78B PUSH1 0x60 DUP11 ADD DUP11 PUSH2 0x58B0 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD DUP3 SWAP1 MSTORE POP SWAP4 SWAP1 SWAP5 MSTORE POP POP SWAP2 DUP4 MSTORE POP PUSH1 0x20 DUP9 DUP2 ADD CALLDATALOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP2 DUP4 MSTORE DUP3 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE DUP7 DUP2 MSTORE PUSH1 0x80 DUP1 DUP10 ADD CALLDATALOAD SWAP4 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP1 DUP4 ADD MSTORE PUSH1 0xC0 DUP1 DUP8 ADD CALLDATALOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0xE0 DUP8 ADD CALLDATALOAD SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x100 DUP7 ADD CALLDATALOAD PUSH1 0xA0 DUP4 ADD MSTORE ADD PUSH2 0x82E PUSH2 0x140 DUP7 ADD PUSH2 0x120 DUP8 ADD PUSH2 0x50A5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x84B PUSH2 0x140 DUP7 ADD DUP7 PUSH2 0x58B0 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD DUP3 SWAP1 MSTORE POP SWAP4 SWAP1 SWAP5 MSTORE POP POP PUSH1 0x40 DUP1 MLOAD PUSH2 0x120 DUP2 ADD DUP3 MSTORE DUP3 DUP2 MSTORE DUP2 MLOAD DUP1 DUP4 ADD DUP4 MSTORE DUP8 DUP2 MSTORE PUSH2 0x180 DUP10 ADD CALLDATALOAD PUSH1 0x20 DUP3 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 ADD MSTORE DUP1 DUP3 ADD DUP4 SWAP1 MSTORE DUP2 MLOAD PUSH1 0x80 DUP2 ADD DUP4 MSTORE SWAP5 SWAP6 POP SWAP2 SWAP4 SWAP2 SWAP3 POP PUSH1 0x60 DUP1 DUP5 ADD SWAP3 SWAP2 DUP3 SWAP2 DUP3 DUP3 ADD SWAP2 DUP3 SWAP2 PUSH2 0x8DF SWAP2 SWAP1 DUP13 ADD SWAP1 DUP13 ADD PUSH2 0x50A5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x8FB PUSH1 0x60 DUP12 ADD DUP12 PUSH2 0x58B0 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD DUP3 SWAP1 MSTORE POP SWAP4 SWAP1 SWAP5 MSTORE POP POP SWAP2 DUP4 MSTORE POP PUSH2 0x1A0 DUP10 ADD CALLDATALOAD PUSH1 0x20 SWAP3 DUP4 ADD MSTORE SWAP2 DUP4 MSTORE DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD PUSH2 0x96A PUSH2 0x140 DUP8 ADD PUSH2 0x120 DUP9 ADD PUSH2 0x50A5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x987 PUSH2 0x1C0 DUP8 ADD DUP8 PUSH2 0x58B0 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP POP POP SWAP2 MSTORE POP SWAP1 POP PUSH2 0xA0B DUP3 PUSH2 0x9D1 PUSH2 0x160 DUP8 ADD DUP8 PUSH2 0x58B0 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x1801 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xA15 DUP3 DUP3 PUSH2 0x1818 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0xA34 JUMPI POP PUSH2 0xA34 PUSH2 0x1A82 JUMP JUMPDEST DUP1 PUSH2 0xA42 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0xA7D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x5A85 PUSH1 0x2E SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0xAA8 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT PUSH2 0xFF00 NOT SWAP1 SWAP2 AND PUSH2 0x100 OR AND PUSH1 0x1 OR SWAP1 SSTORE JUMPDEST PUSH2 0xAB0 PUSH2 0x1A93 JUMP JUMPDEST PUSH2 0xAB8 PUSH2 0x1B35 JUMP JUMPDEST PUSH2 0xAC0 PUSH2 0x1C2E JUMP JUMPDEST PUSH2 0xB09 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xE DUP2 MSTORE PUSH1 0x20 ADD PUSH14 0x22BC31B430B733B2A6B2BA30AB19 PUSH1 0x91 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x31 PUSH1 0xF8 SHL DUP2 MSTORE POP PUSH2 0x1CFE JUMP JUMPDEST PUSH2 0xB13 DUP7 DUP7 PUSH2 0x1D8E JUMP JUMPDEST PUSH2 0xB1E DUP5 DUP5 DUP5 PUSH2 0x1E38 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xB30 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x12F PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x193 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xB6F PUSH2 0x1EF8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xB80 PUSH2 0x1058 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xBC9 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5AF6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x97 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND OR SWAP1 SSTORE MLOAD PUSH32 0x4B5ACED933C0C9A88AEAC3F0B3B72C5AAF75DF8EBAF53225773248C4C3153593 SWAP1 PUSH2 0xC2B SWAP1 DUP5 SWAP1 PUSH2 0x53BB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH2 0xC3F PUSH2 0x1EF8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xC50 PUSH2 0x1058 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xC99 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5AF6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x162 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCD1 PUSH2 0x713 PUSH1 0xC0 DUP5 ADD PUSH1 0xA0 DUP6 ADD PUSH2 0x4CD5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x120 DUP2 ADD SWAP1 SWAP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 DUP1 PUSH2 0xCF1 PUSH1 0x20 DUP7 ADD DUP7 PUSH2 0x4CD5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x80 ADD CALLDATALOAD DUP2 MSTORE POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH1 0x40 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xD56 SWAP2 SWAP1 PUSH2 0x50A5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xD72 PUSH1 0x60 DUP11 ADD DUP11 PUSH2 0x58B0 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP POP POP SWAP2 MSTORE POP DUP2 MSTORE PUSH1 0x20 DUP8 DUP2 ADD CALLDATALOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE PUSH1 0xC0 DUP7 ADD CALLDATALOAD SWAP1 DUP3 ADD MSTORE PUSH1 0xE0 DUP6 ADD CALLDATALOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x100 DUP6 ADD CALLDATALOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD PUSH2 0xDED PUSH2 0x140 DUP7 ADD PUSH2 0x120 DUP8 ADD PUSH2 0x50A5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE0A PUSH2 0x140 DUP7 ADD DUP7 PUSH2 0x58B0 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD DUP3 SWAP1 MSTORE POP SWAP4 SWAP1 SWAP5 MSTORE POP POP PUSH1 0x40 DUP1 MLOAD PUSH2 0x120 DUP2 ADD DUP3 MSTORE DUP3 DUP2 MSTORE DUP2 MLOAD PUSH1 0x80 DUP2 ADD DUP4 MSTORE SWAP5 SWAP6 POP SWAP2 SWAP4 SWAP2 SWAP3 POP PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 DUP2 SWAP1 DUP2 DUP2 ADD SWAP1 DUP2 SWAP1 PUSH2 0xE7C SWAP1 PUSH1 0x60 DUP13 ADD SWAP1 DUP13 ADD PUSH2 0x50A5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE98 PUSH1 0x60 DUP12 ADD DUP12 PUSH2 0x58B0 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD DUP3 SWAP1 MSTORE POP SWAP4 SWAP1 SWAP5 MSTORE POP POP SWAP2 DUP4 MSTORE POP PUSH2 0x1A0 DUP10 ADD CALLDATALOAD PUSH1 0x20 SWAP3 DUP4 ADD MSTORE SWAP2 DUP4 MSTORE DUP3 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE DUP9 DUP2 MSTORE PUSH2 0x180 DUP11 ADD CALLDATALOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD PUSH2 0xF2B PUSH2 0x140 DUP8 ADD PUSH2 0x120 DUP9 ADD PUSH2 0x50A5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xF48 PUSH2 0x1C0 DUP8 ADD DUP8 PUSH2 0x58B0 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP POP POP SWAP2 MSTORE POP SWAP1 POP PUSH2 0xF92 DUP3 PUSH2 0x9D1 PUSH2 0x160 DUP8 ADD DUP8 PUSH2 0x58B0 JUMP JUMPDEST PUSH2 0xA15 DUP2 DUP4 PUSH2 0x1818 JUMP JUMPDEST PUSH2 0x162 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0xFB4 PUSH2 0x1EF8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xFC5 PUSH2 0x1058 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x100E JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5AF6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x40 MLOAD PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP4 SWAP1 LOG3 PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x161 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 PUSH6 0xFFFFFFFFFFFF PUSH1 0x1 PUSH1 0xA0 SHL DUP3 DIV DUP2 AND SWAP2 PUSH1 0x1 PUSH1 0xD0 SHL SWAP1 DIV AND DUP4 JUMP JUMPDEST PUSH2 0x109B PUSH2 0x1EF8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x10AC PUSH2 0x1058 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x10F5 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5AF6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND OR SWAP1 SSTORE MLOAD PUSH32 0xD2BF91075F105D0FD80328DA28E20EBDAD1C1261839711183BC29A44CBE6C72F SWAP1 PUSH2 0xC2B SWAP1 DUP5 SWAP1 PUSH2 0x53BB JUMP JUMPDEST PUSH2 0x115F PUSH2 0x1EF8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1170 PUSH2 0x1058 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x11B9 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5AF6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x11C2 DUP4 PUSH2 0x11D9 JUMP JUMPDEST PUSH2 0x11CB DUP3 PUSH2 0x12A6 JUMP JUMPDEST PUSH2 0x11D4 DUP2 PUSH2 0x1457 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x11E1 PUSH2 0x1EF8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x11F2 PUSH2 0x1058 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x123B JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5AF6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x161 SLOAD PUSH1 0x40 MLOAD PUSH32 0xA4B009CC442411B602EAF94BC0579B6ABDB8FD90B4EF5B9426E270038906BD03 SWAP2 PUSH2 0x127B SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 DUP5 SWAP1 PUSH2 0x53CF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0x161 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x12AE PUSH2 0x1EF8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x12BF PUSH2 0x1058 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1308 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5AF6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x161 SLOAD PUSH1 0x40 MLOAD PUSH32 0x70BBA4F904A93BA5C1AF3A1BB602BC9C058551DBE963DFE0B6CB5BC11C5FEA9E SWAP2 PUSH2 0x134D SWAP2 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP2 DIV PUSH6 0xFFFFFFFFFFFF AND SWAP1 DUP5 SWAP1 PUSH2 0x5897 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0x161 DUP1 SLOAD PUSH6 0xFFFFFFFFFFFF SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0xA0 SHL MUL PUSH6 0xFFFFFFFFFFFF PUSH1 0xA0 SHL NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1393 PUSH2 0x1EF8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x13C2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13B9 SWAP1 PUSH2 0x5807 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x80 DUP2 ADD MLOAD PUSH2 0x13E3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13B9 SWAP1 PUSH2 0x5599 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x13EE DUP3 PUSH2 0x1F07 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH2 0x12F PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x0 NOT SWAP1 SSTORE MLOAD SWAP1 SWAP2 POP PUSH32 0xE8D9861DBC9C663ED3ACCD261BBE2FE01E0D3D9E5F51FA38523B265C7757A93A SWAP1 PUSH2 0x1435 SWAP1 DUP4 SWAP1 PUSH2 0x5487 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH2 0x144D DUP5 DUP5 DUP5 DUP5 PUSH2 0x208F JUMP JUMPDEST PUSH2 0xA15 DUP5 DUP4 PUSH2 0x1818 JUMP JUMPDEST PUSH2 0x145F PUSH2 0x1EF8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1470 PUSH2 0x1058 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x14B9 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5AF6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x161 SLOAD PUSH1 0x40 MLOAD PUSH32 0xA8AF9093CAA9BEB61D20432227C66258CEEF926F21879B80F3ADF22A4D19F131 SWAP2 PUSH2 0x14FE SWAP2 PUSH1 0x1 PUSH1 0xD0 SHL SWAP1 SWAP2 DIV PUSH6 0xFFFFFFFFFFFF AND SWAP1 DUP5 SWAP1 PUSH2 0x5897 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0x161 DUP1 SLOAD PUSH6 0xFFFFFFFFFFFF SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0xD0 SHL MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x1536 PUSH2 0x1EF8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1547 PUSH2 0x1058 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1590 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5AF6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x15D5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x59F0 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND SWAP3 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1645 JUMPI POP PUSH1 0x0 PUSH2 0x164C JUMP JUMPDEST POP PUSH1 0x20 DUP2 ADD MLOAD JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH2 0x1667 PUSH2 0x1662 DUP9 PUSH2 0x215B JUMP JUMPDEST PUSH2 0x21DE JUMP JUMPDEST DUP5 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x16BE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x171A JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x496E76616C6964207369676E6174757265 PUSH1 0x78 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ SWAP2 POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x1795 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x17A6 PUSH2 0x482E JUMP JUMPDEST PUSH2 0x17AE PUSH2 0x482E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x17CB JUMPI PUSH4 0x55575F5D PUSH1 0xE1 SHL DUP2 MSTORE PUSH2 0x1798 JUMP JUMPDEST PUSH4 0x22BA1761 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x40 MLOAD PUSH2 0x17E6 SWAP1 DUP5 SWAP1 PUSH1 0x20 ADD PUSH2 0x53BB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x180A DUP3 PUSH2 0x222A JUMP JUMPDEST PUSH2 0x1814 DUP3 DUP3 PUSH2 0x22F4 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1825 DUP5 DUP5 PUSH2 0x25A3 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1838 DUP8 DUP8 PUSH2 0x263C JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH1 0x0 DUP1 PUSH2 0x19A9 PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP12 DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x0 ADD MLOAD DUP2 MSTORE POP DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x20 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x97 PUSH1 0x0 DUP12 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP12 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x60 ADD MLOAD ISZERO ISZERO DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP12 DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x20 ADD MLOAD DUP2 MSTORE POP DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x20 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x97 PUSH1 0x0 DUP12 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP12 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x60 ADD MLOAD ISZERO ISZERO DUP2 MSTORE POP PUSH2 0x19A4 DUP11 PUSH1 0x0 ADD MLOAD DUP11 PUSH1 0x0 ADD MLOAD PUSH2 0x26EB JUMP JUMPDEST PUSH2 0x27BC JUMP JUMPDEST DUP9 MLOAD SWAP2 SWAP4 POP SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0x55575F5D PUSH1 0xE1 SHL EQ ISZERO PUSH2 0x1A28 JUMPI DUP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0x55575F5D PUSH1 0xE1 SHL EQ ISZERO PUSH2 0x19E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLVALUE LT ISZERO PUSH2 0x1A07 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13B9 SWAP1 PUSH2 0x57DF JUMP JUMPDEST DUP2 CALLVALUE GT ISZERO PUSH2 0x1A23 JUMPI PUSH2 0x1A23 PUSH2 0x1A1C CALLVALUE DUP5 PUSH2 0x2933 JUMP JUMPDEST CALLER SWAP1 PUSH2 0x2990 JUMP JUMPDEST PUSH2 0x1A77 JUMP JUMPDEST DUP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0x55575F5D PUSH1 0xE1 SHL EQ ISZERO PUSH2 0x1A77 JUMPI DUP1 CALLVALUE LT ISZERO PUSH2 0x1A62 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13B9 SWAP1 PUSH2 0x57DF JUMP JUMPDEST DUP1 CALLVALUE GT ISZERO PUSH2 0x1A77 JUMPI PUSH2 0x1A77 PUSH2 0x1A1C CALLVALUE DUP4 PUSH2 0x2933 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A8D ADDRESS PUSH2 0x2A28 JUMP JUMPDEST ISZERO SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0x1AAC JUMPI POP PUSH2 0x1AAC PUSH2 0x1A82 JUMP JUMPDEST DUP1 PUSH2 0x1ABA JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0x1AF5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x5A85 PUSH1 0x2E SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0x1B20 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT PUSH2 0xFF00 NOT SWAP1 SWAP2 AND PUSH2 0x100 OR AND PUSH1 0x1 OR SWAP1 SSTORE JUMPDEST DUP1 ISZERO PUSH2 0x1B32 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0x1B4E JUMPI POP PUSH2 0x1B4E PUSH2 0x1A82 JUMP JUMPDEST DUP1 PUSH2 0x1B5C JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0x1B97 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x5A85 PUSH1 0x2E SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0x1BC2 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT PUSH2 0xFF00 NOT SWAP1 SWAP2 AND PUSH2 0x100 OR AND PUSH1 0x1 OR SWAP1 SSTORE JUMPDEST PUSH1 0x0 PUSH2 0x1BCC PUSH2 0x1EF8 JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP3 POP SWAP1 PUSH1 0x0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 POP DUP1 ISZERO PUSH2 0x1B32 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0x1C47 JUMPI POP PUSH2 0x1C47 PUSH2 0x1A82 JUMP JUMPDEST DUP1 PUSH2 0x1C55 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0x1C90 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x5A85 PUSH1 0x2E SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0x1CBB JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT PUSH2 0xFF00 NOT SWAP1 SWAP2 AND PUSH2 0x100 OR AND PUSH1 0x1 OR SWAP1 SSTORE JUMPDEST PUSH2 0x1B20 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x8 DUP2 MSTORE PUSH1 0x20 ADD PUSH8 0x45786368616E6765 PUSH1 0xC0 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x19 PUSH1 0xF9 SHL DUP2 MSTORE POP PUSH2 0x2A2E JUMP JUMPDEST PUSH32 0x36C25DE3E541D5D970F66E4210D728721220FFF5C077CC6CD008B3A0C62ADAB7 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 ADDRESS PUSH2 0x1D38 PUSH2 0x2AEE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP6 POP POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH2 0x194 DUP2 SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x97 PUSH1 0x20 MSTORE PUSH32 0x4532FA16F071D6234E30E1A1E69B9806F04095EDF37A1CA7A25C8D6AF7861CC0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP2 DUP3 AND OR SWAP1 SWAP2 SSTORE PUSH32 0x30A684095C937B5AA064DCF94F9903A7D808E3EFB22D8389DBD43080AD4ED3D5 DUP1 SLOAD SWAP4 SWAP1 SWAP3 AND SWAP3 DUP2 AND DUP4 OR SWAP1 SWAP2 SSTORE PUSH4 0x25CEED9 PUSH1 0xE6 SHL PUSH1 0x0 MSTORE PUSH32 0x4B5822151EA34B7C8D9E37C3E466BCECB631EFE6A9F26A4A4054110A93DD316F DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0x1E51 JUMPI POP PUSH2 0x1E51 PUSH2 0x1A82 JUMP JUMPDEST DUP1 PUSH2 0x1E5F JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0x1E9A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x5A85 PUSH1 0x2E SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0x1EC5 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT PUSH2 0xFF00 NOT SWAP1 SWAP2 AND PUSH2 0x100 OR AND PUSH1 0x1 OR SWAP1 SSTORE JUMPDEST PUSH2 0x162 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0xA15 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F02 PUSH2 0x2AF8 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0xE0 DUP2 ADD MLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0x2611A133 PUSH1 0xE1 SHL EQ DUP1 PUSH2 0x1F3B JUMPI POP PUSH1 0xE0 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 DUP2 AND EQ JUMPDEST ISZERO PUSH2 0x1FB0 JUMPI DUP2 MLOAD PUSH1 0x20 DUP4 ADD MLOAD MLOAD PUSH2 0x1F51 SWAP1 PUSH2 0x2B54 JUMP JUMPDEST PUSH1 0x60 DUP5 ADD MLOAD MLOAD PUSH2 0x1F60 SWAP1 PUSH2 0x2B54 JUMP JUMPDEST DUP5 PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH2 0x164C JUMP JUMPDEST DUP2 MLOAD PUSH1 0x20 DUP4 ADD MLOAD MLOAD PUSH2 0x1FC1 SWAP1 PUSH2 0x2B54 JUMP JUMPDEST PUSH1 0x60 DUP5 ADD MLOAD MLOAD PUSH2 0x1FD0 SWAP1 PUSH2 0x2B54 JUMP JUMPDEST DUP5 PUSH1 0x80 ADD MLOAD DUP6 PUSH2 0x100 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x203C JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2024 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x2069 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP7 POP POP POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH2 0x164C JUMP JUMPDEST PUSH2 0x2099 DUP5 DUP5 PUSH2 0x1801 JUMP JUMPDEST PUSH2 0x20A3 DUP3 DUP3 PUSH2 0x1801 JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x20FF JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x20FF JUMPI DUP4 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x20FF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13B9 SWAP1 PUSH2 0x579C JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0xA15 JUMPI DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0xA15 JUMPI DUP4 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xA15 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13B9 SWAP1 PUSH2 0x560B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x43 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x59AD PUSH1 0x43 SWAP2 CODECOPY DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP3 PUSH1 0x0 ADD MLOAD DUP4 PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x40 ADD MLOAD DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x21E8 PUSH2 0x2BBE JUMP JUMPDEST DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP1 PUSH2 0x1901 PUSH1 0xF0 SHL DUP2 MSTORE POP PUSH1 0x2 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0xA0 DUP2 ADD MLOAD ISZERO DUP1 PUSH2 0x223E JUMPI POP TIMESTAMP DUP2 PUSH1 0xA0 ADD MLOAD LT JUMPDEST PUSH2 0x228F JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F726465722073746172742076616C69646174696F6E206661696C6564000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0xC0 DUP2 ADD MLOAD ISZERO DUP1 PUSH2 0x22A3 JUMPI POP TIMESTAMP DUP2 PUSH1 0xC0 ADD MLOAD GT JUMPDEST PUSH2 0x1B32 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F7264657220656E642076616C69646174696F6E206661696C65640000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x2379 JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x2374 JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2320 PUSH2 0x1EF8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x2374 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x36B0B5B2B91034B9903737BA103A3C1039B2B73232B9 PUSH1 0x51 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x1814 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x238C PUSH2 0x1EF8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1814 JUMPI PUSH1 0x0 PUSH2 0x23A5 DUP4 PUSH2 0x2BC5 JUMP JUMPDEST SWAP1 POP PUSH2 0x23BD DUP4 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2A28 JUMP JUMPDEST ISZERO PUSH2 0x24F9 JUMPI DUP3 MLOAD PUSH4 0xB135D3F PUSH1 0xE1 SHL SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1626BA7E PUSH2 0x23E4 DUP5 PUSH2 0x2CB5 JUMP JUMPDEST DUP6 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2437 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x241F JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x2464 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP4 POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2482 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2496 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x24AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND EQ PUSH2 0x24F4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x5A5A PUSH1 0x2B SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x11D4 JUMP JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2517 DUP4 PUSH2 0x2511 DUP5 PUSH2 0x2CB5 JUMP JUMPDEST SWAP1 PUSH2 0x2CBF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x255C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x5A38 PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x11D4 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x8 PUSH1 0x24 DUP3 ADD MSTORE PUSH8 0x37379036B0B5B2B9 PUSH1 0xC1 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x25AB PUSH2 0x482E JUMP JUMPDEST PUSH2 0x25B3 PUSH2 0x482E JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD MLOAD PUSH1 0x60 DUP5 ADD MLOAD MLOAD PUSH2 0x25C9 SWAP2 SWAP1 PUSH2 0x2D3F JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH2 0x25F4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13B9 SWAP1 PUSH2 0x5770 JUMP JUMPDEST PUSH1 0x60 DUP5 ADD MLOAD MLOAD PUSH1 0x20 DUP5 ADD MLOAD MLOAD PUSH2 0x260A SWAP2 SWAP1 PUSH2 0x2D3F JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH2 0x2635 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13B9 SWAP1 PUSH2 0x5770 JUMP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x2644 PUSH2 0x4846 JUMP JUMPDEST PUSH2 0x264C PUSH2 0x4846 JUMP JUMPDEST PUSH2 0x2654 PUSH2 0x4872 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x265F DUP7 PUSH2 0x1F07 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x266C DUP7 PUSH2 0x1F07 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2678 PUSH2 0x1EF8 JUMP JUMPDEST DUP9 MLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2697 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP9 MSTORE JUMPDEST DUP7 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x26B3 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP8 MSTORE JUMPDEST PUSH2 0x26BC DUP9 PUSH2 0x2D7F JUMP JUMPDEST SWAP6 POP PUSH2 0x26C7 DUP8 PUSH2 0x2D7F JUMP JUMPDEST SWAP5 POP PUSH2 0x26DF DUP9 DUP9 DUP6 DUP6 DUP11 PUSH1 0x40 ADD MLOAD DUP11 PUSH1 0x40 ADD MLOAD PUSH2 0x2EDE JUMP JUMPDEST SWAP4 POP POP POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND PUSH4 0x55575F5D PUSH1 0xE1 SHL EQ ISZERO PUSH2 0x270E JUMPI POP PUSH1 0x1 PUSH2 0x1798 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x55575F5D PUSH1 0xE1 SHL EQ ISZERO PUSH2 0x272F JUMPI POP PUSH1 0x2 PUSH2 0x1798 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND PUSH4 0x22BA1761 PUSH1 0xE2 SHL EQ ISZERO PUSH2 0x2750 JUMPI POP PUSH1 0x1 PUSH2 0x1798 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x22BA1761 PUSH1 0xE2 SHL EQ ISZERO PUSH2 0x2771 JUMPI POP PUSH1 0x2 PUSH2 0x1798 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND PUSH4 0x25CEED9 PUSH1 0xE6 SHL EQ ISZERO PUSH2 0x2792 JUMPI POP PUSH1 0x1 PUSH2 0x1798 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x25CEED9 PUSH1 0xE6 SHL EQ ISZERO PUSH2 0x27B3 JUMPI POP PUSH1 0x2 PUSH2 0x1798 JUMP JUMPDEST POP PUSH1 0x0 SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 MLOAD PUSH1 0x20 SWAP1 DUP2 ADD MLOAD DUP4 MLOAD SWAP1 SWAP2 ADD MLOAD PUSH1 0x1 DUP4 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x27D8 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x285A JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH2 0x161 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP3 MSTORE PUSH6 0xFFFFFFFFFFFF PUSH1 0x1 PUSH1 0xA0 SHL DUP3 DIV DUP2 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0xD0 SHL SWAP1 SWAP2 DIV AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x282A SWAP1 DUP7 SWAP1 DUP7 SWAP1 PUSH2 0x3099 JUMP JUMPDEST SWAP2 POP PUSH2 0x2855 DUP5 PUSH1 0x0 ADD MLOAD PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x80 ADD MLOAD DUP9 PUSH1 0x20 ADD MLOAD DUP9 PUSH1 0x60 ADD MLOAD PUSH2 0x335A JUMP JUMPDEST PUSH2 0x292B JUMP JUMPDEST PUSH1 0x2 DUP4 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x2868 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x28E5 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH2 0x161 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP3 MSTORE PUSH6 0xFFFFFFFFFFFF PUSH1 0x1 PUSH1 0xA0 SHL DUP3 DIV DUP2 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0xD0 SHL SWAP1 SWAP2 DIV AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x28BA SWAP1 DUP6 SWAP1 DUP8 SWAP1 PUSH2 0x3099 JUMP JUMPDEST SWAP1 POP PUSH2 0x2855 DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x0 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x80 ADD MLOAD DUP8 PUSH1 0x20 ADD MLOAD DUP10 PUSH1 0x60 ADD MLOAD PUSH2 0x335A JUMP JUMPDEST DUP5 MLOAD DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD MLOAD PUSH1 0x80 DUP9 ADD MLOAD SWAP3 DUP8 ADD MLOAD PUSH1 0x60 DUP10 ADD MLOAD PUSH2 0x2908 SWAP5 SWAP2 SWAP1 PUSH2 0x335A JUMP JUMPDEST DUP4 MLOAD DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD MLOAD PUSH1 0x80 DUP8 ADD MLOAD SWAP3 DUP9 ADD MLOAD PUSH1 0x60 DUP9 ADD MLOAD PUSH2 0x292B SWAP5 SWAP2 SWAP1 PUSH2 0x335A JUMP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x298A JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP4 SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x29DB JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x29E0 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x11D4 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x1D1C985B9CD9995C8819985A5B1959 PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0x2A47 JUMPI POP PUSH2 0x2A47 PUSH2 0x1A82 JUMP JUMPDEST DUP1 PUSH2 0x2A55 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0x2A90 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x5A85 PUSH1 0x2E SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0x2ABB JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT PUSH2 0xFF00 NOT SWAP1 SWAP2 AND PUSH2 0x100 OR AND PUSH1 0x1 OR SWAP1 SSTORE JUMPDEST DUP3 MLOAD PUSH1 0x20 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 KECCAK256 DUP4 MLOAD SWAP2 DUP5 ADD SWAP2 SWAP1 SWAP2 KECCAK256 PUSH1 0xC9 SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0xCA SSTORE DUP1 ISZERO PUSH2 0x11D4 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F02 PUSH2 0x34DE JUMP JUMPDEST PUSH1 0x0 CALLER ADDRESS EQ ISZERO PUSH2 0x2B4F JUMPI PUSH1 0x0 DUP1 CALLDATASIZE DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP POP POP POP CALLDATASIZE ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 POP PUSH2 0x1065 SWAP1 POP JUMP JUMPDEST POP CALLER SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD MLOAD DUP1 MLOAD SWAP1 DUP4 ADD KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH32 0x452A0DC408CB0D27FFC3B3CAFF933A5208040A53A9DBECD8D89CAD2C0D40E00C DUP2 DUP7 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND DUP4 DUP3 ADD MSTORE PUSH1 0x60 DUP1 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP1 MLOAD DUP1 DUP5 SUB SWAP1 SWAP3 ADD DUP3 MSTORE PUSH1 0x80 SWAP1 SWAP3 ADD SWAP1 SWAP2 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x194 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x477ED43B8020849B755512278536C3766A3B4AB547519949A75F483372493F8D DUP3 PUSH1 0x0 ADD MLOAD PUSH2 0x2BFA DUP5 PUSH1 0x20 ADD MLOAD PUSH2 0x34E2 JUMP JUMPDEST DUP5 PUSH1 0x40 ADD MLOAD PUSH2 0x2C0C DUP7 PUSH1 0x60 ADD MLOAD PUSH2 0x34E2 JUMP JUMPDEST DUP7 PUSH1 0x80 ADD MLOAD DUP8 PUSH1 0xA0 ADD MLOAD DUP9 PUSH1 0xC0 ADD MLOAD DUP10 PUSH1 0xE0 ADD MLOAD DUP11 PUSH2 0x100 ADD MLOAD DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP12 DUP2 MSTORE PUSH1 0x20 ADD DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP11 POP POP POP POP POP POP POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x21E8 PUSH2 0x3552 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x41 EQ PUSH2 0x2D17 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x0 BYTE PUSH2 0x2D35 DUP7 DUP3 DUP6 DUP6 PUSH2 0x358D JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2D47 PUSH2 0x482E JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2D53 DUP5 DUP5 PUSH2 0x37E3 JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH2 0x2D78 JUMPI PUSH2 0x2D70 DUP4 DUP6 PUSH2 0x37E3 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1798 JUMP JUMPDEST SWAP1 POP PUSH2 0x1798 JUMP JUMPDEST PUSH2 0x2D87 PUSH2 0x4846 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0xE0 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0x2611A133 PUSH1 0xE1 SHL EQ ISZERO PUSH2 0x2DDA JUMPI PUSH1 0x0 DUP3 PUSH2 0x100 ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x2DC6 SWAP2 SWAP1 PUSH2 0x51B6 JUMP JUMPDEST DUP1 MLOAD DUP4 MSTORE PUSH1 0x20 SWAP1 DUP2 ADD MLOAD SWAP1 DUP4 ADD MSTORE POP PUSH2 0x2EC5 JUMP JUMPDEST PUSH1 0xE0 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0x23D235EF PUSH1 0xE0 SHL EQ ISZERO PUSH2 0x2E32 JUMPI PUSH1 0x0 DUP3 PUSH2 0x100 ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x2E12 SWAP2 SWAP1 PUSH2 0x5242 JUMP JUMPDEST DUP1 MLOAD DUP4 MSTORE PUSH1 0x20 DUP1 DUP3 ADD MLOAD SWAP1 DUP5 ADD MSTORE PUSH1 0x40 SWAP1 DUP2 ADD MLOAD ISZERO ISZERO SWAP1 DUP4 ADD MSTORE POP PUSH2 0x2EC5 JUMP JUMPDEST PUSH1 0xE0 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0x256F2A65 PUSH1 0xE1 SHL EQ ISZERO PUSH2 0x2E91 JUMPI PUSH1 0x0 DUP3 PUSH2 0x100 ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x2E6A SWAP2 SWAP1 PUSH2 0x5242 JUMP JUMPDEST DUP1 MLOAD DUP4 MSTORE PUSH1 0x20 DUP1 DUP3 ADD MLOAD SWAP1 DUP5 ADD MSTORE PUSH1 0x40 SWAP1 DUP2 ADD MLOAD ISZERO ISZERO SWAP1 DUP4 ADD MSTORE POP PUSH1 0x1 PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x2EC5 JUMP JUMPDEST PUSH1 0xE0 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 DUP2 AND EQ ISZERO PUSH2 0x2EAD JUMPI PUSH2 0x2EC5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13B9 SWAP1 PUSH2 0x5702 JUMP JUMPDEST DUP1 MLOAD MLOAD PUSH2 0x164C JUMPI DUP2 MLOAD PUSH2 0x2ED7 SWAP1 PUSH2 0x39FF JUMP JUMPDEST DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2EE6 PUSH2 0x4872 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2EF6 DUP9 PUSH1 0x80 ADD MLOAD DUP8 PUSH2 0x3A9A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2F08 DUP9 PUSH1 0x80 ADD MLOAD DUP8 PUSH2 0x3A9A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2F1A DUP11 DUP11 DUP6 DUP6 DUP11 DUP11 PUSH2 0x3ABF JUMP JUMPDEST SWAP1 POP DUP10 PUSH1 0x20 ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH1 0x0 EQ ISZERO DUP1 PUSH2 0x2F3B JUMPI POP PUSH1 0x60 DUP10 ADD MLOAD PUSH1 0x20 ADD MLOAD ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x2F5E JUMPI DUP1 MLOAD PUSH2 0x2F5E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13B9 SWAP1 PUSH2 0x567B JUMP JUMPDEST PUSH1 0x60 DUP11 ADD MLOAD PUSH1 0x20 ADD MLOAD ISZERO ISZERO DUP1 PUSH2 0x2F7A JUMPI POP PUSH1 0x20 DUP1 DUP11 ADD MLOAD ADD MLOAD ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x2FA3 JUMPI PUSH1 0x0 DUP2 PUSH1 0x20 ADD MLOAD GT PUSH2 0x2FA3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13B9 SWAP1 PUSH2 0x567B JUMP JUMPDEST PUSH1 0x80 DUP11 ADD MLOAD ISZERO PUSH2 0x2FF6 JUMPI DUP6 ISZERO PUSH2 0x2FD5 JUMPI DUP1 MLOAD PUSH2 0x2FC0 SWAP1 DUP5 SWAP1 PUSH2 0x173B JUMP JUMPDEST PUSH1 0x0 DUP10 DUP2 MSTORE PUSH2 0x12F PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH2 0x2FF6 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH2 0x2FE5 SWAP1 DUP5 SWAP1 PUSH2 0x173B JUMP JUMPDEST PUSH1 0x0 DUP10 DUP2 MSTORE PUSH2 0x12F PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE JUMPDEST PUSH1 0x80 DUP10 ADD MLOAD ISZERO PUSH2 0x3049 JUMPI DUP5 ISZERO PUSH2 0x302B JUMPI PUSH1 0x20 DUP2 ADD MLOAD PUSH2 0x3016 SWAP1 DUP4 SWAP1 PUSH2 0x173B JUMP JUMPDEST PUSH1 0x0 DUP9 DUP2 MSTORE PUSH2 0x12F PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH2 0x3049 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x3038 SWAP1 DUP4 SWAP1 PUSH2 0x173B JUMP JUMPDEST PUSH1 0x0 DUP9 DUP2 MSTORE PUSH2 0x12F PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD DUP2 MLOAD PUSH1 0x40 MLOAD PUSH32 0x956CD63EE4CDCD81FDA5F0EC7C6C36DCEDA99E1B412F4A650A5D26055DC3C450 SWAP3 PUSH2 0x3084 SWAP3 DUP13 SWAP3 DUP13 SWAP3 SWAP2 SWAP1 PUSH2 0x5490 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0xA0 ADD MLOAD PUSH2 0x30AC JUMPI PUSH1 0x0 PUSH2 0x30B2 JUMP JUMPDEST DUP3 PUSH1 0x20 ADD MLOAD JUMPDEST PUSH6 0xFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 DUP5 PUSH1 0xA0 ADD MLOAD PUSH2 0x30CE JUMPI PUSH1 0x0 PUSH2 0x30D4 JUMP JUMPDEST DUP4 PUSH1 0x40 ADD MLOAD JUMPDEST PUSH6 0xFFFFFFFFFFFF AND SWAP1 POP PUSH2 0x30F5 DUP7 PUSH1 0x0 ADD MLOAD PUSH1 0x20 ADD MLOAD DUP4 DUP9 PUSH1 0x40 ADD MLOAD PUSH2 0x3B58 JUMP JUMPDEST DUP7 MLOAD PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x80 DUP10 ADD MLOAD DUP8 MLOAD SWAP3 MLOAD PUSH1 0x60 DUP12 ADD MLOAD SWAP5 SWAP8 POP PUSH1 0x0 SWAP5 PUSH2 0x3121 SWAP5 DUP10 SWAP5 SWAP4 SWAP3 DUP10 DUP10 ADD SWAP3 PUSH2 0x3BF8 JUMP JUMPDEST DUP8 MLOAD DUP1 MLOAD DUP9 MLOAD MLOAD PUSH1 0x20 DUP1 DUP12 ADD MLOAD SWAP4 ADD MLOAD PUSH1 0x80 DUP13 ADD MLOAD PUSH1 0x60 DUP14 ADD MLOAD SWAP6 SWAP7 POP PUSH2 0x314F SWAP6 SWAP4 SWAP5 SWAP3 SWAP4 DUP8 SWAP3 SWAP2 SWAP1 PUSH2 0x3C42 JUMP JUMPDEST SWAP1 POP DUP7 PUSH1 0x40 ADD MLOAD MLOAD PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0x316B JUMPI POP DUP6 PUSH1 0x40 ADD MLOAD MLOAD PUSH1 0x1 EQ JUMPDEST DUP1 ISZERO PUSH2 0x31C0 JUMPI POP DUP7 PUSH1 0x40 ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3183 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x40 ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x31A9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST ISZERO PUSH2 0x32D6 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x0 SWAP2 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x31E4 PUSH2 0x488C JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x31DC JUMPI SWAP1 POP POP SWAP1 POP DUP7 PUSH1 0x40 ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x320A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3223 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 MSTORE PUSH1 0x40 DUP9 ADD MLOAD DUP1 MLOAD PUSH1 0x0 SWAP1 PUSH2 0x324B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x40 ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3268 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD ADD DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3282 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP2 MSTORE POP POP PUSH2 0x32CC DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x0 ADD MLOAD DUP4 DUP11 PUSH1 0x0 ADD MLOAD PUSH1 0x20 ADD MLOAD DUP5 DUP13 PUSH1 0x80 ADD MLOAD DUP14 PUSH1 0x60 ADD MLOAD PUSH2 0x3D45 JUMP JUMPDEST POP SWAP2 POP PUSH2 0x332F SWAP1 POP JUMP JUMPDEST PUSH2 0x3300 DUP8 PUSH1 0x0 ADD MLOAD PUSH1 0x0 ADD MLOAD DUP3 DUP10 PUSH1 0x0 ADD MLOAD PUSH1 0x20 ADD MLOAD DUP11 PUSH1 0x40 ADD MLOAD DUP12 PUSH1 0x80 ADD MLOAD DUP13 PUSH1 0x60 ADD MLOAD PUSH2 0x3D45 JUMP JUMPDEST POP DUP8 MLOAD DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD PUSH1 0x40 DUP10 ADD MLOAD PUSH1 0x80 DUP12 ADD MLOAD PUSH1 0x60 DUP13 ADD MLOAD SWAP5 SWAP6 POP PUSH2 0x332B SWAP5 DUP7 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3D45 JUMP JUMPDEST POP SWAP1 POP JUMPDEST PUSH2 0x3350 DUP8 PUSH1 0x0 ADD MLOAD PUSH1 0x0 ADD MLOAD DUP3 DUP10 PUSH1 0x80 ADD MLOAD DUP10 PUSH1 0x20 ADD MLOAD DUP12 PUSH1 0x60 ADD MLOAD PUSH2 0x335A JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT PUSH2 0x337B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13B9 SWAP1 PUSH2 0x55C7 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 JUMPDEST PUSH1 0x1 DUP6 MLOAD SUB DUP2 LT ISZERO PUSH2 0x344A JUMPI PUSH1 0x0 PUSH2 0x33C1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x339D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP10 PUSH2 0x3DFA SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0x33F6 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x33D2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP6 PUSH2 0x173B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP4 POP DUP1 ISZERO PUSH2 0x3441 JUMPI PUSH2 0x3408 DUP4 DUP3 PUSH2 0x2933 JUMP JUMPDEST SWAP3 POP PUSH2 0x3441 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP12 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE POP DUP9 DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x342F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD DUP9 PUSH2 0x3E12 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x3380 JUMP JUMPDEST POP PUSH1 0x0 DUP5 PUSH1 0x1 DUP7 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x345D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH2 0x3487 DUP2 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP5 PUSH2 0x173B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x2710 EQ PUSH2 0x34AA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13B9 SWAP1 PUSH2 0x5739 JUMP JUMPDEST DUP2 ISZERO PUSH2 0x34D4 JUMPI PUSH2 0x34D4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP11 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE POP DUP8 DUP4 PUSH1 0x0 ADD MLOAD DUP8 PUSH2 0x3E12 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST CHAINID SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0xDB6F72E915676CFC289DA13BC4ECE054FD17B1DF6D77FFC4A60510718C236B08 PUSH2 0x3512 DUP4 PUSH1 0x0 ADD MLOAD PUSH2 0x2B54 JUMP JUMPDEST DUP4 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F02 PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH2 0x3580 PUSH2 0x421A JUMP JUMPDEST PUSH2 0x3588 PUSH2 0x4220 JUMP JUMPDEST PUSH2 0x4226 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP3 GT ISZERO PUSH2 0x35EE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x5A16 PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1E DUP6 PUSH1 0xFF AND GT ISZERO PUSH2 0x36C8 JUMPI PUSH1 0x4 DUP6 SUB PUSH1 0xFF AND PUSH1 0x1B EQ DUP1 PUSH2 0x3617 JUMPI POP PUSH1 0x4 DUP6 SUB PUSH1 0xFF AND PUSH1 0x1C EQ JUMPDEST PUSH2 0x3652 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x5AB3 PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH2 0x365D DUP8 PUSH2 0x4288 JUMP JUMPDEST PUSH1 0x4 DUP8 SUB DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x36B7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP1 POP PUSH2 0x377F JUMP JUMPDEST DUP5 PUSH1 0xFF AND PUSH1 0x1B EQ DUP1 PUSH2 0x36DD JUMPI POP DUP5 PUSH1 0xFF AND PUSH1 0x1C EQ JUMPDEST PUSH2 0x3718 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x5AB3 PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP7 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3772 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP1 POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x37DA JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x37EB PUSH2 0x482E JUMP JUMPDEST DUP3 MLOAD DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x55575F5D PUSH1 0xE1 SHL EQ ISZERO PUSH2 0x3856 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0x55575F5D PUSH1 0xE1 SHL EQ ISZERO PUSH2 0x382B JUMPI DUP5 SWAP3 POP POP POP PUSH2 0x1798 JUMP JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE DUP3 MLOAD PUSH1 0x20 DUP2 DUP2 ADD SWAP1 SWAP5 MSTORE SWAP1 DUP2 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 POP PUSH2 0x1798 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x22BA1761 PUSH1 0xE2 SHL EQ ISZERO PUSH2 0x389B JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0x22BA1761 PUSH1 0xE2 SHL EQ ISZERO PUSH2 0x382B JUMPI PUSH2 0x3892 DUP6 DUP6 PUSH2 0x42D9 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x1798 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x39D690A3 PUSH1 0xE1 SHL EQ ISZERO PUSH2 0x38D7 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0x39D690A3 PUSH1 0xE1 SHL EQ ISZERO PUSH2 0x382B JUMPI PUSH2 0x3892 DUP6 DUP6 PUSH2 0x42D9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x25CEED9 PUSH1 0xE6 SHL EQ ISZERO PUSH2 0x3913 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0x25CEED9 PUSH1 0xE6 SHL EQ ISZERO PUSH2 0x382B JUMPI PUSH2 0x3892 DUP6 DUP6 PUSH2 0x42D9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 ISZERO PUSH2 0x39C8 JUMPI PUSH1 0x40 MLOAD PUSH4 0x6D3F7CB PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x6D3F7CB0 SWAP1 PUSH2 0x396A SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x582C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3982 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3996 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x39BE SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x512B JUMP JUMPDEST SWAP4 POP POP POP POP PUSH2 0x1798 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 DUP2 AND SWAP1 DUP4 AND EQ ISZERO PUSH2 0x39E7 JUMPI PUSH2 0x39BE DUP7 DUP7 PUSH2 0x42D9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13B9 SWAP1 PUSH2 0x552B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x0 SWAP2 SWAP1 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x3A22 PUSH2 0x488C JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x3A1A JUMPI SWAP1 POP POP SWAP1 POP DUP3 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3A45 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP PUSH2 0x2710 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3A79 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP1 SWAP3 AND SWAP2 ADD MSTORE SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x3AA9 JUMPI POP PUSH1 0x0 PUSH2 0x1798 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x12F PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3AC7 PUSH2 0x4872 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3AD5 DUP10 DUP9 DUP8 PUSH2 0x4336 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP1 PUSH2 0x3AE7 DUP11 DUP10 DUP9 PUSH2 0x4336 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP4 DUP2 GT DUP1 PUSH2 0x3B01 JUMPI POP DUP4 DUP2 EQ DUP1 ISZERO PUSH2 0x3B01 JUMPI POP DUP4 ISZERO JUMPDEST ISZERO PUSH2 0x3B2D JUMPI PUSH2 0x3B22 DUP5 DUP5 DUP13 PUSH1 0x20 ADD MLOAD PUSH1 0x20 ADD MLOAD DUP14 PUSH1 0x60 ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH2 0x43AF JUMP JUMPDEST SWAP5 POP POP POP POP POP PUSH2 0x2D35 JUMP JUMPDEST PUSH2 0x3B49 DUP12 PUSH1 0x20 ADD MLOAD PUSH1 0x20 ADD MLOAD DUP13 PUSH1 0x60 ADD MLOAD PUSH1 0x20 ADD MLOAD DUP5 DUP5 PUSH2 0x4434 JUMP JUMPDEST SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x3BD8 JUMPI PUSH2 0x2710 DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3B75 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND GT ISZERO PUSH2 0x3BA8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13B9 SWAP1 PUSH2 0x56D3 JUMP JUMPDEST DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x3BB4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP3 ADD SWAP2 POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x3B5D JUMP JUMPDEST POP PUSH2 0x3BED PUSH2 0x3BE6 DUP7 DUP4 PUSH2 0x3DFA JUMP JUMPDEST DUP7 SWAP1 PUSH2 0x173B JUMP JUMPDEST SWAP2 POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x3C08 DUP11 DUP11 DUP10 PUSH2 0x44BA JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP DUP1 ISZERO PUSH2 0x3C33 JUMPI PUSH2 0x3C33 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE POP DUP10 DUP9 DUP8 PUSH2 0x3E12 JUMP JUMPDEST POP SWAP1 POP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3C4E DUP9 PUSH2 0x44DC JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0x3C62 JUMPI POP DUP7 MLOAD PUSH1 0x1 EQ JUMPDEST DUP1 ISZERO PUSH2 0x3CAF JUMPI POP DUP7 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3C76 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3C98 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST ISZERO PUSH2 0x3D00 JUMPI PUSH2 0x1388 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3CC4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND GT ISZERO PUSH2 0x3CF7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13B9 SWAP1 PUSH2 0x5562 JUMP JUMPDEST DUP6 SWAP2 POP POP PUSH2 0x3C37 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3D11 DUP12 DUP10 DUP10 DUP7 DUP11 DUP11 PUSH2 0x3D45 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x1388 DUP2 GT ISZERO PUSH2 0x3D37 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13B9 SWAP1 PUSH2 0x5562 JUMP JUMPDEST POP SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP5 PUSH1 0x0 DUP1 JUMPDEST DUP6 MLOAD DUP2 LT ISZERO PUSH2 0x3DEE JUMPI PUSH2 0x3D86 DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3D62 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP4 PUSH2 0x173B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP2 POP PUSH1 0x0 PUSH2 0x3DB5 DUP5 DUP10 DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x3D9B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x44BA JUMP JUMPDEST SWAP1 SWAP5 POP SWAP1 POP DUP1 ISZERO PUSH2 0x3DE5 JUMPI PUSH2 0x3DE5 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP13 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE POP DUP8 DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x342F JUMPI INVALID JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x3D4A JUMP JUMPDEST POP SWAP7 POP SWAP7 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1795 PUSH2 0x2710 PUSH2 0x3E0C DUP6 DUP6 PUSH2 0x4651 JUMP JUMPDEST SWAP1 PUSH2 0x46AA JUMP JUMPDEST DUP4 MLOAD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0x39D690A3 PUSH1 0xE1 SHL EQ ISZERO PUSH2 0x3F58 JUMPI PUSH1 0x0 DUP1 DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x20 ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x3E4C SWAP2 SWAP1 PUSH2 0x4EFD JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP6 PUSH1 0x20 ADD MLOAD PUSH1 0x1 EQ PUSH2 0x3E74 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13B9 SWAP1 PUSH2 0x564F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND ADDRESS EQ ISZERO PUSH2 0x3EEC JUMPI PUSH1 0x40 MLOAD PUSH4 0x21421707 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x42842E0E SWAP1 PUSH2 0x3EB5 SWAP1 ADDRESS SWAP1 DUP9 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x53E9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3ECF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3EE3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x3F51 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x7B84DC83 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xF709B906 SWAP1 PUSH2 0x3F1E SWAP1 DUP6 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x5501 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3F38 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3F4C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST POP POP PUSH2 0xA15 JUMP JUMPDEST DUP4 MLOAD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0x22BA1761 PUSH1 0xE2 SHL EQ ISZERO PUSH2 0x40B6 JUMPI PUSH1 0x0 DUP5 PUSH1 0x0 ADD MLOAD PUSH1 0x20 ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x3F91 SWAP2 SWAP1 PUSH2 0x4CF1 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ADDRESS EQ ISZERO PUSH2 0x4048 JUMPI PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP2 PUSH4 0xA9059CBB SWAP2 PUSH2 0x3FD5 SWAP2 DUP8 SWAP2 PUSH1 0x4 ADD PUSH2 0x5445 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3FEF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4003 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4027 SWAP2 SWAP1 PUSH2 0x5073 JUMP JUMPDEST PUSH2 0x4043 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13B9 SWAP1 PUSH2 0x56A4 JUMP JUMPDEST PUSH2 0x40B0 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x40 MLOAD PUSH4 0x776062C3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP2 PUSH4 0x776062C3 SWAP2 PUSH2 0x407D SWAP2 DUP6 SWAP2 DUP10 SWAP2 DUP10 SWAP2 PUSH1 0x4 ADD PUSH2 0x5501 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4097 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x40AB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST POP PUSH2 0xA15 JUMP JUMPDEST DUP4 MLOAD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0x25CEED9 PUSH1 0xE6 SHL EQ ISZERO PUSH2 0x4173 JUMPI PUSH1 0x0 DUP1 DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x20 ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x40F0 SWAP2 SWAP1 PUSH2 0x4EFD JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND ADDRESS EQ ISZERO PUSH2 0x413B JUMPI PUSH1 0x20 DUP7 ADD MLOAD PUSH1 0x40 MLOAD PUSH4 0x79212195 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP2 PUSH4 0xF242432A SWAP2 PUSH2 0x3EB5 SWAP2 ADDRESS SWAP2 DUP10 SWAP2 DUP8 SWAP2 PUSH1 0x4 ADD PUSH2 0x540D JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MLOAD PUSH1 0x40 MLOAD PUSH4 0x9C1C2EE9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP2 PUSH4 0x9C1C2EE9 SWAP2 PUSH2 0x3F1E SWAP2 DUP7 SWAP2 DUP11 SWAP2 DUP11 SWAP2 DUP9 SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x54BE JUMP JUMPDEST DUP4 MLOAD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0x55575F5D PUSH1 0xE1 SHL EQ ISZERO PUSH2 0x41BC JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ADDRESS EQ PUSH2 0x41B7 JUMPI PUSH1 0x20 DUP5 ADD MLOAD PUSH2 0x41B7 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH2 0x2990 JUMP JUMPDEST PUSH2 0xA15 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x54BC0CF1 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x54BC0CF1 SWAP1 PUSH2 0x41EC SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x5851 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4206 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x34D4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST PUSH1 0xC9 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0xCA SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP4 DUP4 PUSH2 0x4233 PUSH2 0x34DE JUMP JUMPDEST ADDRESS PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP6 POP POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A333200000000 PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x3C DUP1 DUP4 ADD SWAP5 SWAP1 SWAP5 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP5 ADD DUP5 MSTORE PUSH1 0x5C SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE DUP2 MLOAD SWAP2 ADD KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x42E1 PUSH2 0x482E JUMP JUMPDEST PUSH1 0x20 DUP1 DUP5 ADD MLOAD DUP1 MLOAD SWAP1 DUP3 ADD KECCAK256 DUP4 DUP3 ADD MLOAD DUP1 MLOAD SWAP3 ADD SWAP2 SWAP1 SWAP2 KECCAK256 DUP1 DUP3 EQ ISZERO PUSH2 0x430B JUMPI DUP5 SWAP3 POP POP POP PUSH2 0x1798 JUMP JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE DUP3 MLOAD PUSH1 0x20 DUP1 DUP3 ADD SWAP1 SWAP5 MSTORE SWAP1 DUP2 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 ISZERO PUSH2 0x4375 JUMPI PUSH1 0x20 DUP1 DUP7 ADD MLOAD ADD MLOAD PUSH2 0x4351 SWAP1 DUP6 PUSH2 0x2933 JUMP JUMPDEST SWAP2 POP PUSH2 0x436E DUP6 PUSH1 0x60 ADD MLOAD PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x20 ADD MLOAD PUSH1 0x20 ADD MLOAD DUP5 PUSH2 0x4711 JUMP JUMPDEST SWAP1 POP PUSH2 0x292B JUMP JUMPDEST PUSH1 0x60 DUP6 ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH2 0x4388 SWAP1 DUP6 PUSH2 0x2933 JUMP JUMPDEST SWAP1 POP PUSH2 0x43A5 DUP6 PUSH1 0x20 ADD MLOAD PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x60 ADD MLOAD PUSH1 0x20 ADD MLOAD DUP4 PUSH2 0x4711 JUMP JUMPDEST SWAP2 POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x43B7 PUSH2 0x4872 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x43C4 DUP6 DUP6 DUP6 PUSH2 0x4711 JUMP JUMPDEST SWAP1 POP DUP6 DUP2 GT ISZERO PUSH2 0x441B JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x66696C6C4C6566743A20756E61626C6520746F2066696C6C0000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE SWAP4 DUP5 MSTORE POP POP PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH2 0x443C PUSH2 0x4872 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4449 DUP4 DUP8 DUP8 PUSH2 0x4711 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 GT ISZERO PUSH2 0x44A0 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x66696C6C52696768743A20756E61626C6520746F2066696C6C00000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD MSTORE POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x44D0 DUP6 PUSH2 0x44CB DUP7 DUP7 PUSH2 0x3DFA JUMP JUMPDEST PUSH2 0x4777 JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0x25CEED9 PUSH1 0xE6 SHL EQ DUP1 PUSH2 0x4510 JUMPI POP DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0x39D690A3 PUSH1 0xE1 SHL EQ JUMPDEST ISZERO PUSH2 0x45C6 JUMPI PUSH1 0x0 DUP1 DUP4 PUSH1 0x20 ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x4530 SWAP2 SWAP1 PUSH2 0x4EFD JUMP JUMPDEST PUSH2 0x162 SLOAD PUSH1 0x40 MLOAD PUSH4 0x4E53EE3D PUSH1 0xE1 SHL DUP2 MSTORE SWAP3 SWAP5 POP SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x9CA7DC7A SWAP1 PUSH2 0x4567 SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x5445 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4581 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4595 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x45BD SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x5041 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x164C JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH3 0x737EA9 PUSH1 0xE6 SHL EQ ISZERO PUSH2 0x4607 JUMPI PUSH1 0x0 DUP3 PUSH1 0x20 ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x45F9 SWAP2 SWAP1 PUSH2 0x4D0D JUMP JUMPDEST PUSH1 0x80 ADD MLOAD SWAP3 POP PUSH2 0x164C SWAP2 POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xD8F960C1 PUSH1 0xE0 SHL EQ ISZERO PUSH2 0x4649 JUMPI PUSH1 0x0 DUP3 PUSH1 0x20 ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x463B SWAP2 SWAP1 PUSH2 0x4E0A JUMP JUMPDEST PUSH1 0x60 ADD MLOAD SWAP3 POP PUSH2 0x164C SWAP2 POP POP JUMP JUMPDEST POP PUSH1 0x60 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x4660 JUMPI POP PUSH1 0x0 PUSH2 0x1798 JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x466D JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x1795 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x5AD5 PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x4700 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206469766973696F6E206279207A65726F000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x4709 JUMPI INVALID JUMPDEST DIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x471E DUP5 DUP5 DUP5 PUSH2 0x479F JUMP JUMPDEST ISZERO PUSH2 0x4761 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x3937BAB73234B7339032B93937B9 PUSH1 0x91 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x476F DUP4 PUSH2 0x3E0C DUP7 DUP6 PUSH2 0x4651 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 GT ISZERO PUSH2 0x4796 JUMPI PUSH2 0x478C DUP5 DUP5 PUSH2 0x2933 JUMP JUMPDEST SWAP2 POP DUP3 SWAP1 POP PUSH2 0x2635 JUMP JUMPDEST POP PUSH1 0x0 SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x47E6 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x6469766973696F6E206279207A65726F PUSH1 0x80 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 ISZERO DUP1 PUSH2 0x47F1 JUMPI POP DUP4 ISZERO JUMPDEST ISZERO PUSH2 0x47FE JUMPI POP PUSH1 0x0 PUSH2 0x3BF1 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP1 PUSH2 0x4808 JUMPI INVALID JUMPDEST DUP6 DUP5 MULMOD SWAP1 POP PUSH2 0x4817 DUP6 DUP5 PUSH2 0x4651 JUMP JUMPDEST PUSH2 0x4823 DUP3 PUSH2 0x3E8 PUSH2 0x4651 JUMP JUMPDEST LT ISZERO SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x164C DUP2 PUSH2 0x5981 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x48BE JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x20 PUSH2 0x48D3 PUSH2 0x48CE DUP4 PUSH2 0x5917 JUMP JUMPDEST PUSH2 0x58F4 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP2 DUP2 ADD SWAP1 DUP6 DUP4 ADD DUP6 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x4908 JUMPI PUSH2 0x48F6 DUP10 DUP7 DUP5 MLOAD DUP12 ADD ADD PUSH2 0x4A37 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x48DF JUMP JUMPDEST POP SWAP1 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x4925 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x20 PUSH2 0x4935 PUSH2 0x48CE DUP4 PUSH2 0x5917 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP2 DUP2 ADD SWAP1 DUP6 DUP4 ADD PUSH1 0x40 DUP1 DUP7 MUL DUP9 ADD DUP6 ADD DUP10 LT ISZERO PUSH2 0x4953 JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 JUMPDEST DUP7 DUP2 LT ISZERO PUSH2 0x49C2 JUMPI DUP2 DUP4 DUP12 SUB SLT ISZERO PUSH2 0x496B JUMPI DUP8 DUP9 REVERT JUMPDEST DUP2 MLOAD DUP3 DUP2 ADD DUP2 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR ISZERO PUSH2 0x4985 JUMPI INVALID JUMPDEST DUP4 MSTORE DUP4 MLOAD PUSH2 0x4992 DUP2 PUSH2 0x5981 JUMP JUMPDEST DUP2 MSTORE DUP4 DUP8 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x49AC JUMPI DUP10 DUP11 REVERT JUMPDEST DUP2 DUP9 ADD MSTORE DUP6 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP2 DUP2 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x4955 JUMP JUMPDEST POP SWAP2 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x164C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x164C DUP2 PUSH2 0x5996 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x49FB JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x4A09 PUSH2 0x48CE DUP3 PUSH2 0x5934 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x4A1D JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY SWAP1 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x4A47 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x4A55 PUSH2 0x48CE DUP3 PUSH2 0x5934 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x4A69 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x476F DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x5955 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4A8C JUMPI DUP1 DUP2 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4AA4 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 MLOAD DUP2 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 DUP3 LT DUP2 DUP4 GT OR ISZERO PUSH2 0x4ABF JUMPI INVALID JUMPDEST DUP2 DUP5 MSTORE DUP3 SWAP5 POP DUP6 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x4AD4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 ADD DUP1 DUP9 SUB DUP6 SGT ISZERO PUSH2 0x4AE5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x80 DUP5 ADD DUP4 DUP2 LT DUP4 DUP3 GT OR ISZERO PUSH2 0x4AF7 JUMPI INVALID JUMPDEST SWAP1 SWAP5 MSTORE DUP4 CALLDATALOAD SWAP4 PUSH2 0x4B06 DUP6 PUSH2 0x5996 JUMP JUMPDEST SWAP4 DUP3 MSTORE PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP4 DUP2 DUP6 GT ISZERO PUSH2 0x4B1C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4B28 DUP9 DUP7 DUP4 ADD PUSH2 0x49EB JUMP JUMPDEST PUSH1 0x60 DUP6 ADD MSTORE POP POP DUP2 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD CALLDATALOAD SWAP4 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4B54 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x60 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 DUP3 LT DUP2 DUP4 GT OR ISZERO PUSH2 0x4B71 JUMPI INVALID JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 SWAP4 POP DUP5 MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x4B89 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4B95 DUP7 DUP4 DUP8 ADD PUSH2 0x4915 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x20 DUP6 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x4BAB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4BB8 DUP6 DUP3 DUP7 ADD PUSH2 0x4915 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH2 0x4BCA PUSH1 0x40 DUP5 ADD PUSH2 0x49D0 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x120 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4BE9 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x4BF2 DUP2 PUSH2 0x58F4 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x4BFE DUP3 PUSH2 0x48A3 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x4C1A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4C26 DUP6 DUP4 DUP7 ADD PUSH2 0x4A92 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x4C37 PUSH1 0x40 DUP6 ADD PUSH2 0x48A3 JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP5 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x4C50 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4C5C DUP6 DUP4 DUP7 ADD PUSH2 0x4A92 JUMP JUMPDEST PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP5 ADD CALLDATALOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0xA0 DUP5 ADD CALLDATALOAD PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0xC0 DUP5 ADD CALLDATALOAD PUSH1 0xC0 DUP5 ADD MSTORE PUSH2 0x4C8B PUSH1 0xE0 DUP6 ADD PUSH2 0x49E0 JUMP JUMPDEST PUSH1 0xE0 DUP5 ADD MSTORE PUSH2 0x100 SWAP2 POP DUP2 DUP5 ADD CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x4CA6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4CB2 DUP7 DUP3 DUP8 ADD PUSH2 0x49EB JUMP JUMPDEST DUP4 DUP6 ADD MSTORE POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH6 0xFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x164C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4CE6 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1795 DUP2 PUSH2 0x5981 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4D02 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1795 DUP2 PUSH2 0x5981 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4D1F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x4D2A DUP2 PUSH2 0x5981 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x4D46 JUMPI DUP3 DUP4 REVERT JUMPDEST SWAP1 DUP5 ADD SWAP1 PUSH1 0xC0 DUP3 DUP8 SUB SLT ISZERO PUSH2 0x4D59 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x4D63 PUSH1 0xC0 PUSH2 0x58F4 JUMP JUMPDEST DUP3 MLOAD DUP2 MSTORE PUSH1 0x20 DUP4 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH2 0x4D78 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x4D84 DUP9 DUP3 DUP7 ADD PUSH2 0x4A37 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH2 0x4DA5 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x4DB1 DUP9 DUP3 DUP7 ADD PUSH2 0x4915 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 DUP4 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH2 0x4DC8 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x4DD4 DUP9 DUP3 DUP7 ADD PUSH2 0x4915 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP PUSH1 0xA0 DUP4 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH2 0x4DEB JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x4DF7 DUP9 DUP3 DUP7 ADD PUSH2 0x48AE JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE POP DUP1 SWAP4 POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4E1C JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x4E27 DUP2 PUSH2 0x5981 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x4E43 JUMPI DUP3 DUP4 REVERT JUMPDEST SWAP1 DUP5 ADD SWAP1 PUSH1 0xA0 DUP3 DUP8 SUB SLT ISZERO PUSH2 0x4E56 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x4E60 PUSH1 0xA0 PUSH2 0x58F4 JUMP JUMPDEST DUP3 MLOAD DUP2 MSTORE PUSH1 0x20 DUP4 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH2 0x4E75 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x4E81 DUP9 DUP3 DUP7 ADD PUSH2 0x4A37 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 DUP4 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH2 0x4E98 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x4EA4 DUP9 DUP3 DUP7 ADD PUSH2 0x4915 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 DUP4 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH2 0x4EBB JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x4EC7 DUP9 DUP3 DUP7 ADD PUSH2 0x4915 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 DUP4 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH2 0x4EDE JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x4EEA DUP9 DUP3 DUP7 ADD PUSH2 0x48AE JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP DUP1 SWAP4 POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4F0F JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x4F1A DUP2 PUSH2 0x5981 JUMP JUMPDEST PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD MLOAD SWAP3 SWAP5 SWAP3 SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x4F41 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x4F4C DUP2 PUSH2 0x5981 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x4F5C DUP2 PUSH2 0x5981 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH2 0x4F73 DUP2 PUSH2 0x5981 JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH2 0x4F83 DUP2 PUSH2 0x5981 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x4FA8 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x4FB3 DUP2 PUSH2 0x5981 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x4FCD JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x4FD9 DUP9 DUP3 DUP10 ADD PUSH2 0x49EB JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x4F83 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x5011 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x501C DUP2 PUSH2 0x5981 JUMP JUMPDEST SWAP3 POP PUSH2 0x502A PUSH1 0x20 DUP6 ADD PUSH2 0x4CBF JUMP JUMPDEST SWAP2 POP PUSH2 0x5038 PUSH1 0x40 DUP6 ADD PUSH2 0x4CBF JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5052 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x5067 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x476F DUP5 DUP3 DUP6 ADD PUSH2 0x4915 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5084 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x1795 DUP3 PUSH2 0x49D0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x509E JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x50B6 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1795 DUP2 PUSH2 0x5996 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x50D3 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x50DE DUP2 PUSH2 0x5996 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x50EE DUP2 PUSH2 0x5981 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x510A JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x511F JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x476F DUP5 DUP3 DUP6 ADD PUSH2 0x4A7A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x513C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x5152 JUMPI DUP3 DUP4 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH1 0x40 DUP3 DUP7 SUB SLT ISZERO PUSH2 0x5165 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x40 DUP2 ADD DUP2 DUP2 LT DUP4 DUP3 GT OR ISZERO PUSH2 0x517A JUMPI INVALID JUMPDEST PUSH1 0x40 MSTORE DUP3 MLOAD PUSH2 0x5188 DUP2 PUSH2 0x5996 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP4 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH2 0x519B JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x51A7 DUP8 DUP3 DUP7 ADD PUSH2 0x4A37 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x51C7 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x51DD JUMPI DUP3 DUP4 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH1 0x40 DUP3 DUP7 SUB SLT ISZERO PUSH2 0x51F0 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x40 DUP2 ADD DUP2 DUP2 LT DUP4 DUP3 GT OR ISZERO PUSH2 0x5205 JUMPI INVALID JUMPDEST PUSH1 0x40 MSTORE DUP3 MLOAD DUP3 DUP2 GT ISZERO PUSH2 0x5216 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x5222 DUP8 DUP3 DUP7 ADD PUSH2 0x4915 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 DUP4 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH2 0x5236 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x51A7 DUP8 DUP3 DUP7 ADD PUSH2 0x4915 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5253 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x5268 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x476F DUP5 DUP3 DUP6 ADD PUSH2 0x4B43 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5285 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x529A JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x476F DUP5 DUP3 DUP6 ADD PUSH2 0x4BD6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x52BB JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x52D1 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x52DD DUP9 DUP4 DUP10 ADD PUSH2 0x4BD6 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x52F2 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x52FE DUP9 DUP4 DUP10 ADD PUSH2 0x49EB JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x5313 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x531F DUP9 DUP4 DUP10 ADD PUSH2 0x4BD6 JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x5334 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x5341 DUP8 DUP3 DUP9 ADD PUSH2 0x49EB JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x535E JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x1795 DUP3 PUSH2 0x4CBF JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x537F DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x5955 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL DUP3 MLOAD AND DUP4 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 PUSH1 0x20 DUP6 ADD MSTORE PUSH2 0x476F PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x5367 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP2 MSTORE SWAP3 SWAP1 SWAP4 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 DUP3 ADD MSTORE PUSH1 0xC0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP4 MSTORE PUSH6 0xFFFFFFFFFFFF SWAP2 DUP3 AND PUSH1 0x20 DUP5 ADD MSTORE AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x1795 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x5367 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND DUP2 MSTORE SWAP4 DUP6 AND PUSH1 0x20 DUP6 ADD MSTORE SWAP2 SWAP1 SWAP4 AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xC0 PUSH1 0xA0 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 DUP3 ADD MSTORE PUSH1 0xE0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP2 MSTORE SWAP3 DUP5 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP3 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x6E6F7420666F756E64204941737365744D617463686572000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1D SWAP1 DUP3 ADD MSTORE PUSH32 0x526F79616C746965732061726520746F6F206869676820283E35302529000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH20 0xC081CD85B1D0818D85B89DD081899481D5CD959 PUSH1 0x62 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x7472616E736665725061796F7574733A206E6F7468696E6720746F207472616E PUSH1 0x40 DUP3 ADD MSTORE PUSH4 0x39B332B9 PUSH1 0xE1 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x72696768744F726465722E74616B657220766572696669636174696F6E206661 PUSH1 0x40 DUP3 ADD MSTORE PUSH4 0x1A5B1959 PUSH1 0xE2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x12 SWAP1 DUP3 ADD MSTORE PUSH18 0x32B9319B9918903B30B63AB29032B93937B9 PUSH1 0x71 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH15 0x1B9BDD1A1A5B99C81D1BC8199A5B1B PUSH1 0x8A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH21 0x195C98CC8C081D1C985B9CD9995C8819985A5B1959 PUSH1 0x5A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH21 0x6F726967696E2066656520697320746F6F20626967 PUSH1 0x58 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x556E6B6E6F776E204F7264657220646174612074797065000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1E SWAP1 DUP3 ADD MSTORE PUSH32 0x53756D207061796F75747320427073206E6F7420657175616C20313030250000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x12 SWAP1 DUP3 ADD MSTORE PUSH18 0xC2E6E6CAE8E640C8DEDC4EE840DAC2E8C6D PUSH1 0x73 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x23 SWAP1 DUP3 ADD MSTORE PUSH32 0x6C6566744F726465722E74616B657220766572696669636174696F6E20666169 PUSH1 0x40 DUP3 ADD MSTORE PUSH3 0x1B1959 PUSH1 0xEA SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH14 0xDCDEE840CADCDEEACED040CAE8D PUSH1 0x93 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xB SWAP1 DUP3 ADD MSTORE PUSH11 0x3737BA10309036B0B5B2B9 PUSH1 0xA9 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x583F PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x5393 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x3BED DUP2 DUP6 PUSH2 0x5393 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 MSTORE DUP5 MLOAD PUSH1 0x40 PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x586D PUSH1 0xA0 DUP5 ADD DUP3 PUSH2 0x5393 JUMP JUMPDEST PUSH1 0x20 SWAP7 DUP8 ADD MLOAD PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND SWAP7 DUP5 ADD SWAP7 SWAP1 SWAP7 MSTORE POP POP SWAP2 AND PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x58C6 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x58DF JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x2635 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x590F JUMPI INVALID JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x592A JUMPI INVALID JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x5947 JUMPI INVALID JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x5970 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x5958 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xA15 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1B32 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x1B32 JUMPI PUSH1 0x0 DUP1 REVERT INVALID 0x4D PUSH6 0x74615472616E PUSH20 0x616374696F6E2875696E74323536206E6F6E6365 0x2C PUSH2 0x6464 PUSH19 0x6573732066726F6D2C62797465732066756E63 PUSH21 0x696F6E5369676E6174757265294F776E61626C653A KECCAK256 PUSH15 0x6577206F776E657220697320746865 KECCAK256 PUSH27 0x65726F206164647265737345434453413A20696E76616C69642073 PUSH10 0x676E6174757265202773 0x27 KECCAK256 PUSH23 0x616C75656F72646572207369676E617475726520766572 PUSH10 0x6669636174696F6E2065 PUSH19 0x726F72636F6E7472616374206F726465722073 PUSH10 0x676E6174757265207665 PUSH19 0x696669636174696F6E206572726F72496E6974 PUSH10 0x616C697A61626C653A20 PUSH4 0x6F6E7472 PUSH2 0x6374 KECCAK256 PUSH10 0x7320616C726561647920 PUSH10 0x6E697469616C697A6564 GASLIMIT NUMBER DIFFICULTY MSTORE8 COINBASE GASPRICE KECCAK256 PUSH10 0x6E76616C696420736967 PUSH15 0x6174757265202776272076616C7565 MSTORE8 PUSH2 0x6665 0x4D PUSH2 0x7468 GASPRICE KECCAK256 PUSH14 0x756C7469706C69636174696F6E20 PUSH16 0x766572666C6F774F776E61626C653A20 PUSH4 0x616C6C65 PUSH19 0x206973206E6F7420746865206F776E65725369 PUSH8 0x6E657220616E6420 PUSH20 0x69676E617475726520646F206E6F74206D617463 PUSH9 0xA26469706673582212 KECCAK256 0xD2 PUSH31 0xCDDF6DC922EC759FD1009325766BDD3BF64FA8DA52596FE45FD60D28E48964 PUSH20 0x6F6C634300070600330000000000000000000000 ",
          "sourceMap": "245:885:47:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2004:1044:79;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1412:1537:49;;;;;;:::i;:::-;;:::i;:::-;;340:617:47;;;;;;;;;;-1:-1:-1;340:617:47;;;;;:::i;:::-;;:::i;770:37:49:-;;;;;;;;;;-1:-1:-1;770:37:49;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;3366:107:79:-;;;;;;;;;;-1:-1:-1;3366:107:79;;;;;:::i;:::-;;:::i;1099:165:136:-;;;;;;;;;;-1:-1:-1;1099:165:136;;;;;:::i;:::-;;:::i;1983:147:135:-;;;;;;;;;;-1:-1:-1;1983:147:135;;;;;:::i;:::-;;:::i;3165:1466:49:-;;;;;;:::i;:::-;;:::i;662:43:135:-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;1967:145:1:-;;;;;;;;;;;;;:::i;1335:85::-;;;;;;;;;;;;;:::i;622:34:135:-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;517:173:46:-;;;;;;;;;;-1:-1:-1;517:173:46;;;;;:::i;:::-;;:::i;2747:257:135:-;;;;;;;;;;-1:-1:-1;2747:257:135;;;;;:::i;:::-;;:::i;2136:182::-;;;;;;;;;;-1:-1:-1;2136:182:135;;;;;:::i;:::-;;:::i;2324:202::-;;;;;;;;;;-1:-1:-1;2324:202:135;;;;;:::i;:::-;;:::i;951:314:49:-;;;;;;;;;;-1:-1:-1;951:314:49;;;;;:::i;:::-;;:::i;4637:334::-;;;;;;:::i;:::-;;:::i;2532:209:135:-;;;;;;;;;;-1:-1:-1;2532:209:135;;;;;:::i;:::-;;:::i;2261:240:1:-;;;;;;;;;;-1:-1:-1;2261:240:1;;;;;:::i;:::-;;:::i;2004:1044:79:-;2163:12;2187:29;2219:39;2240:17;2219:20;:39::i;:::-;2187:71;-1:-1:-1;2302:7:79;;-1:-1:-1;;;;;;2302:7:79;;;2276:33;;;;;2268:69;;;;;-1:-1:-1;;;2268:69:79;;;;;;;;;;;;;;;;;;;;;;;;;;;;2379:139;;;;;;;;-1:-1:-1;;;;;2413:19:79;;2347:29;2413:19;;;:6;:19;;;;;;;;;2379:139;;;;;;;;;;;2536:45;2420:11;2379:139;2564:4;2570;2576;2536:6;:45::i;:::-;2528:91;;;;-1:-1:-1;;;2528:91:79;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2651:19:79;;;;;;:6;:19;;;;;;:26;;2675:1;2651:23;:26::i;:::-;2629:6;:19;2636:11;-1:-1:-1;;;;;2629:19:79;-1:-1:-1;;;;;2629:19:79;;;;;;;;;;;;:48;;;;2764:12;2778:23;2813:4;-1:-1:-1;;;;;2805:18:79;2841:17;2860:11;2824:48;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2824:48:79;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2824:48:79;;;;;;;;;;;;;;;;;;;;;;;2805:68;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2805:68:79;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2763:110;;;;2892:7;2884:48;;;;;-1:-1:-1;;;2884:48:79;;;;;;;;;;;;;;;;;;;;;;;;;;;;2947:67;2971:11;2984:10;2996:17;2947:67;;;;-1:-1:-1;;;;;2947:67:79;;;;;;-1:-1:-1;;;;;2947:67:79;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3031:10;2004:1044;-1:-1:-1;;;;;;;;;2004:1044:79:o;1412:1537:49:-;1520:42;1565:40;1585:19;;;;;;;;:::i;:::-;1565;:40::i;:::-;1666:597;;;;;;;;;1520:85;;-1:-1:-1;1632:31:49;;1666:597;1694:21;;;;:6;:21;:::i;:::-;-1:-1:-1;;;;;1666:597:49;;;;;1729:203;;;;;;;;1761:114;;;;;;;;1801:6;:20;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;;1761:114:49;;;;;1843:14;;;;:6;:14;:::i;:::-;1761:114;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1761:114:49;;;;-1:-1:-1;;1729:203:49;;;-1:-1:-1;1729:203:49;1893:25;;;;1729:203;;;;;;;1666:597;;;;;;;;;;;1970:109;;;;;;;;;;2036:29;;;;;1970:109;;;;;;;1666:597;;;;2093:20;;;;;1666:597;;;;2127:21;;;;1666:597;;;;;;;2162:19;;;;1666:597;;;;;2195:24;;;;;;;;:::i;:::-;-1:-1:-1;;;;;;1666:597:49;;;;;2233:20;;;;:6;:20;:::i;:::-;1666:597;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1666:597:49;;;;-1:-1:-1;;2307:526:49;;;;;;;;;;;2359:108;;;;;;;;;;2425:28;;;;2307:526;2359:108;;;;;;;2307:526;;;;;;;;;2505:202;;2537:114;;;;;1632:631;;-1:-1:-1;1666:597:49;;2307:526;;-1:-1:-1;2307:526:49;;;;;2505:202;;;;;;;;;2577:20;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;;2537:114:49;;;;;2619:14;;;;:6;:14;:::i;:::-;2537:114;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2537:114:49;;;;-1:-1:-1;;2505:202:49;;;-1:-1:-1;2669:24:49;;;;2505:202;;;;;2307:526;;;;;;;;;;;;;;;;;;;;2766:24;;;;;;;;:::i;:::-;-1:-1:-1;;;;;;2307:526:49;;;;;2804:19;;;;:6;:19;:::i;:::-;2307:526;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;2307:526:49;;-1:-1:-1;2274:559:49;-1:-1:-1;2844:50:49;2857:9;2868:25;;;;:6;:25;:::i;:::-;2844:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2844:12:49;;-1:-1:-1;;;2844:50:49:i;:::-;2905:37;2922:9;2933:8;2905:16;:37::i;:::-;1412:1537;;;;:::o;340:617:47:-;1512:13:6;;;;;;;;:33;;;1529:16;:14;:16::i;:::-;1512:50;;;-1:-1:-1;1550:12:6;;;;1549:13;1512:50;1504:109;;;;-1:-1:-1;;;1504:109:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1624:19;1647:13;;;;;;1646:14;1670:98;;;;1704:13;:20;;-1:-1:-1;;;;1704:20:6;;;;;1738:19;1720:4;1738:19;;;1670:98;590:26:47::1;:24;:26::i;:::-;626;:24;:26::i;:::-;662:33;:31;:33::i;:::-;705:55;;;;;;;;;;;;;;-1:-1:-1::0;;;705:55:47::1;;::::0;::::1;;;;;;;;;;;;;-1:-1:-1::0;;;705:55:47::1;;::::0;:32:::1;:55::i;:::-;770:70;804:14;820:19;770:33;:70::i;:::-;850:100;890:14;906:21;929:20;850:39;:100::i;:::-;1794:14:6::0;1790:66;;;1840:5;1824:21;;-1:-1:-1;;1824:21:6;;;1790:66;340:617:47;;;;;;:::o;770:37:49:-;;;;;;;;;;;;;:::o;3366:107:79:-;-1:-1:-1;;;;;3454:12:79;3421:13;3454:12;;;:6;:12;;;;;;;3366:107::o;1099:165:136:-;1558:12:1;:10;:12::i;:::-;-1:-1:-1;;;;;1547:23:1;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1547:23:1;;1539:68;;;;;-1:-1:-1;;;1539:68:1;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1539:68:1;;;;;;;;;;;;;;;-1:-1:-1;;;;;;1187:18:136;::::1;;::::0;;;:7:::1;:18;::::0;;;;;;:26;;-1:-1:-1;;;;;;1187:26:136::1;-1:-1:-1::0;;;;;1187:26:136;::::1;;::::0;;1228:29;::::1;::::0;::::1;::::0;1187:26;;1228:29:::1;:::i;:::-;;;;;;;;1099:165:::0;;:::o;1983:147:135:-;1558:12:1;:10;:12::i;:::-;-1:-1:-1;;;;;1547:23:1;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1547:23:1;;1539:68;;;;;-1:-1:-1;;;1539:68:1;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1539:68:1;;;;;;;;;;;;;;;2083:17:135::1;:40:::0;;-1:-1:-1;;;;;;2083:40:135::1;-1:-1:-1::0;;;;;2083:40:135;;;::::1;::::0;;;::::1;::::0;;1983:147::o;3165:1466:49:-;3276:42;3321:40;3341:19;;;;;;;;:::i;3321:40::-;3405:549;;;;;;;;;3276:85;;-1:-1:-1;3372:30:49;;3405:549;3433:15;;;;:6;:15;:::i;:::-;-1:-1:-1;;;;;3405:549:49;;;;;3462:103;;;;;;;;3494:16;3462:103;;;;3528:6;:23;;;3462:103;;;3405:549;;;;3587:1;-1:-1:-1;;;;;3405:549:49;;;;;3603:197;;;;;;;;3635:114;;;;;;;;3675:6;:20;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;;3635:114:49;;;;;3717:14;;;;:6;:14;:::i;:::-;3635:114;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;3635:114:49;;-1:-1:-1;3603:197:49;;;3767:19;;;;3603:197;;;;;;;3405:549;;;3814:14;;;;3405:549;;;;3842:15;;;;3405:549;;;;3871:13;;;;3405:549;;;;;;3898:18;;;;;;;;:::i;:::-;-1:-1:-1;;;;;;3405:549:49;;;;;3930:14;;;;:6;:14;:::i;:::-;3405:549;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3405:549:49;;;;-1:-1:-1;;3999:523:49;;;;;;;;;;;4051:203;;4083:114;;;;;3372:582;;-1:-1:-1;3405:549:49;;3999:523;;-1:-1:-1;3999:523:49;;;;4051:203;;;;;;;;;4123:20;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;;4083:114:49;;;;;4165:14;;;;:6;:14;:::i;:::-;4083:114;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4083:114:49;;;;-1:-1:-1;;4051:203:49;;;-1:-1:-1;4215:25:49;;;;4051:203;;;;;3999:523;;;;;;;;;;4292:109;;;;;;;;;;4358:29;;;;4292:109;;;;;;;3999:523;;;;;;;;;;;;;;;;;;;;;4460:18;;;;;;;;:::i;:::-;-1:-1:-1;;;;;;3999:523:49;;;;;4492:20;;;;:6;:20;:::i;:::-;3999:523;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;3999:523:49;;-1:-1:-1;3965:557:49;-1:-1:-1;4533:43:49;4546:8;4556:19;;;;:6;:19;:::i;4533:43::-;4587:37;4604:9;4615:8;4587:16;:37::i;662:43:135:-;;;-1:-1:-1;;;;;662:43:135;;:::o;1967:145:1:-;1558:12;:10;:12::i;:::-;-1:-1:-1;;;;;1547:23:1;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1547:23:1;;1539:68;;;;;-1:-1:-1;;;1539:68:1;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1539:68:1;;;;;;;;;;;;;;;2057:6:::1;::::0;2036:40:::1;::::0;2073:1:::1;::::0;-1:-1:-1;;;;;2057:6:1::1;::::0;2036:40:::1;::::0;2073:1;;2036:40:::1;2086:6;:19:::0;;-1:-1:-1;;;;;;2086:19:1::1;::::0;;1967:145::o;1335:85::-;1407:6;;-1:-1:-1;;;;;1407:6:1;1335:85;;:::o;622:34:135:-;;;-1:-1:-1;;;;;622:34:135;;;;-1:-1:-1;;;622:34:135;;;;;-1:-1:-1;;;622:34:135;;;;:::o;517:173:46:-;1558:12:1;:10;:12::i;:::-;-1:-1:-1;;;;;1547:23:1;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1547:23:1;;1539:68;;;;;-1:-1:-1;;;1539:68:1;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1539:68:1;;;;;;;;;;;;;;;-1:-1:-1;;;;;;606:19:46;::::1;;::::0;;;:8:::1;:19;::::0;;;;;;:29;;-1:-1:-1;;;;;;606:29:46::1;-1:-1:-1::0;;;;;606:29:46;::::1;;::::0;;650:33;::::1;::::0;::::1;::::0;606:29;;650:33:::1;:::i;2747:257:135:-:0;1558:12:1;:10;:12::i;:::-;-1:-1:-1;;;;;1547:23:1;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1547:23:1;;1539:68;;;;;-1:-1:-1;;;1539:68:1;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1539:68:1;;;;;;;;;;;;;;;2867:32:135::1;2889:9;2867:21;:32::i;:::-;2909:38;2934:12;2909:24;:38::i;:::-;2957:40;2983:13;2957:25;:40::i;:::-;2747:257:::0;;;:::o;2136:182::-;1558:12:1;:10;:12::i;:::-;-1:-1:-1;;;;;1547:23:1;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1547:23:1;;1539:68;;;;;-1:-1:-1;;;1539:68:1;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1539:68:1;;;;;;;;;;;;;;;2237:11:135::1;:20:::0;2218:51:::1;::::0;::::1;::::0;::::1;::::0;-1:-1:-1;;;;;2237:20:135;;::::1;::::0;2259:9;;2218:51:::1;:::i;:::-;;;;;;;;2279:11;:32:::0;;-1:-1:-1;;;;;;2279:32:135::1;-1:-1:-1::0;;;;;2279:32:135;;;::::1;::::0;;;::::1;::::0;;2136:182::o;2324:202::-;1558:12:1;:10;:12::i;:::-;-1:-1:-1;;;;;1547:23:1;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1547:23:1;;1539:68;;;;;-1:-1:-1;;;1539:68:1;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1539:68:1;;;;;;;;;;;;;;;2433:11:135::1;:23:::0;2411:60:::1;::::0;::::1;::::0;::::1;::::0;-1:-1:-1;;;2433:23:135;;::::1;;;::::0;2458:12;;2411:60:::1;:::i;:::-;;;;;;;;2481:11;:38:::0;;::::1;::::0;;::::1;-1:-1:-1::0;;;2481:38:135::1;-1:-1:-1::0;;;;2481:38:135;;::::1;::::0;;;::::1;::::0;;2324:202::o;951:314:49:-;1039:11;;-1:-1:-1;;;;;1023:27:49;:12;:10;:12::i;:::-;-1:-1:-1;;;;;1023:27:49;;1015:51;;;;-1:-1:-1;;;1015:51:49;;;;;;;:::i;:::-;;;;;;;;;1084:10;;;;1076:48;;;;-1:-1:-1;;;1076:48:49;;;;;;;:::i;:::-;1134:20;1157:23;1174:5;1157:16;:23::i;:::-;1190:19;;;;:5;:19;;;;;;;-1:-1:-1;;1190:33:49;;1238:20;1134:46;;-1:-1:-1;1238:20:49;;;;1134:46;;1238:20;:::i;:::-;;;;;;;;951:314;;:::o;4637:334::-;4847:68;4862:9;4873:13;4888:10;4900:14;4847;:68::i;:::-;4925:39;4942:9;4953:10;4925:16;:39::i;2532:209:135:-;1558:12:1;:10;:12::i;:::-;-1:-1:-1;;;;;1547:23:1;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1547:23:1;;1539:68;;;;;-1:-1:-1;;;1539:68:1;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1539:68:1;;;;;;;;;;;;;;;2644:11:135::1;:24:::0;2621:63:::1;::::0;::::1;::::0;::::1;::::0;-1:-1:-1;;;2644:24:135;;::::1;;;::::0;2670:13;;2621:63:::1;:::i;:::-;;;;;;;;2694:11;:40:::0;;::::1;::::0;;::::1;-1:-1:-1::0;;;2694:40:135::1;-1:-1:-1::0;;;;;2694:40:135;;::::1;::::0;;;::::1;::::0;;2532:209::o;2261:240:1:-;1558:12;:10;:12::i;:::-;-1:-1:-1;;;;;1547:23:1;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1547:23:1;;1539:68;;;;;-1:-1:-1;;;1539:68:1;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1539:68:1;;;;;;;;;;;;;;;-1:-1:-1;;;;;2349:22:1;::::1;2341:73;;;;-1:-1:-1::0;;;2341:73:1::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2450:6;::::0;2429:38:::1;::::0;-1:-1:-1;;;;;2429:38:1;;::::1;::::0;2450:6:::1;::::0;2429:38:::1;::::0;2450:6:::1;::::0;2429:38:::1;2477:6;:17:::0;;-1:-1:-1;;;;;;2477:17:1::1;-1:-1:-1::0;;;;;2477:17:1;;;::::1;::::0;;;::::1;::::0;;2261:240::o;1750:248:79:-;1825:16;1857:7;:14;1875:1;1857:19;1853:60;;;-1:-1:-1;1899:3:79;1892:10;;1853:60;-1:-1:-1;1978:2:79;1965:16;;1959:23;1932:60;;;;:::o;3479:331::-;3603:4;3619:14;3636:76;3646:47;3665:27;3685:6;3665:19;:27::i;:::-;3646:18;:47::i;:::-;3695:4;3701;3707;3636:76;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3636:76:79;;-1:-1:-1;;3636:76:79;;;-1:-1:-1;;;;;;;3730:20:79;;3722:50;;;;;-1:-1:-1;;;3722:50:79;;;;;;;;;;;;-1:-1:-1;;;3722:50:79;;;;;;;;;;;;;;;3799:4;-1:-1:-1;;;;;3789:14:79;:6;-1:-1:-1;;;;;3789:14:79;;3782:21;;;3479:331;;;;;;;:::o;2690:175:25:-;2748:7;2779:5;;;2802:6;;;;2794:46;;;;;-1:-1:-1;;;2794:46:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;2857:1;-1:-1:-1;2690:175:25;;;;;:::o;12166:388:49:-;12232:25;;:::i;:::-;12268:32;;:::i;:::-;-1:-1:-1;;;;;12313:19:49;;12310:215;;-1:-1:-1;;;12348:44:49;;12310:215;;;-1:-1:-1;;;12423:46:49;;12497:17;;;;12508:5;;12497:17;;;:::i;:::-;;;;-1:-1:-1;;12497:17:49;;;;;;;;;;12483:11;;:31;12541:6;12166:388;-1:-1:-1;;12166:388:49:o;11985:175::-;12084:33;12111:5;12084:26;:33::i;:::-;12127:26;12136:5;12143:9;12127:8;:26::i;:::-;11985:175;;:::o;6078:2137::-;6191:35;6228;6267:34;6279:9;6290:10;6267:11;:34::i;:::-;6190:111;;;;6313:50;6365:51;6418:33;6467:50;6495:9;6506:10;6467:27;:50::i;:::-;6312:205;;;;;;6529:19;6550;6573:1003;6598:444;;;;;;;;6640:122;;;;;;;;6688:9;6640:122;;;;6726:7;:17;;;6640:122;;;6598:444;;;;6789:13;:21;;;6598:444;;;;6840:13;:24;;;6598:444;;;;6889:7;:29;6897:9;:20;;;-1:-1:-1;;;;;6889:29:49;;-1:-1:-1;;;;;6889:29:49;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;6889:29:49;-1:-1:-1;;;;;6598:444:49;;;;;6942:9;:15;;;-1:-1:-1;;;;;6598:444:49;;;;;6995:13;:32;;;6598:444;;;;;7057:430;;;;;;;;7099:104;;;;;;;;7136:9;7099:104;;;;7167:7;:18;;;7099:104;;;7057:430;;;;7230:14;:22;;;7057:430;;;;7282:14;:25;;;7057:430;;;;7332:7;:29;7340:9;:20;;;-1:-1:-1;;;;;7332:29:49;;-1:-1:-1;;;;;7332:29:49;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;7332:29:49;-1:-1:-1;;;;;7057:430:49;;;;;7385:10;:16;;;-1:-1:-1;;;;;7057:430:49;;;;;7439:14;:33;;;7057:430;;;;;7501:65;7523:9;:20;;;7545:9;:20;;;7501:21;:65::i;:::-;6573:11;:1003::i;:::-;7590:20;;6528:1048;;-1:-1:-1;6528:1048:49;-1:-1:-1;;;;;;;7590:48:49;-1:-1:-1;;;7590:48:49;7586:623;;;7662:20;;-1:-1:-1;;;;;;7662:48:49;-1:-1:-1;;;7662:48:49;;7654:57;;;;;;7746:14;7733:9;:27;;7725:54;;;;-1:-1:-1;;;7725:54:49;;;;;;;:::i;:::-;7809:14;7797:9;:26;7793:127;;;7843:62;7875:29;:9;7889:14;7875:13;:29::i;:::-;7851:10;;7843:31;:62::i;:::-;7586:623;;;7940:20;;-1:-1:-1;;;;;;7940:48:49;-1:-1:-1;;;7940:48:49;7936:273;;;8025:14;8012:9;:27;;8004:54;;;;-1:-1:-1;;;8004:54:49;;;;;;;:::i;:::-;8088:14;8076:9;:26;8072:127;;;8122:62;8154:29;:9;8168:14;8154:13;:29::i;8122:62::-;6078:2137;;;;;;;;;:::o;1952:123:6:-;2000:4;2024:44;2062:4;2024:29;:44::i;:::-;2023:45;2016:52;;1952:123;:::o;759:64:18:-;1512:13:6;;;;;;;;:33;;;1529:16;:14;:16::i;:::-;1512:50;;;-1:-1:-1;1550:12:6;;;;1549:13;1512:50;1504:109;;;;-1:-1:-1;;;1504:109:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1624:19;1647:13;;;;;;1646:14;1670:98;;;;1704:13;:20;;-1:-1:-1;;;;1704:20:6;;;;;1738:19;1720:4;1738:19;;;1670:98;1794:14;1790:66;;;1840:5;1824:21;;-1:-1:-1;;1824:21:6;;;1790:66;759:64:18;:::o;1067:192:1:-;1512:13:6;;;;;;;;:33;;;1529:16;:14;:16::i;:::-;1512:50;;;-1:-1:-1;1550:12:6;;;;1549:13;1512:50;1504:109;;;;-1:-1:-1;;;1504:109:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1624:19;1647:13;;;;;;1646:14;1670:98;;;;1704:13;:20;;-1:-1:-1;;;;1704:20:6;;;;;1738:19;1720:4;1738:19;;;1670:98;1134:17:1::1;1154:12;:10;:12::i;:::-;1176:6;:18:::0;;-1:-1:-1;;;;;;1176:18:1::1;-1:-1:-1::0;;;;;1176:18:1;::::1;::::0;;::::1;::::0;;;1209:43:::1;::::0;1176:18;;-1:-1:-1;1176:18:1;-1:-1:-1;;1209:43:1::1;::::0;-1:-1:-1;;1209:43:1::1;1778:1:6;1794:14:::0;1790:66;;;1840:5;1824:21;;-1:-1:-1;;1824:21:6;;;1067:192:1;:::o;669:121:50:-;1512:13:6;;;;;;;;:33;;;1529:16;:14;:16::i;:::-;1512:50;;;-1:-1:-1;1550:12:6;;;;1549:13;1512:50;1504:109;;;;-1:-1:-1;;;1504:109:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1624:19;1647:13;;;;;;1646:14;1670:98;;;;1704:13;:20;;-1:-1:-1;;;;1704:20:6;;;;;1738:19;1720:4;1738:19;;;1670:98;743:40:50::1;;;;;;;;;;;;;;-1:-1:-1::0;;;743:40:50::1;;::::0;::::1;;;;;;;;;;;;;-1:-1:-1::0;;;743:40:50::1;;::::0;:23:::1;:40::i;1399:345:79:-:0;482:92;1615:4;1599:22;;;;;;1655:7;1639:25;;;;;;1690:4;1713:9;:7;:9::i;:::-;1531:205;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1531:205:79;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1521:216;;;;;;1503:15;:234;;;;1399:345;;:::o;764:329:136:-;878:7;:35;;;:65;;-1:-1:-1;;;;;878:65:136;;;-1:-1:-1;;;;;;878:65:136;;;;;;;953:36;:61;;;;;;;;;;;;;;-1:-1:-1;;;878:35:136;1024:37;;:62;;;;;;;;;;764:329::o;1727:250:135:-;1512:13:6;;;;;;;;:33;;;1529:16;:14;:16::i;:::-;1512:50;;;-1:-1:-1;1550:12:6;;;;1549:13;1512:50;1504:109;;;;-1:-1:-1;;;1504:109:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1624:19;1647:13;;;;;;1646:14;1670:98;;;;1704:13;:20;;-1:-1:-1;;;;1704:20:6;;;;;1738:19;1720:4;1738:19;;;1670:98;1930:17:135::1;:40:::0;;-1:-1:-1;;;;;;1930:40:135::1;-1:-1:-1::0;;;;;1930:40:135;::::1;;::::0;;1790:66:6;;;;1840:5;1824:21;;-1:-1:-1;;1824:21:6;;;1727:250:135;;;;:::o;963:164:47:-;1068:15;1102:18;:16;:18::i;:::-;1095:25;;963:164;:::o;1997:745:54:-;2080:14;;;;2057:7;;-1:-1:-1;;;;;;2080:35:54;-1:-1:-1;;;2080:35:54;;:75;;-1:-1:-1;2137:18:54;2119:14;;;-1:-1:-1;;;;;;2119:36:54;;;;2080:75;2076:660;;;2216:11;;2259:15;;;;:25;2245:40;;:13;:40::i;:::-;2317:15;;;;:25;2303:40;;:13;:40::i;:::-;2361:5;:10;;;2188:197;;;;;;-1:-1:-1;;;;;2188:197:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2178:208;;;;;;2171:215;;;;2076:660;2527:11;;2570:15;;;;:25;2556:40;;:13;:40::i;:::-;2628:15;;;;:25;2614:40;;:13;:40::i;:::-;2672:5;:10;;;2700:5;:10;;;2499:225;;;;;;-1:-1:-1;;;;;2499:225:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2489:236;;;;;;2482:243;;;;5209:676:49;5381:38;5394:9;5405:13;5381:12;:38::i;:::-;5429:40;5442:10;5454:14;5429:12;:40::i;:::-;5483:15;;;;-1:-1:-1;;;;;5483:29:49;;5479:195;;5532:16;;-1:-1:-1;;;;;5532:30:49;;5528:135;;5608:9;:15;;;-1:-1:-1;;;;;5588:35:49;:10;:16;;;-1:-1:-1;;;;;5588:35:49;;5580:83;;;;-1:-1:-1;;;5580:83:49;;;;;;;:::i;:::-;5687:16;;;;-1:-1:-1;;;;;5687:30:49;;5683:196;;5737:15;;-1:-1:-1;;;;;5737:29:49;;5733:135;;5812:9;:15;;;-1:-1:-1;;;;;5792:35:49;:10;:16;;;-1:-1:-1;;;;;5792:35:49;;5784:84;;;;-1:-1:-1;;;5784:84:49;;;;;;;:::i;3054:306:79:-;3137:7;348:76;;;;;;;;;;;;;;;;;338:87;;;;;;3244:6;:12;;;3274:6;:11;;;3313:6;:24;;;3303:35;;;;;;3173:179;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3173:179:79;;;;;;;;;;;;;;;;;;;;;;;;;;;;3163:190;;;;;;3156:197;;3054:306;;;:::o;5055:179::-;5127:7;5192:20;:18;:20::i;:::-;5214:11;5163:63;;;;;;-1:-1:-1;;;5163:63:79;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5153:74;;;;;;5146:81;;5055:179;;;:::o;3220:273:54:-;3308:11;;;;:16;;:49;;;3342:15;3328:5;:11;;;:29;3308:49;3300:91;;;;;-1:-1:-1;;;3300:91:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;3409:9;;;;:14;;:45;;;3439:15;3427:5;:9;;;:27;3409:45;3401:85;;;;;-1:-1:-1;;;3401:85:54;;;;;;;;;;;;;;;;;;;;;;;;;;;796:1152:50;895:10;;;;891:1051;;930:11;;-1:-1:-1;;;;;930:25:50;;926:126;;999:11;;-1:-1:-1;;;;;983:27:50;:12;:10;:12::i;:::-;-1:-1:-1;;;;;983:27:50;;975:62;;;;;-1:-1:-1;;;975:62:50;;;;;;;;;;;;-1:-1:-1;;;975:62:50;;;;;;;;;;;;;;;891:1051;;;1102:11;;-1:-1:-1;;;;;1086:27:50;:12;:10;:12::i;:::-;-1:-1:-1;;;;;1086:27:50;;1082:850;;1133:12;1148:20;1162:5;1148:13;:20::i;:::-;1133:35;;1257:24;:5;:11;;;-1:-1:-1;;;;;1257:22:50;;:24::i;:::-;1253:665;;;1347:11;;-1:-1:-1;;;1415:10:50;-1:-1:-1;;;;;1338:38:50;652:10;1377:22;1394:4;1377:16;:22::i;:::-;1401:9;1338:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1338:73:50;-1:-1:-1;;;;;;1338:87:50;;1305:213;;;;-1:-1:-1;;;1305:213:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1253:665;;;1692:11;;-1:-1:-1;;;;;1647:56:50;:41;1678:9;1647:22;1664:4;1647:16;:22::i;:::-;:30;;:41::i;:::-;-1:-1:-1;;;;;1647:56:50;;1643:257;;1731:44;;-1:-1:-1;;;1731:44:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1643:257;1839:11;;-1:-1:-1;;;;;1839:25:50;1830:47;;;;;-1:-1:-1;;;1830:47:50;;;;;;;;;;;;-1:-1:-1;;;1830:47:50;;;;;;;;;;;;;;11463:516:49;11574:35;;:::i;:::-;11611;;:::i;:::-;11682:19;;;;:29;11713:20;;;;:30;11670:74;;11682:29;11670:11;:74::i;:::-;11762:20;;11658:86;;-1:-1:-1;;;;;;;11762:25:49;11754:56;;;;-1:-1:-1;;;11754:56:49;;;;;;;:::i;:::-;11844:19;;;;:29;11875:20;;;;:30;11832:74;;11844:29;11832:11;:74::i;:::-;11924:20;;11820:86;;-1:-1:-1;;;;;;;11924:25:49;11916:56;;;;-1:-1:-1;;;11916:56:49;;;;;;;:::i;:::-;11463:516;;;;;:::o;8221:1003::-;8365:50;;:::i;:::-;8417:51;;:::i;:::-;8470:33;;:::i;:::-;8515:24;8542:27;8559:9;8542:16;:27::i;:::-;8515:54;;8579:25;8607:28;8624:10;8607:16;:28::i;:::-;8579:56;;8646:17;8666:12;:10;:12::i;:::-;8692:15;;8646:32;;-1:-1:-1;;;;;;8692:29:49;8688:87;;-1:-1:-1;;;;;8737:27:49;;;;8688:87;8788:16;;-1:-1:-1;;;;;8788:30:49;8784:89;;-1:-1:-1;;;;;8834:28:49;;;;8784:89;8899:29;8918:9;8899:18;:29::i;:::-;8883:45;;8955:30;8974:10;8955:18;:30::i;:::-;8938:47;;9006:211;9036:9;9059:10;9083:16;9113:17;9144:13;:24;;;9182:14;:25;;;9006:16;:211::i;:::-;8996:221;;8221:1003;;;;;;;;:::o;174:719:140:-;254:7;-1:-1:-1;;;;;;277:37:140;;-1:-1:-1;;;277:37:140;273:87;;;-1:-1:-1;337:12:140;330:19;;273:87;-1:-1:-1;;;;;;373:38:140;;-1:-1:-1;;;373:38:140;369:89;;;-1:-1:-1;434:13:140;427:20;;369:89;-1:-1:-1;;;;;;471:39:140;;-1:-1:-1;;;471:39:140;467:89;;;-1:-1:-1;533:12:140;526:19;;467:89;-1:-1:-1;;;;;;569:40:140;;-1:-1:-1;;;569:40:140;565:91;;;-1:-1:-1;632:13:140;625:20;;565:91;-1:-1:-1;;;;;;669:41:140;;-1:-1:-1;;;669:41:140;665:91;;;-1:-1:-1;733:12:140;726:19;;665:91;-1:-1:-1;;;;;;769:42:140;;-1:-1:-1;;;769:42:140;765:93;;;-1:-1:-1;834:13:140;827:20;;765:93;-1:-1:-1;874:12:140;174:719;;;;:::o;3392:1027:135:-;3629:10;;:16;;;;;3673:11;;:17;;;;3716:23;3705:7;:34;;;;;;;;;3701:712;;;3772:45;;;;;;;;3805:11;3772:45;-1:-1:-1;;;;;3772:45:135;;;;;-1:-1:-1;;;3772:45:135;;;;;;;;-1:-1:-1;;;3772:45:135;;;;;;;;;;;;;3792:4;;3798:5;;3772:19;:45::i;:::-;3755:62;;3831:96;3847:5;:11;;;:21;;;3870:5;:11;;;:17;;;3889:5;:10;;;3901:4;:12;;;3915:5;:11;;;3831:15;:96::i;:::-;3701:712;;;3959:24;3948:7;:35;;;;;;;;;3944:469;;;4017:44;;;;;;;;4049:11;4017:44;-1:-1:-1;;;;;4017:44:135;;;;;-1:-1:-1;;;4017:44:135;;;;;;;;-1:-1:-1;;;4017:44:135;;;;;;;;;;;;;4037:5;;4044:4;;4017:19;:44::i;:::-;3999:62;;4075:93;4091:4;:10;;;:20;;;4113:4;:10;;;:16;;;4131:4;:9;;;4142:5;:13;;;4157:4;:10;;;4075:15;:93::i;3944:469::-;4215:10;;:20;;4237:16;;;;;4255:9;;;;4266:13;;;;4281:10;;;;4199:93;;4255:9;4266:13;4199:15;:93::i;:::-;4322:11;;:21;;4345:17;;;;;4364:10;;;;4376:12;;;;4390:11;;;;4306:96;;4364:10;4376:12;4306:15;:96::i;:::-;3392:1027;;;;;;:::o;3147:155:5:-;3205:7;3237:1;3232;:6;;3224:49;;;;;-1:-1:-1;;;3224:49:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3290:5:5;;;3147:155::o;83:161:141:-;165:27;;148:12;;-1:-1:-1;;;;;165:7:141;;;181:5;;148:12;165:27;148:12;165:27;181:5;165:7;:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;147:45;;;210:7;202:35;;;;;-1:-1:-1;;;202:35:141;;;;;;;;;;;;-1:-1:-1;;;202:35:141;;;;;;;;;;;;;;737:413:17;1097:20;1135:8;;;737:413::o;2317:292:2:-;1512:13:6;;;;;;;;:33;;;1529:16;:14;:16::i;:::-;1512:50;;;-1:-1:-1;1550:12:6;;;;1549:13;1512:50;1504:109;;;;-1:-1:-1;;;1504:109:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1624:19;1647:13;;;;;;1646:14;1670:98;;;;1704:13;:20;;-1:-1:-1;;;;1704:20:6;;;;;1738:19;1720:4;1738:19;;;1670:98;2445:22:2;;::::1;::::0;;::::1;::::0;;;;2501:25;;;;::::1;::::0;;;;2536:12:::1;:25:::0;;;;2571:15:::1;:31:::0;1790:66:6;;;;1840:5;1824:21;;-1:-1:-1;;1824:21:6;;;2317:292:2;;;:::o;4372:96:79:-;4414:7;4448:12;:10;:12::i;3816:550::-;3878:22;3916:10;3938:4;3916:27;3912:425;;;3959:18;3980:8;;3959:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;4018:8:79;4200:17;4194:24;-1:-1:-1;;;;;4190:73:79;;-1:-1:-1;4056:221:79;;-1:-1:-1;4056:221:79;;-1:-1:-1;4316:10:79;3816:550;:::o;944:251:73:-;1110:20;;1158:14;;;;;1148:25;;;;;;1045:142;;;572:66;1045:142;;;;-1:-1:-1;;;;;;1045:142:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1035:153;;;;;;944:251::o;4601:100:79:-;4679:15;;4601:100;:::o;2748:466:54:-;2805:7;326:238;2901:5;:11;;;2930:30;2944:5;:15;;;2930:13;:30::i;:::-;2978:5;:11;;;3007:30;3021:5;:15;;;3007:13;:30::i;:::-;3055:5;:10;;;3083:5;:11;;;3112:5;:9;;;3139:5;:14;;;3181:5;:10;;;3171:21;;;;;;2841:365;;;;;;;;;;;-1:-1:-1;;;;;2841:365:54;;;;;;;;;;;-1:-1:-1;;;;;2841:365:54;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2841:365:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2831:376;;;;;;2824:383;;2748:466;;;:::o;3813:183:2:-;3890:7;3955:20;:18;:20::i;865:768:78:-;967:7;1032:9;:16;1052:2;1032:22;1028:94;;1070:41;;;-1:-1:-1;;;1070:41:78;;;;;;;;;;;;;;;;;;;;;;;;;;;1028:94;1472:4;1457:20;;1451:27;1517:4;1502:20;;1496:27;1570:4;1555:20;;1549:27;1188:9;1541:36;1604:22;1612:4;1541:36;1451:27;1496;1604:7;:22::i;:::-;1597:29;865:768;-1:-1:-1;;;;;;865:768:78:o;696:415:46:-;823:25;;:::i;:::-;860:32;895:48;913:13;928:14;895:17;:48::i;:::-;957:17;;860:83;;-1:-1:-1;;;;;;;957:22:46;953:152;;1002:48;1020:14;1036:13;1002:17;:48::i;:::-;995:55;;;;;953:152;1088:6;-1:-1:-1;1081:13:46;;294:1296:55;361:33;;:::i;:::-;437:5;406:28;;;:36;456:14;;;;-1:-1:-1;;;;;;456:35:55;-1:-1:-1;;;456:35:55;452:1021;;;507:33;554:5;:10;;;543:47;;;;;;;;;;;;:::i;:::-;624:12;;604:32;;673:15;;;;;650:20;;;:38;-1:-1:-1;452:1021:55;;;709:14;;;;-1:-1:-1;;;;;;709:35:55;-1:-1:-1;;;709:35:55;705:768;;;760:33;807:5;:10;;;796:47;;;;;;;;;;;;:::i;:::-;877:12;;857:32;;926:15;;;;;903:20;;;:38;978:15;;;;;955:38;;:20;;;:38;-1:-1:-1;705:768:55;;;1014:14;;;;-1:-1:-1;;;;;;1014:35:55;-1:-1:-1;;;1014:35:55;1010:463;;;1065:33;1112:5;:10;;;1101:47;;;;;;;;;;;;:::i;:::-;1182:12;;1162:32;;1231:15;;;;;1208:20;;;:38;1283:15;;;;;1260:38;;:20;;;:38;-1:-1:-1;1343:4:55;1312:28;;;:35;1010:463;;;1368:14;;;;-1:-1:-1;;;;;;1368:28:55;;;;1364:109;;;;;;1429:33;;-1:-1:-1;;;1429:33:55;;;;;;;:::i;1364:109::-;1486:17;;:24;1482:102;;1561:11;;1551:22;;:9;:22::i;:::-;1531:42;;294:1296;;;:::o;9677:1580:49:-;9934:25;;:::i;:::-;9971:18;9992:46;10005:9;:14;;;10021:16;9992:12;:46::i;:::-;9971:67;;10048:19;10070:48;10083:10;:15;;;10100:17;10070:12;:48::i;:::-;10048:70;;10128:33;10164:100;10182:9;10193:10;10205:13;10220:14;10236:12;10250:13;10164:17;:100::i;:::-;10128:136;;10279:9;:19;;;:25;;;10308:1;10279:30;;:65;;;-1:-1:-1;10313:20:49;;;;:26;;;:31;;10279:65;10275:145;;;10368:17;;10360:49;;;;-1:-1:-1;;;10360:49:49;;;;;;;:::i;:::-;10433:19;;;;:25;;;:30;;;:65;;-1:-1:-1;10467:20:49;;;;;:26;;:31;;10433:65;10429:146;;;10543:1;10522:7;:18;;;:22;10514:50;;;;-1:-1:-1;;;10514:50:49;;;;;;;:::i;:::-;10589:14;;;;:19;10585:264;;10628:12;10624:215;;;10704:17;;10686:36;;:13;;:17;:36::i;:::-;10660:23;;;;:5;:23;;;;;:62;10624:215;;;10805:18;;;;10787:37;;:13;;:17;:37::i;:::-;10761:23;;;;:5;:23;;;;;:63;10624:215;10863:15;;;;:20;10859:270;;10903:13;10899:220;;;10982:18;;;;10963:38;;:14;;:18;:38::i;:::-;10936:24;;;;:5;:24;;;;;:65;10899:220;;;11086:17;;11067:37;;:14;;:18;:37::i;:::-;11040:24;;;;:5;:24;;;;;:64;10899:220;11187:18;;;;11207:17;;11144:81;;;;;;11150:16;;11168:17;;11187:18;11207:17;11144:81;:::i;:::-;;;;;;;;11243:7;9677:1580;-1:-1:-1;;;;;;;;;9677:1580:49:o;4710:1906:135:-;4894:16;4922:21;4946:11;:30;;;:61;;5006:1;4946:61;;;4979:12;:24;;;4946:61;4922:85;;;;5017:22;5042:7;:26;;;:58;;5099:1;5042:58;;;5071:12;:25;;;5042:58;5017:83;;;;5124:87;5145:11;:17;;;:23;;;5170:16;5188:11;:22;;;5124:20;:87::i;:::-;5266:17;;:23;;;;5291:16;;;;5347:21;;5370:27;;5399:17;;;;5110:101;;-1:-1:-1;5221:9:135;;5233:184;;5110:101;;5266:23;5291:16;5309:36;;;;5233:19;:184::i;:::-;5453:17;;:27;;5482:13;;:23;5507:15;;;;;5530:23;;;5555:16;;;;5573:17;;;;5221:196;;-1:-1:-1;5435:156:135;;5453:27;;5482:23;;5221:196;;5530:23;5555:16;5435:17;:156::i;:::-;5428:163;;5618:11;:22;;;:29;5652:1;5618:35;:82;;;;;5669:7;:18;;;:25;5699:1;5669:31;5618:82;:164;;;;;5749:11;:22;;;5772:1;5749:25;;;;;;;;;;;;;;:33;;;-1:-1:-1;;;;;5716:66:135;:7;:18;;;5735:1;5716:21;;;;;;;;;;;;;;:29;;;-1:-1:-1;;;;;5716:66:135;;5618:164;5601:895;;;5839:22;;;5859:1;5839:22;;;;;;;;;5808:28;;5839:22;;;;;;:::i;:::-;;;;;;;;;;;;;;;;5808:53;;5895:7;:18;;;5914:1;5895:21;;;;;;;;;;;;;;:29;;;5875:6;5882:1;5875:9;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5875:49:135;;;;;5986:22;;;;:25;;5875:17;;5986:25;;;;;;;;;;:31;;;5956:7;:18;;;5975:1;5956:21;;;;;;;;;;;;;;:27;;;:61;5938:6;5945:1;5938:9;;;;;;;;;;;;;;:15;;:79;-1:-1:-1;;;;;5938:79:135;;;-1:-1:-1;;;;;5938:79:135;;;;;6041:117;6054:11;:17;;;:27;;;6083:4;6089:11;:17;;;:23;;;6114:6;6122:11;:16;;;6140:11;:17;;;6041:12;:117::i;:::-;-1:-1:-1;6031:127:135;-1:-1:-1;5601:895:135;;-1:-1:-1;5601:895:135;;6199:133;6212:11;:17;;;:27;;;6241:4;6247:11;:17;;;:23;;;6272:11;:22;;;6296:11;:16;;;6314:11;:17;;;6199:12;:133::i;:::-;-1:-1:-1;6369:17:135;;:27;;6404:23;;;;;6429:18;;;;6449:16;;;;6467:17;;;;6189:143;;-1:-1:-1;6356:129:135;;6189:143;;6404:23;6429:18;6449:16;6356:12;:129::i;:::-;-1:-1:-1;6346:139:135;-1:-1:-1;5601:895:135;6505:104;6521:11;:17;;;:27;;;6550:4;6556:11;:16;;;6574:7;:15;;;6591:11;:17;;;6505:15;:104::i;:::-;4710:1906;;;;;;;;:::o;11503:1016::-;11728:1;11711:7;:14;:18;11703:67;;;;-1:-1:-1;;;11703:67:135;;;;;;;:::i;:::-;11780:11;11817:6;11780:11;11833:373;11874:1;11857:7;:14;:18;11853:1;:22;11833:373;;;11896:18;11917:27;11927:7;11935:1;11927:10;;;;;;;;;;;;;;:16;;;-1:-1:-1;;;;;11917:27:135;:6;:9;;:27;;;;:::i;:::-;11896:48;;11967:28;11978:7;11986:1;11978:10;;;;;;;;;;;;;;:16;;;-1:-1:-1;;;;;11967:28:135;:6;:10;;:28;;;;:::i;:::-;11958:37;-1:-1:-1;12013:17:135;;12009:187;;12057:23;:4;12066:13;12057:8;:23::i;:::-;12050:30;;12098:83;12107:40;;;;;;;;12122:9;12107:40;;;;12133:13;12107:40;;;12149:4;12155:7;12163:1;12155:10;;;;;;;;;;;;;;:18;;;12175:5;12098:8;:83::i;:::-;-1:-1:-1;11877:3:135;;11833:373;;;;12215:30;12248:7;12273:1;12256:7;:14;:18;12248:27;;;;;;;;;;;;;;12215:60;;12294:28;12305:10;:16;;;-1:-1:-1;;;;;12294:28:135;:6;:10;;:28;;;;:::i;:::-;12285:37;;12340:6;12350:5;12340:15;12332:58;;;;-1:-1:-1;;;12332:58:135;;;;;;;:::i;:::-;12404:8;;12400:113;;12428:74;12437:31;;;;;;;;12452:9;12437:31;;;;12463:4;12437:31;;;12470:4;12476:10;:18;;;12496:5;12428:8;:74::i;:::-;11503:1016;;;;;;;;:::o;4474:121:79:-;4570:9;;4550:39::o;1201:225:73:-;1258:7;679:106;1354:21;1359:5;:15;;;1354:4;:21::i;:::-;1393:5;:11;;;1294:124;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1284:135;;;;;;1277:142;;1201:225;;;:::o;2695:160:2:-;2748:7;2774:74;1459:95;2808:17;:15;:17::i;:::-;2827:20;:18;:20::i;:::-;2774:21;:74::i;1781:1909:78:-;1904:7;2848:66;2818:96;;;2797:177;;;;-1:-1:-1;;;2797:177:78;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3194:14;3226:2;3222:1;:6;;;3218:374;;;3273:1;3269;:5;:11;;3278:2;3269:11;:26;;;;3288:1;3284;:5;:11;;3293:2;3284:11;3269:26;3244:119;;;;-1:-1:-1;;;3244:119:78;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3386:52;3396:28;3419:4;3396:22;:28::i;:::-;3430:1;3426;:5;3433:1;3436;3386:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3377:61;;3218:374;;;3477:1;:7;;3482:2;3477:7;:18;;;;3488:1;:7;;3493:2;3488:7;3477:18;3469:65;;;;-1:-1:-1;;;3469:65:78;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3557:24;3567:4;3573:1;3576;3579;3557:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3548:33;;3218:374;-1:-1:-1;;;;;3610:20:78;;3602:57;;;;;-1:-1:-1;;;3602:57:78;;;;;;;;;;;;;;;;;;;;;;;;;;;;3677:6;1781:1909;-1:-1:-1;;;;;1781:1909:78:o;1117:1602:46:-;1249:25;;:::i;:::-;1305:24;;1359:25;;-1:-1:-1;;;;;;1398:37:46;;-1:-1:-1;;;1398:37:46;1394:213;;;-1:-1:-1;;;;;;1455:38:46;;-1:-1:-1;;;1455:38:46;1451:97;;;1520:13;1513:20;;;;;;1451:97;-1:-1:-1;;1568:28:46;;;;;;;;-1:-1:-1;1568:28:46;;;1590:5;;1568:28;1590:5;;;;;;;;;1568:28;;;;;;;;-1:-1:-1;1561:35:46;;1394:213;-1:-1:-1;;;;;;1620:39:46;;-1:-1:-1;;;1620:39:46;1616:246;;;-1:-1:-1;;;;;;1679:40:46;;-1:-1:-1;;;1679:40:46;1675:128;;;1746:42;1758:13;1773:14;1746:11;:42::i;:::-;1739:49;;;;;;1616:246;-1:-1:-1;;;;;;1875:40:46;;-1:-1:-1;;;1875:40:46;1871:248;;;-1:-1:-1;;;;;;1935:41:46;;-1:-1:-1;;;1935:41:46;1931:129;;;2003:42;2015:13;2030:14;2003:11;:42::i;1871:248::-;-1:-1:-1;;;;;;2132:41:46;;-1:-1:-1;;;2132:41:46;2128:250;;;-1:-1:-1;;;;;;2193:42:46;;-1:-1:-1;;;2193:42:46;2189:130;;;2262:42;2274:13;2289:14;2262:11;:42::i;2128:250::-;-1:-1:-1;;;;;;2405:19:46;;2387:15;2405:19;;;:8;:19;;;;;;-1:-1:-1;;;;;2405:19:46;2438:21;;2434:124;;2482:65;;-1:-1:-1;;;2482:65:46;;-1:-1:-1;;;;;2482:34:46;;;;;:65;;2517:13;;2532:14;;2482:65;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2482:65:46;;;;;;;;;;;;:::i;:::-;2475:72;;;;;;;2434:124;-1:-1:-1;;;;;;2571:23:46;;;;;;;2567:103;;;2617:42;2629:13;2644:14;2617:11;:42::i;2567:103::-;2679:33;;-1:-1:-1;;;2679:33:46;;;;;;;:::i;1596:263:55:-;1724:21;;;1743:1;1724:21;;;;;;;;;1660;;1693:28;;1724:21;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;1693:52;;1783:12;1755:6;1762:1;1755:9;;;;;;;;;;;;;;:17;;:41;-1:-1:-1;;;;;1755:41:55;;;-1:-1:-1;;;;;1755:41:55;;;;;1824:5;1806:6;1813:1;1806:9;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1806:23:55;;;:15;;:23;1846:6;-1:-1:-1;1596:263:55;;;:::o;11263:194:49:-;11333:9;11358;11354:97;;-1:-1:-1;11390:1:49;11354:97;;;-1:-1:-1;11429:11:49;;;;:5;:11;;;;;;;11263:194;-1:-1:-1;11263:194:49:o;849:992:52:-;1042:17;;:::i;:::-;1072:18;1092;1114:69;1142:9;1153:13;1168:14;1114:27;:69::i;:::-;1071:112;;;;1194:19;1215;1238:72;1266:10;1278:14;1294:15;1238:27;:72::i;:::-;1193:117;;;;1374:13;1357:14;:30;:89;;;;1410:13;1392:14;:31;:53;;;;-1:-1:-1;1427:18:52;;1392:53;1353:262;;;1510:94;1519:13;1534;1549:10;:20;;;:26;;;1577:10;:20;;;:26;;;1510:8;:94::i;:::-;1503:101;;;;;;;;1353:262;1739:95;1749:9;:19;;;:25;;;1776:9;:19;;;:25;;;1803:14;1819;1739:9;:95::i;:::-;1732:102;849:992;-1:-1:-1;;;;;;;;;;;849:992:52:o;12867:469:135:-;13025:4;13062:16;13025:4;13088:197;13112:15;:22;13108:1;:26;13088:197;;;13191:5;13163:15;13179:1;13163:18;;;;;;;;;;;;;;:24;;;-1:-1:-1;;;;;13163:33:135;;;13155:67;;;;-1:-1:-1;;;13155:67:135;;;;;;;:::i;:::-;13250:15;13266:1;13250:18;;;;;;;;;;;;;;:24;;;-1:-1:-1;;;;;13243:31:135;:4;:31;13236:38;;13136:3;;;;;13088:197;;;-1:-1:-1;13302:27:135;13313:15;:6;13323:4;13313:9;:15::i;:::-;13302:6;;:10;:27::i;:::-;13295:34;;;12867:469;;;;;;:::o;6701:506::-;6964:4;6981:9;6992:8;7004:49;7015:11;7028:6;7036:16;7004:10;:49::i;:::-;6980:73;;-1:-1:-1;6980:73:135;-1:-1:-1;7067:7:135;;7063:117;;7090:79;7099:35;;;;;;;;7114:14;7099:35;;;;7130:3;7099:35;;;7136:4;7142:19;7163:5;7090:8;:79::i;:::-;-1:-1:-1;7196:4:135;-1:-1:-1;6701:506:135;;;;;;;;;;:::o;7815:850::-;8090:4;8106:31;8140:37;8164:12;8140:23;:37::i;:::-;8106:71;;8204:9;:16;8224:1;8204:21;:56;;;;;8241:7;:14;8259:1;8241:19;8204:56;:114;;;;;8300:7;8308:1;8300:10;;;;;;;;;;;;;;:18;;;-1:-1:-1;;;;;8276:42:135;:9;8286:1;8276:12;;;;;;;;;;;;;;:20;;;-1:-1:-1;;;;;8276:42:135;;8204:114;8187:260;;;8373:4;8351:9;8361:1;8351:12;;;;;;;;;;;;;;:18;;;-1:-1:-1;;;;;8351:26:135;;;8343:68;;;;-1:-1:-1;;;8343:68:135;;;;;;;:::i;:::-;8432:4;8425:11;;;;;8187:260;8457:11;8470:19;8493:68;8506:16;8524:4;8530:6;8538:9;8549:4;8555:5;8493:12;:68::i;:::-;8456:105;;;;8597:4;8579:14;:22;;8571:64;;;;-1:-1:-1;;;8571:64:135;;;;;;;:::i;:::-;-1:-1:-1;8652:6:135;7815:850;-1:-1:-1;;;;;;;;;7815:850:135:o;10512:656::-;10797:4;10724:12;;10811:351;10835:4;:11;10831:1;:15;10811:351;;;10879:28;10893:4;10898:1;10893:7;;;;;;;;;;;;;;:13;;;-1:-1:-1;;;;;10879:28:135;:9;:13;;:28;;;;:::i;:::-;10867:40;;10921:13;10970:42;10981:7;10990:6;10998:4;11003:1;10998:7;;;;;;;;;;;;;;:13;;;-1:-1:-1;;;;;10970:42:135;:10;:42::i;:::-;10948:64;;-1:-1:-1;10948:64:135;-1:-1:-1;11030:12:135;;11026:126;;11062:75;11071:35;;;;;;;;11086:9;11071:35;;;;11097:8;11071:35;;;11108:4;11114;11119:1;11114:7;;;;;;;11062:75;-1:-1:-1;10848:3:135;;10811:351;;;;10512:656;;;;;;;;;:::o;198:120:74:-;259:4;282:29;305:5;282:18;:5;292:7;282:9;:18::i;:::-;:22;;:29::i;1270:2083:136:-;1428:15;;:26;-1:-1:-1;;;;;;1428:57:136;-1:-1:-1;;;1428:57:136;1424:1923;;;1577:13;1592:12;1619:5;:15;;;:20;;;1608:52;;;;;;;;;;;;:::i;:::-;1576:84;;;;1682:5;:11;;;1697:1;1682:16;1674:47;;;;-1:-1:-1;;;1674:47:136;;;;;;;:::i;:::-;-1:-1:-1;;;;;1739:21:136;;1755:4;1739:21;1735:261;;;1779:70;;-1:-1:-1;;;1779:70:136;;-1:-1:-1;;;;;1779:42:136;;;;;:70;;1830:4;;1837:2;;1841:7;;1779:70;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1735:261;;;1888:93;;-1:-1:-1;;;1888:93:136;;-1:-1:-1;;;;;1888:47:136;;;;;:93;;1955:5;;1963:4;;1969:2;;1973:7;;1888:93;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1735:261;1424:1923;;;;;2016:15;;:26;-1:-1:-1;;;;;;2016:56:136;-1:-1:-1;;;2016:56:136;2012:1335;;;2164:13;2192:5;:15;;;:20;;;2181:43;;;;;;;;;;;;:::i;:::-;2163:61;-1:-1:-1;;;;;;2242:21:136;;2258:4;2242:21;2238:279;;;2328:11;;;;2290:50;;-1:-1:-1;;;2290:50:136;;-1:-1:-1;;;;;2290:33:136;;;;;:50;;2324:2;;2290:50;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2282:84;;;;-1:-1:-1;;;2282:84:136;;;;;;;:::i;:::-;2238:279;;;2490:11;;;;2405:97;;-1:-1:-1;;;2405:97:136;;-1:-1:-1;;;;;2405:48:136;;;;;:97;;2472:5;;2480:4;;2486:2;;2405:97;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2238:279;2012:1335;;;;2537:15;;:26;-1:-1:-1;;;;;;2537:58:136;-1:-1:-1;;;2537:58:136;2533:814;;;2687:13;2702:12;2729:5;:15;;;:20;;;2718:52;;;;;;;;;;;;:::i;:::-;2686:84;;-1:-1:-1;2686:84:136;-1:-1:-1;;;;;;2788:21:136;;2804:4;2788:21;2784:300;;;2900:11;;;;2828:88;;-1:-1:-1;;;2828:88:136;;-1:-1:-1;;;;;2828:43:136;;;;;:88;;2880:4;;2887:2;;2891:7;;2828:88;;;:::i;2784:300::-;3051:11;;;;2955:112;;-1:-1:-1;;;2955:112:136;;-1:-1:-1;;;;;2955:48:136;;;;;:112;;3024:5;;3032:4;;3038:2;;3042:7;;3051:11;2955:112;;;:::i;2533:814::-;3104:15;;:26;-1:-1:-1;;;;;;3104:54:136;-1:-1:-1;;;3104:54:136;3100:247;;;-1:-1:-1;;;;;3178:19:136;;3192:4;3178:19;3174:85;;3232:11;;;;3217:27;;-1:-1:-1;;;;;3217:14:136;;;;:27::i;:::-;3100:247;;;3289:47;;-1:-1:-1;;;3289:47:136;;-1:-1:-1;;;;;3289:30:136;;;;;:47;;3320:5;;3327:4;;3333:2;;3289:47;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4558:103:2;4642:12;;4558:103;:::o;4900:109::-;4987:15;;4900:109;:::o;2861:327::-;2963:7;3040:8;3066:4;3088:7;3113:13;:11;:13::i;:::-;3152:4;3012:159;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3012:159:2;;;;;;;;;;;;;;;;;;;;;;;;2989:192;;;;;;2982:199;;2861:327;;;;;:::o;3954:335:78:-;4210:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4183:99;;;;;;3954:335::o;2725:404:46:-;2851:25;;:::i;:::-;2917:18;;;;;2907:29;;;;;;2976:19;;;;2966:30;;;;;;;;3010:21;;;3006:72;;;3054:13;3047:20;;;;;;3006:72;-1:-1:-1;;3094:28:46;;;;;;;;-1:-1:-1;3094:28:46;;;3116:5;;3094:28;3116:5;;;;;;;;;3094:28;;;;;;;;2725:404;-1:-1:-1;;;2725:404:46:o;1452:539:54:-;1551:14;1567;1597:10;1593:391;;;1635:15;;;;;:21;;:31;;1661:4;1635:25;:31::i;:::-;1623:43;;1692:90;1726:5;:15;;;:21;;;1749:5;:15;;;:21;;;1772:9;1692:33;:90::i;:::-;1680:102;;1593:391;;;1825:15;;;;:21;;;:31;;1851:4;1825:25;:31::i;:::-;1813:43;;1882:90;1916:5;:15;;;:21;;;1939:5;:15;;;:21;;;1962:9;1882:33;:90::i;:::-;1870:102;;1452:539;;;;;;:::o;2248:393:52:-;2371:24;;:::i;:::-;2407:14;2424:80;2458:13;2473:14;2489;2424:33;:80::i;:::-;2407:97;;2535:13;2522:9;:26;;2514:63;;;;;-1:-1:-1;;;2514:63:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2594:40:52;;;;;;;;;;;;-1:-1:-1;;2594:40:52;;;;;2248:393::o;1847:395::-;1971:24;;:::i;:::-;2007:15;2025:79;2059:14;2075:13;2090;2025:33;:79::i;:::-;2007:97;;2136:14;2122:10;:28;;2114:66;;;;;-1:-1:-1;;;2114:66:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;2197:38;;;;;;;;;;;;;;;;-1:-1:-1;2197:38:52;1847:395;-1:-1:-1;;;1847:395:52:o;13342:166:135:-;13423:13;;13469:32;13476:5;13483:17;:5;13492:7;13483:8;:17::i;:::-;13469:6;:32::i;:::-;13462:39;;;;13342:166;;;;;;:::o;8964:1002::-;9092:23;;9055:21;;-1:-1:-1;;;;;;9092:55:135;-1:-1:-1;;;9092:55:135;;:113;;-1:-1:-1;9151:23:135;;-1:-1:-1;;;;;;9151:54:135;-1:-1:-1;;;9151:54:135;9092:113;9088:813;;;9222:13;9237:12;9264;:17;;;9253:46;;;;;;;;;;;;:::i;:::-;9320:17;;:46;;-1:-1:-1;;;9320:46:135;;9221:78;;-1:-1:-1;9221:78:135;;-1:-1:-1;;;;;;9320:17:135;;:30;;:46;;9221:78;;;;9320:46;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;9320:46:135;;;;;;;;;;;;:::i;:::-;9313:53;;;;;;9088:813;9387:23;;-1:-1:-1;;;;;;9387:70:135;-1:-1:-1;;;9387:70:135;9383:518;;;9476:43;9534:12;:17;;;9523:73;;;;;;;;;;;;:::i;:::-;9617:14;;;;-1:-1:-1;9610:21:135;;-1:-1:-1;;9610:21:135;9383:518;9652:23;;-1:-1:-1;;;;;;9652:68:135;-1:-1:-1;;;9652:68:135;9648:253;;;9739:41;9795:12;:17;;;9784:71;;;;;;;;;;;;:::i;:::-;9876:14;;;;-1:-1:-1;9869:21:135;;-1:-1:-1;;9869:21:135;9648:253;-1:-1:-1;9910:27:135;8964:1002;;;:::o;3549:215:5:-;3607:7;3630:6;3626:20;;-1:-1:-1;3645:1:5;3638:8;;3626:20;3668:5;;;3672:1;3668;:5;:1;3691:5;;;;;:10;3683:56;;;;-1:-1:-1;;;3683:56:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4228:150;4286:7;4317:1;4313;:5;4305:44;;;;;-1:-1:-1;;;4305:44:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;4370:1;4366;:5;;;;;;;4228:150;-1:-1:-1;;;4228:150:5:o;521:354:53:-;665:21;702:52;723:9;734:11;747:6;702:20;:52::i;:::-;698:107;;;770:24;;;-1:-1:-1;;;770:24:53;;;;;;;;;;;;-1:-1:-1;;;770:24:53;;;;;;;;;;;;;;698:107;830:38;856:11;830:21;:9;844:6;830:13;:21::i;:38::-;814:54;521:354;-1:-1:-1;;;;521:354:53:o;13514:272:135:-;13575:13;13590:12;13626:3;13618:5;:11;13614:166;;;13656:14;:5;13666:3;13656:9;:14::i;:::-;13645:25;;13694:3;13684:13;;13614:166;;;-1:-1:-1;13739:1:135;;13514:272;-1:-1:-1;;13514:272:135:o;1142:1779:53:-;1281:12;1309:16;1305:73;;1341:26;;;-1:-1:-1;;;1341:26:53;;;;;;;;;;;;-1:-1:-1;;;1341:26:53;;;;;;;;;;;;;;1305:73;2188:11;;;:29;;-1:-1:-1;2203:14:53;;2188:29;2184:72;;;-1:-1:-1;2240:5:53;2233:12;;2184:72;2746:17;2829:11;2766:84;;;;;2806:9;2786:6;2766:84;2746:104;-1:-1:-1;2893:21:53;:9;2907:6;2893:13;:21::i;:::-;2870:19;:9;2884:4;2870:13;:19::i;:::-;:44;;;1142:1779;-1:-1:-1;;;;;1142:1779:53:o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::o;14:138:154:-;84:20;;113:33;84:20;113:33;:::i;157:677::-;;279:3;272:4;264:6;260:17;256:27;246:2;;301:5;294;287:20;246:2;334:6;328:13;360:4;384:63;399:47;443:2;399:47;:::i;:::-;384:63;:::i;:::-;481:15;;;512:12;;;;544:15;;;577:5;591:214;605:2;602:1;599:9;591:214;;;662:68;726:3;721:2;714:3;708:10;700:6;696:23;692:32;662:68;:::i;:::-;650:81;;751:12;;;;783;;;;623:1;616:9;591:214;;;-1:-1:-1;823:5:154;;236:598;-1:-1:-1;;;;;;;236:598:154:o;839:1306::-;;968:3;961:4;953:6;949:17;945:27;935:2;;990:5;983;976:20;935:2;1023:6;1017:13;1049:4;1073:63;1088:47;1132:2;1088:47;:::i;1073:63::-;1170:15;;;1201:12;;;;1233:15;;;1267:4;1302:11;;;1290:24;;1286:33;;1283:42;-1:-1:-1;1280:2:154;;;1342:5;1335;1328:20;1280:2;1368:5;1382:734;1396:2;1393:1;1390:9;1382:734;;;1463:2;1457:3;1452;1448:13;1444:22;1441:2;;;1483:5;1476;1469:20;1441:2;1524;1518:9;1570:2;1562:6;1558:15;1643:6;1631:10;1628:22;-1:-1:-1;;;;;1595:10:154;1592:34;1589:62;1586:2;;;1654:9;1586:2;1678:22;;1726:10;;1749:33;1726:10;1749:33;:::i;:::-;1795:21;;1850:12;;;1844:19;-1:-1:-1;;;;;1898:40:154;;1886:53;;1876:2;;1957:5;1950;1943:20;1876:2;1985:15;;;1978:32;2023:19;;2062:12;;;;2094;;;;1414:1;1407:9;1382:734;;;-1:-1:-1;2134:5:154;;925:1220;-1:-1:-1;;;;;;;;925:1220:154:o;2150:166::-;2228:13;;2277;;2270:21;2260:32;;2250:2;;2306:1;2303;2296:12;2321:136;2390:20;;2419:32;2390:20;2419:32;:::i;2462:485::-;;2559:3;2552:4;2544:6;2540:17;2536:27;2526:2;;2581:5;2574;2567:20;2526:2;2621:6;2608:20;2652:49;2667:33;2697:2;2667:33;:::i;2652:49::-;2726:2;2717:7;2710:19;2772:3;2765:4;2760:2;2752:6;2748:15;2744:26;2741:35;2738:2;;;2793:5;2786;2779:20;2738:2;2862;2855:4;2847:6;2843:17;2836:4;2827:7;2823:18;2810:55;2885:16;;;2903:4;2881:27;2874:42;;;;2889:7;2516:431;-1:-1:-1;;2516:431:154:o;2952:447::-;;3060:3;3053:4;3045:6;3041:17;3037:27;3027:2;;3082:5;3075;3068:20;3027:2;3115:6;3109:13;3146:49;3161:33;3191:2;3161:33;:::i;3146:49::-;3220:2;3211:7;3204:19;3266:3;3259:4;3254:2;3246:6;3242:15;3238:26;3235:35;3232:2;;;3287:5;3280;3273:20;3232:2;3304:64;3365:2;3358:4;3349:7;3345:18;3338:4;3330:6;3326:17;3304:64;:::i;3404:169::-;;3514:3;3505:6;3500:3;3496:16;3492:26;3489:2;;;3535:5;3528;3521:20;3489:2;-1:-1:-1;3561:6:154;3479:94;-1:-1:-1;3479:94:154:o;3578:1127::-;;3663:4;3704:2;3692:9;3687:3;3683:19;3679:28;3676:2;;;3724:5;3717;3710:20;3676:2;3761;3755:9;3803:2;3795:6;3791:15;-1:-1:-1;;;;;3893:6:154;3881:10;3878:22;3873:2;3861:10;3858:18;3855:46;3852:2;;;3904:9;3852:2;3935:10;3931:2;3924:22;3964:6;3955:15;;4006:9;3993:23;4039:2;4031:6;4028:14;4025:2;;;4055:1;4052;4045:12;4025:2;4078:22;;4116:12;;;4112:21;-1:-1:-1;4109:2:154;;;4146:1;4143;4136:12;4109:2;4191:3;4183:6;4179:16;4249:10;4235:12;4232:28;4227:2;4213:12;4210:20;4207:54;4204:2;;;4264:9;4204:2;4284:24;;;4332:16;;;4357:34;4332:16;4357:34;:::i;:::-;4400:27;;;4473:2;4465:11;;4452:25;;4489:16;;;4486:2;;;4518:1;4515;4508:12;4486:2;4555:42;4593:3;4582:8;4578:2;4574:17;4555:42;:::i;:::-;4550:2;4538:15;;4531:67;-1:-1:-1;;4607:26:154;;4694:2;4679:18;;;4666:32;4649:15;;4642:57;;;;3643:1062;;-1:-1:-1;;3643:1062:154:o;4710:869::-;;4825:4;4813:9;4808:3;4804:19;4800:30;4797:2;;;4847:5;4840;4833:20;4797:2;4884;4878:9;4926:4;4918:6;4914:17;-1:-1:-1;;;;;5018:6:154;5006:10;5003:22;4998:2;4986:10;4983:18;4980:46;4977:2;;;5029:9;4977:2;5060:10;5056:2;5049:22;5089:6;5080:15;;5124:9;5118:16;5104:30;;5157:2;5149:6;5146:14;5143:2;;;5173:1;5170;5163:12;5143:2;5201:79;5276:3;5267:6;5256:9;5252:22;5201:79;:::i;:::-;5193:6;5186:95;5327:2;5316:9;5312:18;5306:25;5290:41;;5356:2;5346:8;5343:16;5340:2;;;5372:1;5369;5362:12;5340:2;;5409:81;5486:3;5475:8;5464:9;5460:24;5409:81;:::i;:::-;5404:2;5396:6;5392:15;5385:106;;5524:48;5568:2;5557:9;5553:18;5524:48;:::i;:::-;5519:2;5511:6;5507:15;5500:73;;4787:792;;;;:::o;5584:1222::-;;5669:6;5712:2;5700:9;5695:3;5691:19;5687:28;5684:2;;;5732:5;5725;5718:20;5684:2;5758:18;5773:2;5758:18;:::i;:::-;5749:27;;;5799:31;5820:9;5799:31;:::i;:::-;5792:5;5785:46;5882:2;5871:9;5867:18;5854:32;-1:-1:-1;;;;;5946:2:154;5938:6;5935:14;5932:2;;;5962:1;5959;5952:12;5932:2;5998:55;6049:3;6040:6;6029:9;6025:22;5998:55;:::i;:::-;5993:2;5986:5;5982:14;5975:79;6086:40;6122:2;6111:9;6107:18;6086:40;:::i;:::-;6081:2;6074:5;6070:14;6063:64;6180:2;6169:9;6165:18;6152:32;6136:48;;6209:2;6199:8;6196:16;6193:2;;;6225:1;6222;6215:12;6193:2;6261:57;6314:3;6303:8;6292:9;6288:24;6261:57;:::i;:::-;6256:2;6249:5;6245:14;6238:81;6380:3;6369:9;6365:19;6352:33;6346:3;6339:5;6335:15;6328:58;6447:3;6436:9;6432:19;6419:33;6413:3;6406:5;6402:15;6395:58;6514:3;6503:9;6499:19;6486:33;6480:3;6473:5;6469:15;6462:58;6553:40;6588:3;6577:9;6573:19;6553:40;:::i;:::-;6547:3;6540:5;6536:15;6529:65;6613:3;6603:13;;6669:2;6658:9;6654:18;6641:32;6698:2;6688:8;6685:16;6682:2;;;6714:1;6711;6704:12;6682:2;6750:49;6795:3;6784:8;6773:9;6769:24;6750:49;:::i;:::-;6745:2;6738:5;6734:14;6727:73;;;;5649:1157;;;;:::o;6811:169::-;6880:20;;6940:14;6929:26;;6919:37;;6909:2;;6970:1;6967;6960:12;6985:259;;7097:2;7085:9;7076:7;7072:23;7068:32;7065:2;;;7118:6;7110;7103:22;7065:2;7162:9;7149:23;7181:33;7208:5;7181:33;:::i;7249:271::-;;7380:2;7368:9;7359:7;7355:23;7351:32;7348:2;;;7401:6;7393;7386:22;7348:2;7438:9;7432:16;7457:33;7484:5;7457:33;:::i;7525:1542::-;;;7704:2;7692:9;7683:7;7679:23;7675:32;7672:2;;;7725:6;7717;7710:22;7672:2;7762:9;7756:16;7781:33;7808:5;7781:33;:::i;:::-;7882:2;7867:18;;7861:25;7833:5;;-1:-1:-1;;;;;;7935:14:154;;;7932:2;;;7967:6;7959;7952:22;7932:2;7995:22;;;;8051:4;8033:16;;;8029:27;8026:2;;;8074:6;8066;8059:22;8026:2;8107:20;8122:4;8107:20;:::i;:::-;8158:2;8152:9;8143:7;8136:26;8201:2;8197;8193:11;8187:18;8230:2;8220:8;8217:16;8214:2;;;8251:6;8243;8236:22;8214:2;8294:57;8343:7;8332:8;8328:2;8324:17;8294:57;:::i;:::-;8289:2;8280:7;8276:16;8269:83;;8400:2;8396;8392:11;8386:18;8381:2;8372:7;8368:16;8361:44;8444:2;8440;8436:11;8430:18;8473:2;8463:8;8460:16;8457:2;;;8494:6;8486;8479:22;8457:2;8537:78;8607:7;8596:8;8592:2;8588:17;8537:78;:::i;:::-;8532:2;8523:7;8519:16;8512:104;;8655:3;8651:2;8647:12;8641:19;8685:2;8675:8;8672:16;8669:2;;;8706:6;8698;8691:22;8669:2;8750:78;8820:7;8809:8;8805:2;8801:17;8750:78;:::i;:::-;8744:3;8735:7;8731:17;8724:105;;8868:3;8864:2;8860:12;8854:19;8898:2;8888:8;8885:16;8882:2;;;8919:6;8911;8904:22;8882:2;8963:71;9026:7;9015:8;9011:2;9007:17;8963:71;:::i;:::-;8957:3;8948:7;8944:17;8937:98;;9054:7;9044:17;;;;;7662:1405;;;;;:::o;9072:1486::-;;;9250:2;9238:9;9229:7;9225:23;9221:32;9218:2;;;9271:6;9263;9256:22;9218:2;9308:9;9302:16;9327:33;9354:5;9327:33;:::i;:::-;9428:2;9413:18;;9407:25;9379:5;;-1:-1:-1;;;;;;9481:14:154;;;9478:2;;;9513:6;9505;9498:22;9478:2;9541:22;;;;9597:4;9579:16;;;9575:27;9572:2;;;9620:6;9612;9605:22;9572:2;9653:20;9668:4;9653:20;:::i;:::-;9704:2;9698:9;9689:7;9682:26;9747:2;9743;9739:11;9733:18;9776:2;9766:8;9763:16;9760:2;;;9797:6;9789;9782:22;9760:2;9840:57;9889:7;9878:8;9874:2;9870:17;9840:57;:::i;:::-;9835:2;9826:7;9822:16;9815:83;;9937:2;9933;9929:11;9923:18;9966:2;9956:8;9953:16;9950:2;;;9987:6;9979;9972:22;9950:2;10030:78;10100:7;10089:8;10085:2;10081:17;10030:78;:::i;:::-;10025:2;10016:7;10012:16;10005:104;;10148:2;10144;10140:11;10134:18;10177:2;10167:8;10164:16;10161:2;;;10198:6;10190;10183:22;10161:2;10241:78;10311:7;10300:8;10296:2;10292:17;10241:78;:::i;:::-;10236:2;10227:7;10223:16;10216:104;;10359:3;10355:2;10351:12;10345:19;10389:2;10379:8;10376:16;10373:2;;;10410:6;10402;10395:22;10373:2;10454:71;10517:7;10506:8;10502:2;10498:17;10454:71;:::i;:::-;10448:3;10439:7;10435:17;10428:98;;10545:7;10535:17;;;;;9208:1350;;;;;:::o;10563:332::-;;;10711:2;10699:9;10690:7;10686:23;10682:32;10679:2;;;10732:6;10724;10717:22;10679:2;10769:9;10763:16;10788:33;10815:5;10788:33;:::i;:::-;10885:2;10870:18;;;;10864:25;10840:5;;10864:25;;-1:-1:-1;;;10669:226:154:o;10900:785::-;;;;;;11107:3;11095:9;11086:7;11082:23;11078:33;11075:2;;;11129:6;11121;11114:22;11075:2;11173:9;11160:23;11192:33;11219:5;11192:33;:::i;:::-;11244:5;-1:-1:-1;11301:2:154;11286:18;;11273:32;11314:35;11273:32;11314:35;:::i;:::-;11368:7;-1:-1:-1;11422:2:154;11407:18;;11394:32;;-1:-1:-1;11478:2:154;11463:18;;11450:32;11491:35;11450:32;11491:35;:::i;:::-;11545:7;-1:-1:-1;11604:3:154;11589:19;;11576:33;11618:35;11576:33;11618:35;:::i;:::-;11672:7;11662:17;;;11065:620;;;;;;;;:::o;11690:792::-;;;;;;11877:3;11865:9;11856:7;11852:23;11848:33;11845:2;;;11899:6;11891;11884:22;11845:2;11943:9;11930:23;11962:33;11989:5;11962:33;:::i;:::-;12014:5;-1:-1:-1;12070:2:154;12055:18;;12042:32;-1:-1:-1;;;;;12086:30:154;;12083:2;;;12134:6;12126;12119:22;12083:2;12162:51;12205:7;12196:6;12185:9;12181:22;12162:51;:::i;:::-;12152:61;;;12260:2;12249:9;12245:18;12232:32;12222:42;;12311:2;12300:9;12296:18;12283:32;12273:42;;12367:3;12356:9;12352:19;12339:33;12416:4;12407:7;12403:18;12394:7;12391:31;12381:2;;12441:6;12433;12426:22;12487:407;;;;12631:2;12619:9;12610:7;12606:23;12602:32;12599:2;;;12652:6;12644;12637:22;12599:2;12696:9;12683:23;12715:33;12742:5;12715:33;:::i;:::-;12767:5;-1:-1:-1;12791:39:154;12826:2;12811:18;;12791:39;:::i;:::-;12781:49;;12849:39;12884:2;12873:9;12869:18;12849:39;:::i;:::-;12839:49;;12589:305;;;;;:::o;12899:417::-;;13070:2;13058:9;13049:7;13045:23;13041:32;13038:2;;;13091:6;13083;13076:22;13038:2;13129:9;13123:16;-1:-1:-1;;;;;13154:6:154;13151:30;13148:2;;;13199:6;13191;13184:22;13148:2;13227:83;13302:7;13293:6;13282:9;13278:22;13227:83;:::i;13321:214::-;;13441:2;13429:9;13420:7;13416:23;13412:32;13409:2;;;13462:6;13454;13447:22;13409:2;13490:39;13519:9;13490:39;:::i;13540:190::-;;13652:2;13640:9;13631:7;13627:23;13623:32;13620:2;;;13673:6;13665;13658:22;13620:2;-1:-1:-1;13701:23:154;;13610:120;-1:-1:-1;13610:120:154:o;13735:257::-;;13846:2;13834:9;13825:7;13821:23;13817:32;13814:2;;;13867:6;13859;13852:22;13814:2;13911:9;13898:23;13930:32;13956:5;13930:32;:::i;13997:400::-;;;14125:2;14113:9;14104:7;14100:23;14096:32;14093:2;;;14146:6;14138;14131:22;14093:2;14190:9;14177:23;14209:32;14235:5;14209:32;:::i;:::-;14260:5;-1:-1:-1;14317:2:154;14302:18;;14289:32;14330:35;14289:32;14330:35;:::i;:::-;14384:7;14374:17;;;14083:314;;;;;:::o;14693:383::-;;14834:2;14822:9;14813:7;14809:23;14805:32;14802:2;;;14855:6;14847;14840:22;14802:2;14900:9;14887:23;-1:-1:-1;;;;;14925:6:154;14922:30;14919:2;;;14970:6;14962;14955:22;14919:2;14998:72;15062:7;15053:6;15042:9;15038:22;14998:72;:::i;15081:922::-;;15232:2;15220:9;15211:7;15207:23;15203:32;15200:2;;;15253:6;15245;15238:22;15200:2;15291:9;15285:16;-1:-1:-1;;;;;15361:2:154;15353:6;15350:14;15347:2;;;15382:6;15374;15367:22;15347:2;15410:22;;;;15466:4;15448:16;;;15444:27;15441:2;;;15489:6;15481;15474:22;15441:2;15527:4;15521:11;15571:4;15563:6;15559:17;15626:6;15614:10;15611:22;15606:2;15594:10;15591:18;15588:46;15585:2;;;15637:9;15585:2;15664:4;15657:24;15703:9;;15721:32;15703:9;15721:32;:::i;:::-;15762:21;;15822:2;15814:11;;15808:18;15838:16;;;15835:2;;;15872:6;15864;15857:22;15835:2;15914:57;15963:7;15952:8;15948:2;15944:17;15914:57;:::i;:::-;15909:2;15897:15;;15890:82;-1:-1:-1;15901:6:154;15190:813;-1:-1:-1;;;;;15190:813:154:o;16008:1029::-;;16155:2;16143:9;16134:7;16130:23;16126:32;16123:2;;;16176:6;16168;16161:22;16123:2;16214:9;16208:16;-1:-1:-1;;;;;16284:2:154;16276:6;16273:14;16270:2;;;16305:6;16297;16290:22;16270:2;16333:22;;;;16389:4;16371:16;;;16367:27;16364:2;;;16412:6;16404;16397:22;16364:2;16450:4;16444:11;16494:4;16486:6;16482:17;16549:6;16537:10;16534:22;16529:2;16517:10;16514:18;16511:46;16508:2;;;16560:9;16508:2;16587:4;16580:24;16629:9;;16650:16;;;16647:2;;;16684:6;16676;16669:22;16647:2;16717:78;16787:7;16776:8;16772:2;16768:17;16717:78;:::i;:::-;16709:6;16702:94;;16835:2;16831;16827:11;16821:18;16864:2;16854:8;16851:16;16848:2;;;16885:6;16877;16870:22;16848:2;16927:78;16997:7;16986:8;16982:2;16978:17;16927:78;:::i;17042:381::-;;17189:2;17177:9;17168:7;17164:23;17160:32;17157:2;;;17210:6;17202;17195:22;17157:2;17248:9;17242:16;-1:-1:-1;;;;;17273:6:154;17270:30;17267:2;;;17318:6;17310;17303:22;17267:2;17346:71;17409:7;17400:6;17389:9;17385:22;17346:71;:::i;17814:364::-;;17949:2;17937:9;17928:7;17924:23;17920:32;17917:2;;;17970:6;17962;17955:22;17917:2;18015:9;18002:23;-1:-1:-1;;;;;18040:6:154;18037:30;18034:2;;;18085:6;18077;18070:22;18034:2;18113:59;18164:7;18155:6;18144:9;18140:22;18113:59;:::i;18183:1038::-;;;;;18410:3;18398:9;18389:7;18385:23;18381:33;18378:2;;;18432:6;18424;18417:22;18378:2;18477:9;18464:23;-1:-1:-1;;;;;18547:2:154;18539:6;18536:14;18533:2;;;18568:6;18560;18553:22;18533:2;18596:59;18647:7;18638:6;18627:9;18623:22;18596:59;:::i;:::-;18586:69;;18708:2;18697:9;18693:18;18680:32;18664:48;;18737:2;18727:8;18724:16;18721:2;;;18758:6;18750;18743:22;18721:2;18786:53;18831:7;18820:8;18809:9;18805:24;18786:53;:::i;:::-;18776:63;;18892:2;18881:9;18877:18;18864:32;18848:48;;18921:2;18911:8;18908:16;18905:2;;;18942:6;18934;18927:22;18905:2;18970:61;19023:7;19012:8;19001:9;18997:24;18970:61;:::i;:::-;18960:71;;19084:2;19073:9;19069:18;19056:32;19040:48;;19113:2;19103:8;19100:16;19097:2;;;19134:6;19126;19119:22;19097:2;;19162:53;19207:7;19196:8;19185:9;19181:24;19162:53;:::i;:::-;19152:63;;;18368:853;;;;;;;:::o;19613:196::-;;19724:2;19712:9;19703:7;19699:23;19695:32;19692:2;;;19745:6;19737;19730:22;19692:2;19773:30;19793:9;19773:30;:::i;19814:259::-;;19895:5;19889:12;19922:6;19917:3;19910:19;19938:63;19994:6;19987:4;19982:3;19978:14;19971:4;19964:5;19960:16;19938:63;:::i;:::-;20055:2;20034:15;-1:-1:-1;;20030:29:154;20021:39;;;;20062:4;20017:50;;19865:208;-1:-1:-1;;19865:208:154:o;20078:284::-;;20190:10;20185:3;20181:20;20173:5;20167:12;20163:39;20158:3;20151:52;20249:4;20242:5;20238:16;20232:23;20287:4;20280;20275:3;20271:14;20264:28;20308:48;20350:4;20345:3;20341:14;20327:12;20308:48;:::i;20367:203::-;-1:-1:-1;;;;;20531:32:154;;;;20513:51;;20501:2;20486:18;;20468:102::o;20575:304::-;-1:-1:-1;;;;;20805:15:154;;;20787:34;;20857:15;;20852:2;20837:18;;20830:43;20737:2;20722:18;;20704:175::o;20884:375::-;-1:-1:-1;;;;;21142:15:154;;;21124:34;;21194:15;;;;21189:2;21174:18;;21167:43;21241:2;21226:18;;21219:34;;;;21074:2;21059:18;;21041:218::o;21264:630::-;-1:-1:-1;;;;;21615:15:154;;;21597:34;;21667:15;;;;21662:2;21647:18;;21640:43;21714:2;21699:18;;21692:34;21757:2;21742:18;;21735:34;;;;21577:3;21800;21785:19;;21778:32;;;21264:630;21826:19;;;21819:33;21884:3;21869:19;;21549:345::o;21899:274::-;-1:-1:-1;;;;;22091:32:154;;;;22073:51;;22155:2;22140:18;;22133:34;22061:2;22046:18;;22028:145::o;22178:392::-;-1:-1:-1;;;;;22394:32:154;;;;22376:51;;22446:14;22496:15;;;22491:2;22476:18;;22469:43;22548:15;22543:2;22528:18;;22521:43;22364:2;22349:18;;22331:239::o;22575:177::-;22721:25;;;22709:2;22694:18;;22676:76::o;22757:391::-;22988:25;;;23044:2;23029:18;;23022:34;;;;23087:2;23072:18;;23065:34;23130:2;23115:18;;23108:34;22975:3;22960:19;;22942:206::o;23153:219::-;;23300:2;23289:9;23282:21;23320:46;23362:2;23351:9;23347:18;23339:6;23320:46;:::i;23377:739::-;-1:-1:-1;;;;;23784:15:154;;;23766:34;;23836:15;;;23831:2;23816:18;;23809:43;23888:15;;;;23883:2;23868:18;;23861:43;23935:2;23920:18;;23913:34;;;;23978:3;23963:19;;23956:35;;;;24028:3;23746;24007:19;;24000:32;;;23377:739;24048:19;;;24041:33;24106:3;24091:19;;23718:398::o;24121:482::-;-1:-1:-1;;;;;24434:15:154;;;24416:34;;24486:15;;;24481:2;24466:18;;24459:43;24538:15;;24533:2;24518:18;;24511:43;24585:2;24570:18;;24563:34;;;;24365:3;24350:19;;24332:271::o;25331:347::-;25533:2;25515:21;;;25572:2;25552:18;;;25545:30;25611:25;25606:2;25591:18;;25584:53;25669:2;25654:18;;25505:173::o;25683:353::-;25885:2;25867:21;;;25924:2;25904:18;;;25897:30;25963:31;25958:2;25943:18;;25936:59;26027:2;26012:18;;25857:179::o;26041:344::-;26243:2;26225:21;;;26282:2;26262:18;;;26255:30;-1:-1:-1;;;26316:2:154;26301:18;;26294:50;26376:2;26361:18;;26215:170::o;26390:400::-;26592:2;26574:21;;;26631:2;26611:18;;;26604:30;26670:34;26665:2;26650:18;;26643:62;-1:-1:-1;;;26736:2:154;26721:18;;26714:34;26780:3;26765:19;;26564:226::o;26795:400::-;26997:2;26979:21;;;27036:2;27016:18;;;27009:30;27075:34;27070:2;27055:18;;27048:62;-1:-1:-1;;;27141:2:154;27126:18;;27119:34;27185:3;27170:19;;26969:226::o;27200:342::-;27402:2;27384:21;;;27441:2;27421:18;;;27414:30;-1:-1:-1;;;27475:2:154;27460:18;;27453:48;27533:2;27518:18;;27374:168::o;27547:339::-;27749:2;27731:21;;;27788:2;27768:18;;;27761:30;-1:-1:-1;;;27822:2:154;27807:18;;27800:45;27877:2;27862:18;;27721:165::o;27891:345::-;28093:2;28075:21;;;28132:2;28112:18;;;28105:30;-1:-1:-1;;;28166:2:154;28151:18;;28144:51;28227:2;28212:18;;28065:171::o;28241:345::-;28443:2;28425:21;;;28482:2;28462:18;;;28455:30;-1:-1:-1;;;28516:2:154;28501:18;;28494:51;28577:2;28562:18;;28415:171::o;28591:347::-;28793:2;28775:21;;;28832:2;28812:18;;;28805:30;28871:25;28866:2;28851:18;;28844:53;28929:2;28914:18;;28765:173::o;28943:354::-;29145:2;29127:21;;;29184:2;29164:18;;;29157:30;29223:32;29218:2;29203:18;;29196:60;29288:2;29273:18;;29117:180::o;29302:342::-;29504:2;29486:21;;;29543:2;29523:18;;;29516:30;-1:-1:-1;;;29577:2:154;29562:18;;29555:48;29635:2;29620:18;;29476:168::o;29649:399::-;29851:2;29833:21;;;29890:2;29870:18;;;29863:30;29929:34;29924:2;29909:18;;29902:62;-1:-1:-1;;;29995:2:154;29980:18;;29973:33;30038:3;30023:19;;29823:225::o;30053:338::-;30255:2;30237:21;;;30294:2;30274:18;;;30267:30;-1:-1:-1;;;30328:2:154;30313:18;;30306:44;30382:2;30367:18;;30227:164::o;30396:335::-;30598:2;30580:21;;;30637:2;30617:18;;;30610:30;-1:-1:-1;;;30671:2:154;30656:18;;30649:41;30722:2;30707:18;;30570:161::o;30736:481::-;;31005:2;30994:9;30987:21;31031:58;31085:2;31074:9;31070:18;31062:6;31031:58;:::i;:::-;31137:9;31129:6;31125:22;31120:2;31109:9;31105:18;31098:50;31165:46;31204:6;31196;31165:46;:::i;31222:644::-;;31455:2;31444:9;31437:21;31493:6;31487:13;31536:4;31531:2;31520:9;31516:18;31509:32;31564:65;31624:3;31613:9;31609:19;31595:12;31564:65;:::i;:::-;31684:4;31672:17;;;31666:24;31660:3;31645:19;;31638:53;-1:-1:-1;;;;;31790:15:154;;;31768:20;;;31761:45;;;;-1:-1:-1;;31844:15:154;;31837:4;31822:20;;;31815:45;31550:79;31427:439::o;32053:297::-;32235:14;32276:15;;;32258:34;;32328:15;;32323:2;32308:18;;32301:43;32213:2;32198:18;;32180:170::o;32355:533::-;;;32498:11;32485:25;32592:2;32588:7;32577:8;32561:14;32557:29;32553:43;32533:18;32529:68;32519:2;;32614:4;32608;32601:18;32519:2;32644:33;;32696:20;;;-1:-1:-1;;;;;;32728:30:154;;32725:2;;;32774:4;32768;32761:18;32725:2;32810:4;32798:17;;-1:-1:-1;32841:14:154;32837:27;;;32827:38;;32824:2;;;32878:1;32875;32868:12;32893:242;32963:2;32957:9;32993:17;;;-1:-1:-1;;;;;33025:34:154;;33061:22;;;33022:62;33019:2;;;33087:9;33019:2;33114;33107:22;32937:198;;-1:-1:-1;32937:198:154:o;33140:181::-;;-1:-1:-1;;;;;33229:6:154;33226:30;33223:2;;;33259:9;33223:2;-1:-1:-1;33310:4:154;33291:17;;;33287:28;;33213:108::o;33326:181::-;;-1:-1:-1;;;;;33401:6:154;33398:30;33395:2;;;33431:9;33395:2;-1:-1:-1;33490:2:154;33467:17;-1:-1:-1;;33463:31:154;33496:4;33459:42;;33385:122::o;33512:258::-;33584:1;33594:113;33608:6;33605:1;33602:13;33594:113;;;33684:11;;;33678:18;33665:11;;;33658:39;33630:2;33623:10;33594:113;;;33725:6;33722:1;33719:13;33716:2;;;-1:-1:-1;;33760:1:154;33742:16;;33735:27;33565:205::o;33775:133::-;-1:-1:-1;;;;;33852:31:154;;33842:42;;33832:2;;33898:1;33895;33888:12;33913:133;-1:-1:-1;;;;;;33989:32:154;;33979:43;;33969:2;;34036:1;34033;34026:12"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "4680800",
            "executionCost": "5489",
            "totalCost": "4686289"
          },
          "external": {
            "__ExchangeV2_init(address,address,uint256,address,address)": "infinite",
            "cancel((address,((bytes4,bytes),uint256),address,((bytes4,bytes),uint256),uint256,uint256,uint256,bytes4,bytes))": "infinite",
            "directAcceptBid((address,uint256,bytes4,bytes,uint256,address,uint256,uint256,uint256,bytes4,bytes,bytes,uint256,uint256,bytes))": "infinite",
            "directPurchase((address,uint256,bytes4,bytes,uint256,address,uint256,uint256,uint256,bytes4,bytes,bytes,uint256,uint256,bytes))": "infinite",
            "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)": "infinite",
            "fills(bytes32)": "1261",
            "getNonce(address)": "1380",
            "matchOrders((address,((bytes4,bytes),uint256),address,((bytes4,bytes),uint256),uint256,uint256,uint256,bytes4,bytes),bytes,(address,((bytes4,bytes),uint256),address,((bytes4,bytes),uint256),uint256,uint256,uint256,bytes4,bytes),bytes)": "infinite",
            "owner()": "1094",
            "protocolFee()": "1221",
            "renounceOwnership()": "infinite",
            "royaltiesRegistry()": "1159",
            "setAllProtocolFeeData(address,uint48,uint48)": "infinite",
            "setAssetMatcher(bytes4,address)": "infinite",
            "setPrtocolFeeBuyerAmount(uint48)": "infinite",
            "setPrtocolFeeReceiver(address)": "infinite",
            "setPrtocolFeeSellerAmount(uint48)": "infinite",
            "setRoyaltiesRegistry(address)": "infinite",
            "setTransferProxy(bytes4,address)": "infinite",
            "transferOwnership(address)": "infinite"
          },
          "internal": {
            "_msgSender()": "infinite"
          }
        },
        "methodIdentifiers": {
          "__ExchangeV2_init(address,address,uint256,address,address)": "1372a625",
          "cancel((address,((bytes4,bytes),uint256),address,((bytes4,bytes),uint256),uint256,uint256,uint256,bytes4,bytes))": "e2864fe3",
          "directAcceptBid((address,uint256,bytes4,bytes,uint256,address,uint256,uint256,uint256,bytes4,bytes,bytes,uint256,uint256,bytes))": "67d49a3b",
          "directPurchase((address,uint256,bytes4,bytes,uint256,address,uint256,uint256,uint256,bytes4,bytes,bytes,uint256,uint256,bytes))": "0d5f7d35",
          "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)": "0c53c51c",
          "fills(bytes32)": "20158c44",
          "getNonce(address)": "2d0335ab",
          "matchOrders((address,((bytes4,bytes),uint256),address,((bytes4,bytes),uint256),uint256,uint256,uint256,bytes4,bytes),bytes,(address,((bytes4,bytes),uint256),address,((bytes4,bytes),uint256),uint256,uint256,uint256,bytes4,bytes),bytes)": "e99a3f80",
          "owner()": "8da5cb5b",
          "protocolFee()": "b0e21e8a",
          "renounceOwnership()": "715018a6",
          "royaltiesRegistry()": "6d8f0694",
          "setAllProtocolFeeData(address,uint48,uint48)": "b74c8e9a",
          "setAssetMatcher(bytes4,address)": "b39deb46",
          "setPrtocolFeeBuyerAmount(uint48)": "d6ca6ab7",
          "setPrtocolFeeReceiver(address)": "bc158c2d",
          "setPrtocolFeeSellerAmount(uint48)": "eae3ad6f",
          "setRoyaltiesRegistry(address)": "3be89922",
          "setTransferProxy(bytes4,address)": "30c642f1",
          "transferOwnership(address)": "f2fde38b"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"BuyerFeeAmountChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"FeeReceiverChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"leftHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"rightHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLeftFill\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRightFill\",\"type\":\"uint256\"}],\"name\":\"Match\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"assetType\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"matcher\",\"type\":\"address\"}],\"name\":\"MatcherChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"relayerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"}],\"name\":\"MetaTransactionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"assetType\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"name\":\"ProxyChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"SellerFeeAmountChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_transferProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_erc20TransferProxy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newProtocolFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newDefaultFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"contract IRoyaltiesProvider\",\"name\":\"newRoyaltiesProvider\",\"type\":\"address\"}],\"name\":\"__ExchangeV2_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"assetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"makeAsset\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"assetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"takeAsset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"bytes4\",\"name\":\"dataType\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibOrder.Order\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"bidMaker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bidNftAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes4\",\"name\":\"nftAssetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"nftData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"bidPaymentAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bidSalt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidEnd\",\"type\":\"uint256\"},{\"internalType\":\"bytes4\",\"name\":\"bidDataType\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"bidData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"bidSignature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"sellOrderPaymentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellOrderNftAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sellOrderData\",\"type\":\"bytes\"}],\"internalType\":\"struct LibDirectTransfer.AcceptBid\",\"name\":\"direct\",\"type\":\"tuple\"}],\"name\":\"directAcceptBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sellOrderMaker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellOrderNftAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes4\",\"name\":\"nftAssetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"nftData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"sellOrderPaymentAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellOrderSalt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellOrderStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellOrderEnd\",\"type\":\"uint256\"},{\"internalType\":\"bytes4\",\"name\":\"sellOrderDataType\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"sellOrderData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sellOrderSignature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"buyOrderPaymentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyOrderNftAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"buyOrderData\",\"type\":\"bytes\"}],\"internalType\":\"struct LibDirectTransfer.Purchase\",\"name\":\"direct\",\"type\":\"tuple\"}],\"name\":\"directPurchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"}],\"name\":\"executeMetaTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"fills\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"assetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"makeAsset\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"assetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"takeAsset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"bytes4\",\"name\":\"dataType\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibOrder.Order\",\"name\":\"orderLeft\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signatureLeft\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"assetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"makeAsset\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"assetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"takeAsset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"bytes4\",\"name\":\"dataType\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibOrder.Order\",\"name\":\"orderRight\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signatureRight\",\"type\":\"bytes\"}],\"name\":\"matchOrders\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"buyerAmount\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"sellerAmount\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltiesRegistry\",\"outputs\":[{\"internalType\":\"contract IRoyaltiesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"_buyerAmount\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"_sellerAmount\",\"type\":\"uint48\"}],\"name\":\"setAllProtocolFeeData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"assetType\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"matcher\",\"type\":\"address\"}],\"name\":\"setAssetMatcher\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"_buyerAmount\",\"type\":\"uint48\"}],\"name\":\"setPrtocolFeeBuyerAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"setPrtocolFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"_sellerAmount\",\"type\":\"uint48\"}],\"name\":\"setPrtocolFeeSellerAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRoyaltiesProvider\",\"name\":\"newRoyaltiesRegistry\",\"type\":\"address\"}],\"name\":\"setRoyaltiesRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"assetType\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"name\":\"setTransferProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"directAcceptBid((address,uint256,bytes4,bytes,uint256,address,uint256,uint256,uint256,bytes4,bytes,bytes,uint256,uint256,bytes))\":{\"details\":\"function, generate sellOrder and buyOrder from parameters and call validateAndMatch() for accept bid transaction\",\"params\":{\"direct\":\"struct with parameters for accept bid operation\"}},\"directPurchase((address,uint256,bytes4,bytes,uint256,address,uint256,uint256,uint256,bytes4,bytes,bytes,uint256,uint256,bytes))\":{\"details\":\"function, generate sellOrder and buyOrder from parameters and call validateAndMatch() for purchase transaction\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@rarible/exchange-v2/contracts/ExchangeMetaV2.sol\":\"ExchangeMetaV2\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb419e68addcb82ecda3ad3974b0d2db76435ce9b08435a04d5b119a0c5d45ea5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal initializer {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal initializer {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(bytes32 typeHash, bytes32 name, bytes32 version) private view returns (bytes32) {\\n        return keccak256(\\n            abi.encode(\\n                typeHash,\\n                name,\\n                version,\\n                _getChainId(),\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", _domainSeparatorV4(), structHash));\\n    }\\n\\n    function _getChainId() private view returns (uint256 chainId) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            chainId := chainid()\\n        }\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6cd0bc8c149150614ca3d4a3d3d21f844a0ab3032625f34fcfcf1c2c8b351638\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4784c3f8a520a739dd25d76f514833a653990902d0e21601aed45bda44c87524\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x0dd1e9b19801e3e7d900fbf4182d81e1afd23ad7be39504e33df6bbcba91d724\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xcbc02d192c55298cf65e5695375c839eac979a597a0fbdc1635195c4d28ca5ac\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa1931c47a617014f858580db625aa0dcf343796f39acd4b5b51effc092a1f0a9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x3dab19bb4a63bcbda1ee153ca291694f92f9009fad28626126b15a8503b0e5ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@rarible/exchange-interfaces/contracts/IAssetMatcher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@rarible/lib-asset/contracts/LibAsset.sol\\\";\\n\\ninterface IAssetMatcher {\\n    function matchAssets(\\n        LibAsset.AssetType memory leftAssetType,\\n        LibAsset.AssetType memory rightAssetType\\n    ) external view returns (LibAsset.AssetType memory);\\n}\\n\",\"keccak256\":\"0x6c4459012ce46db960cfdcc5067c49392aa650e6d78e0702acc7ad9173b061b0\",\"license\":\"MIT\"},\"@rarible/exchange-interfaces/contracts/IERC20TransferProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.9 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IERC20TransferProxy {\\n    function erc20safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) external;\\n}\\n\",\"keccak256\":\"0x5cc1d6300618f13724624bbdd1b4447d1f149dc7cc3b75497e03110f798d9547\",\"license\":\"MIT\"},\"@rarible/exchange-interfaces/contracts/INftTransferProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.9 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\n\\ninterface INftTransferProxy {\\n    function erc721safeTransferFrom(IERC721Upgradeable token, address from, address to, uint256 tokenId) external;\\n\\n    function erc1155safeTransferFrom(IERC1155Upgradeable token, address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x43093ee21a43fb70eb06b5e886ea48308fa689765e370297de52d71d4f7ab5cf\",\"license\":\"MIT\"},\"@rarible/exchange-interfaces/contracts/IRoyaltiesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@rarible/lib-part/contracts/LibPart.sol\\\";\\n\\ninterface IRoyaltiesProvider {\\n    function getRoyalties(address token, uint tokenId) external returns (LibPart.Part[] memory);\\n}\\n\",\"keccak256\":\"0xf947c1e5ab670f631a6b2db55672829766ad410cf4730981202866e8c1a226ac\",\"license\":\"MIT\"},\"@rarible/exchange-interfaces/contracts/ITransferProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.9 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@rarible/lib-asset/contracts/LibAsset.sol\\\";\\n\\ninterface ITransferProxy {\\n    function transfer(LibAsset.Asset calldata asset, address from, address to) external;\\n}\\n\",\"keccak256\":\"0xd9400959d0a108534601673e480a55c4e760e03211594e8123d9c19e5d3890ac\",\"license\":\"MIT\"},\"@rarible/exchange-v2/contracts/AssetMatcher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@rarible/exchange-interfaces/contracts/IAssetMatcher.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nabstract contract AssetMatcher is Initializable, OwnableUpgradeable {\\n\\n    bytes constant EMPTY = \\\"\\\";\\n    mapping(bytes4 => address) internal matchers;\\n\\n    event MatcherChange(bytes4 indexed assetType, address matcher);\\n\\n    function setAssetMatcher(bytes4 assetType, address matcher) external onlyOwner {\\n        matchers[assetType] = matcher;\\n        emit MatcherChange(assetType, matcher);\\n    }\\n\\n    function matchAssets(LibAsset.AssetType memory leftAssetType, LibAsset.AssetType memory rightAssetType) internal view returns (LibAsset.AssetType memory) {\\n        LibAsset.AssetType memory result = matchAssetOneSide(leftAssetType, rightAssetType);\\n        if (result.assetClass == 0) {\\n            return matchAssetOneSide(rightAssetType, leftAssetType);\\n        } else {\\n            return result;\\n        }\\n    }\\n\\n    function matchAssetOneSide(LibAsset.AssetType memory leftAssetType, LibAsset.AssetType memory rightAssetType) private view returns (LibAsset.AssetType memory) {\\n        bytes4 classLeft = leftAssetType.assetClass;\\n        bytes4 classRight = rightAssetType.assetClass;\\n        if (classLeft == LibAsset.ETH_ASSET_CLASS) {\\n            if (classRight == LibAsset.ETH_ASSET_CLASS) {\\n                return leftAssetType;\\n            }\\n            return LibAsset.AssetType(0, EMPTY);\\n        }\\n        if (classLeft == LibAsset.ERC20_ASSET_CLASS) {\\n            if (classRight == LibAsset.ERC20_ASSET_CLASS) {\\n                return simpleMatch(leftAssetType, rightAssetType);\\n            }\\n            return LibAsset.AssetType(0, EMPTY);\\n        }\\n        if (classLeft == LibAsset.ERC721_ASSET_CLASS) {\\n            if (classRight == LibAsset.ERC721_ASSET_CLASS) {\\n                return simpleMatch(leftAssetType, rightAssetType);\\n            }\\n            return LibAsset.AssetType(0, EMPTY);\\n        }\\n        if (classLeft == LibAsset.ERC1155_ASSET_CLASS) {\\n            if (classRight == LibAsset.ERC1155_ASSET_CLASS) {\\n                return simpleMatch(leftAssetType, rightAssetType);\\n            }\\n            return LibAsset.AssetType(0, EMPTY);\\n        }\\n        address matcher = matchers[classLeft];\\n        if (matcher != address(0)) {\\n            return IAssetMatcher(matcher).matchAssets(leftAssetType, rightAssetType);\\n        }\\n        if (classLeft == classRight) {\\n            return simpleMatch(leftAssetType, rightAssetType);\\n        }\\n        revert(\\\"not found IAssetMatcher\\\");\\n    }\\n\\n    function simpleMatch(LibAsset.AssetType memory leftAssetType, LibAsset.AssetType memory rightAssetType) private pure returns (LibAsset.AssetType memory) {\\n        bytes32 leftHash = keccak256(leftAssetType.data);\\n        bytes32 rightHash = keccak256(rightAssetType.data);\\n        if (leftHash == rightHash) {\\n            return leftAssetType;\\n        }\\n        return LibAsset.AssetType(0, EMPTY);\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x3a89b0a6ff66280e8e48f9f2c862d5c0e8ab23ee306ae5b204cd588931661a93\",\"license\":\"MIT\"},\"@rarible/exchange-v2/contracts/ExchangeMetaV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./ExchangeV2Core.sol\\\";\\nimport \\\"@rarible/meta-tx/contracts/EIP712MetaTransaction.sol\\\";\\nimport \\\"@rarible/transfer-manager/contracts/RaribleTransferManager.sol\\\";\\n\\ncontract ExchangeMetaV2 is ExchangeV2Core, RaribleTransferManager, EIP712MetaTransaction {\\n    function __ExchangeV2_init(\\n        address _transferProxy,\\n        address _erc20TransferProxy,\\n        uint newProtocolFee,\\n        address newDefaultFeeReceiver,\\n        IRoyaltiesProvider newRoyaltiesProvider\\n    ) external initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n        __OrderValidator_init_unchained();\\n        __MetaTransaction_init_unchained(\\\"ExchangeMetaV2\\\", \\\"1\\\");\\n        __TransferExecutor_init_unchained(_transferProxy, _erc20TransferProxy);\\n        __RaribleTransferManager_init_unchained(newProtocolFee, newDefaultFeeReceiver, newRoyaltiesProvider);\\n    }\\n\\n    function _msgSender() internal view virtual override(ContextUpgradeable, EIP712MetaTransaction) returns (address payable) {\\n        return super._msgSender();\\n    }\\n\\n}\\n\",\"keccak256\":\"0xb39016abefc3e1794ff3db48e349fe36bf32eaf04f9d9b6be506ca19af312a20\",\"license\":\"MIT\"},\"@rarible/exchange-v2/contracts/ExchangeV2Core.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./libraries/LibFill.sol\\\";\\nimport \\\"./libraries/LibOrderData.sol\\\";\\nimport \\\"./libraries/LibDirectTransfer.sol\\\";\\nimport \\\"./OrderValidator.sol\\\";\\nimport \\\"./AssetMatcher.sol\\\";\\n\\nimport \\\"@rarible/transfer-manager/contracts/TransferExecutor.sol\\\";\\nimport \\\"@rarible/transfer-manager/contracts/interfaces/ITransferManager.sol\\\";\\nimport \\\"@rarible/transfer-manager/contracts/lib/LibDeal.sol\\\";\\n\\nabstract contract ExchangeV2Core is Initializable, OwnableUpgradeable, AssetMatcher, TransferExecutor, OrderValidator, ITransferManager {\\n    using SafeMathUpgradeable for uint;\\n    using LibTransfer for address;\\n\\n    uint256 private constant UINT256_MAX = type(uint256).max;\\n\\n    //state of the orders\\n    mapping(bytes32 => uint) public fills;\\n\\n    //events\\n    event Cancel(bytes32 hash);\\n    event Match(bytes32 leftHash, bytes32 rightHash, uint newLeftFill, uint newRightFill);\\n\\n    function cancel(LibOrder.Order memory order) external {\\n        require(_msgSender() == order.maker, \\\"not a maker\\\");\\n        require(order.salt != 0, \\\"0 salt can't be used\\\");\\n        bytes32 orderKeyHash = LibOrder.hashKey(order);\\n        fills[orderKeyHash] = UINT256_MAX;\\n        emit Cancel(orderKeyHash);\\n    }\\n\\n    /**\\n     * @dev function, generate sellOrder and buyOrder from parameters and call validateAndMatch() for purchase transaction\\n \\n    */\\n\\n    function directPurchase(\\n        LibDirectTransfer.Purchase calldata direct\\n    ) external payable{\\n        LibAsset.AssetType memory paymentAssetType = getPaymentAssetType(direct.paymentToken);\\n                \\n        LibOrder.Order memory sellOrder = LibOrder.Order(\\n            direct.sellOrderMaker,\\n            LibAsset.Asset(\\n                LibAsset.AssetType(\\n                    direct.nftAssetClass,\\n                    direct.nftData\\n                ),\\n                direct.sellOrderNftAmount\\n            ),\\n            address(0),\\n            LibAsset.Asset(\\n                paymentAssetType,\\n                direct.sellOrderPaymentAmount\\n            ),\\n            direct.sellOrderSalt,\\n            direct.sellOrderStart,\\n            direct.sellOrderEnd,\\n            direct.sellOrderDataType,\\n            direct.sellOrderData\\n        );\\n\\n        LibOrder.Order memory buyOrder = LibOrder.Order(\\n            address(0),\\n            LibAsset.Asset(\\n                paymentAssetType,\\n                direct.buyOrderPaymentAmount\\n            ),\\n            address(0),\\n            LibAsset.Asset(\\n                LibAsset.AssetType(\\n                    direct.nftAssetClass,\\n                    direct.nftData\\n                ),\\n                direct.buyOrderNftAmount\\n            ),\\n            0,\\n            0,\\n            0,\\n            direct.sellOrderDataType,\\n            direct.buyOrderData\\n        );\\n\\n        validateFull(sellOrder, direct.sellOrderSignature);\\n\\n        matchAndTransfer(sellOrder, buyOrder);\\n    }\\n\\n    /**\\n     * @dev function, generate sellOrder and buyOrder from parameters and call validateAndMatch() for accept bid transaction\\n     * @param direct struct with parameters for accept bid operation\\n     */\\n    function directAcceptBid(\\n        LibDirectTransfer.AcceptBid calldata direct\\n    ) external payable {\\n        LibAsset.AssetType memory paymentAssetType = getPaymentAssetType(direct.paymentToken);\\n\\n        LibOrder.Order memory buyOrder = LibOrder.Order(\\n            direct.bidMaker,\\n            LibAsset.Asset(\\n                paymentAssetType,\\n                direct.bidPaymentAmount\\n            ),\\n            address(0),\\n            LibAsset.Asset(\\n                LibAsset.AssetType(\\n                    direct.nftAssetClass,\\n                    direct.nftData\\n                ),\\n                direct.bidNftAmount\\n            ),\\n            direct.bidSalt,\\n            direct.bidStart,\\n            direct.bidEnd,\\n            direct.bidDataType,\\n            direct.bidData\\n        );\\n\\n        LibOrder.Order memory sellOrder = LibOrder.Order(\\n            address(0),\\n            LibAsset.Asset(\\n                LibAsset.AssetType(\\n                    direct.nftAssetClass,\\n                    direct.nftData\\n                ),\\n                direct.sellOrderNftAmount\\n            ),\\n            address(0),\\n            LibAsset.Asset(\\n                paymentAssetType,\\n                direct.sellOrderPaymentAmount\\n            ),\\n            0,\\n            0,\\n            0,\\n            direct.bidDataType,\\n            direct.sellOrderData\\n        );\\n\\n        validateFull(buyOrder, direct.bidSignature);\\n\\n        matchAndTransfer(sellOrder, buyOrder);\\n    }\\n\\n    function matchOrders(\\n        LibOrder.Order memory orderLeft,\\n        bytes memory signatureLeft,\\n        LibOrder.Order memory orderRight,\\n        bytes memory signatureRight\\n    ) external payable {\\n        validateOrders(orderLeft, signatureLeft, orderRight, signatureRight);\\n        matchAndTransfer(orderLeft, orderRight);\\n    }\\n\\n    /**\\n      * @dev function, validate orders\\n      * @param orderLeft left order\\n      * @param signatureLeft order left signature\\n      * @param orderRight right order\\n      * @param signatureRight order right signature\\n      */\\n    function validateOrders(LibOrder.Order memory orderLeft, bytes memory signatureLeft, LibOrder.Order memory orderRight, bytes memory signatureRight) internal view {\\n        validateFull(orderLeft, signatureLeft);\\n        validateFull(orderRight, signatureRight);\\n        if (orderLeft.taker != address(0)) {\\n            if (orderRight.maker != address(0))\\n                require(orderRight.maker == orderLeft.taker, \\\"leftOrder.taker verification failed\\\");\\n        }\\n        if (orderRight.taker != address(0)) {\\n            if (orderLeft.maker != address(0))\\n                require(orderRight.taker == orderLeft.maker, \\\"rightOrder.taker verification failed\\\");\\n        }\\n    }\\n\\n    /**\\n        @notice matches valid orders and transfers their assets\\n        @param orderLeft the left order of the match\\n        @param orderRight the right order of the match\\n    */\\n    function matchAndTransfer(LibOrder.Order memory orderLeft, LibOrder.Order memory orderRight) internal {\\n        (LibAsset.AssetType memory makeMatch, LibAsset.AssetType memory takeMatch) = matchAssets(orderLeft, orderRight);\\n\\n        (LibOrderData.GenericOrderData memory leftOrderData, LibOrderData.GenericOrderData memory rightOrderData, LibFill.FillResult memory newFill) =\\n            parseOrdersSetFillEmitMatch(orderLeft, orderRight);\\n\\n        (uint totalMakeValue, uint totalTakeValue) = doTransfers(\\n            LibDeal.DealSide({\\n                asset: LibAsset.Asset({\\n                    assetType: makeMatch,\\n                    value: newFill.leftValue\\n                }),\\n                payouts: leftOrderData.payouts,\\n                originFees: leftOrderData.originFees,\\n                proxy: proxies[makeMatch.assetClass],\\n                from: orderLeft.maker,\\n                protocolFeeEnabled: leftOrderData.protocolFeeEnabled\\n            }), \\n            LibDeal.DealSide({\\n                asset: LibAsset.Asset( \\n                    takeMatch,\\n                    newFill.rightValue\\n                ),\\n                payouts: rightOrderData.payouts,\\n                originFees: rightOrderData.originFees,\\n                proxy: proxies[takeMatch.assetClass],\\n                from: orderRight.maker,\\n                protocolFeeEnabled: rightOrderData.protocolFeeEnabled\\n            }),\\n            LibFeeSide.getFeeSide(makeMatch.assetClass, takeMatch.assetClass)\\n        );\\n        if (makeMatch.assetClass == LibAsset.ETH_ASSET_CLASS) {\\n            require(takeMatch.assetClass != LibAsset.ETH_ASSET_CLASS);\\n            require(msg.value >= totalMakeValue, \\\"not enough eth\\\");\\n            if (msg.value > totalMakeValue) {\\n                address(msg.sender).transferEth(msg.value.sub(totalMakeValue));\\n            }\\n        } else if (takeMatch.assetClass == LibAsset.ETH_ASSET_CLASS) {\\n            require(msg.value >= totalTakeValue, \\\"not enough eth\\\");\\n            if (msg.value > totalTakeValue) {\\n                address(msg.sender).transferEth(msg.value.sub(totalTakeValue));\\n            }\\n        }\\n    }\\n\\n    function parseOrdersSetFillEmitMatch(\\n        LibOrder.Order memory orderLeft,\\n        LibOrder.Order memory orderRight\\n    ) internal returns (LibOrderData.GenericOrderData memory leftOrderData, LibOrderData.GenericOrderData memory rightOrderData, LibFill.FillResult memory newFill) {\\n        bytes32 leftOrderKeyHash = LibOrder.hashKey(orderLeft);\\n        bytes32 rightOrderKeyHash = LibOrder.hashKey(orderRight);\\n\\n        address msgSender = _msgSender();\\n        if (orderLeft.maker == address(0)) {\\n            orderLeft.maker = msgSender;\\n        }\\n        if (orderRight.maker == address(0)) {\\n            orderRight.maker = msgSender;\\n        }\\n\\n        leftOrderData = LibOrderData.parse(orderLeft);\\n        rightOrderData = LibOrderData.parse(orderRight);\\n\\n        newFill = setFillEmitMatch(\\n            orderLeft,\\n            orderRight,\\n            leftOrderKeyHash,\\n            rightOrderKeyHash,\\n            leftOrderData.isMakeFill,\\n            rightOrderData.isMakeFill\\n        );\\n    }\\n\\n    /**\\n        @notice calculates fills for the matched orders and set them in \\\"fills\\\" mapping\\n        @param orderLeft left order of the match\\n        @param orderRight right order of the match\\n        @param leftMakeFill true if the left orders uses make-side fills, false otherwise\\n        @param rightMakeFill true if the right orders uses make-side fills, false otherwise\\n        @return returns change in orders' fills by the match \\n    */\\n    function setFillEmitMatch(\\n        LibOrder.Order memory orderLeft,\\n        LibOrder.Order memory orderRight,\\n        bytes32 leftOrderKeyHash,\\n        bytes32 rightOrderKeyHash,\\n        bool leftMakeFill,\\n        bool rightMakeFill\\n    ) internal returns (LibFill.FillResult memory) {\\n        uint leftOrderFill = getOrderFill(orderLeft.salt, leftOrderKeyHash);\\n        uint rightOrderFill = getOrderFill(orderRight.salt, rightOrderKeyHash);\\n        LibFill.FillResult memory newFill = LibFill.fillOrder(orderLeft, orderRight, leftOrderFill, rightOrderFill, leftMakeFill, rightMakeFill);\\n\\n        if (orderLeft.makeAsset.value != 0 || orderRight.takeAsset.value != 0) {\\n            require(newFill.leftValue > 0, \\\"nothing to fill\\\");\\n        }\\n        if (orderLeft.takeAsset.value != 0 || orderRight.makeAsset.value != 0) {\\n            require(newFill.rightValue > 0, \\\"nothing to fill\\\");\\n        }\\n\\n        if (orderLeft.salt != 0) {\\n            if (leftMakeFill) {\\n                fills[leftOrderKeyHash] = leftOrderFill.add(newFill.leftValue);\\n            } else {\\n                fills[leftOrderKeyHash] = leftOrderFill.add(newFill.rightValue);\\n            }\\n        }\\n\\n        if (orderRight.salt != 0) {\\n            if (rightMakeFill) {\\n                fills[rightOrderKeyHash] = rightOrderFill.add(newFill.rightValue);\\n            } else {\\n                fills[rightOrderKeyHash] = rightOrderFill.add(newFill.leftValue);\\n            }\\n        }\\n\\n        emit Match(leftOrderKeyHash, rightOrderKeyHash, newFill.rightValue, newFill.leftValue);\\n\\n        return newFill;\\n    }\\n\\n    function getOrderFill(uint salt, bytes32 hash) internal view returns (uint fill) {\\n        if (salt == 0) {\\n            fill = 0;\\n        } else {\\n            fill = fills[hash];\\n        }\\n    }\\n\\n    function matchAssets(LibOrder.Order memory orderLeft, LibOrder.Order memory orderRight) internal view returns (LibAsset.AssetType memory makeMatch, LibAsset.AssetType memory takeMatch) {\\n        makeMatch = matchAssets(orderLeft.makeAsset.assetType, orderRight.takeAsset.assetType);\\n        require(makeMatch.assetClass != 0, \\\"assets don't match\\\");\\n        takeMatch = matchAssets(orderLeft.takeAsset.assetType, orderRight.makeAsset.assetType);\\n        require(takeMatch.assetClass != 0, \\\"assets don't match\\\");\\n    }\\n\\n    function validateFull(LibOrder.Order memory order, bytes memory signature) internal view {\\n        LibOrder.validateOrderTime(order);\\n        validate(order, signature);\\n    }\\n\\n    function getPaymentAssetType(address token) internal pure returns(LibAsset.AssetType memory){\\n        LibAsset.AssetType memory result;\\n        if(token == address(0)) {\\n            result.assetClass = LibAsset.ETH_ASSET_CLASS;\\n        } else {\\n            result.assetClass = LibAsset.ERC20_ASSET_CLASS;\\n            result.data = abi.encode(token);\\n        }\\n        return result;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xa93d432fd4012eb69625b23fc71744f0d28dbb1acf58165b68647beb18f5baa2\",\"license\":\"MIT\"},\"@rarible/exchange-v2/contracts/OrderValidator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"./libraries/LibOrder.sol\\\";\\n\\nimport \\\"@rarible/lib-signature/contracts/IERC1271.sol\\\";\\nimport \\\"@rarible/lib-signature/contracts/LibSignature.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol\\\";\\n\\nabstract contract OrderValidator is Initializable, ContextUpgradeable, EIP712Upgradeable {\\n    using LibSignature for bytes32;\\n    using AddressUpgradeable for address;\\n    \\n    bytes4 constant internal MAGICVALUE = 0x1626ba7e;\\n\\n    function __OrderValidator_init_unchained() internal initializer {\\n        __EIP712_init_unchained(\\\"Exchange\\\", \\\"2\\\");\\n    }\\n\\n    function validate(LibOrder.Order memory order, bytes memory signature) internal view {\\n        if (order.salt == 0) {\\n            if (order.maker != address(0)) {\\n                require(_msgSender() == order.maker, \\\"maker is not tx sender\\\");\\n            }\\n        } else {\\n            if (_msgSender() != order.maker) {\\n                bytes32 hash = LibOrder.hash(order);\\n                // if maker is contract checking ERC1271 signature\\n                if (order.maker.isContract()) {\\n                    require(\\n                        IERC1271(order.maker).isValidSignature(_hashTypedDataV4(hash), signature) == MAGICVALUE,\\n                        \\\"contract order signature verification error\\\"\\n                    );\\n                } else {\\n                    // if maker is not contract then checking ECDSA signature\\n                    if (_hashTypedDataV4(hash).recover(signature) != order.maker) {\\n                        revert(\\\"order signature verification error\\\");\\n                    } else {\\n                        require (order.maker != address(0), \\\"no maker\\\");\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xa73f3046ab283611bcd4904f7f9d40668140e75fa6678dc20fba5721f1dad011\",\"license\":\"MIT\"},\"@rarible/exchange-v2/contracts/libraries/LibDirectTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@rarible/lib-asset/contracts/LibAsset.sol\\\";\\n\\nlibrary LibDirectTransfer { //LibDirectTransfers\\n    /*All buy parameters need for create buyOrder and sellOrder*/\\n    struct Purchase {\\n        address sellOrderMaker; //\\n        uint256 sellOrderNftAmount;\\n        bytes4 nftAssetClass;\\n        bytes nftData;\\n        uint256 sellOrderPaymentAmount;\\n        address paymentToken;\\n        uint256 sellOrderSalt;\\n        uint sellOrderStart;\\n        uint sellOrderEnd;\\n        bytes4 sellOrderDataType;\\n        bytes sellOrderData;\\n        bytes sellOrderSignature;\\n\\n        uint256 buyOrderPaymentAmount;\\n        uint256 buyOrderNftAmount;\\n        bytes buyOrderData;\\n    }\\n\\n    /*All accept bid parameters need for create buyOrder and sellOrder*/\\n    struct AcceptBid {\\n        address bidMaker; //\\n        uint256 bidNftAmount;\\n        bytes4 nftAssetClass;\\n        bytes nftData;\\n        uint256 bidPaymentAmount;\\n        address paymentToken;\\n        uint256 bidSalt;\\n        uint bidStart;\\n        uint bidEnd;\\n        bytes4 bidDataType;\\n        bytes bidData;\\n        bytes bidSignature;\\n\\n        uint256 sellOrderPaymentAmount;\\n        uint256 sellOrderNftAmount;\\n        bytes sellOrderData;\\n    }\\n}\\n\",\"keccak256\":\"0xdd424a4854082b53142689a90446bf7637826d1d35a163419c0f953f52728291\",\"license\":\"MIT\"},\"@rarible/exchange-v2/contracts/libraries/LibFill.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"./LibOrder.sol\\\";\\n\\nlibrary LibFill {\\n    struct FillResult {\\n        uint leftValue;\\n        uint rightValue;\\n    }\\n\\n    struct IsMakeFill {\\n        bool leftMake;\\n        bool rightMake;\\n    }\\n\\n    /**\\n     * @dev Should return filled values\\n     * @param leftOrder left order\\n     * @param rightOrder right order\\n     * @param leftOrderFill current fill of the left order (0 if order is unfilled)\\n     * @param rightOrderFill current fill of the right order (0 if order is unfilled)\\n     * @param leftIsMakeFill true if left orders fill is calculated from the make side, false if from the take side\\n     * @param rightIsMakeFill true if right orders fill is calculated from the make side, false if from the take side\\n     * @return tuple representing fill of both assets\\n     */\\n    function fillOrder(LibOrder.Order memory leftOrder, LibOrder.Order memory rightOrder, uint leftOrderFill, uint rightOrderFill, bool leftIsMakeFill, bool rightIsMakeFill) internal pure returns (FillResult memory) {\\n        (uint leftMakeValue, uint leftTakeValue) = LibOrder.calculateRemaining(leftOrder, leftOrderFill, leftIsMakeFill);\\n        (uint rightMakeValue, uint rightTakeValue) = LibOrder.calculateRemaining(rightOrder, rightOrderFill, rightIsMakeFill);\\n\\n        //We have 3 cases here:\\n        if (rightTakeValue > leftMakeValue || (rightTakeValue == leftMakeValue && leftMakeValue == 0)) { //1nd: left order should be fully filled\\n            return fillLeft(leftMakeValue, leftTakeValue, rightOrder.makeAsset.value, rightOrder.takeAsset.value);\\n        }//2st: right order should be fully filled or 3d: both should be fully filled if required values are the same\\n        return fillRight(leftOrder.makeAsset.value, leftOrder.takeAsset.value, rightMakeValue, rightTakeValue);\\n    }\\n\\n    function fillRight(uint leftMakeValue, uint leftTakeValue, uint rightMakeValue, uint rightTakeValue) internal pure returns (FillResult memory result) {\\n        uint makerValue = LibMath.safeGetPartialAmountFloor(rightTakeValue, leftMakeValue, leftTakeValue);\\n        require(makerValue <= rightMakeValue, \\\"fillRight: unable to fill\\\");\\n        return FillResult(rightTakeValue, makerValue);\\n    }\\n\\n    function fillLeft(uint leftMakeValue, uint leftTakeValue, uint rightMakeValue, uint rightTakeValue) internal pure returns (FillResult memory result) {\\n        uint rightTake = LibMath.safeGetPartialAmountFloor(leftTakeValue, rightMakeValue, rightTakeValue);\\n        require(rightTake <= leftMakeValue, \\\"fillLeft: unable to fill\\\");\\n        return FillResult(leftMakeValue, leftTakeValue);\\n    }\\n}\\n\",\"keccak256\":\"0xd8ff6a506590af9d97911eaf66add363e4437525e30e82032acf27d20812a1ab\",\"license\":\"MIT\"},\"@rarible/exchange-v2/contracts/libraries/LibMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\n\\nlibrary LibMath {\\n    using SafeMathUpgradeable for uint;\\n\\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\\n    ///      Reverts if rounding error is >= 0.1%\\n    /// @param numerator Numerator.\\n    /// @param denominator Denominator.\\n    /// @param target Value to calculate partial of.\\n    /// @return partialAmount value of target rounded down.\\n    function safeGetPartialAmountFloor(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    ) internal pure returns (uint256 partialAmount) {\\n        if (isRoundingErrorFloor(numerator, denominator, target)) {\\n            revert(\\\"rounding error\\\");\\n        }\\n        partialAmount = numerator.mul(target).div(denominator);\\n    }\\n\\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\\n    /// @param numerator Numerator.\\n    /// @param denominator Denominator.\\n    /// @param target Value to multiply with numerator/denominator.\\n    /// @return isError Rounding error is present.\\n    function isRoundingErrorFloor(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    ) internal pure returns (bool isError) {\\n        if (denominator == 0) {\\n            revert(\\\"division by zero\\\");\\n        }\\n\\n        // The absolute rounding error is the difference between the rounded\\n        // value and the ideal value. The relative rounding error is the\\n        // absolute rounding error divided by the absolute value of the\\n        // ideal value. This is undefined when the ideal value is zero.\\n        //\\n        // The ideal value is `numerator * target / denominator`.\\n        // Let's call `numerator * target % denominator` the remainder.\\n        // The absolute error is `remainder / denominator`.\\n        //\\n        // When the ideal value is zero, we require the absolute error to\\n        // be zero. Fortunately, this is always the case. The ideal value is\\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\\n        // remainder and absolute error are also zero.\\n        if (target == 0 || numerator == 0) {\\n            return false;\\n        }\\n\\n        // Otherwise, we want the relative rounding error to be strictly\\n        // less than 0.1%.\\n        // The relative error is `remainder / (numerator * target)`.\\n        // We want the relative error less than 1 / 1000:\\n        //        remainder / (numerator * target)  <  1 / 1000\\n        // or equivalently:\\n        //        1000 * remainder  <  numerator * target\\n        // so we have a rounding error iff:\\n        //        1000 * remainder  >=  numerator * target\\n        uint256 remainder = mulmod(\\n            target,\\n            numerator,\\n            denominator\\n        );\\n        isError = remainder.mul(1000) >= numerator.mul(target);\\n    }\\n\\n    function safeGetPartialAmountCeil(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    ) internal pure returns (uint256 partialAmount) {\\n        if (isRoundingErrorCeil(numerator, denominator, target)) {\\n            revert(\\\"rounding error\\\");\\n        }\\n        partialAmount = numerator.mul(target).add(denominator.sub(1)).div(denominator);\\n    }\\n\\n    /// @dev Checks if rounding error >= 0.1% when rounding up.\\n    /// @param numerator Numerator.\\n    /// @param denominator Denominator.\\n    /// @param target Value to multiply with numerator/denominator.\\n    /// @return isError Rounding error is present.\\n    function isRoundingErrorCeil(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    ) internal pure returns (bool isError) {\\n        if (denominator == 0) {\\n            revert(\\\"division by zero\\\");\\n        }\\n\\n        // See the comments in `isRoundingError`.\\n        if (target == 0 || numerator == 0) {\\n            // When either is zero, the ideal value and rounded value are zero\\n            // and there is no rounding error. (Although the relative error\\n            // is undefined.)\\n            return false;\\n        }\\n        // Compute remainder as before\\n        uint256 remainder = mulmod(\\n            target,\\n            numerator,\\n            denominator\\n        );\\n        remainder = denominator.sub(remainder) % denominator;\\n        isError = remainder.mul(1000) >= numerator.mul(target);\\n        return isError;\\n    }\\n}\\n\",\"keccak256\":\"0x479e01de1a609d836f73eecb1ba5d0a3d78fa791979e8e4f361a576a61b101ec\",\"license\":\"MIT\"},\"@rarible/exchange-v2/contracts/libraries/LibOrder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@rarible/lib-asset/contracts/LibAsset.sol\\\";\\n\\nimport \\\"./LibMath.sol\\\";\\nimport \\\"./LibOrderDataV3.sol\\\";\\nimport \\\"./LibOrderDataV2.sol\\\";\\nimport \\\"./LibOrderDataV1.sol\\\";\\n\\nlibrary LibOrder {\\n    using SafeMathUpgradeable for uint;\\n\\n    bytes32 constant ORDER_TYPEHASH = keccak256(\\n        \\\"Order(address maker,Asset makeAsset,address taker,Asset takeAsset,uint256 salt,uint256 start,uint256 end,bytes4 dataType,bytes data)Asset(AssetType assetType,uint256 value)AssetType(bytes4 assetClass,bytes data)\\\"\\n    );\\n\\n    bytes4 constant DEFAULT_ORDER_TYPE = 0xffffffff;\\n\\n    struct Order {\\n        address maker;\\n        LibAsset.Asset makeAsset;\\n        address taker;\\n        LibAsset.Asset takeAsset;\\n        uint salt;\\n        uint start;\\n        uint end;\\n        bytes4 dataType;\\n        bytes data;\\n    }\\n\\n    /**\\n     * @dev Calculate remaining make and take values of the order (after partial filling real make and take decrease)\\n     * @param order initial order to calculate remaining values for\\n     * @param fill current fill of the left order (0 if order is unfilled)\\n     * @param isMakeFill true if order fill is calculated from the make side, false if from the take side\\n     * @return makeValue remaining make value of the order. if fill = 0 then it's order's make value\\n     * @return takeValue remaining take value of the order. if fill = 0 then it's order's take value\\n     */\\n    function calculateRemaining(Order memory order, uint fill, bool isMakeFill) internal pure returns (uint makeValue, uint takeValue) {\\n        if (isMakeFill) {\\n            makeValue = order.makeAsset.value.sub(fill);\\n            takeValue = LibMath.safeGetPartialAmountFloor(order.takeAsset.value, order.makeAsset.value, makeValue);\\n        } else {\\n            takeValue = order.takeAsset.value.sub(fill);\\n            makeValue = LibMath.safeGetPartialAmountFloor(order.makeAsset.value, order.takeAsset.value, takeValue); \\n        } \\n    }\\n\\n    function hashKey(Order memory order) internal pure returns (bytes32) {\\n        if (order.dataType == LibOrderDataV1.V1 || order.dataType == DEFAULT_ORDER_TYPE) {\\n            return keccak256(abi.encode(\\n                order.maker,\\n                LibAsset.hash(order.makeAsset.assetType),\\n                LibAsset.hash(order.takeAsset.assetType),\\n                order.salt\\n            ));\\n        } else {\\n            //order.data is in hash for V2, V3 and all new order\\n            return keccak256(abi.encode(\\n                order.maker,\\n                LibAsset.hash(order.makeAsset.assetType),\\n                LibAsset.hash(order.takeAsset.assetType),\\n                order.salt,\\n                order.data\\n            ));\\n        }\\n    }\\n\\n    function hash(Order memory order) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n                ORDER_TYPEHASH,\\n                order.maker,\\n                LibAsset.hash(order.makeAsset),\\n                order.taker,\\n                LibAsset.hash(order.takeAsset),\\n                order.salt,\\n                order.start,\\n                order.end,\\n                order.dataType,\\n                keccak256(order.data)\\n            ));\\n    }\\n\\n    function validateOrderTime(LibOrder.Order memory order) internal view {\\n        require(order.start == 0 || order.start < block.timestamp, \\\"Order start validation failed\\\");\\n        require(order.end == 0 || order.end > block.timestamp, \\\"Order end validation failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x5ac1388a3571fd7f0d7fc3f78edd354ff37e04079901d1c93c63ea6e1e527190\",\"license\":\"MIT\"},\"@rarible/exchange-v2/contracts/libraries/LibOrderData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./LibOrder.sol\\\";\\n\\nlibrary LibOrderData {\\n\\n    struct GenericOrderData {\\n        LibPart.Part[] payouts;\\n        LibPart.Part[] originFees;\\n        bool isMakeFill;\\n        bool protocolFeeEnabled;\\n    } \\n\\n    function parse(LibOrder.Order memory order) pure internal returns (GenericOrderData memory dataOrder) {\\n        dataOrder.protocolFeeEnabled = false;\\n        if (order.dataType == LibOrderDataV1.V1) {\\n            LibOrderDataV1.DataV1 memory data = abi.decode(order.data, (LibOrderDataV1.DataV1));\\n            dataOrder.payouts = data.payouts;\\n            dataOrder.originFees = data.originFees;\\n        } else if (order.dataType == LibOrderDataV2.V2) {\\n            LibOrderDataV2.DataV2 memory data = abi.decode(order.data, (LibOrderDataV2.DataV2));\\n            dataOrder.payouts = data.payouts;\\n            dataOrder.originFees = data.originFees;\\n            dataOrder.isMakeFill = data.isMakeFill;\\n        } else if (order.dataType == LibOrderDataV3.V3) {\\n            LibOrderDataV3.DataV3 memory data = abi.decode(order.data, (LibOrderDataV3.DataV3));\\n            dataOrder.payouts = data.payouts;\\n            dataOrder.originFees = data.originFees;\\n            dataOrder.isMakeFill = data.isMakeFill;\\n            dataOrder.protocolFeeEnabled = true;\\n        } else if (order.dataType == 0xffffffff) {\\n        } else {\\n            revert(\\\"Unknown Order data type\\\");\\n        }\\n        if (dataOrder.payouts.length == 0) {\\n            dataOrder.payouts = payoutSet(order.maker);\\n        }\\n    }\\n\\n    function payoutSet(address orderAddress) pure internal returns (LibPart.Part[] memory) {\\n        LibPart.Part[] memory payout = new LibPart.Part[](1);\\n        payout[0].account = payable(orderAddress);\\n        payout[0].value = 10000;\\n        return payout;\\n    }\\n\\n    function parseOriginFeeData(uint dataFirst, uint dataSecond) internal pure returns(LibPart.Part[] memory) {\\n        LibPart.Part[] memory originFee;\\n\\n        if (dataFirst > 0 && dataSecond > 0){\\n            originFee = new LibPart.Part[](2);\\n\\n            originFee[0] = uintToLibPart(dataFirst);\\n            originFee[1] = uintToLibPart(dataSecond);\\n        }\\n\\n        if (dataFirst > 0 && dataSecond == 0) {\\n            originFee = new LibPart.Part[](1);\\n\\n            originFee[0] = uintToLibPart(dataFirst);\\n        }\\n\\n        if (dataFirst == 0 && dataSecond > 0) {\\n            originFee = new LibPart.Part[](1);\\n\\n            originFee[0] = uintToLibPart(dataSecond);\\n        }\\n\\n        return originFee;\\n    }\\n\\n    function parsePayouts(uint data) internal pure returns(LibPart.Part[] memory) {\\n        LibPart.Part[] memory payouts;\\n\\n        if (data > 0) {\\n            payouts = new LibPart.Part[](1);\\n            payouts[0] = uintToLibPart(data);\\n        }\\n\\n        return payouts;\\n    }\\n\\n    /**\\n        @notice converts uint to LibPart.Part\\n        @param data address and value encoded in uint (first 12 bytes )\\n        @return result LibPart.Part \\n     */\\n    function uintToLibPart(uint data) internal pure returns(LibPart.Part memory result) {\\n        if (data > 0){\\n            result.account = payable(address(data));\\n            result.value = uint96(data >> 160);\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7ade2e0f39574183261011013a7eebe7a06abad9b8585e48d132a4579c2334bc\",\"license\":\"MIT\"},\"@rarible/exchange-v2/contracts/libraries/LibOrderDataV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@rarible/lib-part/contracts/LibPart.sol\\\";\\n\\nlibrary LibOrderDataV1 {\\n    bytes4 constant public V1 = bytes4(keccak256(\\\"V1\\\"));\\n\\n    struct DataV1 {\\n        LibPart.Part[] payouts;\\n        LibPart.Part[] originFees;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x2ab77ee6306b933315e80f6ef38d27855cf881b9452891362016b8e1becb92ff\",\"license\":\"MIT\"},\"@rarible/exchange-v2/contracts/libraries/LibOrderDataV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@rarible/lib-part/contracts/LibPart.sol\\\";\\n\\nlibrary LibOrderDataV2 {\\n    bytes4 constant public V2 = bytes4(keccak256(\\\"V2\\\"));\\n\\n    struct DataV2 {\\n        LibPart.Part[] payouts;\\n        LibPart.Part[] originFees;\\n        bool isMakeFill;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x51684b4d70282bd621cec5b0d25f2fcb5d1782c282ce0ffcf6fa63890d9064d2\",\"license\":\"MIT\"},\"@rarible/exchange-v2/contracts/libraries/LibOrderDataV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@rarible/lib-part/contracts/LibPart.sol\\\";\\n\\nlibrary LibOrderDataV3 {\\n    bytes4 constant public V3 = bytes4(keccak256(\\\"V3\\\"));\\n\\n    struct DataV3 {\\n        LibPart.Part[] payouts;\\n        LibPart.Part[] originFees;\\n        bool isMakeFill;\\n    }\\n}\\n\",\"keccak256\":\"0x73efab7636308c9dbc8dd54db91535dd0f8915624ffe1547f545f5ba617dc126\",\"license\":\"MIT\"},\"@rarible/lazy-mint/contracts/erc-1155/LibERC1155LazyMint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"@rarible/lib-part/contracts/LibPart.sol\\\";\\n\\nlibrary LibERC1155LazyMint {\\n    bytes4 constant public ERC1155_LAZY_ASSET_CLASS = bytes4(keccak256(\\\"ERC1155_LAZY\\\"));\\n    bytes4 constant _INTERFACE_ID_MINT_AND_TRANSFER = 0x6db15a0f;\\n\\n    struct Mint1155Data {\\n        uint tokenId;\\n        string tokenURI;\\n        uint supply;\\n        LibPart.Part[] creators;\\n        LibPart.Part[] royalties;\\n        bytes[] signatures;\\n    }\\n\\n    bytes32 public constant MINT_AND_TRANSFER_TYPEHASH = keccak256(\\\"Mint1155(uint256 tokenId,uint256 supply,string tokenURI,Part[] creators,Part[] royalties)Part(address account,uint96 value)\\\");\\n\\n    function hash(Mint1155Data memory data) internal pure returns (bytes32) {\\n        bytes32[] memory royaltiesBytes = new bytes32[](data.royalties.length);\\n        for (uint i = 0; i < data.royalties.length; ++i) {\\n            royaltiesBytes[i] = LibPart.hash(data.royalties[i]);\\n        }\\n        bytes32[] memory creatorsBytes = new bytes32[](data.creators.length);\\n        for (uint i = 0; i < data.creators.length; ++i) {\\n            creatorsBytes[i] = LibPart.hash(data.creators[i]);\\n        }\\n        return keccak256(abi.encode(\\n                MINT_AND_TRANSFER_TYPEHASH,\\n                data.tokenId,\\n                data.supply,\\n                keccak256(bytes(data.tokenURI)),\\n                keccak256(abi.encodePacked(creatorsBytes)),\\n                keccak256(abi.encodePacked(royaltiesBytes))\\n            ));\\n    }\\n}\\n\",\"keccak256\":\"0x541f8f29d7d643c5eab654e1e86fc97392f79b246fc5072fc0dcc5c93802b98d\",\"license\":\"MIT\"},\"@rarible/lazy-mint/contracts/erc-721/LibERC721LazyMint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"@rarible/lib-part/contracts/LibPart.sol\\\";\\n\\nlibrary LibERC721LazyMint {\\n    bytes4 constant public ERC721_LAZY_ASSET_CLASS = bytes4(keccak256(\\\"ERC721_LAZY\\\"));\\n    bytes4 constant _INTERFACE_ID_MINT_AND_TRANSFER = 0x8486f69f;\\n\\n    struct Mint721Data {\\n        uint tokenId;\\n        string tokenURI;\\n        LibPart.Part[] creators;\\n        LibPart.Part[] royalties;\\n        bytes[] signatures;\\n    }\\n\\n    bytes32 public constant MINT_AND_TRANSFER_TYPEHASH = keccak256(\\\"Mint721(uint256 tokenId,string tokenURI,Part[] creators,Part[] royalties)Part(address account,uint96 value)\\\");\\n\\n    function hash(Mint721Data memory data) internal pure returns (bytes32) {\\n        bytes32[] memory royaltiesBytes = new bytes32[](data.royalties.length);\\n        for (uint i = 0; i < data.royalties.length; ++i) {\\n            royaltiesBytes[i] = LibPart.hash(data.royalties[i]);\\n        }\\n        bytes32[] memory creatorsBytes = new bytes32[](data.creators.length);\\n        for (uint i = 0; i < data.creators.length; ++i) {\\n            creatorsBytes[i] = LibPart.hash(data.creators[i]);\\n        }\\n        return keccak256(abi.encode(\\n                MINT_AND_TRANSFER_TYPEHASH,\\n                data.tokenId,\\n                keccak256(bytes(data.tokenURI)),\\n                keccak256(abi.encodePacked(creatorsBytes)),\\n                keccak256(abi.encodePacked(royaltiesBytes))\\n            ));\\n    }\\n\\n}\\n\",\"keccak256\":\"0xc0d28cb2d3f811cfcad6ed6d1d015e3a470a83d7896d3205cb8410c4bede097a\",\"license\":\"MIT\"},\"@rarible/lib-asset/contracts/LibAsset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nlibrary LibAsset {\\n    bytes4 constant public ETH_ASSET_CLASS = bytes4(keccak256(\\\"ETH\\\"));\\n    bytes4 constant public ERC20_ASSET_CLASS = bytes4(keccak256(\\\"ERC20\\\"));\\n    bytes4 constant public ERC721_ASSET_CLASS = bytes4(keccak256(\\\"ERC721\\\"));\\n    bytes4 constant public ERC1155_ASSET_CLASS = bytes4(keccak256(\\\"ERC1155\\\"));\\n    bytes4 constant public COLLECTION = bytes4(keccak256(\\\"COLLECTION\\\"));\\n    bytes4 constant public CRYPTO_PUNKS = bytes4(keccak256(\\\"CRYPTO_PUNKS\\\"));\\n\\n    bytes32 constant ASSET_TYPE_TYPEHASH = keccak256(\\n        \\\"AssetType(bytes4 assetClass,bytes data)\\\"\\n    );\\n\\n    bytes32 constant ASSET_TYPEHASH = keccak256(\\n        \\\"Asset(AssetType assetType,uint256 value)AssetType(bytes4 assetClass,bytes data)\\\"\\n    );\\n\\n    struct AssetType {\\n        bytes4 assetClass;\\n        bytes data;\\n    }\\n\\n    struct Asset {\\n        AssetType assetType;\\n        uint value;\\n    }\\n\\n    function hash(AssetType memory assetType) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n                ASSET_TYPE_TYPEHASH,\\n                assetType.assetClass,\\n                keccak256(assetType.data)\\n            ));\\n    }\\n\\n    function hash(Asset memory asset) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n                ASSET_TYPEHASH,\\n                hash(asset.assetType),\\n                asset.value\\n            ));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x5d63bba4747a12a83c5628dba94bf56714b4dcf94f742ff28863034831061c8a\",\"license\":\"MIT\"},\"@rarible/lib-bp/contracts/BpLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\n\\nlibrary BpLibrary {\\n    using SafeMathUpgradeable for uint;\\n\\n    function bp(uint value, uint bpValue) internal pure returns (uint) {\\n        return value.mul(bpValue).div(10000);\\n    }\\n}\\n\",\"keccak256\":\"0x17c563120ba6b4c52d10621806b18af45946fe64894d995e4d672cccf6c09c8c\",\"license\":\"MIT\"},\"@rarible/lib-part/contracts/LibPart.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nlibrary LibPart {\\n    bytes32 public constant TYPE_HASH = keccak256(\\\"Part(address account,uint96 value)\\\");\\n\\n    struct Part {\\n        address payable account;\\n        uint96 value;\\n    }\\n\\n    function hash(Part memory part) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, part.account, part.value));\\n    }\\n}\\n\",\"keccak256\":\"0xd0123f7411573a6a7e1527e0d3901913d7642e504ff240d5b7c5b76a28587def\",\"license\":\"MIT\"},\"@rarible/lib-signature/contracts/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\ninterface IERC1271 {\\n\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param _hash Hash of the data signed on the behalf of address(this)\\n     * @param _signature Signature byte array associated with _data\\n     *\\n     * MUST return the bytes4 magic value 0x1626ba7e when function passes.\\n     * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\\n     * MUST allow external calls\\n     */\\n    function isValidSignature(bytes32 _hash, bytes calldata _signature) virtual external view returns (bytes4 magicValue);\\n}\",\"keccak256\":\"0x47e5ddd7f0504f513ccff6f04095004452c6b8332d3f88e6959ea189568b7878\",\"license\":\"MIT\"},\"@rarible/lib-signature/contracts/LibSignature.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nlibrary LibSignature {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(\\n            uint256(s) <=\\n                0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\n            \\\"ECDSA: invalid signature 's' value\\\"\\n        );\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        // v > 30 is a special case, we need to adjust hash with \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"\\n        // and v = v - 4\\n        address signer;\\n        if (v > 30) {\\n            require(\\n                v - 4 == 27 || v - 4 == 28,\\n                \\\"ECDSA: invalid signature 'v' value\\\"\\n            );\\n            signer = ecrecover(toEthSignedMessageHash(hash), v - 4, r, s);\\n        } else {\\n            require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n            signer = ecrecover(hash, v, r, s);\\n        }\\n\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * replicates the behavior of the\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n     * JSON-RPC method.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return\\n            keccak256(\\n                abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x7a5583247b42c05cd0e592a870755c9b7bba3f2141f6e0dd1a123af504372237\",\"license\":\"MIT\"},\"@rarible/meta-tx/contracts/EIP712MetaTransaction.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nabstract contract EIP712MetaTransaction is ContextUpgradeable {\\n    using SafeMath for uint256;\\n\\n    bytes32 private constant META_TRANSACTION_TYPEHASH = keccak256(bytes(\\\"MetaTransaction(uint256 nonce,address from,bytes functionSignature)\\\"));\\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH = keccak256(\\\"EIP712Domain(string name,string version,address verifyingContract,bytes32 salt)\\\");\\n\\n    mapping(address => uint256) private nonces;\\n    bytes32 internal domainSeparator;\\n\\n    /*\\n     * Meta transaction structure.\\n     * No point of including value field here as if user is doing value transfer then he has the funds to pay for gas\\n     * He should call the desired function directly in that case.\\n     */\\n    struct MetaTransaction {\\n        uint256 nonce;\\n        address from;\\n        bytes functionSignature;\\n    }\\n\\n    /*\\n     * Domain structure.\\n     * Data(information to for making metaTransaction method uniq.) about method and contract\\n     */\\n    struct EIP712Domain {\\n        string name;\\n        string version;\\n        address verifyingContract;\\n        bytes32 salt;\\n    }\\n\\n    event MetaTransactionExecuted(address userAddress, address payable relayerAddress, bytes functionSignature);\\n\\n    function __MetaTransaction_init_unchained(string memory name, string memory version) internal {\\n        domainSeparator = keccak256(abi.encode(\\n                EIP712_DOMAIN_TYPEHASH,\\n                keccak256(bytes(name)),\\n                keccak256(bytes(version)),\\n                address(this),\\n                getSalt()\\n            ));\\n    }\\n\\n    function convertBytesToBytes4(bytes memory inBytes) internal pure returns (bytes4 outBytes4) {\\n        if (inBytes.length == 0) {\\n            return 0x0;\\n        }\\n\\n        assembly {\\n            outBytes4 := mload(add(inBytes, 32))\\n        }\\n    }\\n\\n    function executeMetaTransaction(address userAddress,\\n        bytes memory functionSignature, bytes32 sigR, bytes32 sigS, uint8 sigV) external payable returns (bytes memory) {\\n        bytes4 destinationFunctionSig = convertBytesToBytes4(functionSignature);\\n        require(destinationFunctionSig != msg.sig, \\\"Wrong functionSignature\\\");\\n        MetaTransaction memory metaTx = MetaTransaction({\\n        nonce : nonces[userAddress],\\n        from : userAddress,\\n        functionSignature : functionSignature\\n        });\\n        require(verify(userAddress, metaTx, sigR, sigS, sigV), \\\"Signer and signature do not match\\\");\\n        nonces[userAddress] = nonces[userAddress].add(1);\\n        // Append userAddress at the end to extract it from calling context\\n        (bool success, bytes memory returnData) = address(this).call(abi.encodePacked(functionSignature, userAddress));\\n\\n        require(success, \\\"Function call not successful\\\");\\n        emit MetaTransactionExecuted(userAddress, msg.sender, functionSignature);\\n        return returnData;\\n    }\\n\\n    function hashMetaTransaction(MetaTransaction memory metaTx) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n                META_TRANSACTION_TYPEHASH,\\n                metaTx.nonce,\\n                metaTx.from,\\n                keccak256(metaTx.functionSignature)\\n            ));\\n    }\\n\\n    function getNonce(address user) external view returns (uint256 nonce) {\\n        nonce = nonces[user];\\n    }\\n\\n    function verify(address user, MetaTransaction memory metaTx, bytes32 sigR, bytes32 sigS, uint8 sigV) internal view returns (bool) {\\n        address signer = ecrecover(toTypedMessageHash(hashMetaTransaction(metaTx)), sigV, sigR, sigS);\\n        require(signer != address(0), \\\"Invalid signature\\\");\\n        return signer == user;\\n    }\\n\\n    function _msgSender() internal view virtual override returns (address payable sender) {\\n        if (msg.sender == address(this)) {\\n            bytes memory array = msg.data;\\n            uint256 index = msg.data.length;\\n            assembly {\\n            // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\n                sender := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff)\\n            }\\n        } else {\\n            sender = msg.sender;\\n        }\\n        return sender;\\n    }\\n\\n    function getSalt() internal pure returns (bytes32) {\\n        return bytes32(getChainID());\\n    }\\n\\n    function getChainID() internal pure returns (uint256 id) {\\n        assembly {\\n            id := chainid()\\n        }\\n    }\\n\\n    function getDomainSeparator() private view returns (bytes32) {\\n        return domainSeparator;\\n    }\\n\\n    /**\\n    * Accept message hash and returns hash message in EIP712 compatible form\\n    * So that it can be used to recover signer from signature signed using EIP712 formatted data\\n    * https://eips.ethereum.org/EIPS/eip-712\\n    * \\\"\\\\\\\\x19\\\" makes the encoding deterministic\\n    * \\\"\\\\\\\\x01\\\" is the version byte to make it compatible to EIP-191\\n    */\\n    function toTypedMessageHash(bytes32 messageHash) internal view returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", getDomainSeparator(), messageHash));\\n    }\\n\\n    /**\\n         * @dev verifies the call result and bubbles up revert reason for failed calls\\n         *\\n         * @param success : outcome of forwarded call\\n         * @param returndata : returned data from the frowarded call\\n         * @param errorMessage : fallback error message to show\\n         */\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure {\\n        if (!success) {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\",\"keccak256\":\"0x58924a44eea8720bdcfb32f12d3374deac9605a3b75cb8872907856d526bde10\",\"license\":\"MIT\"},\"@rarible/transfer-manager/contracts/RaribleTransferManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport \\\"@rarible/lazy-mint/contracts/erc-721/LibERC721LazyMint.sol\\\";\\nimport \\\"@rarible/lazy-mint/contracts/erc-1155/LibERC1155LazyMint.sol\\\";\\n\\nimport \\\"@rarible/exchange-interfaces/contracts/IRoyaltiesProvider.sol\\\";\\n\\nimport \\\"@rarible/lib-bp/contracts/BpLibrary.sol\\\";\\n\\nimport \\\"./interfaces/ITransferManager.sol\\\";\\n\\nabstract contract RaribleTransferManager is OwnableUpgradeable, ITransferManager {\\n    using BpLibrary for uint;\\n    using SafeMathUpgradeable for uint;\\n\\n    ProtocolFeeData public protocolFee;\\n    IRoyaltiesProvider public royaltiesRegistry;\\n\\n    //deprecated\\n    address private defaultFeeReceiver;\\n    // deprecated\\n    mapping(address => address) private feeReceivers;\\n\\n    /// @dev event that's emitted when ProtocolFeeData buyerAmount changes\\n    event BuyerFeeAmountChanged(uint oldValue, uint newValue);\\n\\n    /// @dev event that's emitted when ProtocolFeeData sellerAmount changes\\n    event SellerFeeAmountChanged(uint oldValue, uint newValue);\\n\\n    /// @dev event that's emitted when ProtocolFeeData receiver changes\\n    event FeeReceiverChanged(address oldValue, address newValue);\\n\\n    /// @dev struct to store protocol fee - receiver address, buyer fee amount (in bp), seller fee amount (in bp)\\n    struct ProtocolFeeData {\\n        address receiver;\\n        uint48 buyerAmount;\\n        uint48 sellerAmount;\\n    }\\n\\n    /**\\n        @notice initialises RaribleTransferManager state\\n        @param newProtocolFee deprecated\\n        @param newDefaultFeeReceiver deprecated\\n        @param newRoyaltiesProvider royaltiesRegistry contract address\\n     */\\n    function __RaribleTransferManager_init_unchained(\\n        uint newProtocolFee,\\n        address newDefaultFeeReceiver,\\n        IRoyaltiesProvider newRoyaltiesProvider\\n    ) internal initializer {\\n        royaltiesRegistry = newRoyaltiesProvider;\\n    }\\n\\n    function setRoyaltiesRegistry(IRoyaltiesProvider newRoyaltiesRegistry) external onlyOwner {\\n        royaltiesRegistry = newRoyaltiesRegistry;\\n    }\\n\\n    function setPrtocolFeeReceiver(address _receiver) public onlyOwner {\\n        emit FeeReceiverChanged(protocolFee.receiver, _receiver);\\n        protocolFee.receiver = _receiver;\\n    }\\n\\n    function setPrtocolFeeBuyerAmount(uint48 _buyerAmount) public onlyOwner {\\n        emit BuyerFeeAmountChanged(protocolFee.buyerAmount, _buyerAmount);\\n        protocolFee.buyerAmount = _buyerAmount;\\n    }\\n\\n    function setPrtocolFeeSellerAmount(uint48 _sellerAmount) public onlyOwner {\\n        emit SellerFeeAmountChanged(protocolFee.sellerAmount, _sellerAmount);\\n        protocolFee.sellerAmount = _sellerAmount;\\n    }\\n\\n    function setAllProtocolFeeData(address _receiver, uint48 _buyerAmount, uint48 _sellerAmount) public onlyOwner {\\n        setPrtocolFeeReceiver(_receiver);\\n        setPrtocolFeeBuyerAmount(_buyerAmount);\\n        setPrtocolFeeSellerAmount(_sellerAmount);\\n    }\\n\\n    /**\\n        @notice executes transfers for 2 matched orders\\n        @param left DealSide from the left order (see LibDeal.sol)\\n        @param right DealSide from the right order (see LibDeal.sol)\\n        @param feeSide feeSide of the match\\n        @return totalLeftValue - total amount for the left order\\n        @return totalRightValue - total amout for the right order\\n    */\\n    function doTransfers(\\n        LibDeal.DealSide memory left,\\n        LibDeal.DealSide memory right,\\n        LibFeeSide.FeeSide feeSide\\n    ) override internal returns (uint totalLeftValue, uint totalRightValue) {\\n        totalLeftValue = left.asset.value;\\n        totalRightValue = right.asset.value;\\n\\n        if (feeSide == LibFeeSide.FeeSide.LEFT) {\\n            totalLeftValue = doTransfersWithFees(left, right, protocolFee);\\n            transferPayouts(right.asset.assetType, right.asset.value, right.from, left.payouts, right.proxy);\\n        } else if (feeSide == LibFeeSide.FeeSide.RIGHT) {\\n            totalRightValue = doTransfersWithFees(right, left,protocolFee);\\n            transferPayouts(left.asset.assetType, left.asset.value, left.from, right.payouts, left.proxy);\\n        } else {\\n            transferPayouts(left.asset.assetType, left.asset.value, left.from, right.payouts, left.proxy);\\n            transferPayouts(right.asset.assetType, right.asset.value, right.from, left.payouts, right.proxy);\\n        }\\n    }\\n\\n    /**\\n        @notice executes the fee-side transfers (payment + fees)\\n        @param paymentSide DealSide of the fee-side order\\n        @param nftSide  DealSide of the nft-side order\\n        @param _protocolFee protocol fee data\\n        @return totalAmount of fee-side asset\\n    */\\n    function doTransfersWithFees(\\n        LibDeal.DealSide memory paymentSide,\\n        LibDeal.DealSide memory nftSide,\\n        ProtocolFeeData memory _protocolFee\\n    ) internal returns (uint totalAmount) {\\n        uint buyerProtocolFee = paymentSide.protocolFeeEnabled ? _protocolFee.buyerAmount : 0;\\n        uint sellerProtocolFee = nftSide.protocolFeeEnabled ? _protocolFee.sellerAmount : 0;\\n        totalAmount = calculateTotalAmount(paymentSide.asset.value, buyerProtocolFee, paymentSide.originFees);\\n        uint rest = transferProtocolFee(totalAmount, paymentSide.asset.value, paymentSide.from, buyerProtocolFee + sellerProtocolFee, _protocolFee.receiver, paymentSide.asset.assetType, paymentSide.proxy);\\n\\n        rest = transferRoyalties(paymentSide.asset.assetType, nftSide.asset.assetType, nftSide.payouts, rest, paymentSide.asset.value, paymentSide.from, paymentSide.proxy);\\n        if (\\n            paymentSide.originFees.length  == 1 &&\\n            nftSide.originFees.length  == 1 &&\\n            nftSide.originFees[0].account == paymentSide.originFees[0].account\\n        ) { \\n            LibPart.Part[] memory origin = new  LibPart.Part[](1);\\n            origin[0].account = nftSide.originFees[0].account;\\n            origin[0].value = nftSide.originFees[0].value + paymentSide.originFees[0].value;\\n            (rest,) = transferFees(paymentSide.asset.assetType, rest, paymentSide.asset.value, origin, paymentSide.from, paymentSide.proxy);\\n        } else {\\n            (rest,) = transferFees(paymentSide.asset.assetType, rest, paymentSide.asset.value, paymentSide.originFees, paymentSide.from, paymentSide.proxy);\\n            (rest,) = transferFees(paymentSide.asset.assetType, rest, paymentSide.asset.value, nftSide.originFees, paymentSide.from, paymentSide.proxy);\\n        }\\n        transferPayouts(paymentSide.asset.assetType, rest, paymentSide.from, nftSide.payouts, paymentSide.proxy);\\n    }\\n\\n    /**\\n        @notice transfers protocol fee to protocol fee receiver\\n    */\\n    function transferProtocolFee(\\n        uint totalAmount,\\n        uint amount,\\n        address from,\\n        uint protocolFeeTotal,\\n        address protocolFeeReceiver,\\n        LibAsset.AssetType memory matchCalculate,\\n        address proxy\\n    ) internal returns (uint) {\\n        (uint rest, uint fee) = subFeeInBp(totalAmount, amount, protocolFeeTotal);\\n        if (fee > 0) {\\n            transfer(LibAsset.Asset(matchCalculate, fee), from, protocolFeeReceiver, proxy);\\n        }\\n        return rest;\\n    }\\n\\n    /**\\n        @notice Transfer royalties. If there is only one royalties receiver and one address in payouts and they match,\\n           nothing is transferred in this function\\n        @param paymentAssetType Asset Type which represents payment\\n        @param nftAssetType Asset Type which represents NFT to pay royalties for\\n        @param payouts Payouts to be made\\n        @param rest How much of the amount left after previous transfers\\n        @param from owner of the Asset to transfer\\n        @param proxy Transfer proxy to use\\n        @return How much left after transferring royalties\\n    */\\n    function transferRoyalties(\\n        LibAsset.AssetType memory paymentAssetType,\\n        LibAsset.AssetType memory nftAssetType,\\n        LibPart.Part[] memory payouts,\\n        uint rest,\\n        uint amount,\\n        address from,\\n        address proxy\\n    ) internal returns (uint) {\\n        LibPart.Part[] memory royalties = getRoyaltiesByAssetType(nftAssetType);\\n        if (\\n            royalties.length == 1 &&\\n            payouts.length == 1 &&\\n            royalties[0].account == payouts[0].account\\n        ) {\\n            require(royalties[0].value <= 5000, \\\"Royalties are too high (>50%)\\\");\\n            return rest;\\n        }\\n        (uint result, uint totalRoyalties) = transferFees(paymentAssetType, rest, amount, royalties, from, proxy);\\n        require(totalRoyalties <= 5000, \\\"Royalties are too high (>50%)\\\");\\n        return result;\\n    }\\n\\n    /**\\n        @notice calculates royalties by asset type. If it's a lazy NFT, then royalties are extracted from asset. otherwise using royaltiesRegistry\\n        @param nftAssetType NFT Asset Type to calculate royalties for\\n        @return calculated royalties (Array of LibPart.Part)\\n    */\\n    function getRoyaltiesByAssetType(LibAsset.AssetType memory nftAssetType) internal returns (LibPart.Part[] memory) {\\n        if (nftAssetType.assetClass == LibAsset.ERC1155_ASSET_CLASS || nftAssetType.assetClass == LibAsset.ERC721_ASSET_CLASS) {\\n            (address token, uint tokenId) = abi.decode(nftAssetType.data, (address, uint));\\n            return royaltiesRegistry.getRoyalties(token, tokenId);\\n        } else if (nftAssetType.assetClass == LibERC1155LazyMint.ERC1155_LAZY_ASSET_CLASS) {\\n            (, LibERC1155LazyMint.Mint1155Data memory data) = abi.decode(nftAssetType.data, (address, LibERC1155LazyMint.Mint1155Data));\\n            return data.royalties;\\n        } else if (nftAssetType.assetClass == LibERC721LazyMint.ERC721_LAZY_ASSET_CLASS) {\\n            (, LibERC721LazyMint.Mint721Data memory data) = abi.decode(nftAssetType.data, (address, LibERC721LazyMint.Mint721Data));\\n            return data.royalties;\\n        }\\n        LibPart.Part[] memory empty;\\n        return empty;\\n    }\\n\\n    /**\\n        @notice Transfer fees\\n        @param assetType Asset Type to transfer\\n        @param rest How much of the amount left after previous transfers\\n        @param amount Total amount of the Asset. Used as a base to calculate part from (100%)\\n        @param fees Array of LibPart.Part which represents fees to pay\\n        @param from owner of the Asset to transfer\\n        @param proxy Transfer proxy to use\\n        @return newRest how much left after transferring fees\\n        @return totalFees total number of fees in bp\\n    */\\n    function transferFees(\\n        LibAsset.AssetType memory assetType,\\n        uint rest,\\n        uint amount,\\n        LibPart.Part[] memory fees,\\n        address from,\\n        address proxy\\n    ) internal returns (uint newRest, uint totalFees) {\\n        totalFees = 0;\\n        newRest = rest;\\n        for (uint256 i = 0; i < fees.length; ++i) {\\n            totalFees = totalFees.add(fees[i].value);\\n            uint feeValue;\\n            (newRest, feeValue) = subFeeInBp(newRest, amount, fees[i].value);\\n            if (feeValue > 0) {\\n                transfer(LibAsset.Asset(assetType, feeValue), from, fees[i].account, proxy);\\n            }\\n        }\\n    }\\n\\n    /**\\n        @notice transfers main part of the asset (payout)\\n        @param assetType Asset Type to transfer\\n        @param amount Amount of the asset to transfer\\n        @param from Current owner of the asset\\n        @param payouts List of payouts - receivers of the Asset\\n        @param proxy Transfer Proxy to use\\n    */\\n    function transferPayouts(\\n        LibAsset.AssetType memory assetType,\\n        uint amount,\\n        address from,\\n        LibPart.Part[] memory payouts,\\n        address proxy\\n    ) internal {\\n        require(payouts.length > 0, \\\"transferPayouts: nothing to transfer\\\");\\n        uint sumBps = 0;\\n        uint rest = amount;\\n        for (uint256 i = 0; i < payouts.length - 1; ++i) {\\n            uint currentAmount = amount.bp(payouts[i].value);\\n            sumBps = sumBps.add(payouts[i].value);\\n            if (currentAmount > 0) {\\n                rest = rest.sub(currentAmount);\\n                transfer(LibAsset.Asset(assetType, currentAmount), from, payouts[i].account, proxy);\\n            }\\n        }\\n        LibPart.Part memory lastPayout = payouts[payouts.length - 1];\\n        sumBps = sumBps.add(lastPayout.value);\\n        require(sumBps == 10000, \\\"Sum payouts Bps not equal 100%\\\");\\n        if (rest > 0) {\\n            transfer(LibAsset.Asset(assetType, rest), from, lastPayout.account, proxy);\\n        }\\n    }\\n    \\n    /**\\n        @notice calculates total amount of fee-side asset that is going to be used in match\\n        @param amount fee-side order value\\n        @param buyerProtocolFee buyer protocol fee\\n        @param orderOriginFees fee-side order's origin fee (it adds on top of the amount)\\n        @return total amount of fee-side asset\\n    */\\n    function calculateTotalAmount(\\n        uint amount,\\n        uint buyerProtocolFee,\\n        LibPart.Part[] memory orderOriginFees\\n    ) internal pure returns (uint) {\\n        \\n        uint fees = buyerProtocolFee;\\n        for (uint256 i = 0; i < orderOriginFees.length; ++i) {\\n            require(orderOriginFees[i].value <= 10000, \\\"origin fee is too big\\\");\\n            fees = fees + orderOriginFees[i].value;\\n        }\\n\\n        return amount.add(amount.bp(fees));\\n    }\\n\\n    function subFeeInBp(uint value, uint total, uint feeInBp) internal pure returns (uint newValue, uint realFee) {\\n        return subFee(value, total.bp(feeInBp));\\n    }\\n\\n    function subFee(uint value, uint fee) internal pure returns (uint newValue, uint realFee) {\\n        if (value > fee) {\\n            newValue = value.sub(fee);\\n            realFee = fee;\\n        } else {\\n            newValue = 0;\\n            realFee = value;\\n        }\\n    }\\n\\n    uint256[46] private __gap;\\n}\\n\",\"keccak256\":\"0x26817b8e94229124aa1298725cc122d23ee26ca5d63effc935910aa962fe4a83\",\"license\":\"MIT\"},\"@rarible/transfer-manager/contracts/TransferExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@rarible/exchange-interfaces/contracts/ITransferProxy.sol\\\";\\nimport \\\"@rarible/exchange-interfaces/contracts/INftTransferProxy.sol\\\";\\nimport \\\"@rarible/exchange-interfaces/contracts/IERC20TransferProxy.sol\\\";\\nimport \\\"./interfaces/ITransferExecutor.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport \\\"./lib/LibTransfer.sol\\\";\\n\\nabstract contract TransferExecutor is Initializable, OwnableUpgradeable, ITransferExecutor {\\n    using LibTransfer for address;\\n\\n    mapping (bytes4 => address) internal proxies;\\n\\n    event ProxyChange(bytes4 indexed assetType, address proxy);\\n\\n    function __TransferExecutor_init_unchained(address transferProxy, address erc20TransferProxy) internal { \\n        proxies[LibAsset.ERC20_ASSET_CLASS] = address(erc20TransferProxy);\\n        proxies[LibAsset.ERC721_ASSET_CLASS] = address(transferProxy);\\n        proxies[LibAsset.ERC1155_ASSET_CLASS] = address(transferProxy);\\n    }\\n\\n    function setTransferProxy(bytes4 assetType, address proxy) external onlyOwner {\\n        proxies[assetType] = proxy;\\n        emit ProxyChange(assetType, proxy);\\n    }\\n\\n    function transfer(\\n        LibAsset.Asset memory asset,\\n        address from,\\n        address to,\\n        address proxy\\n    ) internal override {\\n        if (asset.assetType.assetClass == LibAsset.ERC721_ASSET_CLASS) {\\n            //not using transfer proxy when transfering from this contract\\n            (address token, uint tokenId) = abi.decode(asset.assetType.data, (address, uint256));\\n            require(asset.value == 1, \\\"erc721 value error\\\");\\n            if (from == address(this)){\\n                IERC721Upgradeable(token).safeTransferFrom(address(this), to, tokenId);\\n            } else {\\n                INftTransferProxy(proxy).erc721safeTransferFrom(IERC721Upgradeable(token), from, to, tokenId);\\n            }\\n        } else if (asset.assetType.assetClass == LibAsset.ERC20_ASSET_CLASS) {\\n            //not using transfer proxy when transfering from this contract\\n            (address token) = abi.decode(asset.assetType.data, (address));\\n            if (from == address(this)){\\n                require(IERC20Upgradeable(token).transfer(to, asset.value), \\\"erc20 transfer failed\\\");\\n            } else {\\n                IERC20TransferProxy(proxy).erc20safeTransferFrom(IERC20Upgradeable(token), from, to, asset.value);\\n            }\\n        } else if (asset.assetType.assetClass == LibAsset.ERC1155_ASSET_CLASS) {\\n            //not using transfer proxy when transfering from this contract\\n            (address token, uint tokenId) = abi.decode(asset.assetType.data, (address, uint256));\\n            if (from == address(this)){\\n                IERC1155Upgradeable(token).safeTransferFrom(address(this), to, tokenId, asset.value, \\\"\\\");\\n            } else {\\n                INftTransferProxy(proxy).erc1155safeTransferFrom(IERC1155Upgradeable(token), from, to, tokenId, asset.value, \\\"\\\");  \\n            }\\n        } else if (asset.assetType.assetClass == LibAsset.ETH_ASSET_CLASS) {\\n            if (to != address(this)) {\\n                to.transferEth(asset.value);\\n            }\\n        } else {\\n            ITransferProxy(proxy).transfer(asset, from, to);\\n        }\\n    }\\n    \\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x5e982ad688493d9c729757c2ebd98efecd0bf3b33992f7342edf6c349874b86c\",\"license\":\"MIT\"},\"@rarible/transfer-manager/contracts/interfaces/ITransferExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@rarible/lib-asset/contracts/LibAsset.sol\\\";\\n\\nabstract contract ITransferExecutor {\\n    function transfer(\\n        LibAsset.Asset memory asset,\\n        address from,\\n        address to,\\n        address proxy\\n    ) internal virtual;\\n}\\n\",\"keccak256\":\"0xe7f4318d4576876f4fbc273f3602aa0973bc2c63d393b2764789edc8f8508b7d\",\"license\":\"MIT\"},\"@rarible/transfer-manager/contracts/interfaces/ITransferManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"../lib/LibDeal.sol\\\";\\nimport \\\"./ITransferExecutor.sol\\\";\\n\\nabstract contract ITransferManager is ITransferExecutor {\\n\\n    function doTransfers(\\n        LibDeal.DealSide memory left,\\n        LibDeal.DealSide memory right,\\n        LibFeeSide.FeeSide feeSide\\n    ) internal virtual returns (uint totalMakeValue, uint totalTakeValue);\\n}\",\"keccak256\":\"0x4ee97ebeee379c623507e56833b644ff6c3ef96f5a7ee5cc92ec191a13c3505e\",\"license\":\"MIT\"},\"@rarible/transfer-manager/contracts/lib/LibDeal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@rarible/lib-part/contracts/LibPart.sol\\\";\\nimport \\\"@rarible/lib-asset/contracts/LibAsset.sol\\\";\\nimport \\\"./LibFeeSide.sol\\\";\\n\\nlibrary LibDeal {\\n    struct DealSide {\\n        LibAsset.Asset asset;\\n        LibPart.Part[] payouts;\\n        LibPart.Part[] originFees;\\n        address proxy;\\n        address from;\\n        bool protocolFeeEnabled;\\n    }\\n}\\n\",\"keccak256\":\"0xa547c45c10324eb0ffa9bcc246406a88f9a07cbf198c5df5832544f27495b0e3\",\"license\":\"MIT\"},\"@rarible/transfer-manager/contracts/lib/LibFeeSide.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@rarible/lib-asset/contracts/LibAsset.sol\\\";\\n\\nlibrary LibFeeSide {\\n\\n    enum FeeSide {NONE, LEFT, RIGHT}\\n\\n    function getFeeSide(bytes4 leftClass, bytes4 rightClass) internal pure returns (FeeSide) {\\n        if (leftClass == LibAsset.ETH_ASSET_CLASS) {\\n            return FeeSide.LEFT;\\n        }\\n        if (rightClass == LibAsset.ETH_ASSET_CLASS) {\\n            return FeeSide.RIGHT;\\n        }\\n        if (leftClass == LibAsset.ERC20_ASSET_CLASS) {\\n            return FeeSide.LEFT;\\n        }\\n        if (rightClass == LibAsset.ERC20_ASSET_CLASS) {\\n            return FeeSide.RIGHT;\\n        }\\n        if (leftClass == LibAsset.ERC1155_ASSET_CLASS) {\\n            return FeeSide.LEFT;\\n        }\\n        if (rightClass == LibAsset.ERC1155_ASSET_CLASS) {\\n            return FeeSide.RIGHT;\\n        }\\n        return FeeSide.NONE;\\n    }\\n}\\n\",\"keccak256\":\"0xbbb3298e900bd2b0b5bc934fb3e006ff876b8fae6310675e82d35e949e1c039b\",\"license\":\"MIT\"},\"@rarible/transfer-manager/contracts/lib/LibTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nlibrary LibTransfer {\\n    function transferEth(address to, uint value) internal {\\n        (bool success,) = to.call{ value: value }(\\\"\\\");\\n        require(success, \\\"transfer failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x01cf87ba2ef274b5fa9d75731912b5a81eb1a50a870bf975288c65596cad2c85\",\"license\":\"MIT\"}},\"version\":1}",
      "storageLayout": {
        "storage": [
          {
            "astId": 1047,
            "contract": "@rarible/exchange-v2/contracts/ExchangeMetaV2.sol:ExchangeMetaV2",
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1050,
            "contract": "@rarible/exchange-v2/contracts/ExchangeMetaV2.sol:ExchangeMetaV2",
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 2427,
            "contract": "@rarible/exchange-v2/contracts/ExchangeMetaV2.sol:ExchangeMetaV2",
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage"
          },
          {
            "astId": 318,
            "contract": "@rarible/exchange-v2/contracts/ExchangeMetaV2.sol:ExchangeMetaV2",
            "label": "_owner",
            "offset": 0,
            "slot": "51",
            "type": "t_address"
          },
          {
            "astId": 437,
            "contract": "@rarible/exchange-v2/contracts/ExchangeMetaV2.sol:ExchangeMetaV2",
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage"
          },
          {
            "astId": 5500,
            "contract": "@rarible/exchange-v2/contracts/ExchangeMetaV2.sol:ExchangeMetaV2",
            "label": "matchers",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes4,t_address)"
          },
          {
            "astId": 5746,
            "contract": "@rarible/exchange-v2/contracts/ExchangeMetaV2.sol:ExchangeMetaV2",
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage"
          },
          {
            "astId": 24309,
            "contract": "@rarible/exchange-v2/contracts/ExchangeMetaV2.sol:ExchangeMetaV2",
            "label": "proxies",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes4,t_address)"
          },
          {
            "astId": 24606,
            "contract": "@rarible/exchange-v2/contracts/ExchangeMetaV2.sol:ExchangeMetaV2",
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage"
          },
          {
            "astId": 446,
            "contract": "@rarible/exchange-v2/contracts/ExchangeMetaV2.sol:ExchangeMetaV2",
            "label": "_HASHED_NAME",
            "offset": 0,
            "slot": "201",
            "type": "t_bytes32"
          },
          {
            "astId": 448,
            "contract": "@rarible/exchange-v2/contracts/ExchangeMetaV2.sol:ExchangeMetaV2",
            "label": "_HASHED_VERSION",
            "offset": 0,
            "slot": "202",
            "type": "t_bytes32"
          },
          {
            "astId": 597,
            "contract": "@rarible/exchange-v2/contracts/ExchangeMetaV2.sol:ExchangeMetaV2",
            "label": "__gap",
            "offset": 0,
            "slot": "203",
            "type": "t_array(t_uint256)50_storage"
          },
          {
            "astId": 6972,
            "contract": "@rarible/exchange-v2/contracts/ExchangeMetaV2.sol:ExchangeMetaV2",
            "label": "__gap",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)50_storage"
          },
          {
            "astId": 5900,
            "contract": "@rarible/exchange-v2/contracts/ExchangeMetaV2.sol:ExchangeMetaV2",
            "label": "fills",
            "offset": 0,
            "slot": "303",
            "type": "t_mapping(t_bytes32,t_uint256)"
          },
          {
            "astId": 6836,
            "contract": "@rarible/exchange-v2/contracts/ExchangeMetaV2.sol:ExchangeMetaV2",
            "label": "__gap",
            "offset": 0,
            "slot": "304",
            "type": "t_array(t_uint256)49_storage"
          },
          {
            "astId": 23217,
            "contract": "@rarible/exchange-v2/contracts/ExchangeMetaV2.sol:ExchangeMetaV2",
            "label": "protocolFee",
            "offset": 0,
            "slot": "353",
            "type": "t_struct(ProtocolFeeData)23253_storage"
          },
          {
            "astId": 23219,
            "contract": "@rarible/exchange-v2/contracts/ExchangeMetaV2.sol:ExchangeMetaV2",
            "label": "royaltiesRegistry",
            "offset": 0,
            "slot": "354",
            "type": "t_contract(IRoyaltiesProvider)5469"
          },
          {
            "astId": 23221,
            "contract": "@rarible/exchange-v2/contracts/ExchangeMetaV2.sol:ExchangeMetaV2",
            "label": "defaultFeeReceiver",
            "offset": 0,
            "slot": "355",
            "type": "t_address"
          },
          {
            "astId": 23225,
            "contract": "@rarible/exchange-v2/contracts/ExchangeMetaV2.sol:ExchangeMetaV2",
            "label": "feeReceivers",
            "offset": 0,
            "slot": "356",
            "type": "t_mapping(t_address,t_address)"
          },
          {
            "astId": 24285,
            "contract": "@rarible/exchange-v2/contracts/ExchangeMetaV2.sol:ExchangeMetaV2",
            "label": "__gap",
            "offset": 0,
            "slot": "357",
            "type": "t_array(t_uint256)46_storage"
          },
          {
            "astId": 11820,
            "contract": "@rarible/exchange-v2/contracts/ExchangeMetaV2.sol:ExchangeMetaV2",
            "label": "nonces",
            "offset": 0,
            "slot": "403",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 11822,
            "contract": "@rarible/exchange-v2/contracts/ExchangeMetaV2.sol:ExchangeMetaV2",
            "label": "domainSeparator",
            "offset": 0,
            "slot": "404",
            "type": "t_bytes32"
          }
        ],
        "types": {
          "t_address": {
            "encoding": "inplace",
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)46_storage": {
            "base": "t_uint256",
            "encoding": "inplace",
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)49_storage": {
            "base": "t_uint256",
            "encoding": "inplace",
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "base": "t_uint256",
            "encoding": "inplace",
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "encoding": "inplace",
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "encoding": "inplace",
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_bytes4": {
            "encoding": "inplace",
            "label": "bytes4",
            "numberOfBytes": "4"
          },
          "t_contract(IRoyaltiesProvider)5469": {
            "encoding": "inplace",
            "label": "contract IRoyaltiesProvider",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_address)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => address)",
            "numberOfBytes": "32",
            "value": "t_address"
          },
          "t_mapping(t_address,t_uint256)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32",
            "value": "t_uint256"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "encoding": "mapping",
            "key": "t_bytes32",
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32",
            "value": "t_uint256"
          },
          "t_mapping(t_bytes4,t_address)": {
            "encoding": "mapping",
            "key": "t_bytes4",
            "label": "mapping(bytes4 => address)",
            "numberOfBytes": "32",
            "value": "t_address"
          },
          "t_struct(ProtocolFeeData)23253_storage": {
            "encoding": "inplace",
            "label": "struct RaribleTransferManager.ProtocolFeeData",
            "members": [
              {
                "astId": 23248,
                "contract": "@rarible/exchange-v2/contracts/ExchangeMetaV2.sol:ExchangeMetaV2",
                "label": "receiver",
                "offset": 0,
                "slot": "0",
                "type": "t_address"
              },
              {
                "astId": 23250,
                "contract": "@rarible/exchange-v2/contracts/ExchangeMetaV2.sol:ExchangeMetaV2",
                "label": "buyerAmount",
                "offset": 20,
                "slot": "0",
                "type": "t_uint48"
              },
              {
                "astId": 23252,
                "contract": "@rarible/exchange-v2/contracts/ExchangeMetaV2.sol:ExchangeMetaV2",
                "label": "sellerAmount",
                "offset": 26,
                "slot": "0",
                "type": "t_uint48"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "encoding": "inplace",
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint48": {
            "encoding": "inplace",
            "label": "uint48",
            "numberOfBytes": "6"
          }
        }
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n    using AddressUpgradeable for address;\\n\\n    struct RoleData {\\n        EnumerableSetUpgradeable.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal initializer {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal initializer {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(bytes32 typeHash, bytes32 name, bytes32 version) private view returns (bytes32) {\\n        return keccak256(\\n            abi.encode(\\n                typeHash,\\n                name,\\n                version,\\n                _getChainId(),\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", _domainSeparatorV4(), structHash));\\n    }\\n\\n    function _getChainId() private view returns (uint256 chainId) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            chainId := chainid()\\n        }\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155ReceiverUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155ReceiverUpgradeable is Initializable, ERC165Upgradeable, IERC1155ReceiverUpgradeable {\\n    function __ERC1155Receiver_init() internal initializer {\\n        __ERC165_init_unchained();\\n        __ERC1155Receiver_init_unchained();\\n    }\\n\\n    function __ERC1155Receiver_init_unchained() internal initializer {\\n        _registerInterface(\\n            ERC1155ReceiverUpgradeable(address(0)).onERC1155Received.selector ^\\n            ERC1155ReceiverUpgradeable(address(0)).onERC1155BatchReceived.selector\\n        );\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155MetadataURIUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"../../math/SafeMathUpgradeable.sol\\\";\\nimport \\\"../../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {\\n    using SafeMathUpgradeable for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n    uint256[44] private __gap;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721EnumerableUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721MetadataUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/utils/EnumerableMapUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\\n * supported.\\n */\\nlibrary EnumerableMapUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct MapEntry {\\n        bytes32 _key;\\n        bytes32 _value;\\n    }\\n\\n    struct Map {\\n        // Storage of map keys and values\\n        MapEntry[] _entries;\\n\\n        // Position of the entry defined by a key in the `entries` array, plus 1\\n        // because index 0 means a key is not in the map.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex == 0) { // Equivalent to !contains(map, key)\\n            map._entries.push(MapEntry({ _key: key, _value: value }));\\n            // The entry is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            map._indexes[key] = map._entries.length;\\n            return true;\\n        } else {\\n            map._entries[keyIndex - 1]._value = value;\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex != 0) { // Equivalent to contains(map, key)\\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\\n            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = keyIndex - 1;\\n            uint256 lastIndex = map._entries.length - 1;\\n\\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            MapEntry storage lastEntry = map._entries[lastIndex];\\n\\n            // Move the last entry to the index where the entry to delete is\\n            map._entries[toDeleteIndex] = lastEntry;\\n            // Update the index for the moved entry\\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved entry was stored\\n            map._entries.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete map._indexes[key];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\n        return map._indexes[key] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._entries.length;\\n    }\\n\\n   /**\\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of entries inside the\\n    * array, and it may change when more entries are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\n        require(map._entries.length > index, \\\"EnumerableMap: index out of bounds\\\");\\n\\n        MapEntry storage entry = map._entries[index];\\n        return (entry._key, entry._value);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        if (keyIndex == 0) return (false, 0); // Equivalent to contains(map, key)\\n        return (true, map._entries[keyIndex - 1]._value); // All indexes are 1-based\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        require(keyIndex != 0, \\\"EnumerableMap: nonexistent key\\\"); // Equivalent to contains(map, key)\\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\n     */\\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return _remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return _contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the element stored at position `index` in the set. O(1).\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/utils/EnumerableSetUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        uint256 index = digits - 1;\\n        temp = value;\\n        while (temp != 0) {\\n            buffer[index--] = bytes1(uint8(48 + temp % 10));\\n            temp /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/introspection/ERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    constructor () internal {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/introspection/IERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/proxy/BeaconProxy.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Proxy.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"./IBeacon.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that gets the implementation address for each call from a {UpgradeableBeacon}.\\n *\\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\\n * conflict with the storage layout of the implementation behind the proxy.\\n *\\n * _Available since v3.4._\\n */\\ncontract BeaconProxy is Proxy {\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 private constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Initializes the proxy with `beacon`.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\\n     * will typically be an encoded function call, and allows initializating the storage of the proxy like a Solidity\\n     * constructor.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract with the interface {IBeacon}.\\n     */\\n    constructor(address beacon, bytes memory data) public payable {\\n        assert(_BEACON_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.beacon\\\")) - 1));\\n        _setBeacon(beacon, data);\\n    }\\n\\n    /**\\n     * @dev Returns the current beacon address.\\n     */\\n    function _beacon() internal view virtual returns (address beacon) {\\n        bytes32 slot = _BEACON_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            beacon := sload(slot)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address of the associated beacon.\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return IBeacon(_beacon()).implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the proxy to use a new beacon.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract.\\n     * - The implementation returned by `beacon` must be a contract.\\n     */\\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\\n        require(\\n            Address.isContract(beacon),\\n            \\\"BeaconProxy: beacon is not a contract\\\"\\n        );\\n        require(\\n            Address.isContract(IBeacon(beacon).implementation()),\\n            \\\"BeaconProxy: beacon implementation is not a contract\\\"\\n        );\\n        bytes32 slot = _BEACON_SLOT;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, beacon)\\n        }\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(_implementation(), data, \\\"BeaconProxy: function call failed\\\");\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/proxy/IBeacon.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/proxy/Proxy.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 { revert(0, returndatasize()) }\\n            default { return(0, returndatasize()) }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback () external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive () external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/proxy/ProxyAdmin.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../access/Ownable.sol\\\";\\nimport \\\"./TransparentUpgradeableProxy.sol\\\";\\n\\n/**\\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\\n */\\ncontract ProxyAdmin is Ownable {\\n\\n    /**\\n     * @dev Returns the current implementation of `proxy`.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function getProxyImplementation(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\\n        // We need to manually run the static call since the getter cannot be flagged as view\\n        // bytes4(keccak256(\\\"implementation()\\\")) == 0x5c60da1b\\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\\\"5c60da1b\\\");\\n        require(success);\\n        return abi.decode(returndata, (address));\\n    }\\n\\n    /**\\n     * @dev Returns the current admin of `proxy`.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function getProxyAdmin(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\\n        // We need to manually run the static call since the getter cannot be flagged as view\\n        // bytes4(keccak256(\\\"admin()\\\")) == 0xf851a440\\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\\\"f851a440\\\");\\n        require(success);\\n        return abi.decode(returndata, (address));\\n    }\\n\\n    /**\\n     * @dev Changes the admin of `proxy` to `newAdmin`.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the current admin of `proxy`.\\n     */\\n    function changeProxyAdmin(TransparentUpgradeableProxy proxy, address newAdmin) public virtual onlyOwner {\\n        proxy.changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function upgrade(TransparentUpgradeableProxy proxy, address implementation) public virtual onlyOwner {\\n        proxy.upgradeTo(implementation);\\n    }\\n\\n    /**\\n     * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation. See\\n     * {TransparentUpgradeableProxy-upgradeToAndCall}.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function upgradeAndCall(TransparentUpgradeableProxy proxy, address implementation, bytes memory data) public payable virtual onlyOwner {\\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./UpgradeableProxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is UpgradeableProxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {UpgradeableProxy-constructor}.\\n     */\\n    constructor(address _logic, address admin_, bytes memory _data) public payable UpgradeableProxy(_logic, _data) {\\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n        _setAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 private constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _admin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address admin_) {\\n        admin_ = _admin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address implementation_) {\\n        implementation_ = _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\n        require(newAdmin != address(0), \\\"TransparentUpgradeableProxy: new admin is the zero address\\\");\\n        emit AdminChanged(_admin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external virtual ifAdmin {\\n        _upgradeTo(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable virtual ifAdmin {\\n        _upgradeTo(newImplementation);\\n        Address.functionDelegateCall(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view virtual returns (address adm) {\\n        bytes32 slot = _ADMIN_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            adm := sload(slot)\\n        }\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        bytes32 slot = _ADMIN_SLOT;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, newAdmin)\\n        }\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal virtual override {\\n        require(msg.sender != _admin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/proxy/UpgradeableBeacon.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IBeacon.sol\\\";\\nimport \\\"../access/Ownable.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\\n * implementation contract, which is where they will delegate all function calls.\\n *\\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\\n */\\ncontract UpgradeableBeacon is IBeacon, Ownable {\\n    address private _implementation;\\n\\n    /**\\n     * @dev Emitted when the implementation returned by the beacon is changed.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\\n     * beacon.\\n     */\\n    constructor(address implementation_) public {\\n        _setImplementation(implementation_);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function implementation() public view virtual override returns (address) {\\n        return _implementation;\\n    }\\n\\n    /**\\n     * @dev Upgrades the beacon to a new implementation.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * Requirements:\\n     *\\n     * - msg.sender must be the owner of the contract.\\n     * - `newImplementation` must be a contract.\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Sets the implementation contract address for this beacon\\n     *\\n     * Requirements:\\n     *\\n     * - `newImplementation` must be a contract.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"UpgradeableBeacon: implementation is not a contract\\\");\\n        _implementation = newImplementation;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/proxy/UpgradeableProxy.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Proxy.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n *\\n * Upgradeability is only provided internally through {_upgradeTo}. For an externally upgradeable proxy see\\n * {TransparentUpgradeableProxy}.\\n */\\ncontract UpgradeableProxy is Proxy {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) public payable {\\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n        _setImplementation(_logic);\\n        if(_data.length > 0) {\\n            Address.functionDelegateCall(_logic, _data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 private constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        bytes32 slot = _IMPLEMENTATION_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            impl := sload(slot)\\n        }\\n    }\\n\\n    /**\\n     * @dev Upgrades the proxy to a new implementation.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal virtual {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"UpgradeableProxy: new implementation is not a contract\\\");\\n\\n        bytes32 slot = _IMPLEMENTATION_SLOT;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, newImplementation)\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC1155/ERC1155Holder.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC1155/ERC1155Receiver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"../../introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    constructor() internal {\\n        _registerInterface(\\n            ERC1155Receiver(address(0)).onERC1155Received.selector ^\\n            ERC1155Receiver(address(0)).onERC1155BatchReceived.selector\\n        );\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/ERC721Holder.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC721Receiver.sol\\\";\\n\\n  /**\\n   * @dev Implementation of the {IERC721Receiver} interface.\\n   *\\n   * Accepts all token transfers. \\n   * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n   */\\ncontract ERC721Holder is IERC721Receiver {\\n\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Address.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Context.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\n    },\n    \"@rarible/custom-matchers/contracts/AssetMatcherCollection.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@rarible/exchange-interfaces/contracts/IAssetMatcher.sol\\\";\\nimport \\\"@rarible/lazy-mint/contracts/erc-721/LibERC721LazyMint.sol\\\";\\nimport \\\"@rarible/lazy-mint/contracts/erc-1155/LibERC1155LazyMint.sol\\\";\\n\\n/*\\n * Custom matcher for collection (assetClass, that need any/all elements from collection)\\n */\\ncontract AssetMatcherCollection is IAssetMatcher {\\n\\n    bytes constant EMPTY = \\\"\\\";\\n\\n    function matchAssets(LibAsset.AssetType memory leftAssetType, LibAsset.AssetType memory rightAssetType) external view override returns (LibAsset.AssetType memory) {\\n        if (\\n            (rightAssetType.assetClass == LibAsset.ERC721_ASSET_CLASS) || \\n            (rightAssetType.assetClass == LibERC721LazyMint.ERC721_LAZY_ASSET_CLASS) ||\\n            (rightAssetType.assetClass == LibAsset.ERC1155_ASSET_CLASS) || \\n            (rightAssetType.assetClass == LibERC1155LazyMint.ERC1155_LAZY_ASSET_CLASS) ||\\n            (rightAssetType.assetClass == LibAsset.CRYPTO_PUNKS)\\n        ) {\\n          (address leftToken) = abi.decode(leftAssetType.data, (address));\\n          (address rightToken,) = abi.decode(rightAssetType.data, (address, uint));\\n          if (leftToken == rightToken) {\\n              return LibAsset.AssetType(rightAssetType.assetClass, rightAssetType.data);\\n          }\\n        }\\n        return LibAsset.AssetType(0, EMPTY);\\n    }\\n}\"\n    },\n    \"@rarible/exchange-interfaces/contracts/IAssetMatcher.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@rarible/lib-asset/contracts/LibAsset.sol\\\";\\n\\ninterface IAssetMatcher {\\n    function matchAssets(\\n        LibAsset.AssetType memory leftAssetType,\\n        LibAsset.AssetType memory rightAssetType\\n    ) external view returns (LibAsset.AssetType memory);\\n}\\n\"\n    },\n    \"@rarible/exchange-interfaces/contracts/IERC20TransferProxy.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.9 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IERC20TransferProxy {\\n    function erc20safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) external;\\n}\\n\"\n    },\n    \"@rarible/exchange-interfaces/contracts/INftTransferProxy.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.9 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\n\\ninterface INftTransferProxy {\\n    function erc721safeTransferFrom(IERC721Upgradeable token, address from, address to, uint256 tokenId) external;\\n\\n    function erc1155safeTransferFrom(IERC1155Upgradeable token, address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n}\\n\"\n    },\n    \"@rarible/exchange-interfaces/contracts/IRoyaltiesProvider.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@rarible/lib-part/contracts/LibPart.sol\\\";\\n\\ninterface IRoyaltiesProvider {\\n    function getRoyalties(address token, uint tokenId) external returns (LibPart.Part[] memory);\\n}\\n\"\n    },\n    \"@rarible/exchange-interfaces/contracts/ITransferProxy.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.9 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@rarible/lib-asset/contracts/LibAsset.sol\\\";\\n\\ninterface ITransferProxy {\\n    function transfer(LibAsset.Asset calldata asset, address from, address to) external;\\n}\\n\"\n    },\n    \"@rarible/exchange-v2/contracts/AssetMatcher.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@rarible/exchange-interfaces/contracts/IAssetMatcher.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nabstract contract AssetMatcher is Initializable, OwnableUpgradeable {\\n\\n    bytes constant EMPTY = \\\"\\\";\\n    mapping(bytes4 => address) internal matchers;\\n\\n    event MatcherChange(bytes4 indexed assetType, address matcher);\\n\\n    function setAssetMatcher(bytes4 assetType, address matcher) external onlyOwner {\\n        matchers[assetType] = matcher;\\n        emit MatcherChange(assetType, matcher);\\n    }\\n\\n    function matchAssets(LibAsset.AssetType memory leftAssetType, LibAsset.AssetType memory rightAssetType) internal view returns (LibAsset.AssetType memory) {\\n        LibAsset.AssetType memory result = matchAssetOneSide(leftAssetType, rightAssetType);\\n        if (result.assetClass == 0) {\\n            return matchAssetOneSide(rightAssetType, leftAssetType);\\n        } else {\\n            return result;\\n        }\\n    }\\n\\n    function matchAssetOneSide(LibAsset.AssetType memory leftAssetType, LibAsset.AssetType memory rightAssetType) private view returns (LibAsset.AssetType memory) {\\n        bytes4 classLeft = leftAssetType.assetClass;\\n        bytes4 classRight = rightAssetType.assetClass;\\n        if (classLeft == LibAsset.ETH_ASSET_CLASS) {\\n            if (classRight == LibAsset.ETH_ASSET_CLASS) {\\n                return leftAssetType;\\n            }\\n            return LibAsset.AssetType(0, EMPTY);\\n        }\\n        if (classLeft == LibAsset.ERC20_ASSET_CLASS) {\\n            if (classRight == LibAsset.ERC20_ASSET_CLASS) {\\n                return simpleMatch(leftAssetType, rightAssetType);\\n            }\\n            return LibAsset.AssetType(0, EMPTY);\\n        }\\n        if (classLeft == LibAsset.ERC721_ASSET_CLASS) {\\n            if (classRight == LibAsset.ERC721_ASSET_CLASS) {\\n                return simpleMatch(leftAssetType, rightAssetType);\\n            }\\n            return LibAsset.AssetType(0, EMPTY);\\n        }\\n        if (classLeft == LibAsset.ERC1155_ASSET_CLASS) {\\n            if (classRight == LibAsset.ERC1155_ASSET_CLASS) {\\n                return simpleMatch(leftAssetType, rightAssetType);\\n            }\\n            return LibAsset.AssetType(0, EMPTY);\\n        }\\n        address matcher = matchers[classLeft];\\n        if (matcher != address(0)) {\\n            return IAssetMatcher(matcher).matchAssets(leftAssetType, rightAssetType);\\n        }\\n        if (classLeft == classRight) {\\n            return simpleMatch(leftAssetType, rightAssetType);\\n        }\\n        revert(\\\"not found IAssetMatcher\\\");\\n    }\\n\\n    function simpleMatch(LibAsset.AssetType memory leftAssetType, LibAsset.AssetType memory rightAssetType) private pure returns (LibAsset.AssetType memory) {\\n        bytes32 leftHash = keccak256(leftAssetType.data);\\n        bytes32 rightHash = keccak256(rightAssetType.data);\\n        if (leftHash == rightHash) {\\n            return leftAssetType;\\n        }\\n        return LibAsset.AssetType(0, EMPTY);\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\"\n    },\n    \"@rarible/exchange-v2/contracts/ExchangeMetaV2.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./ExchangeV2Core.sol\\\";\\nimport \\\"@rarible/meta-tx/contracts/EIP712MetaTransaction.sol\\\";\\nimport \\\"@rarible/transfer-manager/contracts/RaribleTransferManager.sol\\\";\\n\\ncontract ExchangeMetaV2 is ExchangeV2Core, RaribleTransferManager, EIP712MetaTransaction {\\n    function __ExchangeV2_init(\\n        address _transferProxy,\\n        address _erc20TransferProxy,\\n        uint newProtocolFee,\\n        address newDefaultFeeReceiver,\\n        IRoyaltiesProvider newRoyaltiesProvider\\n    ) external initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n        __OrderValidator_init_unchained();\\n        __MetaTransaction_init_unchained(\\\"ExchangeMetaV2\\\", \\\"1\\\");\\n        __TransferExecutor_init_unchained(_transferProxy, _erc20TransferProxy);\\n        __RaribleTransferManager_init_unchained(newProtocolFee, newDefaultFeeReceiver, newRoyaltiesProvider);\\n    }\\n\\n    function _msgSender() internal view virtual override(ContextUpgradeable, EIP712MetaTransaction) returns (address payable) {\\n        return super._msgSender();\\n    }\\n\\n}\\n\"\n    },\n    \"@rarible/exchange-v2/contracts/ExchangeV2.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./ExchangeV2Core.sol\\\";\\nimport \\\"@rarible/transfer-manager/contracts/RaribleTransferManager.sol\\\";\\n\\ncontract ExchangeV2 is ExchangeV2Core, RaribleTransferManager {\\n    function __ExchangeV2_init(\\n        address _transferProxy,\\n        address _erc20TransferProxy,\\n        uint newProtocolFee,\\n        address newDefaultFeeReceiver,\\n        IRoyaltiesProvider newRoyaltiesProvider\\n    ) external initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n        __TransferExecutor_init_unchained(_transferProxy, _erc20TransferProxy);\\n        __RaribleTransferManager_init_unchained(newProtocolFee, newDefaultFeeReceiver, newRoyaltiesProvider);\\n        __OrderValidator_init_unchained();\\n    }\\n\\n}\\n\"\n    },\n    \"@rarible/exchange-v2/contracts/ExchangeV2Core.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./libraries/LibFill.sol\\\";\\nimport \\\"./libraries/LibOrderData.sol\\\";\\nimport \\\"./libraries/LibDirectTransfer.sol\\\";\\nimport \\\"./OrderValidator.sol\\\";\\nimport \\\"./AssetMatcher.sol\\\";\\n\\nimport \\\"@rarible/transfer-manager/contracts/TransferExecutor.sol\\\";\\nimport \\\"@rarible/transfer-manager/contracts/interfaces/ITransferManager.sol\\\";\\nimport \\\"@rarible/transfer-manager/contracts/lib/LibDeal.sol\\\";\\n\\nabstract contract ExchangeV2Core is Initializable, OwnableUpgradeable, AssetMatcher, TransferExecutor, OrderValidator, ITransferManager {\\n    using SafeMathUpgradeable for uint;\\n    using LibTransfer for address;\\n\\n    uint256 private constant UINT256_MAX = type(uint256).max;\\n\\n    //state of the orders\\n    mapping(bytes32 => uint) public fills;\\n\\n    //events\\n    event Cancel(bytes32 hash);\\n    event Match(bytes32 leftHash, bytes32 rightHash, uint newLeftFill, uint newRightFill);\\n\\n    function cancel(LibOrder.Order memory order) external {\\n        require(_msgSender() == order.maker, \\\"not a maker\\\");\\n        require(order.salt != 0, \\\"0 salt can't be used\\\");\\n        bytes32 orderKeyHash = LibOrder.hashKey(order);\\n        fills[orderKeyHash] = UINT256_MAX;\\n        emit Cancel(orderKeyHash);\\n    }\\n\\n    /**\\n     * @dev function, generate sellOrder and buyOrder from parameters and call validateAndMatch() for purchase transaction\\n \\n    */\\n\\n    function directPurchase(\\n        LibDirectTransfer.Purchase calldata direct\\n    ) external payable{\\n        LibAsset.AssetType memory paymentAssetType = getPaymentAssetType(direct.paymentToken);\\n                \\n        LibOrder.Order memory sellOrder = LibOrder.Order(\\n            direct.sellOrderMaker,\\n            LibAsset.Asset(\\n                LibAsset.AssetType(\\n                    direct.nftAssetClass,\\n                    direct.nftData\\n                ),\\n                direct.sellOrderNftAmount\\n            ),\\n            address(0),\\n            LibAsset.Asset(\\n                paymentAssetType,\\n                direct.sellOrderPaymentAmount\\n            ),\\n            direct.sellOrderSalt,\\n            direct.sellOrderStart,\\n            direct.sellOrderEnd,\\n            direct.sellOrderDataType,\\n            direct.sellOrderData\\n        );\\n\\n        LibOrder.Order memory buyOrder = LibOrder.Order(\\n            address(0),\\n            LibAsset.Asset(\\n                paymentAssetType,\\n                direct.buyOrderPaymentAmount\\n            ),\\n            address(0),\\n            LibAsset.Asset(\\n                LibAsset.AssetType(\\n                    direct.nftAssetClass,\\n                    direct.nftData\\n                ),\\n                direct.buyOrderNftAmount\\n            ),\\n            0,\\n            0,\\n            0,\\n            direct.sellOrderDataType,\\n            direct.buyOrderData\\n        );\\n\\n        validateFull(sellOrder, direct.sellOrderSignature);\\n\\n        matchAndTransfer(sellOrder, buyOrder);\\n    }\\n\\n    /**\\n     * @dev function, generate sellOrder and buyOrder from parameters and call validateAndMatch() for accept bid transaction\\n     * @param direct struct with parameters for accept bid operation\\n     */\\n    function directAcceptBid(\\n        LibDirectTransfer.AcceptBid calldata direct\\n    ) external payable {\\n        LibAsset.AssetType memory paymentAssetType = getPaymentAssetType(direct.paymentToken);\\n\\n        LibOrder.Order memory buyOrder = LibOrder.Order(\\n            direct.bidMaker,\\n            LibAsset.Asset(\\n                paymentAssetType,\\n                direct.bidPaymentAmount\\n            ),\\n            address(0),\\n            LibAsset.Asset(\\n                LibAsset.AssetType(\\n                    direct.nftAssetClass,\\n                    direct.nftData\\n                ),\\n                direct.bidNftAmount\\n            ),\\n            direct.bidSalt,\\n            direct.bidStart,\\n            direct.bidEnd,\\n            direct.bidDataType,\\n            direct.bidData\\n        );\\n\\n        LibOrder.Order memory sellOrder = LibOrder.Order(\\n            address(0),\\n            LibAsset.Asset(\\n                LibAsset.AssetType(\\n                    direct.nftAssetClass,\\n                    direct.nftData\\n                ),\\n                direct.sellOrderNftAmount\\n            ),\\n            address(0),\\n            LibAsset.Asset(\\n                paymentAssetType,\\n                direct.sellOrderPaymentAmount\\n            ),\\n            0,\\n            0,\\n            0,\\n            direct.bidDataType,\\n            direct.sellOrderData\\n        );\\n\\n        validateFull(buyOrder, direct.bidSignature);\\n\\n        matchAndTransfer(sellOrder, buyOrder);\\n    }\\n\\n    function matchOrders(\\n        LibOrder.Order memory orderLeft,\\n        bytes memory signatureLeft,\\n        LibOrder.Order memory orderRight,\\n        bytes memory signatureRight\\n    ) external payable {\\n        validateOrders(orderLeft, signatureLeft, orderRight, signatureRight);\\n        matchAndTransfer(orderLeft, orderRight);\\n    }\\n\\n    /**\\n      * @dev function, validate orders\\n      * @param orderLeft left order\\n      * @param signatureLeft order left signature\\n      * @param orderRight right order\\n      * @param signatureRight order right signature\\n      */\\n    function validateOrders(LibOrder.Order memory orderLeft, bytes memory signatureLeft, LibOrder.Order memory orderRight, bytes memory signatureRight) internal view {\\n        validateFull(orderLeft, signatureLeft);\\n        validateFull(orderRight, signatureRight);\\n        if (orderLeft.taker != address(0)) {\\n            if (orderRight.maker != address(0))\\n                require(orderRight.maker == orderLeft.taker, \\\"leftOrder.taker verification failed\\\");\\n        }\\n        if (orderRight.taker != address(0)) {\\n            if (orderLeft.maker != address(0))\\n                require(orderRight.taker == orderLeft.maker, \\\"rightOrder.taker verification failed\\\");\\n        }\\n    }\\n\\n    /**\\n        @notice matches valid orders and transfers their assets\\n        @param orderLeft the left order of the match\\n        @param orderRight the right order of the match\\n    */\\n    function matchAndTransfer(LibOrder.Order memory orderLeft, LibOrder.Order memory orderRight) internal {\\n        (LibAsset.AssetType memory makeMatch, LibAsset.AssetType memory takeMatch) = matchAssets(orderLeft, orderRight);\\n\\n        (LibOrderData.GenericOrderData memory leftOrderData, LibOrderData.GenericOrderData memory rightOrderData, LibFill.FillResult memory newFill) =\\n            parseOrdersSetFillEmitMatch(orderLeft, orderRight);\\n\\n        (uint totalMakeValue, uint totalTakeValue) = doTransfers(\\n            LibDeal.DealSide({\\n                asset: LibAsset.Asset({\\n                    assetType: makeMatch,\\n                    value: newFill.leftValue\\n                }),\\n                payouts: leftOrderData.payouts,\\n                originFees: leftOrderData.originFees,\\n                proxy: proxies[makeMatch.assetClass],\\n                from: orderLeft.maker,\\n                protocolFeeEnabled: leftOrderData.protocolFeeEnabled\\n            }), \\n            LibDeal.DealSide({\\n                asset: LibAsset.Asset( \\n                    takeMatch,\\n                    newFill.rightValue\\n                ),\\n                payouts: rightOrderData.payouts,\\n                originFees: rightOrderData.originFees,\\n                proxy: proxies[takeMatch.assetClass],\\n                from: orderRight.maker,\\n                protocolFeeEnabled: rightOrderData.protocolFeeEnabled\\n            }),\\n            LibFeeSide.getFeeSide(makeMatch.assetClass, takeMatch.assetClass)\\n        );\\n        if (makeMatch.assetClass == LibAsset.ETH_ASSET_CLASS) {\\n            require(takeMatch.assetClass != LibAsset.ETH_ASSET_CLASS);\\n            require(msg.value >= totalMakeValue, \\\"not enough eth\\\");\\n            if (msg.value > totalMakeValue) {\\n                address(msg.sender).transferEth(msg.value.sub(totalMakeValue));\\n            }\\n        } else if (takeMatch.assetClass == LibAsset.ETH_ASSET_CLASS) {\\n            require(msg.value >= totalTakeValue, \\\"not enough eth\\\");\\n            if (msg.value > totalTakeValue) {\\n                address(msg.sender).transferEth(msg.value.sub(totalTakeValue));\\n            }\\n        }\\n    }\\n\\n    function parseOrdersSetFillEmitMatch(\\n        LibOrder.Order memory orderLeft,\\n        LibOrder.Order memory orderRight\\n    ) internal returns (LibOrderData.GenericOrderData memory leftOrderData, LibOrderData.GenericOrderData memory rightOrderData, LibFill.FillResult memory newFill) {\\n        bytes32 leftOrderKeyHash = LibOrder.hashKey(orderLeft);\\n        bytes32 rightOrderKeyHash = LibOrder.hashKey(orderRight);\\n\\n        address msgSender = _msgSender();\\n        if (orderLeft.maker == address(0)) {\\n            orderLeft.maker = msgSender;\\n        }\\n        if (orderRight.maker == address(0)) {\\n            orderRight.maker = msgSender;\\n        }\\n\\n        leftOrderData = LibOrderData.parse(orderLeft);\\n        rightOrderData = LibOrderData.parse(orderRight);\\n\\n        newFill = setFillEmitMatch(\\n            orderLeft,\\n            orderRight,\\n            leftOrderKeyHash,\\n            rightOrderKeyHash,\\n            leftOrderData.isMakeFill,\\n            rightOrderData.isMakeFill\\n        );\\n    }\\n\\n    /**\\n        @notice calculates fills for the matched orders and set them in \\\"fills\\\" mapping\\n        @param orderLeft left order of the match\\n        @param orderRight right order of the match\\n        @param leftMakeFill true if the left orders uses make-side fills, false otherwise\\n        @param rightMakeFill true if the right orders uses make-side fills, false otherwise\\n        @return returns change in orders' fills by the match \\n    */\\n    function setFillEmitMatch(\\n        LibOrder.Order memory orderLeft,\\n        LibOrder.Order memory orderRight,\\n        bytes32 leftOrderKeyHash,\\n        bytes32 rightOrderKeyHash,\\n        bool leftMakeFill,\\n        bool rightMakeFill\\n    ) internal returns (LibFill.FillResult memory) {\\n        uint leftOrderFill = getOrderFill(orderLeft.salt, leftOrderKeyHash);\\n        uint rightOrderFill = getOrderFill(orderRight.salt, rightOrderKeyHash);\\n        LibFill.FillResult memory newFill = LibFill.fillOrder(orderLeft, orderRight, leftOrderFill, rightOrderFill, leftMakeFill, rightMakeFill);\\n\\n        if (orderLeft.makeAsset.value != 0 || orderRight.takeAsset.value != 0) {\\n            require(newFill.leftValue > 0, \\\"nothing to fill\\\");\\n        }\\n        if (orderLeft.takeAsset.value != 0 || orderRight.makeAsset.value != 0) {\\n            require(newFill.rightValue > 0, \\\"nothing to fill\\\");\\n        }\\n\\n        if (orderLeft.salt != 0) {\\n            if (leftMakeFill) {\\n                fills[leftOrderKeyHash] = leftOrderFill.add(newFill.leftValue);\\n            } else {\\n                fills[leftOrderKeyHash] = leftOrderFill.add(newFill.rightValue);\\n            }\\n        }\\n\\n        if (orderRight.salt != 0) {\\n            if (rightMakeFill) {\\n                fills[rightOrderKeyHash] = rightOrderFill.add(newFill.rightValue);\\n            } else {\\n                fills[rightOrderKeyHash] = rightOrderFill.add(newFill.leftValue);\\n            }\\n        }\\n\\n        emit Match(leftOrderKeyHash, rightOrderKeyHash, newFill.rightValue, newFill.leftValue);\\n\\n        return newFill;\\n    }\\n\\n    function getOrderFill(uint salt, bytes32 hash) internal view returns (uint fill) {\\n        if (salt == 0) {\\n            fill = 0;\\n        } else {\\n            fill = fills[hash];\\n        }\\n    }\\n\\n    function matchAssets(LibOrder.Order memory orderLeft, LibOrder.Order memory orderRight) internal view returns (LibAsset.AssetType memory makeMatch, LibAsset.AssetType memory takeMatch) {\\n        makeMatch = matchAssets(orderLeft.makeAsset.assetType, orderRight.takeAsset.assetType);\\n        require(makeMatch.assetClass != 0, \\\"assets don't match\\\");\\n        takeMatch = matchAssets(orderLeft.takeAsset.assetType, orderRight.makeAsset.assetType);\\n        require(takeMatch.assetClass != 0, \\\"assets don't match\\\");\\n    }\\n\\n    function validateFull(LibOrder.Order memory order, bytes memory signature) internal view {\\n        LibOrder.validateOrderTime(order);\\n        validate(order, signature);\\n    }\\n\\n    function getPaymentAssetType(address token) internal pure returns(LibAsset.AssetType memory){\\n        LibAsset.AssetType memory result;\\n        if(token == address(0)) {\\n            result.assetClass = LibAsset.ETH_ASSET_CLASS;\\n        } else {\\n            result.assetClass = LibAsset.ERC20_ASSET_CLASS;\\n            result.data = abi.encode(token);\\n        }\\n        return result;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\"\n    },\n    \"@rarible/exchange-v2/contracts/libraries/LibDirectTransfer.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@rarible/lib-asset/contracts/LibAsset.sol\\\";\\n\\nlibrary LibDirectTransfer { //LibDirectTransfers\\n    /*All buy parameters need for create buyOrder and sellOrder*/\\n    struct Purchase {\\n        address sellOrderMaker; //\\n        uint256 sellOrderNftAmount;\\n        bytes4 nftAssetClass;\\n        bytes nftData;\\n        uint256 sellOrderPaymentAmount;\\n        address paymentToken;\\n        uint256 sellOrderSalt;\\n        uint sellOrderStart;\\n        uint sellOrderEnd;\\n        bytes4 sellOrderDataType;\\n        bytes sellOrderData;\\n        bytes sellOrderSignature;\\n\\n        uint256 buyOrderPaymentAmount;\\n        uint256 buyOrderNftAmount;\\n        bytes buyOrderData;\\n    }\\n\\n    /*All accept bid parameters need for create buyOrder and sellOrder*/\\n    struct AcceptBid {\\n        address bidMaker; //\\n        uint256 bidNftAmount;\\n        bytes4 nftAssetClass;\\n        bytes nftData;\\n        uint256 bidPaymentAmount;\\n        address paymentToken;\\n        uint256 bidSalt;\\n        uint bidStart;\\n        uint bidEnd;\\n        bytes4 bidDataType;\\n        bytes bidData;\\n        bytes bidSignature;\\n\\n        uint256 sellOrderPaymentAmount;\\n        uint256 sellOrderNftAmount;\\n        bytes sellOrderData;\\n    }\\n}\\n\"\n    },\n    \"@rarible/exchange-v2/contracts/libraries/LibFill.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"./LibOrder.sol\\\";\\n\\nlibrary LibFill {\\n    struct FillResult {\\n        uint leftValue;\\n        uint rightValue;\\n    }\\n\\n    struct IsMakeFill {\\n        bool leftMake;\\n        bool rightMake;\\n    }\\n\\n    /**\\n     * @dev Should return filled values\\n     * @param leftOrder left order\\n     * @param rightOrder right order\\n     * @param leftOrderFill current fill of the left order (0 if order is unfilled)\\n     * @param rightOrderFill current fill of the right order (0 if order is unfilled)\\n     * @param leftIsMakeFill true if left orders fill is calculated from the make side, false if from the take side\\n     * @param rightIsMakeFill true if right orders fill is calculated from the make side, false if from the take side\\n     * @return tuple representing fill of both assets\\n     */\\n    function fillOrder(LibOrder.Order memory leftOrder, LibOrder.Order memory rightOrder, uint leftOrderFill, uint rightOrderFill, bool leftIsMakeFill, bool rightIsMakeFill) internal pure returns (FillResult memory) {\\n        (uint leftMakeValue, uint leftTakeValue) = LibOrder.calculateRemaining(leftOrder, leftOrderFill, leftIsMakeFill);\\n        (uint rightMakeValue, uint rightTakeValue) = LibOrder.calculateRemaining(rightOrder, rightOrderFill, rightIsMakeFill);\\n\\n        //We have 3 cases here:\\n        if (rightTakeValue > leftMakeValue || (rightTakeValue == leftMakeValue && leftMakeValue == 0)) { //1nd: left order should be fully filled\\n            return fillLeft(leftMakeValue, leftTakeValue, rightOrder.makeAsset.value, rightOrder.takeAsset.value);\\n        }//2st: right order should be fully filled or 3d: both should be fully filled if required values are the same\\n        return fillRight(leftOrder.makeAsset.value, leftOrder.takeAsset.value, rightMakeValue, rightTakeValue);\\n    }\\n\\n    function fillRight(uint leftMakeValue, uint leftTakeValue, uint rightMakeValue, uint rightTakeValue) internal pure returns (FillResult memory result) {\\n        uint makerValue = LibMath.safeGetPartialAmountFloor(rightTakeValue, leftMakeValue, leftTakeValue);\\n        require(makerValue <= rightMakeValue, \\\"fillRight: unable to fill\\\");\\n        return FillResult(rightTakeValue, makerValue);\\n    }\\n\\n    function fillLeft(uint leftMakeValue, uint leftTakeValue, uint rightMakeValue, uint rightTakeValue) internal pure returns (FillResult memory result) {\\n        uint rightTake = LibMath.safeGetPartialAmountFloor(leftTakeValue, rightMakeValue, rightTakeValue);\\n        require(rightTake <= leftMakeValue, \\\"fillLeft: unable to fill\\\");\\n        return FillResult(leftMakeValue, leftTakeValue);\\n    }\\n}\\n\"\n    },\n    \"@rarible/exchange-v2/contracts/libraries/LibMath.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\n\\nlibrary LibMath {\\n    using SafeMathUpgradeable for uint;\\n\\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\\n    ///      Reverts if rounding error is >= 0.1%\\n    /// @param numerator Numerator.\\n    /// @param denominator Denominator.\\n    /// @param target Value to calculate partial of.\\n    /// @return partialAmount value of target rounded down.\\n    function safeGetPartialAmountFloor(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    ) internal pure returns (uint256 partialAmount) {\\n        if (isRoundingErrorFloor(numerator, denominator, target)) {\\n            revert(\\\"rounding error\\\");\\n        }\\n        partialAmount = numerator.mul(target).div(denominator);\\n    }\\n\\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\\n    /// @param numerator Numerator.\\n    /// @param denominator Denominator.\\n    /// @param target Value to multiply with numerator/denominator.\\n    /// @return isError Rounding error is present.\\n    function isRoundingErrorFloor(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    ) internal pure returns (bool isError) {\\n        if (denominator == 0) {\\n            revert(\\\"division by zero\\\");\\n        }\\n\\n        // The absolute rounding error is the difference between the rounded\\n        // value and the ideal value. The relative rounding error is the\\n        // absolute rounding error divided by the absolute value of the\\n        // ideal value. This is undefined when the ideal value is zero.\\n        //\\n        // The ideal value is `numerator * target / denominator`.\\n        // Let's call `numerator * target % denominator` the remainder.\\n        // The absolute error is `remainder / denominator`.\\n        //\\n        // When the ideal value is zero, we require the absolute error to\\n        // be zero. Fortunately, this is always the case. The ideal value is\\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\\n        // remainder and absolute error are also zero.\\n        if (target == 0 || numerator == 0) {\\n            return false;\\n        }\\n\\n        // Otherwise, we want the relative rounding error to be strictly\\n        // less than 0.1%.\\n        // The relative error is `remainder / (numerator * target)`.\\n        // We want the relative error less than 1 / 1000:\\n        //        remainder / (numerator * target)  <  1 / 1000\\n        // or equivalently:\\n        //        1000 * remainder  <  numerator * target\\n        // so we have a rounding error iff:\\n        //        1000 * remainder  >=  numerator * target\\n        uint256 remainder = mulmod(\\n            target,\\n            numerator,\\n            denominator\\n        );\\n        isError = remainder.mul(1000) >= numerator.mul(target);\\n    }\\n\\n    function safeGetPartialAmountCeil(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    ) internal pure returns (uint256 partialAmount) {\\n        if (isRoundingErrorCeil(numerator, denominator, target)) {\\n            revert(\\\"rounding error\\\");\\n        }\\n        partialAmount = numerator.mul(target).add(denominator.sub(1)).div(denominator);\\n    }\\n\\n    /// @dev Checks if rounding error >= 0.1% when rounding up.\\n    /// @param numerator Numerator.\\n    /// @param denominator Denominator.\\n    /// @param target Value to multiply with numerator/denominator.\\n    /// @return isError Rounding error is present.\\n    function isRoundingErrorCeil(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    ) internal pure returns (bool isError) {\\n        if (denominator == 0) {\\n            revert(\\\"division by zero\\\");\\n        }\\n\\n        // See the comments in `isRoundingError`.\\n        if (target == 0 || numerator == 0) {\\n            // When either is zero, the ideal value and rounded value are zero\\n            // and there is no rounding error. (Although the relative error\\n            // is undefined.)\\n            return false;\\n        }\\n        // Compute remainder as before\\n        uint256 remainder = mulmod(\\n            target,\\n            numerator,\\n            denominator\\n        );\\n        remainder = denominator.sub(remainder) % denominator;\\n        isError = remainder.mul(1000) >= numerator.mul(target);\\n        return isError;\\n    }\\n}\\n\"\n    },\n    \"@rarible/exchange-v2/contracts/libraries/LibOrder.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@rarible/lib-asset/contracts/LibAsset.sol\\\";\\n\\nimport \\\"./LibMath.sol\\\";\\nimport \\\"./LibOrderDataV3.sol\\\";\\nimport \\\"./LibOrderDataV2.sol\\\";\\nimport \\\"./LibOrderDataV1.sol\\\";\\n\\nlibrary LibOrder {\\n    using SafeMathUpgradeable for uint;\\n\\n    bytes32 constant ORDER_TYPEHASH = keccak256(\\n        \\\"Order(address maker,Asset makeAsset,address taker,Asset takeAsset,uint256 salt,uint256 start,uint256 end,bytes4 dataType,bytes data)Asset(AssetType assetType,uint256 value)AssetType(bytes4 assetClass,bytes data)\\\"\\n    );\\n\\n    bytes4 constant DEFAULT_ORDER_TYPE = 0xffffffff;\\n\\n    struct Order {\\n        address maker;\\n        LibAsset.Asset makeAsset;\\n        address taker;\\n        LibAsset.Asset takeAsset;\\n        uint salt;\\n        uint start;\\n        uint end;\\n        bytes4 dataType;\\n        bytes data;\\n    }\\n\\n    /**\\n     * @dev Calculate remaining make and take values of the order (after partial filling real make and take decrease)\\n     * @param order initial order to calculate remaining values for\\n     * @param fill current fill of the left order (0 if order is unfilled)\\n     * @param isMakeFill true if order fill is calculated from the make side, false if from the take side\\n     * @return makeValue remaining make value of the order. if fill = 0 then it's order's make value\\n     * @return takeValue remaining take value of the order. if fill = 0 then it's order's take value\\n     */\\n    function calculateRemaining(Order memory order, uint fill, bool isMakeFill) internal pure returns (uint makeValue, uint takeValue) {\\n        if (isMakeFill) {\\n            makeValue = order.makeAsset.value.sub(fill);\\n            takeValue = LibMath.safeGetPartialAmountFloor(order.takeAsset.value, order.makeAsset.value, makeValue);\\n        } else {\\n            takeValue = order.takeAsset.value.sub(fill);\\n            makeValue = LibMath.safeGetPartialAmountFloor(order.makeAsset.value, order.takeAsset.value, takeValue); \\n        } \\n    }\\n\\n    function hashKey(Order memory order) internal pure returns (bytes32) {\\n        if (order.dataType == LibOrderDataV1.V1 || order.dataType == DEFAULT_ORDER_TYPE) {\\n            return keccak256(abi.encode(\\n                order.maker,\\n                LibAsset.hash(order.makeAsset.assetType),\\n                LibAsset.hash(order.takeAsset.assetType),\\n                order.salt\\n            ));\\n        } else {\\n            //order.data is in hash for V2, V3 and all new order\\n            return keccak256(abi.encode(\\n                order.maker,\\n                LibAsset.hash(order.makeAsset.assetType),\\n                LibAsset.hash(order.takeAsset.assetType),\\n                order.salt,\\n                order.data\\n            ));\\n        }\\n    }\\n\\n    function hash(Order memory order) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n                ORDER_TYPEHASH,\\n                order.maker,\\n                LibAsset.hash(order.makeAsset),\\n                order.taker,\\n                LibAsset.hash(order.takeAsset),\\n                order.salt,\\n                order.start,\\n                order.end,\\n                order.dataType,\\n                keccak256(order.data)\\n            ));\\n    }\\n\\n    function validateOrderTime(LibOrder.Order memory order) internal view {\\n        require(order.start == 0 || order.start < block.timestamp, \\\"Order start validation failed\\\");\\n        require(order.end == 0 || order.end > block.timestamp, \\\"Order end validation failed\\\");\\n    }\\n}\\n\"\n    },\n    \"@rarible/exchange-v2/contracts/libraries/LibOrderData.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./LibOrder.sol\\\";\\n\\nlibrary LibOrderData {\\n\\n    struct GenericOrderData {\\n        LibPart.Part[] payouts;\\n        LibPart.Part[] originFees;\\n        bool isMakeFill;\\n        bool protocolFeeEnabled;\\n    } \\n\\n    function parse(LibOrder.Order memory order) pure internal returns (GenericOrderData memory dataOrder) {\\n        dataOrder.protocolFeeEnabled = false;\\n        if (order.dataType == LibOrderDataV1.V1) {\\n            LibOrderDataV1.DataV1 memory data = abi.decode(order.data, (LibOrderDataV1.DataV1));\\n            dataOrder.payouts = data.payouts;\\n            dataOrder.originFees = data.originFees;\\n        } else if (order.dataType == LibOrderDataV2.V2) {\\n            LibOrderDataV2.DataV2 memory data = abi.decode(order.data, (LibOrderDataV2.DataV2));\\n            dataOrder.payouts = data.payouts;\\n            dataOrder.originFees = data.originFees;\\n            dataOrder.isMakeFill = data.isMakeFill;\\n        } else if (order.dataType == LibOrderDataV3.V3) {\\n            LibOrderDataV3.DataV3 memory data = abi.decode(order.data, (LibOrderDataV3.DataV3));\\n            dataOrder.payouts = data.payouts;\\n            dataOrder.originFees = data.originFees;\\n            dataOrder.isMakeFill = data.isMakeFill;\\n            dataOrder.protocolFeeEnabled = true;\\n        } else if (order.dataType == 0xffffffff) {\\n        } else {\\n            revert(\\\"Unknown Order data type\\\");\\n        }\\n        if (dataOrder.payouts.length == 0) {\\n            dataOrder.payouts = payoutSet(order.maker);\\n        }\\n    }\\n\\n    function payoutSet(address orderAddress) pure internal returns (LibPart.Part[] memory) {\\n        LibPart.Part[] memory payout = new LibPart.Part[](1);\\n        payout[0].account = payable(orderAddress);\\n        payout[0].value = 10000;\\n        return payout;\\n    }\\n\\n    function parseOriginFeeData(uint dataFirst, uint dataSecond) internal pure returns(LibPart.Part[] memory) {\\n        LibPart.Part[] memory originFee;\\n\\n        if (dataFirst > 0 && dataSecond > 0){\\n            originFee = new LibPart.Part[](2);\\n\\n            originFee[0] = uintToLibPart(dataFirst);\\n            originFee[1] = uintToLibPart(dataSecond);\\n        }\\n\\n        if (dataFirst > 0 && dataSecond == 0) {\\n            originFee = new LibPart.Part[](1);\\n\\n            originFee[0] = uintToLibPart(dataFirst);\\n        }\\n\\n        if (dataFirst == 0 && dataSecond > 0) {\\n            originFee = new LibPart.Part[](1);\\n\\n            originFee[0] = uintToLibPart(dataSecond);\\n        }\\n\\n        return originFee;\\n    }\\n\\n    function parsePayouts(uint data) internal pure returns(LibPart.Part[] memory) {\\n        LibPart.Part[] memory payouts;\\n\\n        if (data > 0) {\\n            payouts = new LibPart.Part[](1);\\n            payouts[0] = uintToLibPart(data);\\n        }\\n\\n        return payouts;\\n    }\\n\\n    /**\\n        @notice converts uint to LibPart.Part\\n        @param data address and value encoded in uint (first 12 bytes )\\n        @return result LibPart.Part \\n     */\\n    function uintToLibPart(uint data) internal pure returns(LibPart.Part memory result) {\\n        if (data > 0){\\n            result.account = payable(address(data));\\n            result.value = uint96(data >> 160);\\n        }\\n    }\\n\\n}\\n\"\n    },\n    \"@rarible/exchange-v2/contracts/libraries/LibOrderDataV1.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@rarible/lib-part/contracts/LibPart.sol\\\";\\n\\nlibrary LibOrderDataV1 {\\n    bytes4 constant public V1 = bytes4(keccak256(\\\"V1\\\"));\\n\\n    struct DataV1 {\\n        LibPart.Part[] payouts;\\n        LibPart.Part[] originFees;\\n    }\\n\\n}\\n\"\n    },\n    \"@rarible/exchange-v2/contracts/libraries/LibOrderDataV2.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@rarible/lib-part/contracts/LibPart.sol\\\";\\n\\nlibrary LibOrderDataV2 {\\n    bytes4 constant public V2 = bytes4(keccak256(\\\"V2\\\"));\\n\\n    struct DataV2 {\\n        LibPart.Part[] payouts;\\n        LibPart.Part[] originFees;\\n        bool isMakeFill;\\n    }\\n\\n}\\n\"\n    },\n    \"@rarible/exchange-v2/contracts/libraries/LibOrderDataV3.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@rarible/lib-part/contracts/LibPart.sol\\\";\\n\\nlibrary LibOrderDataV3 {\\n    bytes4 constant public V3 = bytes4(keccak256(\\\"V3\\\"));\\n\\n    struct DataV3 {\\n        LibPart.Part[] payouts;\\n        LibPart.Part[] originFees;\\n        bool isMakeFill;\\n    }\\n}\\n\"\n    },\n    \"@rarible/exchange-v2/contracts/OrderValidator.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"./libraries/LibOrder.sol\\\";\\n\\nimport \\\"@rarible/lib-signature/contracts/IERC1271.sol\\\";\\nimport \\\"@rarible/lib-signature/contracts/LibSignature.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol\\\";\\n\\nabstract contract OrderValidator is Initializable, ContextUpgradeable, EIP712Upgradeable {\\n    using LibSignature for bytes32;\\n    using AddressUpgradeable for address;\\n    \\n    bytes4 constant internal MAGICVALUE = 0x1626ba7e;\\n\\n    function __OrderValidator_init_unchained() internal initializer {\\n        __EIP712_init_unchained(\\\"Exchange\\\", \\\"2\\\");\\n    }\\n\\n    function validate(LibOrder.Order memory order, bytes memory signature) internal view {\\n        if (order.salt == 0) {\\n            if (order.maker != address(0)) {\\n                require(_msgSender() == order.maker, \\\"maker is not tx sender\\\");\\n            }\\n        } else {\\n            if (_msgSender() != order.maker) {\\n                bytes32 hash = LibOrder.hash(order);\\n                // if maker is contract checking ERC1271 signature\\n                if (order.maker.isContract()) {\\n                    require(\\n                        IERC1271(order.maker).isValidSignature(_hashTypedDataV4(hash), signature) == MAGICVALUE,\\n                        \\\"contract order signature verification error\\\"\\n                    );\\n                } else {\\n                    // if maker is not contract then checking ECDSA signature\\n                    if (_hashTypedDataV4(hash).recover(signature) != order.maker) {\\n                        revert(\\\"order signature verification error\\\");\\n                    } else {\\n                        require (order.maker != address(0), \\\"no maker\\\");\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\n    },\n    \"@rarible/exchange-wrapper/contracts/interfaces/IBlur.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\n\\ninterface IBlur {\\n    enum Side { Buy, Sell }\\n    enum SignatureVersion { Single, Bulk }\\n    enum AssetType { ERC721, ERC1155 }\\n\\n    struct Fee {\\n        uint16 rate;\\n        address payable recipient;\\n    }\\n        \\n    struct Order {\\n        address trader;\\n        Side side;\\n        address matchingPolicy;\\n        address collection;\\n        uint256 tokenId;\\n        uint256 amount;\\n        address paymentToken;\\n        uint256 price;\\n        uint256 listingTime;\\n        /* Order expiration timestamp - 0 for oracle cancellations. */\\n        uint256 expirationTime;\\n        Fee[] fees;\\n        uint256 salt;\\n        bytes extraParams;\\n    }\\n\\n    struct Input {\\n        Order order;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n        bytes extraSignature;\\n        SignatureVersion signatureVersion;\\n        uint256 blockNumber;\\n    }\\n\\n    function execute(Input calldata sell, Input calldata buy)\\n        external\\n        payable;\\n}\\n\"\n    },\n    \"@rarible/exchange-wrapper/contracts/interfaces/IExchangeV2.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.9 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@rarible/exchange-v2/contracts/ExchangeV2.sol\\\";\\n\\nimport {RoyaltiesRegistry} from \\\"@rarible/royalties-registry/contracts/RoyaltiesRegistry.sol\\\";\\nimport {TransferProxy} from \\\"@rarible/transfer-proxy/contracts/proxy/TransferProxy.sol\\\";\\nimport {ERC20TransferProxy} from \\\"@rarible/transfer-proxy/contracts/proxy/ERC20TransferProxy.sol\\\";\\n\\ninterface IExchangeV2 {\\n    function matchOrders(\\n        LibOrder.Order memory orderLeft,\\n        bytes memory signatureLeft,\\n        LibOrder.Order memory orderRight,\\n        bytes memory signatureRight\\n    ) external payable;\\n\\n    function directPurchase(\\n        LibDirectTransfer.Purchase calldata direct\\n    ) external payable;\\n}\"\n    },\n    \"@rarible/exchange-wrapper/contracts/interfaces/ILooksRare.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"../libraries/LibLooksRare.sol\\\";\\n\\ninterface ILooksRare {\\n    function matchAskWithTakerBidUsingETHAndWETH(LibLooksRare.TakerOrder calldata takerBid, LibLooksRare.MakerOrder calldata makerAsk) external payable;\\n\\n    /**\\n     * @notice This function allows a user to execute a taker bid (against a maker ask).\\n     * @param takerBid Taker bid struct\\n     * @param makerAsk Maker ask struct\\n     * @param makerSignature Maker signature\\n     * @param merkleTree Merkle tree struct (if the signature contains multiple maker orders)\\n     * @param affiliate Affiliate address\\n     */\\n    function executeTakerBid(LibLooksRare.Taker calldata takerBid, LibLooksRare.Maker calldata makerAsk, bytes calldata makerSignature, LibLooksRare.MerkleTree calldata merkleTree, address affiliate) external payable;\\n}\\n\"\n    },\n    \"@rarible/exchange-wrapper/contracts/interfaces/ISeaPort.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.9 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"../libraries/LibSeaPort.sol\\\";\\n\\ninterface ISeaPort {\\n    function fulfillAdvancedOrder(\\n        LibSeaPort.AdvancedOrder calldata advancedOrder,\\n        LibSeaPort.CriteriaResolver[] calldata criteriaResolvers,\\n        bytes32 fulfillerConduitKey,\\n        address recipient\\n    ) external payable returns (bool fulfilled);\\n\\n    function fulfillAvailableAdvancedOrders(\\n        LibSeaPort.AdvancedOrder[] memory advancedOrders,\\n        LibSeaPort.CriteriaResolver[] calldata criteriaResolvers,\\n        LibSeaPort.FulfillmentComponent[][] calldata offerFulfillments,\\n        LibSeaPort.FulfillmentComponent[][] calldata considerationFulfillments,\\n        bytes32 fulfillerConduitKey,\\n        address recipient,\\n        uint256 maximumFulfilled\\n    ) external payable returns (bool[] memory availableOrders, LibSeaPort.Execution[] memory executions);\\n\\n    function fulfillBasicOrder(LibSeaPort.BasicOrderParameters calldata parameters)\\n        external\\n        payable\\n        returns (bool fulfilled);\\n}\"\n    },\n    \"@rarible/exchange-wrapper/contracts/interfaces/IWyvernExchange.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.9 <0.8.0;\\npragma abicoder v2;\\n\\ninterface IWyvernExchange {\\n    function atomicMatch_(\\n        address[14] memory addrs,\\n        uint[18] memory uints,\\n        uint8[8] memory feeMethodsSidesKindsHowToCalls,\\n        bytes memory calldataBuy,\\n        bytes memory calldataSell,\\n        bytes memory replacementPatternBuy,\\n        bytes memory replacementPatternSell,\\n        bytes memory staticExtradataBuy,\\n        bytes memory staticExtradataSell,\\n        uint8[2] memory vs,\\n        bytes32[5] memory rssMetadata)\\n    external\\n    payable;\\n\\n    enum Side {\\n        Buy,\\n        Sell\\n    }\\n\\n    enum SaleKind {\\n        FixedPrice,\\n        DutchAuction\\n    }\\n\\n    function calculateFinalPrice(\\n        Side side,\\n        SaleKind saleKind,\\n        uint256 basePrice,\\n        uint256 extra,\\n        uint256 listingTime,\\n        uint256 expirationTime\\n    ) external view returns (uint256);\\n}\"\n    },\n    \"@rarible/exchange-wrapper/contracts/interfaces/Ix2y2.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.9 <0.8.0;\\npragma abicoder v2;\\n\\ninterface Ix2y2 {\\n\\n    struct OrderItem {\\n        uint256 price;\\n        bytes data;\\n    }\\n\\n    struct Pair721 {\\n        address token;\\n        uint256 tokenId;\\n    }\\n\\n    struct Pair1155 {\\n        address token;\\n        uint256 tokenId;\\n        uint256 amount;\\n    }\\n\\n    struct Order {\\n        uint256 salt;\\n        address user;\\n        uint256 network;\\n        uint256 intent;\\n        uint256 delegateType;\\n        uint256 deadline;\\n        address currency;\\n        bytes dataMask;\\n        OrderItem[] items;\\n        // signature\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n        uint8 signVersion;\\n    }\\n\\n    struct Fee {\\n        uint256 percentage;\\n        address to;\\n    }\\n\\n    struct SettleDetail {\\n        Op op;\\n        uint256 orderIdx;\\n        uint256 itemIdx;\\n        uint256 price;\\n        bytes32 itemHash;\\n        address executionDelegate;\\n        bytes dataReplacement;\\n        uint256 bidIncentivePct;\\n        uint256 aucMinIncrementPct;\\n        uint256 aucIncDurationSecs;\\n        Fee[] fees;\\n    }\\n\\n    struct SettleShared {\\n        uint256 salt;\\n        uint256 deadline;\\n        uint256 amountToEth;\\n        uint256 amountToWeth;\\n        address user;\\n        bool canFail;\\n    }\\n\\n    struct RunInput {\\n        Order[] orders;\\n        SettleDetail[] details;\\n        SettleShared shared;\\n        // signature\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n    }\\n\\n    enum Op {\\n        INVALID,\\n        // off-chain\\n        COMPLETE_SELL_OFFER,\\n        COMPLETE_BUY_OFFER,\\n        CANCEL_OFFER,\\n        // auction\\n        BID,\\n        COMPLETE_AUCTION,\\n        REFUND_AUCTION,\\n        REFUND_AUCTION_STUCK_ITEM\\n    }\\n\\n    function run(RunInput memory input) external payable;\\n}\"\n    },\n    \"@rarible/exchange-wrapper/contracts/libraries/IsPausable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nabstract contract IsPausable is Ownable {\\n    bool public paused;\\n\\n    event Paused(bool paused);\\n\\n    function pause(bool _paused) external onlyOwner {\\n        paused = _paused;\\n        emit Paused(_paused);\\n    }\\n\\n    function requireNotPaused() internal view {\\n        require (!paused, \\\"the contract is paused\\\");\\n    }\\n\\n}\\n\"\n    },\n    \"@rarible/exchange-wrapper/contracts/libraries/LibLooksRare.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nlibrary LibLooksRare {\\n    struct MakerOrder {\\n        bool isOrderAsk; // true --> ask / false --> bid\\n        address signer; // signer of the maker order\\n        address collection; // collection address\\n        uint256 price; // price (used as )\\n        uint256 tokenId; // id of the token\\n        uint256 amount; // amount of tokens to sell/purchase (must be 1 for ERC721, 1+ for ERC1155)\\n        address strategy; // strategy for trade execution (e.g., DutchAuction, StandardSaleForFixedPrice)\\n        address currency; // currency (e.g., WETH)\\n        uint256 nonce; // order nonce (must be unique unless new maker order is meant to override existing one e.g., lower ask price)\\n        uint256 startTime; // startTime in timestamp\\n        uint256 endTime; // endTime in timestamp\\n        uint256 minPercentageToAsk; // slippage protection (9000 --> 90% of the final price must return to ask)\\n        bytes params; // additional parameters\\n        uint8 v; // v: parameter (27 or 28)\\n        bytes32 r; // r: parameter\\n        bytes32 s; // s: parameter\\n    }\\n\\n    struct TakerOrder {\\n        bool isOrderAsk; // true --> ask / false --> bid\\n        address taker; // msg.sender\\n        uint256 price; // final price for the purchase\\n        uint256 tokenId;\\n        uint256 minPercentageToAsk; // // slippage protection (9000 --> 90% of the final price must return to ask)\\n        bytes params; // other params (e.g., tokenId)\\n    }\\n\\n    /**\\n     * @notice CollectionType is used in OrderStructs.Maker's collectionType to determine the collection type being traded.\\n     */\\n    enum CollectionType {\\n        ERC721,\\n        ERC1155\\n    }\\n\\n    /**\\n     * @notice QuoteType is used in OrderStructs.Maker's quoteType to determine whether the maker order is a bid or an ask.\\n     */\\n    enum QuoteType {\\n        Bid,\\n        Ask\\n    }\\n    /**\\n     * 1. Maker struct\\n     */\\n\\n    /**\\n     * @notice Maker is the struct for a maker order.\\n     * @param quoteType Quote type (i.e. 0 = BID, 1 = ASK)\\n     * @param globalNonce Global user order nonce for maker orders\\n     * @param subsetNonce Subset nonce (shared across bid/ask maker orders)\\n     * @param orderNonce Order nonce (it can be shared across bid/ask maker orders)\\n     * @param strategyId Strategy id\\n     * @param collectionType Collection type (i.e. 0 = ERC721, 1 = ERC1155)\\n     * @param collection Collection address\\n     * @param currency Currency address (@dev address(0) = ETH)\\n     * @param signer Signer address\\n     * @param startTime Start timestamp\\n     * @param endTime End timestamp\\n     * @param price Minimum price for maker ask, maximum price for maker bid\\n     * @param itemIds Array of itemIds\\n     * @param amounts Array of amounts\\n     * @param additionalParameters Extra data specific for the order\\n     */\\n    struct Maker {\\n        QuoteType quoteType;\\n        uint256 globalNonce;\\n        uint256 subsetNonce;\\n        uint256 orderNonce;\\n        uint256 strategyId;\\n        CollectionType collectionType;\\n        address collection;\\n        address currency;\\n        address signer;\\n        uint256 startTime;\\n        uint256 endTime;\\n        uint256 price;\\n        uint256[] itemIds;\\n        uint256[] amounts;\\n        bytes additionalParameters;\\n    }\\n\\n    /**\\n     * 2. Taker struct\\n     */\\n\\n    /**\\n     * @notice Taker is the struct for a taker ask/bid order. It contains the parameters required for a direct purchase.\\n     * @dev Taker struct is matched against MakerAsk/MakerBid structs at the protocol level.\\n     * @param recipient Recipient address (to receive NFTs or non-fungible tokens)\\n     * @param additionalParameters Extra data specific for the order\\n     */\\n    struct Taker {\\n        address recipient;\\n        bytes additionalParameters;\\n    }\\n\\n    /**\\n     * 3. Merkle tree struct\\n     */\\n\\n    enum MerkleTreeNodePosition {\\n        Left,\\n        Right\\n    }\\n\\n    /**\\n     * @notice MerkleTreeNode is a MerkleTree's node.\\n     * @param value It can be an order hash or a proof\\n     * @param position The node's position in its branch.\\n     *                 It can be left or right or none\\n     *                 (before the tree is sorted).\\n     */\\n    struct MerkleTreeNode {\\n        bytes32 value;\\n        MerkleTreeNodePosition position;\\n    }\\n\\n    /**\\n     * @notice MerkleTree is the struct for a merkle tree of order hashes.\\n     * @dev A Merkle tree can be computed with order hashes.\\n     *      It can contain order hashes from both maker bid and maker ask structs.\\n     * @param root Merkle root\\n     * @param proof Array containing the merkle proof\\n     */\\n    struct MerkleTree {\\n        bytes32 root;\\n        MerkleTreeNode[] proof;\\n    }\\n}\\n\"\n    },\n    \"@rarible/exchange-wrapper/contracts/libraries/LibSeaPort.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nlibrary LibSeaPort {\\n    /**\\n      * @dev For basic orders involving ETH / native / ERC20 <=> ERC721 / ERC1155\\n      *      matching, a group of six functions may be called that only requires a\\n      *      subset of the usual order arguments. Note the use of a \\\"basicOrderType\\\"\\n      *      enum; this represents both the usual order type as well as the \\\"route\\\"\\n      *      of the basic order (a simple derivation function for the basic order\\n      *      type is `basicOrderType = orderType + (4 * basicOrderRoute)`.)\\n      */\\n    struct BasicOrderParameters {\\n        address considerationToken; // 0x24\\n        uint256 considerationIdentifier; // 0x44\\n        uint256 considerationAmount; // 0x64\\n        address payable offerer; // 0x84\\n        address zone; // 0xa4\\n        address offerToken; // 0xc4\\n        uint256 offerIdentifier; // 0xe4\\n        uint256 offerAmount; // 0x104\\n        BasicOrderType basicOrderType; // 0x124\\n        uint256 startTime; // 0x144\\n        uint256 endTime; // 0x164\\n        bytes32 zoneHash; // 0x184\\n        uint256 salt; // 0x1a4\\n        bytes32 offererConduitKey; // 0x1c4\\n        bytes32 fulfillerConduitKey; // 0x1e4\\n        uint256 totalOriginalAdditionalRecipients; // 0x204\\n        AdditionalRecipient[] additionalRecipients; // 0x224\\n        bytes signature; // 0x244\\n    }\\n    /**\\n     * @dev Basic orders can supply any number of additional recipients, with the\\n     *      implied assumption that they are supplied from the offered ETH (or other\\n     *      native token) or ERC20 token for the order.\\n     */\\n    struct AdditionalRecipient {\\n        uint256 amount;\\n        address payable recipient;\\n    }\\n\\n    // prettier-ignore\\n    enum BasicOrderType {\\n        // 0: no partial fills, anyone can execute\\n        ETH_TO_ERC721_FULL_OPEN,\\n\\n        // 1: partial fills supported, anyone can execute\\n        ETH_TO_ERC721_PARTIAL_OPEN,\\n\\n        // 2: no partial fills, only offerer or zone can execute\\n        ETH_TO_ERC721_FULL_RESTRICTED,\\n\\n        // 3: partial fills supported, only offerer or zone can execute\\n        ETH_TO_ERC721_PARTIAL_RESTRICTED,\\n\\n        // 4: no partial fills, anyone can execute\\n        ETH_TO_ERC1155_FULL_OPEN,\\n\\n        // 5: partial fills supported, anyone can execute\\n        ETH_TO_ERC1155_PARTIAL_OPEN,\\n\\n        // 6: no partial fills, only offerer or zone can execute\\n        ETH_TO_ERC1155_FULL_RESTRICTED,\\n\\n        // 7: partial fills supported, only offerer or zone can execute\\n        ETH_TO_ERC1155_PARTIAL_RESTRICTED,\\n\\n        // 8: no partial fills, anyone can execute\\n        ERC20_TO_ERC721_FULL_OPEN,\\n\\n        // 9: partial fills supported, anyone can execute\\n        ERC20_TO_ERC721_PARTIAL_OPEN,\\n\\n        // 10: no partial fills, only offerer or zone can execute\\n        ERC20_TO_ERC721_FULL_RESTRICTED,\\n\\n        // 11: partial fills supported, only offerer or zone can execute\\n        ERC20_TO_ERC721_PARTIAL_RESTRICTED,\\n\\n        // 12: no partial fills, anyone can execute\\n        ERC20_TO_ERC1155_FULL_OPEN,\\n\\n        // 13: partial fills supported, anyone can execute\\n        ERC20_TO_ERC1155_PARTIAL_OPEN,\\n\\n        // 14: no partial fills, only offerer or zone can execute\\n        ERC20_TO_ERC1155_FULL_RESTRICTED,\\n\\n        // 15: partial fills supported, only offerer or zone can execute\\n        ERC20_TO_ERC1155_PARTIAL_RESTRICTED,\\n\\n        // 16: no partial fills, anyone can execute\\n        ERC721_TO_ERC20_FULL_OPEN,\\n\\n        // 17: partial fills supported, anyone can execute\\n        ERC721_TO_ERC20_PARTIAL_OPEN,\\n\\n        // 18: no partial fills, only offerer or zone can execute\\n        ERC721_TO_ERC20_FULL_RESTRICTED,\\n\\n        // 19: partial fills supported, only offerer or zone can execute\\n        ERC721_TO_ERC20_PARTIAL_RESTRICTED,\\n\\n        // 20: no partial fills, anyone can execute\\n        ERC1155_TO_ERC20_FULL_OPEN,\\n\\n        // 21: partial fills supported, anyone can execute\\n        ERC1155_TO_ERC20_PARTIAL_OPEN,\\n\\n        // 22: no partial fills, only offerer or zone can execute\\n        ERC1155_TO_ERC20_FULL_RESTRICTED,\\n\\n        // 23: partial fills supported, only offerer or zone can execute\\n        ERC1155_TO_ERC20_PARTIAL_RESTRICTED\\n    }\\n\\n     /**\\n     * @dev The full set of order components, with the exception of the counter,\\n     *      must be supplied when fulfilling more sophisticated orders or groups of\\n     *      orders. The total number of original consideration items must also be\\n     *      supplied, as the caller may specify additional consideration items.\\n     */\\n    struct OrderParameters {\\n        address offerer; // 0x00\\n        address zone; // 0x20\\n        OfferItem[] offer; // 0x40\\n        ConsiderationItem[] consideration; // 0x60\\n        OrderType orderType; // 0x80\\n        uint256 startTime; // 0xa0\\n        uint256 endTime; // 0xc0\\n        bytes32 zoneHash; // 0xe0\\n        uint256 salt; // 0x100\\n        bytes32 conduitKey; // 0x120\\n        uint256 totalOriginalConsiderationItems; // 0x140\\n        // offer.length                          // 0x160\\n    }\\n\\n    /**\\n     * @dev Orders require a signature in addition to the other order parameters.\\n     */\\n    struct Order {\\n        OrderParameters parameters;\\n        bytes signature;\\n    }\\n\\n    struct AdvancedOrder {\\n        OrderParameters parameters;\\n        uint120 numerator;\\n        uint120 denominator;\\n        bytes signature;\\n        bytes extraData;\\n    }\\n\\n    struct OfferItem {\\n        ItemType itemType;\\n        address token;\\n        uint256 identifierOrCriteria;\\n        uint256 startAmount;\\n        uint256 endAmount;\\n    }\\n\\n    /**\\n     * @dev A consideration item has the same five components as an offer item and\\n     *      an additional sixth component designating the required recipient of the\\n     *      item.\\n     */\\n    struct ConsiderationItem {\\n        ItemType itemType;\\n        address token;\\n        uint256 identifierOrCriteria;\\n        uint256 startAmount;\\n        uint256 endAmount;\\n        address payable recipient;\\n    }\\n\\n    // prettier-ignore\\n    enum OrderType {\\n        // 0: no partial fills, anyone can execute\\n        FULL_OPEN,\\n\\n        // 1: partial fills supported, anyone can execute\\n        PARTIAL_OPEN,\\n\\n        // 2: no partial fills, only offerer or zone can execute\\n        FULL_RESTRICTED,\\n\\n        // 3: partial fills supported, only offerer or zone can execute\\n        PARTIAL_RESTRICTED\\n    }\\n\\n    // prettier-ignore\\n    enum ItemType {\\n        // 0: ETH on mainnet, MATIC on polygon, etc.\\n        NATIVE,\\n\\n        // 1: ERC20 items (ERC777 and ERC20 analogues could also technically work)\\n        ERC20,\\n\\n        // 2: ERC721 items\\n        ERC721,\\n\\n        // 3: ERC1155 items\\n        ERC1155,\\n\\n        // 4: ERC721 items where a number of tokenIds are supported\\n        ERC721_WITH_CRITERIA,\\n\\n        // 5: ERC1155 items where a number of ids are supported\\n        ERC1155_WITH_CRITERIA\\n    }\\n\\n    /**\\n     * @dev A fulfillment is applied to a group of orders. It decrements a series of\\n     *      offer and consideration items, then generates a single execution\\n     *      element. A given fulfillment can be applied to as many offer and\\n     *      consideration items as desired, but must contain at least one offer and\\n     *      at least one consideration that match. The fulfillment must also remain\\n     *      consistent on all key parameters across all offer items (same offerer,\\n     *      token, type, tokenId, and conduit preference) as well as across all\\n     *      consideration items (token, type, tokenId, and recipient).\\n     */\\n    struct Fulfillment {\\n        FulfillmentComponent[] offerComponents;\\n        FulfillmentComponent[] considerationComponents;\\n    }\\n\\n    /**\\n     * @dev Each fulfillment component contains one index referencing a specific\\n     *      order and another referencing a specific offer or consideration item.\\n     */\\n    struct FulfillmentComponent {\\n        uint256 orderIndex;\\n        uint256 itemIndex;\\n    }\\n\\n    /**\\n     * @dev An execution is triggered once all consideration items have been zeroed\\n     *      out. It sends the item in question from the offerer to the item's\\n     *      recipient, optionally sourcing approvals from either this contract\\n     *      directly or from the offerer's chosen conduit if one is specified. An\\n     *      execution is not provided as an argument, but rather is derived via\\n     *      orders, criteria resolvers, and fulfillments (where the total number of\\n     *      executions will be less than or equal to the total number of indicated\\n     *      fulfillments) and returned as part of `matchOrders`.\\n     */\\n    struct Execution {\\n        ReceivedItem item;\\n        address offerer;\\n        bytes32 conduitKey;\\n    }\\n\\n    /**\\n * @dev A received item is translated from a utilized consideration item and has\\n *      the same four components as a spent item, as well as an additional fifth\\n *      component designating the required recipient of the item.\\n */\\n    struct ReceivedItem {\\n        ItemType itemType;\\n        address token;\\n        uint256 identifier;\\n        uint256 amount;\\n        address payable recipient;\\n    }\\n\\n    struct CriteriaResolver {\\n        uint256 orderIndex;\\n        Side side;\\n        uint256 index;\\n        uint256 identifier;\\n        bytes32[] criteriaProof;\\n    }\\n\\n    // prettier-ignore\\n    enum Side {\\n        // 0: Items that can be spent\\n        OFFER,\\n\\n        // 1: Items that must be received\\n        CONSIDERATION\\n    }\\n}\\n\"\n    },\n    \"@rarible/exchange-wrapper/contracts/RaribleExchangeWrapper.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@rarible/transfer-manager/contracts/lib/LibTransfer.sol\\\";\\nimport \\\"@rarible/lib-bp/contracts/BpLibrary.sol\\\";\\nimport \\\"@rarible/lib-part/contracts/LibPart.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\nimport \\\"./interfaces/IWyvernExchange.sol\\\";\\nimport \\\"./interfaces/IExchangeV2.sol\\\";\\nimport \\\"./interfaces/ISeaPort.sol\\\";\\nimport \\\"./interfaces/Ix2y2.sol\\\";\\nimport \\\"./interfaces/ILooksRare.sol\\\";\\nimport \\\"./interfaces/IBlur.sol\\\";\\n\\nimport \\\"./libraries/IsPausable.sol\\\";\\n\\ncontract RaribleExchangeWrapper is Ownable, ERC721Holder, ERC1155Holder, IsPausable {\\n    using LibTransfer for address;\\n    using BpLibrary for uint;\\n    using SafeMath for uint;\\n\\n    //marketplaces\\n    address public immutable wyvernExchange;\\n    address public immutable exchangeV2;\\n    address public immutable seaPort_1_1;\\n    address public immutable x2y2;\\n    address public immutable looksRare;\\n    address public immutable sudoswap;\\n    address public immutable seaPort_1_4;\\n    address public immutable looksRareV2;\\n    address public immutable blur;\\n    address public immutable seaPort_1_5;\\n    address public immutable seaPort_1_6;\\n\\n    //currencties\\n    address public immutable weth;\\n\\n    //constants\\n    uint256 private constant UINT256_MAX = type(uint256).max;\\n\\n    event Execution(bool result);\\n\\n    enum Markets {\\n        ExchangeV2,//0\\n        WyvernExchange,//1\\n        SeaPort_1_1,//2\\n        X2Y2,//3\\n        LooksRareOrders,//4\\n        SudoSwap,//5\\n        SeaPort_1_4,//6\\n        LooksRareV2,//7\\n        Blur,//8\\n        SeaPort_1_5,//9\\n        SeaPort_1_6//10\\n    }\\n\\n    enum AdditionalDataTypes {\\n        NoAdditionalData,\\n        RoyaltiesAdditionalData\\n    }\\n\\n    enum Currencies {\\n        ETH,\\n        WETH\\n    }\\n\\n    /**\\n        @notice struct for the purchase data\\n        @param marketId - market key from Markets enum (what market to use)\\n        @param amount - eth price (amount of eth that needs to be send to the marketplace)\\n        @param fees - 2 fees (in base points) that are going to be taken on top of order amount encoded in 1 uint256\\n                        bytes (25,26) used for currency (0 - ETH, 1 - WETH erc-20)\\n                        bytes (27,28) used for dataType\\n                        bytes (29,30) used for the first value (goes to feeRecipientFirst)\\n                        bytes (31,32) are used for the second value (goes to feeRecipientSecond)\\n        @param data - data for market call\\n     */\\n    struct PurchaseDetails {\\n        Markets marketId;\\n        uint256 amount;\\n        uint fees;\\n        bytes data;\\n    }\\n\\n    /**\\n        @notice struct for the data with additional Ddta\\n        @param data - data for market call\\n        @param additionalRoyalties - array additional Royalties (in base points plus address Royalty recipient)\\n     */\\n    struct AdditionalData {\\n        bytes data;\\n        uint[] additionalRoyalties;\\n    }\\n\\n    constructor(\\n        address[11] memory marketplaces,\\n        //address _wyvernExchange, 0\\n        //address _exchangeV2, 1\\n        //address _seaPort_1_1, 2\\n        //address _x2y2, 3\\n        //address _looksRare, 4\\n        //address _sudoswap, 5\\n        //address _seaPort_1_4, 6\\n        //address _looksRareV2, 7\\n        //address _blur, 8\\n        //address _seaPort_1_5, 9\\n        //address _seaPort_1_6, 10\\n        address _weth,\\n        address[] memory transferProxies\\n    ) {\\n        wyvernExchange = marketplaces[0];\\n        exchangeV2 = marketplaces[1];\\n        seaPort_1_1 = marketplaces[2];\\n        x2y2 = marketplaces[3];\\n        looksRare = marketplaces[4];\\n        sudoswap = marketplaces[5];\\n        seaPort_1_4 = marketplaces[6];\\n        looksRareV2 = marketplaces[7];\\n        blur = marketplaces[8];\\n        seaPort_1_5 = marketplaces[9];\\n        seaPort_1_6 = marketplaces[10];\\n\\n        weth = _weth;\\n\\n        for (uint i = 0; i < transferProxies.length; ++i) {\\n            if (_weth != address(0)){\\n                IERC20Upgradeable(_weth).approve(transferProxies[i], UINT256_MAX);\\n            }\\n        }\\n    }\\n\\n    /**\\n        @notice executes a single purchase\\n        @param purchaseDetails - deatails about the purchase (more info in PurchaseDetails struct)\\n        @param feeRecipientFirst - address of the first fee recipient\\n        @param feeRecipientSecond - address of the second fee recipient\\n     */\\n    function singlePurchase(PurchaseDetails memory purchaseDetails, address feeRecipientFirst, address feeRecipientSecond) external payable {\\n        requireNotPaused();\\n        \\n        //amount of WETH needed for purchases: \\n        uint wethAmountNeeded = getAmountOfWethForPurchase(purchaseDetails);\\n        \\n        //transfer WETH to this contract (if needed)\\n        if (wethAmountNeeded > 0) {\\n            IERC20Upgradeable(weth).transferFrom(_msgSender(), address(this), wethAmountNeeded);\\n        }\\n\\n        Currencies currency = getCurrency(purchaseDetails.fees);\\n        bool success;\\n        uint firstFeeAmount;\\n        uint secondFeeAmount;\\n\\n        if (currency == Currencies.ETH) {\\n            (success, firstFeeAmount, secondFeeAmount) = purchase(purchaseDetails, false);\\n            transferFeeETH(firstFeeAmount, feeRecipientFirst);\\n            transferFeeETH(secondFeeAmount, feeRecipientSecond);\\n        } else if (currency == Currencies.WETH) {\\n            (success, firstFeeAmount, secondFeeAmount) = purchaseWETH(purchaseDetails, false);\\n            transferFeeWETH(firstFeeAmount, feeRecipientFirst);\\n            transferFeeWETH(secondFeeAmount, feeRecipientSecond);\\n        } else {\\n            revert(\\\"Unknown purchase currency\\\");\\n        }\\n        \\n        emit Execution(success);\\n        \\n        //transfer ETH change\\n        transferChange();\\n        //transfer WETH change\\n        if (wethAmountNeeded > 0) {\\n            transferChangeWETH();\\n        }\\n    }\\n\\n    /**\\n        @notice executes an array of purchases\\n        @param purchaseDetails - array of deatails about the purchases (more info in PurchaseDetails struct)\\n        @param feeRecipientFirst - address of the first fee recipient\\n        @param feeRecipientSecond - address of the second fee recipient\\n        @param allowFail - true if fails while executing orders are allowed, false if fail of a single order means fail of the whole batch\\n     */\\n    \\n    function bulkPurchase(PurchaseDetails[] memory purchaseDetails, address feeRecipientFirst, address feeRecipientSecond, bool allowFail) external payable {\\n        requireNotPaused();\\n\\n        uint sumFirstFeesETH = 0;\\n        uint sumSecondFeesETH = 0;\\n        uint sumFirstFeesWETH = 0;\\n        uint sumSecondFeesWETH = 0;\\n        bool result = false;\\n\\n        //amount of WETH needed for purchases: \\n        uint wethAmountNeeded = 0;\\n        for (uint i = 0; i < purchaseDetails.length; ++i) {\\n            wethAmountNeeded = wethAmountNeeded + getAmountOfWethForPurchase(purchaseDetails[i]);\\n        }\\n\\n        //transfer WETH to this contract (if needed)\\n        if (wethAmountNeeded > 0) {\\n            IERC20Upgradeable(weth).transferFrom(_msgSender(), address(this), wethAmountNeeded);\\n        }\\n\\n        for (uint i = 0; i < purchaseDetails.length; ++i) {\\n            Currencies currency = getCurrency(purchaseDetails[i].fees);\\n            bool success;\\n            uint firstFeeAmount;\\n            uint secondFeeAmount;\\n\\n            if (currency == Currencies.ETH) {\\n                (success, firstFeeAmount, secondFeeAmount) = purchase(purchaseDetails[i], allowFail);\\n            \\n                sumFirstFeesETH = sumFirstFeesETH.add(firstFeeAmount);\\n                sumSecondFeesETH = sumSecondFeesETH.add(secondFeeAmount);\\n            } else if (currency == Currencies.WETH) {\\n                (success, firstFeeAmount, secondFeeAmount) = purchaseWETH(purchaseDetails[i], allowFail);\\n            \\n                sumFirstFeesWETH = sumFirstFeesWETH.add(firstFeeAmount);\\n                sumSecondFeesWETH = sumSecondFeesWETH.add(secondFeeAmount);\\n            } else {\\n                revert(\\\"Unknown purchase currency\\\");\\n            }\\n            \\n            result = result || success;\\n            emit Execution(success);\\n        }\\n\\n        require(result, \\\"no successful executions\\\");\\n\\n        //pay fees in ETH  \\n        transferFeeETH(sumFirstFeesETH, feeRecipientFirst);\\n        transferFeeETH(sumSecondFeesETH, feeRecipientSecond);\\n\\n        //pay fees in WETH\\n        transferFeeWETH(sumFirstFeesWETH, feeRecipientFirst);\\n        transferFeeWETH(sumSecondFeesWETH, feeRecipientSecond);\\n\\n        //transfer ETH change\\n        transferChange();\\n        //transfer WETH change\\n        if (wethAmountNeeded > 0) {\\n            transferChangeWETH();\\n        }\\n    }\\n\\n    /**\\n        @notice executes one purchase in ETH\\n        @param purchaseDetails - details about the purchase\\n        @param allowFail - true if errors are handled, false if revert on errors\\n        @return result false if execution failed, true if succeded\\n        @return firstFeeAmount amount of the first fee of the purchase, 0 if failed\\n        @return secondFeeAmount amount of the second fee of the purchase, 0 if failed\\n     */\\n    function purchase(PurchaseDetails memory purchaseDetails, bool allowFail) internal returns(bool, uint, uint) {\\n        (bytes memory marketData, uint[] memory additionalRoyalties) = getDataAndAdditionalData (purchaseDetails.data, purchaseDetails.fees, purchaseDetails.marketId);\\n        uint paymentAmount = purchaseDetails.amount;\\n        if (purchaseDetails.marketId == Markets.SeaPort_1_1){\\n            (bool success,) = address(seaPort_1_1).call{value : paymentAmount}(marketData);\\n            if (allowFail) {\\n                if (!success) {\\n                    return (false, 0, 0);\\n                }\\n            } else {\\n                require(success, \\\"Purchase SeaPort_1_1 failed\\\");\\n            }\\n        } else if (purchaseDetails.marketId == Markets.WyvernExchange) {\\n            (bool success,) = address(wyvernExchange).call{value : paymentAmount}(marketData);\\n            if (allowFail) {\\n                if (!success) {\\n                    return (false, 0, 0);\\n                }\\n            } else {\\n                require(success, \\\"Purchase wyvernExchange failed\\\");\\n            }\\n        } else if (purchaseDetails.marketId == Markets.ExchangeV2) {\\n            (bool success,) = address(exchangeV2).call{value : paymentAmount}(marketData);\\n            if (allowFail) {\\n                if (!success) {\\n                    return (false, 0, 0);\\n                }\\n            } else {\\n                require(success, \\\"Purchase rarible failed\\\");\\n            }\\n        } else if (purchaseDetails.marketId == Markets.X2Y2) {\\n            Ix2y2.RunInput memory input = abi.decode(marketData, (Ix2y2.RunInput));\\n\\n            if (allowFail) {\\n                try Ix2y2(x2y2).run{value : paymentAmount}(input) {\\n                } catch {\\n                    return (false, 0, 0);\\n                }\\n            } else {\\n                Ix2y2(x2y2).run{value : paymentAmount}(input);\\n            }\\n\\n            //for every element in input.details[] getting\\n            // order = input.details[i].orderIdx\\n            // and from that order getting item = input.details[i].itemId\\n            for (uint i = 0; i < input.details.length; ++i) {\\n                uint orderId = input.details[i].orderIdx;\\n                uint itemId = input.details[i].itemIdx;\\n                bytes memory data = input.orders[orderId].items[itemId].data;\\n                {\\n                    if (input.orders[orderId].dataMask.length > 0 && input.details[i].dataReplacement.length > 0) {\\n                        _arrayReplace(data, input.details[i].dataReplacement, input.orders[orderId].dataMask);\\n                    }\\n                }\\n\\n                // 1 = erc-721\\n                if (input.orders[orderId].delegateType == 1) {\\n                    Ix2y2.Pair721[] memory pairs = abi.decode(data, (Ix2y2.Pair721[]));\\n\\n                    for (uint256 j = 0; j < pairs.length; j++) {\\n                        Ix2y2.Pair721 memory p = pairs[j];\\n                        IERC721Upgradeable(address(p.token)).safeTransferFrom(address(this), _msgSender(), p.tokenId);\\n                    }\\n                } else if (input.orders[orderId].delegateType == 2) {\\n                    // 2 = erc-1155\\n                    Ix2y2.Pair1155[] memory pairs = abi.decode(data, (Ix2y2.Pair1155[]));\\n\\n                    for (uint256 j = 0; j < pairs.length; j++) {\\n                        Ix2y2.Pair1155 memory p = pairs[j];\\n                        IERC1155Upgradeable(address(p.token)).safeTransferFrom(address(this),  _msgSender(), p.tokenId, p.amount, \\\"\\\");\\n                    }\\n                } else {\\n                    revert(\\\"unknown delegateType x2y2\\\");\\n                }\\n            }\\n        } else if (purchaseDetails.marketId == Markets.LooksRareOrders) {\\n            (LibLooksRare.TakerOrder memory takerOrder, LibLooksRare.MakerOrder memory makerOrder, bytes4 typeNft) = abi.decode(marketData, (LibLooksRare.TakerOrder, LibLooksRare.MakerOrder, bytes4));\\n            if (allowFail) {\\n                try ILooksRare(looksRare).matchAskWithTakerBidUsingETHAndWETH{value : paymentAmount}(takerOrder, makerOrder) {\\n                }   catch {\\n                    return (false, 0, 0);\\n                }\\n            } else {\\n                ILooksRare(looksRare).matchAskWithTakerBidUsingETHAndWETH{value : paymentAmount}(takerOrder, makerOrder);\\n            }\\n            if (typeNft == LibAsset.ERC721_ASSET_CLASS) {\\n                IERC721Upgradeable(makerOrder.collection).safeTransferFrom(address(this), _msgSender(), makerOrder.tokenId);\\n            } else if (typeNft == LibAsset.ERC1155_ASSET_CLASS) {\\n                IERC1155Upgradeable(makerOrder.collection).safeTransferFrom(address(this), _msgSender(), makerOrder.tokenId, makerOrder.amount, \\\"\\\");\\n            } else {\\n                revert(\\\"Unknown token type\\\");\\n            }\\n        } else if (purchaseDetails.marketId == Markets.SudoSwap) {\\n            (bool success,) = address(sudoswap).call{value : paymentAmount}(marketData);\\n            if (allowFail) {\\n                if (!success) {\\n                    return (false, 0, 0);\\n                }\\n            } else {\\n                require(success, \\\"Purchase sudoswap failed\\\");\\n            }\\n        } else if (purchaseDetails.marketId == Markets.SeaPort_1_4){\\n            (bool success,) = address(seaPort_1_4).call{value : paymentAmount}(marketData);\\n            if (allowFail) {\\n                if (!success) {\\n                    return (false, 0, 0);\\n                }\\n            } else {\\n                require(success, \\\"Purchase SeaPort_1_4 failed\\\");\\n            }\\n        } else if (purchaseDetails.marketId == Markets.LooksRareV2){\\n            (bool success,) = address(looksRareV2).call{value : paymentAmount}(marketData);\\n            if (allowFail) {\\n                if (!success) {\\n                    return (false, 0, 0);\\n                }\\n            } else {\\n                require(success, \\\"Purchase LooksRareV2 failed\\\");\\n            }\\n        } else if (purchaseDetails.marketId == Markets.Blur){\\n            (IBlur.Input memory sell, IBlur.Input memory buy, bytes4 typeNft) = abi.decode(marketData, (IBlur.Input, IBlur.Input, bytes4));\\n            if (allowFail) {\\n                try IBlur(blur).execute{value : paymentAmount}(sell, buy) {\\n                }   catch {\\n                    return (false, 0, 0);\\n                }\\n            } else {\\n                IBlur(blur).execute{value : paymentAmount}(sell, buy);\\n            }\\n            if (typeNft == LibAsset.ERC721_ASSET_CLASS) {\\n                IERC721Upgradeable(sell.order.collection).safeTransferFrom(address(this), _msgSender(), sell.order.tokenId);\\n            } else if (typeNft == LibAsset.ERC1155_ASSET_CLASS) {\\n                IERC1155Upgradeable(sell.order.collection).safeTransferFrom(address(this), _msgSender(), sell.order.tokenId, sell.order.amount, \\\"\\\");\\n            } else {\\n                revert(\\\"Unknown token type\\\");\\n            }\\n        } else if (purchaseDetails.marketId == Markets.SeaPort_1_5){\\n            (bool success,) = address(seaPort_1_5).call{value : paymentAmount}(marketData);\\n            if (allowFail) {\\n                if (!success) {\\n                    return (false, 0, 0);\\n                }\\n            } else {\\n                require(success, \\\"Purchase SeaPort_1_5 failed\\\");\\n            }\\n        } else if (purchaseDetails.marketId == Markets.SeaPort_1_6){\\n            (bool success,) = address(seaPort_1_6).call{value : paymentAmount}(marketData);\\n            if (allowFail) {\\n                if (!success) {\\n                    return (false, 0, 0);\\n                }\\n            } else {\\n                require(success, \\\"Purchase SeaPort_1_6 failed\\\");\\n            }\\n        } else {\\n            revert(\\\"Unknown marketId ETH\\\");\\n        }\\n\\n        //transferring royalties\\n        transferAdditionalRoyaltiesETH(additionalRoyalties, purchaseDetails.amount);\\n        \\n        (uint firstFeeAmount, uint secondFeeAmount) = getFees(purchaseDetails.fees, purchaseDetails.amount);\\n        return (true, firstFeeAmount, secondFeeAmount);\\n    }\\n\\n    /**\\n        @notice executes one purchase in WETH\\n        @param purchaseDetails - details about the purchase\\n        @param allowFail - true if errors are handled, false if revert on errors\\n        @return result false if execution failed, true if succeded\\n        @return firstFeeAmount amount of the first fee of the purchase, 0 if failed\\n        @return secondFeeAmount amount of the second fee of the purchase, 0 if failed\\n     */\\n    function purchaseWETH(PurchaseDetails memory purchaseDetails, bool allowFail) internal returns(bool, uint, uint) {\\n        (bytes memory marketData, uint[] memory additionalRoyalties) = getDataAndAdditionalData (purchaseDetails.data, purchaseDetails.fees, purchaseDetails.marketId);\\n\\n        //buying\\n        if (purchaseDetails.marketId == Markets.SeaPort_1_1){\\n            (bool success,) = address(seaPort_1_1).call(marketData);\\n            if (allowFail) {\\n                if (!success) {\\n                    return (false, 0, 0);\\n                }\\n            } else {\\n                require(success, \\\"Purchase SeaPort_1_1 failed WETH\\\");\\n            }\\n        } else if (purchaseDetails.marketId == Markets.ExchangeV2) {\\n            (bool success,) = address(exchangeV2).call(marketData);\\n            if (allowFail) {\\n                if (!success) {\\n                    return (false, 0, 0);\\n                }\\n            } else {\\n                require(success, \\\"Purchase rarible failed WETH\\\");\\n            }\\n        } else if (purchaseDetails.marketId == Markets.SeaPort_1_4){\\n            (bool success,) = address(seaPort_1_4).call(marketData);\\n            if (allowFail) {\\n                if (!success) {\\n                    return (false, 0, 0);\\n                }\\n            } else {\\n                require(success, \\\"Purchase SeaPort_1_4 failed WETH\\\");\\n            }\\n        } else if (purchaseDetails.marketId == Markets.SeaPort_1_5){\\n            (bool success,) = address(seaPort_1_5).call(marketData);\\n            if (allowFail) {\\n                if (!success) {\\n                    return (false, 0, 0);\\n                }\\n            } else {\\n                require(success, \\\"Purchase SeaPort_1_5 failed WETH\\\");\\n            }\\n        } else if (purchaseDetails.marketId == Markets.SeaPort_1_6){\\n            (bool success,) = address(seaPort_1_6).call(marketData);\\n            if (allowFail) {\\n                if (!success) {\\n                    return (false, 0, 0);\\n                }\\n            } else {\\n                require(success, \\\"Purchase SeaPort_1_6 failed WETH\\\");\\n            }\\n        } else {\\n            revert(\\\"Unknown marketId WETH\\\");\\n        }\\n        \\n        //transfer royalties\\n        transferAdditionalRoyaltiesWETH(additionalRoyalties, purchaseDetails.amount);\\n\\n        //get fees\\n        (uint firstFeeAmount, uint secondFeeAmount) = getFees(purchaseDetails.fees, purchaseDetails.amount);\\n        return (true, firstFeeAmount, secondFeeAmount);\\n    }\\n\\n    /**\\n        @notice transfers ETH fee to feeRecipient\\n        @param feeAmount - amount to be transfered\\n        @param feeRecipient - address of the recipient\\n     */\\n    function transferFeeETH(uint feeAmount, address feeRecipient) internal {\\n        if (feeAmount > 0 && feeRecipient != address(0)) {\\n            LibTransfer.transferEth(feeRecipient, feeAmount);\\n        }\\n    }\\n\\n    /**\\n        @notice transfers WETH fee to feeRecipient\\n        @param feeAmount - amount to be transfered\\n        @param feeRecipient - address of the recipient\\n     */\\n    function transferFeeWETH(uint feeAmount, address feeRecipient) internal {\\n        if (feeAmount > 0 && feeRecipient != address(0)) {\\n            IERC20Upgradeable(weth).transfer(feeRecipient, feeAmount);\\n        }\\n    }\\n\\n    /**\\n        @notice transfers change back to sender\\n     */\\n    function transferChange() internal {\\n        uint ethAmount = address(this).balance;\\n        if (ethAmount > 0) {\\n            address(msg.sender).transferEth(ethAmount);\\n        }\\n    }\\n\\n    /**\\n        @notice transfers weth change back to sender\\n     */\\n    function transferChangeWETH() internal {\\n        uint wethAmount = IERC20Upgradeable(weth).balanceOf(address(this));\\n        if (wethAmount > 0) {\\n            IERC20Upgradeable(weth).transfer(_msgSender(), wethAmount);\\n        }\\n    }\\n\\n    /**\\n        @notice parses fees in base points from one uint and calculates real amount of fees\\n        @param fees two fees encoded in one uint, 29 and 30 bytes are used for the first fee, 31 and 32 bytes for second fee\\n        @param amount price of the order\\n        @return firstFeeAmount real amount for the first fee\\n        @return secondFeeAmount real amount for the second fee\\n     */\\n    function getFees(uint fees, uint amount) internal pure returns(uint, uint) {\\n        uint firstFee = uint(uint16(fees >> 16));\\n        uint secondFee = uint(uint16(fees));\\n        return (amount.bp(firstFee), amount.bp(secondFee));\\n    }\\n\\n    /**\\n        @notice parses \\\"fees\\\" field to find the currency for the purchase\\n        @param fees field with encoded data\\n        @return 0 if ETH, 1 if WETH ERC-20\\n     */\\n    function getCurrency(uint fees) internal pure returns(Currencies) {\\n        return Currencies(uint16(fees >> 48));\\n    }\\n\\n\\n    /**\\n        @notice parses _data to data for market call and additionalData\\n        @param feesAndDataType 27 and 28 bytes for dataType\\n        @return marketData data for market call\\n        @return additionalRoyalties array uint256, (base point + address)\\n     */\\n    function getDataAndAdditionalData (bytes memory _data, uint feesAndDataType, Markets marketId) internal pure returns (bytes memory, uint[] memory) {\\n        AdditionalDataTypes dataType = AdditionalDataTypes(uint16(feesAndDataType >> 32));\\n        uint[] memory additionalRoyalties;\\n\\n        //return no royalties if wrong data type\\n        if (dataType == AdditionalDataTypes.NoAdditionalData) {\\n            return (_data, additionalRoyalties);\\n        }\\n\\n        if (dataType == AdditionalDataTypes.RoyaltiesAdditionalData) {\\n            AdditionalData memory additionalData = abi.decode(_data, (AdditionalData));\\n\\n            //return no royalties if market doesn't support royalties\\n            if (supportsRoyalties(marketId)) {\\n                return (additionalData.data, additionalData.additionalRoyalties);\\n            } else {\\n                return (additionalData.data, additionalRoyalties);\\n            } \\n        }\\n        \\n        revert(\\\"unknown additionalDataType\\\");\\n    }\\n\\n    /**\\n        @notice transfer additional royalties in ETH\\n        @param _additionalRoyalties array uint256 (base point + royalty recipient address)\\n     */\\n    function transferAdditionalRoyaltiesETH (uint[] memory _additionalRoyalties, uint amount) internal {\\n        for (uint i = 0; i < _additionalRoyalties.length; ++i) {\\n            if (_additionalRoyalties[i] > 0) {\\n                address payable account = payable(address(_additionalRoyalties[i]));\\n                uint basePoint = uint(_additionalRoyalties[i] >> 160);\\n                uint value = amount.bp(basePoint);\\n                transferFeeETH(value, account);\\n            }\\n        }\\n    }\\n\\n    /**\\n        @notice transfer additional royalties in WETH\\n        @param _additionalRoyalties array uint256 (base point + royalty recipient address)\\n     */\\n    function transferAdditionalRoyaltiesWETH (uint[] memory _additionalRoyalties, uint amount) internal {\\n        for (uint i = 0; i < _additionalRoyalties.length; ++i) {\\n            if (_additionalRoyalties[i] > 0) {\\n                address payable account = payable(address(_additionalRoyalties[i]));\\n                uint basePoint = uint(_additionalRoyalties[i] >> 160);\\n                uint value = amount.bp(basePoint);\\n                transferFeeWETH(value, account);\\n            }\\n        }\\n    }\\n\\n    // modifies `src`\\n    function _arrayReplace(\\n        bytes memory src,\\n        bytes memory replacement,\\n        bytes memory mask\\n    ) internal view virtual {\\n        require(src.length == replacement.length);\\n        require(src.length == mask.length);\\n\\n        for (uint256 i = 0; i < src.length; ++i) {\\n            if (mask[i] != 0) {\\n                src[i] = replacement[i];\\n            }\\n        }\\n    }\\n\\n    /**\\n        @notice returns true if this contract supports additional royalties for the marketplace;\\n        now royalties are supported for:\\n          1. SudoSwap\\n          2. LooksRare old\\n          3. LooksRare V2\\n    */\\n    function supportsRoyalties(Markets marketId) internal pure returns (bool){\\n        if (\\n            marketId == Markets.SudoSwap ||\\n            marketId == Markets.LooksRareOrders ||\\n            marketId == Markets.LooksRareV2\\n        ) {\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    function getAmountOfWethForPurchase(PurchaseDetails memory detail) internal pure returns (uint) {\\n        uint result = 0;\\n\\n        Currencies currency = getCurrency(detail.fees);\\n\\n        //for every purchase with WETH we sum amount, fees and royalties needed\\n            if (currency == Currencies.WETH) {\\n\\n                //add amount\\n                result = result + detail.amount;\\n\\n                //add fees\\n                (uint firstFeeAmount, uint secondFeeAmount) = getFees(detail.fees, detail.amount);\\n                result = result + firstFeeAmount + secondFeeAmount;\\n\\n                //add royalties\\n                (, uint[] memory royalties) = getDataAndAdditionalData (detail.data, detail.fees, detail.marketId);\\n                for (uint j = 0; j < royalties.length; ++j) {\\n                    uint royaltyBasePoint = uint(royalties[j] >> 160);\\n                    uint royaltyValue = detail.amount.bp(royaltyBasePoint);\\n                    result = result + royaltyValue;\\n                }\\n            }\\n\\n        return result;\\n    }\\n\\n    /**\\n        @notice approves weth for a list of the addresses\\n        @param transferProxies - array of addresses to approve WETH for\\n    */\\n    function approveWETH(address[] calldata transferProxies) external onlyOwner {\\n        for (uint i = 0; i < transferProxies.length; ++i) {\\n            IERC20Upgradeable(weth).approve(transferProxies[i], UINT256_MAX);\\n        }\\n    }\\n\\n    receive() external payable {}\\n}\"\n    },\n    \"@rarible/lazy-mint/contracts/erc-1155/IERC1155LazyMint.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\nimport \\\"./LibERC1155LazyMint.sol\\\";\\nimport \\\"@rarible/lib-part/contracts/LibPart.sol\\\";\\n\\ninterface IERC1155LazyMint is IERC1155Upgradeable {\\n\\n    event Supply(\\n        uint256 tokenId,\\n        uint256 value\\n    );\\n    event Creators(\\n        uint256 tokenId,\\n        LibPart.Part[] creators\\n    );\\n\\n    function mintAndTransfer(\\n        LibERC1155LazyMint.Mint1155Data memory data,\\n        address to,\\n        uint256 _amount\\n    ) external;\\n\\n    function transferFromOrMint(\\n        LibERC1155LazyMint.Mint1155Data memory data,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external;\\n}\\n\"\n    },\n    \"@rarible/lazy-mint/contracts/erc-1155/LibERC1155LazyMint.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"@rarible/lib-part/contracts/LibPart.sol\\\";\\n\\nlibrary LibERC1155LazyMint {\\n    bytes4 constant public ERC1155_LAZY_ASSET_CLASS = bytes4(keccak256(\\\"ERC1155_LAZY\\\"));\\n    bytes4 constant _INTERFACE_ID_MINT_AND_TRANSFER = 0x6db15a0f;\\n\\n    struct Mint1155Data {\\n        uint tokenId;\\n        string tokenURI;\\n        uint supply;\\n        LibPart.Part[] creators;\\n        LibPart.Part[] royalties;\\n        bytes[] signatures;\\n    }\\n\\n    bytes32 public constant MINT_AND_TRANSFER_TYPEHASH = keccak256(\\\"Mint1155(uint256 tokenId,uint256 supply,string tokenURI,Part[] creators,Part[] royalties)Part(address account,uint96 value)\\\");\\n\\n    function hash(Mint1155Data memory data) internal pure returns (bytes32) {\\n        bytes32[] memory royaltiesBytes = new bytes32[](data.royalties.length);\\n        for (uint i = 0; i < data.royalties.length; ++i) {\\n            royaltiesBytes[i] = LibPart.hash(data.royalties[i]);\\n        }\\n        bytes32[] memory creatorsBytes = new bytes32[](data.creators.length);\\n        for (uint i = 0; i < data.creators.length; ++i) {\\n            creatorsBytes[i] = LibPart.hash(data.creators[i]);\\n        }\\n        return keccak256(abi.encode(\\n                MINT_AND_TRANSFER_TYPEHASH,\\n                data.tokenId,\\n                data.supply,\\n                keccak256(bytes(data.tokenURI)),\\n                keccak256(abi.encodePacked(creatorsBytes)),\\n                keccak256(abi.encodePacked(royaltiesBytes))\\n            ));\\n    }\\n}\\n\"\n    },\n    \"@rarible/lazy-mint/contracts/erc-721/IERC721LazyMint.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"./LibERC721LazyMint.sol\\\";\\nimport \\\"@rarible/lib-part/contracts/LibPart.sol\\\";\\n\\ninterface IERC721LazyMint is IERC721Upgradeable {\\n\\n    event Creators(\\n        uint256 tokenId,\\n        LibPart.Part[] creators\\n    );\\n\\n    function mintAndTransfer(\\n        LibERC721LazyMint.Mint721Data memory data,\\n        address to\\n    ) external;\\n\\n    function transferFromOrMint(\\n        LibERC721LazyMint.Mint721Data memory data,\\n        address from,\\n        address to\\n    ) external;\\n}\\n\"\n    },\n    \"@rarible/lazy-mint/contracts/erc-721/LibERC721LazyMint.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"@rarible/lib-part/contracts/LibPart.sol\\\";\\n\\nlibrary LibERC721LazyMint {\\n    bytes4 constant public ERC721_LAZY_ASSET_CLASS = bytes4(keccak256(\\\"ERC721_LAZY\\\"));\\n    bytes4 constant _INTERFACE_ID_MINT_AND_TRANSFER = 0x8486f69f;\\n\\n    struct Mint721Data {\\n        uint tokenId;\\n        string tokenURI;\\n        LibPart.Part[] creators;\\n        LibPart.Part[] royalties;\\n        bytes[] signatures;\\n    }\\n\\n    bytes32 public constant MINT_AND_TRANSFER_TYPEHASH = keccak256(\\\"Mint721(uint256 tokenId,string tokenURI,Part[] creators,Part[] royalties)Part(address account,uint96 value)\\\");\\n\\n    function hash(Mint721Data memory data) internal pure returns (bytes32) {\\n        bytes32[] memory royaltiesBytes = new bytes32[](data.royalties.length);\\n        for (uint i = 0; i < data.royalties.length; ++i) {\\n            royaltiesBytes[i] = LibPart.hash(data.royalties[i]);\\n        }\\n        bytes32[] memory creatorsBytes = new bytes32[](data.creators.length);\\n        for (uint i = 0; i < data.creators.length; ++i) {\\n            creatorsBytes[i] = LibPart.hash(data.creators[i]);\\n        }\\n        return keccak256(abi.encode(\\n                MINT_AND_TRANSFER_TYPEHASH,\\n                data.tokenId,\\n                keccak256(bytes(data.tokenURI)),\\n                keccak256(abi.encodePacked(creatorsBytes)),\\n                keccak256(abi.encodePacked(royaltiesBytes))\\n            ));\\n    }\\n\\n}\\n\"\n    },\n    \"@rarible/lib-asset/contracts/LibAsset.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nlibrary LibAsset {\\n    bytes4 constant public ETH_ASSET_CLASS = bytes4(keccak256(\\\"ETH\\\"));\\n    bytes4 constant public ERC20_ASSET_CLASS = bytes4(keccak256(\\\"ERC20\\\"));\\n    bytes4 constant public ERC721_ASSET_CLASS = bytes4(keccak256(\\\"ERC721\\\"));\\n    bytes4 constant public ERC1155_ASSET_CLASS = bytes4(keccak256(\\\"ERC1155\\\"));\\n    bytes4 constant public COLLECTION = bytes4(keccak256(\\\"COLLECTION\\\"));\\n    bytes4 constant public CRYPTO_PUNKS = bytes4(keccak256(\\\"CRYPTO_PUNKS\\\"));\\n\\n    bytes32 constant ASSET_TYPE_TYPEHASH = keccak256(\\n        \\\"AssetType(bytes4 assetClass,bytes data)\\\"\\n    );\\n\\n    bytes32 constant ASSET_TYPEHASH = keccak256(\\n        \\\"Asset(AssetType assetType,uint256 value)AssetType(bytes4 assetClass,bytes data)\\\"\\n    );\\n\\n    struct AssetType {\\n        bytes4 assetClass;\\n        bytes data;\\n    }\\n\\n    struct Asset {\\n        AssetType assetType;\\n        uint value;\\n    }\\n\\n    function hash(AssetType memory assetType) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n                ASSET_TYPE_TYPEHASH,\\n                assetType.assetClass,\\n                keccak256(assetType.data)\\n            ));\\n    }\\n\\n    function hash(Asset memory asset) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n                ASSET_TYPEHASH,\\n                hash(asset.assetType),\\n                asset.value\\n            ));\\n    }\\n\\n}\\n\"\n    },\n    \"@rarible/lib-bp/contracts/BpLibrary.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\n\\nlibrary BpLibrary {\\n    using SafeMathUpgradeable for uint;\\n\\n    function bp(uint value, uint bpValue) internal pure returns (uint) {\\n        return value.mul(bpValue).div(10000);\\n    }\\n}\\n\"\n    },\n    \"@rarible/lib-part/contracts/LibPart.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nlibrary LibPart {\\n    bytes32 public constant TYPE_HASH = keccak256(\\\"Part(address account,uint96 value)\\\");\\n\\n    struct Part {\\n        address payable account;\\n        uint96 value;\\n    }\\n\\n    function hash(Part memory part) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, part.account, part.value));\\n    }\\n}\\n\"\n    },\n    \"@rarible/lib-signature/contracts/ERC1271.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nabstract contract ERC1271 {\\n    bytes4 constant public ERC1271_INTERFACE_ID = 0xfb855dc9; // this.isValidSignature.selector\\n\\n    bytes4 constant public ERC1271_RETURN_VALID_SIGNATURE =   0x1626ba7e;\\n    bytes4 constant public ERC1271_RETURN_INVALID_SIGNATURE = 0x00000000;\\n\\n    /**\\n    * @dev Function must be implemented by deriving contract\\n    * @param _hash Arbitrary length data signed on the behalf of address(this)\\n    * @param _signature Signature byte array associated with _data\\n    * @return A bytes4 magic value 0x1626ba7e if the signature check passes, 0x00000000 if not\\n    *\\n    * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\\n    * MUST allow external calls\\n    */\\n    function isValidSignature(bytes32 _hash, bytes memory _signature) public virtual view returns (bytes4);\\n\\n    function returnIsValidSignatureMagicNumber(bool isValid) internal pure returns (bytes4) {\\n        return isValid ? ERC1271_RETURN_VALID_SIGNATURE : ERC1271_RETURN_INVALID_SIGNATURE;\\n    }\\n}\"\n    },\n    \"@rarible/lib-signature/contracts/IERC1271.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\ninterface IERC1271 {\\n\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param _hash Hash of the data signed on the behalf of address(this)\\n     * @param _signature Signature byte array associated with _data\\n     *\\n     * MUST return the bytes4 magic value 0x1626ba7e when function passes.\\n     * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\\n     * MUST allow external calls\\n     */\\n    function isValidSignature(bytes32 _hash, bytes calldata _signature) virtual external view returns (bytes4 magicValue);\\n}\"\n    },\n    \"@rarible/lib-signature/contracts/LibSignature.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nlibrary LibSignature {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(\\n            uint256(s) <=\\n                0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\n            \\\"ECDSA: invalid signature 's' value\\\"\\n        );\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        // v > 30 is a special case, we need to adjust hash with \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"\\n        // and v = v - 4\\n        address signer;\\n        if (v > 30) {\\n            require(\\n                v - 4 == 27 || v - 4 == 28,\\n                \\\"ECDSA: invalid signature 'v' value\\\"\\n            );\\n            signer = ecrecover(toEthSignedMessageHash(hash), v - 4, r, s);\\n        } else {\\n            require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n            signer = ecrecover(hash, v, r, s);\\n        }\\n\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * replicates the behavior of the\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n     * JSON-RPC method.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return\\n            keccak256(\\n                abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash)\\n            );\\n    }\\n}\\n\"\n    },\n    \"@rarible/meta-tx/contracts/EIP712MetaTransaction.sol\": {\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nabstract contract EIP712MetaTransaction is ContextUpgradeable {\\n    using SafeMath for uint256;\\n\\n    bytes32 private constant META_TRANSACTION_TYPEHASH = keccak256(bytes(\\\"MetaTransaction(uint256 nonce,address from,bytes functionSignature)\\\"));\\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH = keccak256(\\\"EIP712Domain(string name,string version,address verifyingContract,bytes32 salt)\\\");\\n\\n    mapping(address => uint256) private nonces;\\n    bytes32 internal domainSeparator;\\n\\n    /*\\n     * Meta transaction structure.\\n     * No point of including value field here as if user is doing value transfer then he has the funds to pay for gas\\n     * He should call the desired function directly in that case.\\n     */\\n    struct MetaTransaction {\\n        uint256 nonce;\\n        address from;\\n        bytes functionSignature;\\n    }\\n\\n    /*\\n     * Domain structure.\\n     * Data(information to for making metaTransaction method uniq.) about method and contract\\n     */\\n    struct EIP712Domain {\\n        string name;\\n        string version;\\n        address verifyingContract;\\n        bytes32 salt;\\n    }\\n\\n    event MetaTransactionExecuted(address userAddress, address payable relayerAddress, bytes functionSignature);\\n\\n    function __MetaTransaction_init_unchained(string memory name, string memory version) internal {\\n        domainSeparator = keccak256(abi.encode(\\n                EIP712_DOMAIN_TYPEHASH,\\n                keccak256(bytes(name)),\\n                keccak256(bytes(version)),\\n                address(this),\\n                getSalt()\\n            ));\\n    }\\n\\n    function convertBytesToBytes4(bytes memory inBytes) internal pure returns (bytes4 outBytes4) {\\n        if (inBytes.length == 0) {\\n            return 0x0;\\n        }\\n\\n        assembly {\\n            outBytes4 := mload(add(inBytes, 32))\\n        }\\n    }\\n\\n    function executeMetaTransaction(address userAddress,\\n        bytes memory functionSignature, bytes32 sigR, bytes32 sigS, uint8 sigV) external payable returns (bytes memory) {\\n        bytes4 destinationFunctionSig = convertBytesToBytes4(functionSignature);\\n        require(destinationFunctionSig != msg.sig, \\\"Wrong functionSignature\\\");\\n        MetaTransaction memory metaTx = MetaTransaction({\\n        nonce : nonces[userAddress],\\n        from : userAddress,\\n        functionSignature : functionSignature\\n        });\\n        require(verify(userAddress, metaTx, sigR, sigS, sigV), \\\"Signer and signature do not match\\\");\\n        nonces[userAddress] = nonces[userAddress].add(1);\\n        // Append userAddress at the end to extract it from calling context\\n        (bool success, bytes memory returnData) = address(this).call(abi.encodePacked(functionSignature, userAddress));\\n\\n        require(success, \\\"Function call not successful\\\");\\n        emit MetaTransactionExecuted(userAddress, msg.sender, functionSignature);\\n        return returnData;\\n    }\\n\\n    function hashMetaTransaction(MetaTransaction memory metaTx) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n                META_TRANSACTION_TYPEHASH,\\n                metaTx.nonce,\\n                metaTx.from,\\n                keccak256(metaTx.functionSignature)\\n            ));\\n    }\\n\\n    function getNonce(address user) external view returns (uint256 nonce) {\\n        nonce = nonces[user];\\n    }\\n\\n    function verify(address user, MetaTransaction memory metaTx, bytes32 sigR, bytes32 sigS, uint8 sigV) internal view returns (bool) {\\n        address signer = ecrecover(toTypedMessageHash(hashMetaTransaction(metaTx)), sigV, sigR, sigS);\\n        require(signer != address(0), \\\"Invalid signature\\\");\\n        return signer == user;\\n    }\\n\\n    function _msgSender() internal view virtual override returns (address payable sender) {\\n        if (msg.sender == address(this)) {\\n            bytes memory array = msg.data;\\n            uint256 index = msg.data.length;\\n            assembly {\\n            // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\n                sender := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff)\\n            }\\n        } else {\\n            sender = msg.sender;\\n        }\\n        return sender;\\n    }\\n\\n    function getSalt() internal pure returns (bytes32) {\\n        return bytes32(getChainID());\\n    }\\n\\n    function getChainID() internal pure returns (uint256 id) {\\n        assembly {\\n            id := chainid()\\n        }\\n    }\\n\\n    function getDomainSeparator() private view returns (bytes32) {\\n        return domainSeparator;\\n    }\\n\\n    /**\\n    * Accept message hash and returns hash message in EIP712 compatible form\\n    * So that it can be used to recover signer from signature signed using EIP712 formatted data\\n    * https://eips.ethereum.org/EIPS/eip-712\\n    * \\\"\\\\\\\\x19\\\" makes the encoding deterministic\\n    * \\\"\\\\\\\\x01\\\" is the version byte to make it compatible to EIP-191\\n    */\\n    function toTypedMessageHash(bytes32 messageHash) internal view returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", getDomainSeparator(), messageHash));\\n    }\\n\\n    /**\\n         * @dev verifies the call result and bubbles up revert reason for failed calls\\n         *\\n         * @param success : outcome of forwarded call\\n         * @param returndata : returned data from the frowarded call\\n         * @param errorMessage : fallback error message to show\\n         */\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure {\\n        if (!success) {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\"\n    },\n    \"@rarible/role-operator/contracts/OperatorRole.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.9 <0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ncontract OperatorRole is OwnableUpgradeable {\\n    mapping (address => bool) operators;\\n\\n    function __OperatorRole_init() external initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function addOperator(address operator) external onlyOwner {\\n        operators[operator] = true;\\n    }\\n\\n    function removeOperator(address operator) external onlyOwner {\\n        operators[operator] = false;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(operators[_msgSender()], \\\"OperatorRole: caller is not the operator\\\");\\n        _;\\n    }\\n}\\n\"\n    },\n    \"@rarible/royalties-registry/contracts/providers/RoyaltiesProviderArtBlocks.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.9 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@rarible/exchange-interfaces/contracts/IRoyaltiesProvider.sol\\\";\\nimport \\\"./RoyaltyArtBlocks.sol\\\";\\nimport \\\"@rarible/lib-bp/contracts/BpLibrary.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract RoyaltiesProviderArtBlocks is IRoyaltiesProvider, Ownable {\\n    using SafeMathUpgradeable for uint;\\n    using BpLibrary for uint;\\n\\n    uint96 public artblocksPercentage = 250;\\n\\n    event ArtblocksPercentageChanged(address _who, uint96 _old, uint96 _new);\\n\\n    function getRoyalties(address token, uint tokenId) override external view returns(LibPart.Part[] memory) {\\n\\n        RoyaltyArtBlocks artBlocks = RoyaltyArtBlocks(token);\\n\\n        //gettign artist and additionalPayee royalty part\\n        (address artistAddress, address additionalPayee, uint256 additionalPayeePercentage, uint256 royaltyFeeByID) = artBlocks.getRoyaltyData(tokenId);\\n\\n        require(additionalPayeePercentage <= 100 && royaltyFeeByID <= 100, \\\"wrong royalties percentages from artBlocks\\\");\\n\\n        //resulting royalties\\n        LibPart.Part[] memory result;\\n\\n        //if no artist royalty\\n        if (royaltyFeeByID == 0) {\\n            //if artblocksPercentage > 0\\n            if (artblocksPercentage > 0) {\\n                result = new LibPart.Part[](1);\\n\\n                //calculating artBLocks part\\n                result[0].account = payable(owner());\\n                result[0].value = artblocksPercentage;\\n            }\\n            //if artblocksPercentage = 0 then result is empty\\n            return result;\\n\\n        //if royaltyFeeByID > 0 and  0 < additionalPayeePercentage < 100\\n        } else if (additionalPayeePercentage > 0 && additionalPayeePercentage < 100) {\\n            result = new LibPart.Part[](3);\\n\\n            //calculating artBLocks part\\n            result[0].account = payable(owner());\\n            result[0].value = artblocksPercentage;\\n\\n             // additional payee percentage * 100\\n            uint96 additionalPart = uint96(royaltyFeeByID.mul(100).bp(additionalPayeePercentage.mul(100)));\\n\\n            //artist part\\n            result[1].account = payable(artistAddress);\\n            result[1].value = uint96(royaltyFeeByID.mul(100).sub(additionalPart));\\n\\n            result[2].account = payable(additionalPayee);\\n            result[2].value = additionalPart;\\n            \\n        //if royaltyFeeByID > 0 and additionalPayeePercentage == 0 or 100\\n        } else {\\n            result = new LibPart.Part[](2);\\n\\n            //calculating artBLocks part\\n            result[0].account = payable(owner());\\n            result[0].value = artblocksPercentage;\\n\\n            // additional payee percentage * 100\\n            uint96 additionalPart = uint96(royaltyFeeByID.mul(100).bp(additionalPayeePercentage.mul(100)));\\n\\n            //artist part\\n            if (additionalPayeePercentage == 0) {\\n                result[1].account = payable(artistAddress);\\n                result[1].value = uint96(royaltyFeeByID.mul(100).sub(additionalPart));\\n            }\\n\\n            //additional payee part\\n            if (additionalPayeePercentage == 100) {\\n                result[1].account = payable(additionalPayee);\\n                result[1].value = additionalPart;\\n            }\\n        } \\n\\n        return result;\\n    }\\n\\n    //sets new value for artblocksPercentage\\n    function setArtblocksPercentage(uint96 _artblocksPercentage) onlyOwner public {\\n        require(_artblocksPercentage <= 10000,\\\"_artblocksPercentage can't be > 100%\\\");\\n        emit ArtblocksPercentageChanged(_msgSender(), artblocksPercentage, _artblocksPercentage);\\n        artblocksPercentage = _artblocksPercentage;\\n    }\\n\\n}\\n\"\n    },\n    \"@rarible/royalties-registry/contracts/providers/RoyaltiesProviderArtBlocksV2.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.9 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@rarible/exchange-interfaces/contracts/IRoyaltiesProvider.sol\\\";\\nimport \\\"./RoyaltyArtBlocksV2.sol\\\";\\n\\ncontract RoyaltiesProviderArtBlocksV2 is IRoyaltiesProvider {\\n\\n    function getRoyalties(address token, uint tokenId) override external view returns(LibPart.Part[] memory) {\\n        RoyaltyArtBlocksV2 artBlocksV2 = RoyaltyArtBlocksV2(token);\\n\\n        (address payable[] memory recipients, uint256[] memory bps) = artBlocksV2.getRoyalties(tokenId);\\n        \\n        uint256 len = recipients.length;\\n\\n        LibPart.Part[] memory result = new LibPart.Part[](len);\\n        \\n        for (uint i = 0; i < len; i++) {\\n            result[i].account = recipients[i];\\n            result[i].value = uint96(bps[i]);\\n        }\\n\\n        return result;\\n    }\\n\\n}\\n\"\n    },\n    \"@rarible/royalties-registry/contracts/providers/RoyaltiesProviderV2Legacy.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.9 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@rarible/exchange-interfaces/contracts/IRoyaltiesProvider.sol\\\";\\nimport \\\"./RoyaltyV2Legacy.sol\\\";\\n\\ncontract RoyaltiesProviderV2Legacy is IRoyaltiesProvider {\\n    function getRoyalties(address token, uint tokenId) override external view returns(LibPart.Part[] memory) {\\n        return RoyaltyV2Legacy(token).getRoyalties(tokenId);\\n    }\\n}\\n\"\n    },\n    \"@rarible/royalties-registry/contracts/providers/RoyaltyArtBlocks.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@rarible/lib-part/contracts/LibPart.sol\\\";\\n\\nabstract contract RoyaltyArtBlocks {\\n    \\n    function getRoyaltyData(uint256 _tokenId) external virtual view returns (address artistAddress, address additionalPayee, uint256 additionalPayeePercentage, uint256 royaltyFeeByID);\\n\\n}\\n\"\n    },\n    \"@rarible/royalties-registry/contracts/providers/RoyaltyArtBlocksV2.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@rarible/lib-part/contracts/LibPart.sol\\\";\\n\\nabstract contract RoyaltyArtBlocksV2 {\\n    \\n    /**\\n     * @notice Gets royalty Basis Points (BPS) for token ID `_tokenId`.\\n     * This conforms to the IManifold interface designated in the Royalty\\n     * Registry's RoyaltyEngineV1.sol contract.\\n     * ref: https://github.com/manifoldxyz/royalty-registry-solidity\\n     * @param _tokenId Token ID to be queried.\\n     * @return recipients Array of royalty payment recipients\\n     * @return bps Array of Basis Points (BPS) allocated to each recipient,\\n     * aligned by index.\\n     * @dev reverts if invalid _tokenId\\n     * @dev only returns recipients that have a non-zero BPS allocation\\n     */\\n    function getRoyalties(uint256 _tokenId) \\n        external \\n        view\\n        virtual\\n        returns (\\n            address payable[] memory recipients, \\n            uint256[] memory bps\\n        );\\n\\n}\\n\"\n    },\n    \"@rarible/royalties-registry/contracts/providers/RoyaltyV2Legacy.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@rarible/lib-part/contracts/LibPart.sol\\\";\\n\\ninterface RoyaltyV2Legacy {\\n    event RoyaltiesSet(uint256 tokenId, LibPart.Part[] royalties);\\n\\n    function getRoyalties(uint256 id) external view returns (LibPart.Part[] memory);\\n}\\n\"\n    },\n    \"@rarible/royalties-registry/contracts/RoyaltiesRegistry.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@rarible/exchange-interfaces/contracts/IRoyaltiesProvider.sol\\\";\\nimport \\\"@rarible/royalties/contracts/LibRoyaltiesV2.sol\\\";\\nimport \\\"@rarible/royalties/contracts/LibRoyaltiesV1.sol\\\";\\nimport \\\"@rarible/royalties/contracts/LibRoyalties2981.sol\\\";\\nimport \\\"@rarible/royalties/contracts/RoyaltiesV1.sol\\\";\\nimport \\\"@rarible/royalties/contracts/RoyaltiesV2.sol\\\";\\nimport \\\"@rarible/royalties/contracts/IERC2981.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ncontract RoyaltiesRegistry is IRoyaltiesProvider, OwnableUpgradeable {\\n    /// @dev deprecated\\n    event RoyaltiesSetForToken(address indexed token, uint indexed tokenId, LibPart.Part[] royalties);\\n    /// @dev emitted when royalties set for token in \\n    event RoyaltiesSetForContract(address indexed token, LibPart.Part[] royalties);\\n\\n    /// @dev struct to store royalties in royaltiesByToken\\n    struct RoyaltiesSet {\\n        bool initialized;\\n        LibPart.Part[] royalties;\\n    }\\n\\n    /// @dev deprecated\\n    mapping(bytes32 => RoyaltiesSet) public royaltiesByTokenAndTokenId;\\n    /// @dev stores royalties for token contract, set in setRoyaltiesByToken() method\\n    mapping(address => RoyaltiesSet) public royaltiesByToken;\\n    /// @dev stores external provider and royalties type for token contract\\n    mapping(address => uint) public royaltiesProviders;\\n\\n    /// @dev total amount or supported royalties types\\n    // 0 - royalties type is unset\\n    // 1 - royaltiesByToken, 2 - v2, 3 - v1,\\n    // 4 - external provider, 5 - EIP-2981\\n    // 6 - unsupported/nonexistent royalties type\\n    uint constant royaltiesTypesAmount = 6;\\n\\n    function __RoyaltiesRegistry_init() external initializer {\\n        __Ownable_init_unchained();\\n    }\\n\\n    /// @dev sets external provider for token contract, and royalties type = 4\\n    function setProviderByToken(address token, address provider) external {\\n        checkOwner(token);\\n        setRoyaltiesType(token, 4, provider);\\n    }\\n\\n    /// @dev returns provider address for token contract from royaltiesProviders mapping\\n    function getProvider(address token) public view returns(address) {\\n        return address(royaltiesProviders[token]);\\n    }\\n\\n    /// @dev returns royalties type for token contract\\n    function getRoyaltiesType(address token) external view returns(uint) {\\n        return _getRoyaltiesType(royaltiesProviders[token]);\\n    }\\n\\n    /// @dev returns royalties type from uint\\n    function _getRoyaltiesType(uint data) internal pure returns(uint) {\\n        for (uint i = 1; i <= royaltiesTypesAmount; ++i) {\\n            if (data / 2**(256-i) == 1) {\\n                return i;\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    /// @dev sets royalties type for token contract\\n    function setRoyaltiesType(address token, uint royaltiesType, address royaltiesProvider) internal {\\n        require(royaltiesType > 0 && royaltiesType <= royaltiesTypesAmount, \\\"wrong royaltiesType\\\");\\n        royaltiesProviders[token] = uint(royaltiesProvider) + 2**(256 - royaltiesType);\\n    }\\n\\n    /// @dev clears and sets new royalties type for token contract\\n    function forceSetRoyaltiesType(address token, uint royaltiesType) external {\\n        checkOwner(token);\\n        setRoyaltiesType(token, royaltiesType, getProvider(token));\\n    }\\n\\n    /// @dev clears royalties type for token contract\\n    function clearRoyaltiesType(address token) external {\\n        checkOwner(token);\\n        royaltiesProviders[token] = uint(getProvider(token));\\n    }\\n\\n    /// @dev sets royalties for token contract in royaltiesByToken mapping and royalties type = 1\\n    function setRoyaltiesByToken(address token, LibPart.Part[] memory royalties) external {\\n        checkOwner(token);\\n        //clearing royaltiesProviders value for the token\\n        delete royaltiesProviders[token];\\n        // setting royaltiesType = 1 for the token\\n        setRoyaltiesType(token, 1, address(0));\\n        uint sumRoyalties = 0;\\n        delete royaltiesByToken[token];\\n        for (uint i = 0; i < royalties.length; ++i) {\\n            require(royalties[i].account != address(0x0), \\\"RoyaltiesByToken recipient should be present\\\");\\n            require(royalties[i].value != 0, \\\"Royalty value for RoyaltiesByToken should be > 0\\\");\\n            royaltiesByToken[token].royalties.push(royalties[i]);\\n            sumRoyalties += royalties[i].value;\\n        }\\n        require(sumRoyalties < 10000, \\\"Set by token royalties sum more, than 100%\\\");\\n        royaltiesByToken[token].initialized = true;\\n        emit RoyaltiesSetForContract(token, royalties);\\n    }\\n\\n    /// @dev checks if msg.sender is owner of this contract or owner of the token contract\\n    function checkOwner(address token) internal view {\\n        if ((owner() != _msgSender()) && (OwnableUpgradeable(token).owner() != _msgSender())) {\\n            revert(\\\"Token owner not detected\\\");\\n        }\\n    }\\n\\n    /// @dev calculates royalties type for token contract\\n    function calculateRoyaltiesType(address token, address royaltiesProvider ) internal view returns(uint) {   \\n        try IERC165Upgradeable(token).supportsInterface(LibRoyaltiesV2._INTERFACE_ID_ROYALTIES) returns(bool result) {\\n            if (result) {\\n                return 2;\\n            }\\n        } catch { }\\n\\n        try IERC165Upgradeable(token).supportsInterface(LibRoyaltiesV1._INTERFACE_ID_FEES) returns(bool result) {\\n            if (result) {\\n                return 3;\\n            }\\n        } catch { }\\n        \\n        try IERC165Upgradeable(token).supportsInterface(LibRoyalties2981._INTERFACE_ID_ROYALTIES) returns(bool result) {\\n            if (result) {\\n                return 5;\\n            }\\n        } catch { }\\n        \\n        if (royaltiesProvider != address(0)) {\\n            return 4;\\n        }\\n\\n        if (royaltiesByToken[token].initialized) {\\n            return 1;\\n        }\\n\\n        return 6;\\n    }\\n\\n    /// @dev returns royalties for token contract and token id\\n    function getRoyalties(address token, uint tokenId) override external returns (LibPart.Part[] memory) {\\n        uint royaltiesProviderData = royaltiesProviders[token];\\n\\n        address royaltiesProvider = address(royaltiesProviderData);\\n        uint royaltiesType = _getRoyaltiesType(royaltiesProviderData);\\n\\n        // case when royaltiesType is not set\\n        if (royaltiesType == 0) {\\n            // calculating royalties type for token\\n            royaltiesType = calculateRoyaltiesType(token, royaltiesProvider);\\n            \\n            //saving royalties type\\n            setRoyaltiesType(token, royaltiesType, royaltiesProvider);\\n        }\\n\\n        //case royaltiesType = 1, royalties are set in royaltiesByToken\\n        if (royaltiesType == 1) {\\n            return royaltiesByToken[token].royalties;\\n        }\\n\\n        //case royaltiesType = 2, royalties rarible v2\\n        if (royaltiesType == 2) {\\n            return getRoyaltiesRaribleV2(token,tokenId);\\n        }\\n\\n        //case royaltiesType = 3, royalties rarible v1\\n        if (royaltiesType == 3) {\\n            return getRoyaltiesRaribleV1(token, tokenId);\\n        }\\n\\n        //case royaltiesType = 4, royalties from external provider\\n        if (royaltiesType == 4) {\\n            return providerExtractor(token, tokenId, royaltiesProvider);\\n        }\\n\\n        //case royaltiesType = 5, royalties EIP-2981\\n        if (royaltiesType == 5) {\\n            return getRoyaltiesEIP2981(token, tokenId);\\n        }\\n\\n        // case royaltiesType = 6, unknown/empty royalties\\n        if (royaltiesType == 6) {\\n            return new LibPart.Part[](0);\\n        } \\n\\n        revert(\\\"something wrong in getRoyalties\\\");\\n    }\\n\\n    /// @dev tries to get royalties rarible-v2 for token and tokenId\\n    function getRoyaltiesRaribleV2(address token, uint tokenId) internal view returns (LibPart.Part[] memory) {\\n        try RoyaltiesV2(token).getRaribleV2Royalties(tokenId) returns (LibPart.Part[] memory result) {\\n            return result;\\n        } catch {\\n            return new LibPart.Part[](0);\\n        }\\n    }\\n\\n    /// @dev tries to get royalties rarible-v1 for token and tokenId\\n    function getRoyaltiesRaribleV1(address token, uint tokenId) internal view returns (LibPart.Part[] memory) {\\n        RoyaltiesV1 v1 = RoyaltiesV1(token);\\n        address payable[] memory recipients;\\n        try v1.getFeeRecipients(tokenId) returns (address payable[] memory resultRecipients) {\\n            recipients = resultRecipients;\\n        } catch {\\n            return new LibPart.Part[](0);\\n        }\\n        uint[] memory values;\\n        try v1.getFeeBps(tokenId) returns (uint[] memory resultValues) {\\n            values = resultValues;\\n        } catch {\\n            return new LibPart.Part[](0);\\n        }\\n        if (values.length != recipients.length) {\\n            return new LibPart.Part[](0);\\n        }\\n        LibPart.Part[] memory result = new LibPart.Part[](values.length);\\n        for (uint256 i = 0; i < values.length; ++i) {\\n            result[i].value = uint96(values[i]);\\n            result[i].account = recipients[i];\\n        }\\n        return result;\\n    }\\n\\n    /// @dev tries to get royalties EIP-2981 for token and tokenId\\n    function getRoyaltiesEIP2981(address token, uint tokenId) internal view returns (LibPart.Part[] memory) {\\n        try IERC2981(token).royaltyInfo(tokenId, LibRoyalties2981._WEIGHT_VALUE) returns (address receiver, uint256 royaltyAmount) {\\n            return LibRoyalties2981.calculateRoyalties(receiver, royaltyAmount);\\n        } catch {\\n            return new LibPart.Part[](0);\\n        }\\n    }\\n\\n    /// @dev tries to get royalties for token and tokenId from external provider set in royaltiesProviders\\n    function providerExtractor(address token, uint tokenId, address providerAddress) internal returns (LibPart.Part[] memory) {\\n        try IRoyaltiesProvider(providerAddress).getRoyalties(token, tokenId) returns (LibPart.Part[] memory result) {\\n            return result;\\n        } catch {\\n            return new LibPart.Part[](0);\\n        }\\n    }\\n\\n    uint256[46] private __gap;\\n}\\n\"\n    },\n    \"@rarible/royalties-registry/contracts/RoyaltiesRegistryPermissioned.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\npragma abicoder v2;\\n\\nimport \\\"@rarible/exchange-interfaces/contracts/IRoyaltiesProvider.sol\\\";\\nimport \\\"@rarible/royalties/contracts/LibRoyaltiesV2.sol\\\";\\nimport \\\"@rarible/royalties/contracts/LibRoyaltiesV1.sol\\\";\\nimport \\\"@rarible/royalties/contracts/LibRoyalties2981.sol\\\";\\nimport \\\"@rarible/royalties/contracts/RoyaltiesV1.sol\\\";\\nimport \\\"@rarible/royalties/contracts/RoyaltiesV2.sol\\\";\\nimport \\\"@rarible/royalties/contracts/IERC2981.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\n\\ncontract RoyaltiesRegistryPermissioned is IRoyaltiesProvider, OwnableUpgradeable, AccessControlUpgradeable {\\n\\n    /// @dev deprecated\\n    event RoyaltiesSetForToken(address indexed token, uint indexed tokenId, LibPart.Part[] royalties);\\n    /// @dev emitted when royalties set for token in\\n    event RoyaltiesSetForContract(address indexed token, LibPart.Part[] royalties);\\n    /// @dev emitted when royalties set for a collection address\\n    event RoyaltiesAllowedChanged(address indexed token, bool allowed);\\n\\n    /// @dev struct to store royalties in royaltiesByToken\\n    struct RoyaltiesSet {\\n        bool initialized;\\n        LibPart.Part[] royalties;\\n    }\\n\\n    /// @dev deprecated\\n    mapping(bytes32 => RoyaltiesSet) public royaltiesByTokenAndTokenId;\\n    /// @dev stores royalties for token contract, set in setRoyaltiesByToken() method\\n    mapping(address => RoyaltiesSet) public royaltiesByToken;\\n    /// @dev stores external provider and royalties type for token contract\\n    mapping(address => uint) public royaltiesProviders;\\n    /// @dev stores the white list for collections with royalties\\n    mapping(address => bool) public royaltiesAllowed;\\n    /// @dev total amount or supported royalties types\\n    // 0 - royalties type is unset\\n    // 1 - royaltiesByToken, 2 - v2, 3 - v1,\\n    // 4 - external provider, 5 - EIP-2981\\n    // 6 - unsupported/nonexistent royalties type\\n\\n    uint constant royaltiesTypesAmount = 6;\\n    bytes32 public constant WHITELISTER_ROLE = keccak256(\\\"WHITELISTER_ROLE\\\");\\n\\n    function __RoyaltiesRegistry_init(address _initialOwner) external initializer {\\n        require(_initialOwner != address(0), \\\"Invalid owner\\\");\\n        __Context_init();\\n        __Ownable_init();\\n        __AccessControl_init();\\n        _setupRole(DEFAULT_ADMIN_ROLE, _initialOwner);\\n        _setupRole(WHITELISTER_ROLE, _initialOwner);\\n        transferOwnership(_initialOwner);\\n    }\\n\\n    /// @dev sets external provider for token contract, and royalties type = 4\\n    function setProviderByToken(address token, address provider) external {\\n        checkOwner(token);\\n        setRoyaltiesType(token, 4, provider);\\n    }\\n\\n    /// @dev returns provider address for token contract from royaltiesProviders mapping\\n    function getProvider(address token) public view returns(address) {\\n        return address(royaltiesProviders[token]);\\n    }\\n\\n    /// @dev returns royalties type for token contract\\n    function getRoyaltiesType(address token) external view returns(uint) {\\n        if(royaltiesAllowed[token]) {\\n            return _getRoyaltiesType(royaltiesProviders[token]);\\n        } else {\\n            return 6;\\n        }\\n    }\\n\\n    /// @dev returns royalties type from uint\\n    function _getRoyaltiesType(uint data) internal pure returns(uint) {\\n        for (uint i = 1; i <= royaltiesTypesAmount; ++i) {\\n            if (data / 2**(256-i) == 1) {\\n                return i;\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    /// @dev sets royalties type for token contract\\n    function setRoyaltiesType(address token, uint royaltiesType, address royaltiesProvider) internal {\\n        require(royaltiesType > 0 && royaltiesType <= royaltiesTypesAmount, \\\"wrong royaltiesType\\\");\\n        royaltiesProviders[token] = uint(royaltiesProvider) + 2**(256 - royaltiesType);\\n    }\\n\\n    /// @dev clears and sets new royalties type for token contract\\n    function forceSetRoyaltiesType(address token, uint royaltiesType) external {\\n        checkOwner(token);\\n        setRoyaltiesType(token, royaltiesType, getProvider(token));\\n    }\\n\\n    /// @dev clears royalties type for token contract\\n    function clearRoyaltiesType(address token) external {\\n        checkOwner(token);\\n        royaltiesProviders[token] = uint(getProvider(token));\\n    }\\n\\n    /// @dev sets royalties for token contract in royaltiesByToken mapping and royalties type = 1\\n    function setRoyaltiesByToken(address token, LibPart.Part[] memory royalties) external {\\n        checkOwner(token);\\n        //clearing royaltiesProviders value for the token\\n        delete royaltiesProviders[token];\\n        // setting royaltiesType = 1 for the token\\n        setRoyaltiesType(token, 1, address(0));\\n        uint sumRoyalties = 0;\\n        delete royaltiesByToken[token];\\n        for (uint i = 0; i < royalties.length; ++i) {\\n            require(royalties[i].account != address(0x0), \\\"RoyaltiesByToken recipient should be present\\\");\\n            require(royalties[i].value != 0, \\\"Royalty value for RoyaltiesByToken should be > 0\\\");\\n            royaltiesByToken[token].royalties.push(royalties[i]);\\n            sumRoyalties += royalties[i].value;\\n        }\\n        require(sumRoyalties < 10000, \\\"Set by token royalties sum more, than 100%\\\");\\n        royaltiesByToken[token].initialized = true;\\n        emit RoyaltiesSetForContract(token, royalties);\\n    }\\n\\n    /// @dev checks if msg.sender is owner of this contract or owner of the token contract\\n    function checkOwner(address token) internal view {\\n        if ((owner() != _msgSender()) && (OwnableUpgradeable(token).owner() != _msgSender())) {\\n            revert(\\\"Token owner not detected\\\");\\n        }\\n    }\\n\\n    /// @dev calculates royalties type for token contract\\n    function calculateRoyaltiesType(address token, address royaltiesProvider ) internal view returns(uint) {\\n        try IERC165Upgradeable(token).supportsInterface(LibRoyaltiesV2._INTERFACE_ID_ROYALTIES) returns(bool result) {\\n            if (result) {\\n                return 2;\\n            }\\n        } catch { }\\n\\n            try IERC165Upgradeable(token).supportsInterface(LibRoyaltiesV1._INTERFACE_ID_FEES) returns(bool result) {\\n            if (result) {\\n                return 3;\\n            }\\n        } catch { }\\n\\n        try IERC165Upgradeable(token).supportsInterface(LibRoyalties2981._INTERFACE_ID_ROYALTIES) returns(bool result) {\\n            if (result) {\\n                return 5;\\n            }\\n        } catch { }\\n\\n        if (royaltiesProvider != address(0)) {\\n            return 4;\\n        }\\n\\n        if (royaltiesByToken[token].initialized) {\\n            return 1;\\n        }\\n\\n        return 6;\\n    }\\n\\n    /// @dev returns royalties for token contract and token id\\n    function getRoyalties(address token, uint tokenId) override external returns (LibPart.Part[] memory) {\\n        if(royaltiesAllowed[token]) {\\n            uint royaltiesProviderData = royaltiesProviders[token];\\n            address royaltiesProvider = address(royaltiesProviderData);\\n            uint royaltiesType = _getRoyaltiesType(royaltiesProviderData);\\n\\n            // case when royaltiesType is not set\\n            if (royaltiesType == 0) {\\n                // calculating royalties type for token\\n                royaltiesType = calculateRoyaltiesType(token, royaltiesProvider);\\n                //saving royalties type\\n                setRoyaltiesType(token, royaltiesType, royaltiesProvider);\\n            }\\n\\n            //case royaltiesType = 1, royalties are set in royaltiesByToken\\n            if (royaltiesType == 1) {\\n                return royaltiesByToken[token].royalties;\\n            }\\n\\n            //case royaltiesType = 2, royalties rarible v2\\n            if (royaltiesType == 2) {\\n                return getRoyaltiesRaribleV2(token,tokenId);\\n            }\\n\\n            //case royaltiesType = 3, royalties rarible v1\\n            if (royaltiesType == 3) {\\n                return getRoyaltiesRaribleV1(token, tokenId);\\n            }\\n\\n            //case royaltiesType = 4, royalties from external provider\\n            if (royaltiesType == 4) {\\n                return providerExtractor(token, tokenId, royaltiesProvider);\\n            }\\n\\n            //case royaltiesType = 5, royalties EIP-2981\\n            if (royaltiesType == 5) {\\n                return getRoyaltiesEIP2981(token, tokenId);\\n            }\\n\\n            // case royaltiesType = 6, unknown/empty royalties\\n            if (royaltiesType == 6) {\\n                return new LibPart.Part[](0);\\n            }\\n        } else {\\n            return new LibPart.Part[](0);\\n        }\\n\\n        revert(\\\"something wrong in getRoyalties\\\");\\n    }\\n\\n    /// @dev tries to get royalties rarible-v2 for token and tokenId\\n    function getRoyaltiesRaribleV2(address token, uint tokenId) internal view returns (LibPart.Part[] memory) {\\n        try RoyaltiesV2(token).getRaribleV2Royalties(tokenId) returns (LibPart.Part[] memory result) {\\n            return result;\\n        } catch {\\n            return new LibPart.Part[](0);\\n        }\\n    }\\n\\n    /// @dev tries to get royalties rarible-v1 for token and tokenId\\n    function getRoyaltiesRaribleV1(address token, uint tokenId) internal view returns (LibPart.Part[] memory) {\\n        RoyaltiesV1 v1 = RoyaltiesV1(token);\\n        address payable[] memory recipients;\\n        try v1.getFeeRecipients(tokenId) returns (address payable[] memory resultRecipients) {\\n            recipients = resultRecipients;\\n        } catch {\\n            return new LibPart.Part[](0);\\n        }\\n        uint[] memory values;\\n        try v1.getFeeBps(tokenId) returns (uint[] memory resultValues) {\\n            values = resultValues;\\n        } catch {\\n            return new LibPart.Part[](0);\\n        }\\n        if (values.length != recipients.length) {\\n            return new LibPart.Part[](0);\\n        }\\n        LibPart.Part[] memory result = new LibPart.Part[](values.length);\\n        for (uint256 i = 0; i < values.length; ++i) {\\n            result[i].value = uint96(values[i]);\\n            result[i].account = recipients[i];\\n        }\\n        return result;\\n    }\\n\\n    /// @dev tries to get royalties EIP-2981 for token and tokenId\\n    function getRoyaltiesEIP2981(address token, uint tokenId) internal view returns (LibPart.Part[] memory) {\\n        try IERC2981(token).royaltyInfo(tokenId, LibRoyalties2981._WEIGHT_VALUE) returns (address receiver, uint256 royaltyAmount) {\\n            return LibRoyalties2981.calculateRoyalties(receiver, royaltyAmount);\\n        } catch {\\n            return new LibPart.Part[](0);\\n        }\\n    }\\n\\n    /// @dev tries to get royalties for token and tokenId from external provider set in royaltiesProviders\\n    function providerExtractor(address token, uint tokenId, address providerAddress) internal returns (LibPart.Part[] memory) {\\n        try IRoyaltiesProvider(providerAddress).getRoyalties(token, tokenId) returns (LibPart.Part[] memory result) {\\n            return result;\\n        } catch {\\n            return new LibPart.Part[](0);\\n        }\\n    }\\n\\n    function setRoyaltiesAllowed(address token, bool allowed) external {\\n        require(hasRole(WHITELISTER_ROLE, _msgSender()), \\\"not whitelister\\\");\\n        royaltiesAllowed[token] = allowed;\\n        emit RoyaltiesAllowedChanged(token, allowed);\\n    }\\n\\n    function setRoyaltiesAllowedBulk(address[] calldata tokens, bool allowed) external {\\n        require(hasRole(WHITELISTER_ROLE, _msgSender()), \\\"not whitelister\\\");\\n        for (uint i = 0; i < tokens.length; ++i) {\\n            royaltiesAllowed[tokens[i]] = allowed;\\n            emit RoyaltiesAllowedChanged(tokens[i], allowed);\\n        }\\n    }\\n\\n    uint256[45] private __gap;\\n}\"\n    },\n    \"@rarible/royalties-upgradeable/contracts/RoyaltiesV2Upgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"@rarible/royalties/contracts/LibRoyaltiesV2.sol\\\";\\nimport \\\"@rarible/royalties/contracts/RoyaltiesV2.sol\\\";\\n\\nabstract contract RoyaltiesV2Upgradeable is ERC165Upgradeable, RoyaltiesV2 {\\n    function __RoyaltiesV2Upgradeable_init_unchained() internal initializer {\\n        _registerInterface(LibRoyaltiesV2._INTERFACE_ID_ROYALTIES);\\n    }\\n}\\n\"\n    },\n    \"@rarible/royalties/contracts/IERC2981.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\nimport \\\"@rarible/lib-part/contracts/LibPart.sol\\\";\\n///\\n/// @dev Interface for the NFT Royalty Standard\\n///\\n//interface IERC2981 is IERC165 {\\ninterface IERC2981 {\\n    /// ERC165 bytes to add to interface array - set in parent contract\\n    /// implementing this standard\\n    ///\\n    /// bytes4(keccak256(\\\"royaltyInfo(uint256,uint256)\\\")) == 0x2a55205a\\n    /// bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\\n    /// _registerInterface(_INTERFACE_ID_ERC2981);\\n\\n    /// @notice Called with the sale price to determine how much royalty\\n    //          is owed and to whom.\\n    /// @param _tokenId - the NFT asset queried for royalty information\\n    /// @param _salePrice - the sale price of the NFT asset specified by _tokenId\\n    /// @return receiver - address of who should be sent the royalty payment\\n    /// @return royaltyAmount - the royalty payment amount for _salePrice\\n    function royaltyInfo(\\n        uint256 _tokenId,\\n        uint256 _salePrice\\n    ) external view returns (\\n        address receiver,\\n        uint256 royaltyAmount\\n    );\\n}\"\n    },\n    \"@rarible/royalties/contracts/impl/AbstractRoyalties.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"@rarible/lib-part/contracts/LibPart.sol\\\";\\n\\nabstract contract AbstractRoyalties {\\n    mapping (uint256 => LibPart.Part[]) internal royalties;\\n\\n    function _saveRoyalties(uint256 id, LibPart.Part[] memory _royalties) internal {\\n        uint256 totalValue;\\n        for (uint i = 0; i < _royalties.length; ++i) {\\n            require(_royalties[i].account != address(0x0), \\\"Recipient should be present\\\");\\n            require(_royalties[i].value != 0, \\\"Royalty value should be positive\\\");\\n            totalValue += _royalties[i].value;\\n            royalties[id].push(_royalties[i]);\\n        }\\n        require(totalValue < 10000, \\\"Royalty total value should be < 10000\\\");\\n        _onRoyaltiesSet(id, _royalties);\\n    }\\n\\n    function _updateAccount(uint256 _id, address _from, address _to) internal {\\n        uint length = royalties[_id].length;\\n        for(uint i = 0; i < length; ++i) {\\n            if (royalties[_id][i].account == _from) {\\n                royalties[_id][i].account = payable(address(uint160(_to)));\\n            }\\n        }\\n    }\\n\\n    function _onRoyaltiesSet(uint256 id, LibPart.Part[] memory _royalties) virtual internal;\\n}\\n\"\n    },\n    \"@rarible/royalties/contracts/impl/RoyaltiesV2Impl.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"./AbstractRoyalties.sol\\\";\\nimport \\\"../RoyaltiesV2.sol\\\";\\nimport \\\"../IERC2981.sol\\\";\\nimport \\\"../LibRoyalties2981.sol\\\";\\n\\ncontract RoyaltiesV2Impl is AbstractRoyalties, RoyaltiesV2, IERC2981 {\\n\\n    function getRaribleV2Royalties(uint256 id) override external view returns (LibPart.Part[] memory) {\\n        return royalties[id];\\n    }\\n\\n    function _onRoyaltiesSet(uint256 id, LibPart.Part[] memory _royalties) override internal {\\n        emit RoyaltiesSet(id, _royalties);\\n    }\\n\\n    /*\\n    *Token (ERC721, ERC721Minimal, ERC721MinimalMeta, ERC1155 ) can have a number of different royalties beneficiaries\\n    *calculate sum all royalties, but royalties beneficiary will be only one royalties[0].account, according to rules of IERC2981\\n    */\\n    function royaltyInfo(uint256 id, uint256 _salePrice) override external view returns (address receiver, uint256 royaltyAmount) {\\n        if (royalties[id].length == 0) {\\n            receiver = address(0);\\n            royaltyAmount = 0;\\n            return(receiver, royaltyAmount);\\n        }\\n        LibPart.Part[] memory _royalties = royalties[id];\\n        receiver = _royalties[0].account;\\n        uint percent;\\n        for (uint i = 0; i < _royalties.length; ++i) {\\n            percent += _royalties[i].value;\\n        }\\n        //don`t need require(percent < 10000, \\\"Token royalty > 100%\\\"); here, because check later in calculateRoyalties\\n        royaltyAmount = percent * _salePrice / 10000;\\n    }\\n}\\n\"\n    },\n    \"@rarible/royalties/contracts/LibRoyalties2981.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"@rarible/lib-part/contracts/LibPart.sol\\\";\\n\\nlibrary LibRoyalties2981 {\\n    /*\\n     * https://eips.ethereum.org/EIPS/eip-2981: bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\\n     */\\n    bytes4 constant _INTERFACE_ID_ROYALTIES = 0x2a55205a;\\n    uint96 constant _WEIGHT_VALUE = 1000000;\\n\\n    /*Method for converting amount to percent and forming LibPart*/\\n    function calculateRoyalties(address to, uint256 amount) internal view returns (LibPart.Part[] memory) {\\n        LibPart.Part[] memory result;\\n        if (amount == 0) {\\n            return result;\\n        }\\n        uint256 percent = amount * 10000 / _WEIGHT_VALUE;\\n        require(percent < 10000, \\\"Royalties 2981 exceeds 100%\\\");\\n        result = new LibPart.Part[](1);\\n        result[0].account = payable(to);\\n        result[0].value = uint96(percent);\\n        return result;\\n    }\\n}\\n\"\n    },\n    \"@rarible/royalties/contracts/LibRoyaltiesV1.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nlibrary LibRoyaltiesV1 {\\n    /*\\n     * bytes4(keccak256('getFeeBps(uint256)')) == 0x0ebd4c7f\\n     * bytes4(keccak256('getFeeRecipients(uint256)')) == 0xb9c4d9fb\\n     *\\n     * => 0x0ebd4c7f ^ 0xb9c4d9fb == 0xb7799584\\n     */\\n    bytes4 constant _INTERFACE_ID_FEES = 0xb7799584;\\n}\\n\"\n    },\n    \"@rarible/royalties/contracts/LibRoyaltiesV2.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nlibrary LibRoyaltiesV2 {\\n    /*\\n     * bytes4(keccak256('getRaribleV2Royalties(uint256)')) == 0xcad96cca\\n     */\\n    bytes4 constant _INTERFACE_ID_ROYALTIES = 0xcad96cca;\\n}\\n\"\n    },\n    \"@rarible/royalties/contracts/RoyaltiesV1.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\ninterface RoyaltiesV1 {\\n    event SecondarySaleFees(uint256 tokenId, address[] recipients, uint[] bps);\\n\\n    function getFeeRecipients(uint256 id) external view returns (address payable[] memory);\\n    function getFeeBps(uint256 id) external view returns (uint[] memory);\\n}\\n\"\n    },\n    \"@rarible/royalties/contracts/RoyaltiesV2.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@rarible/lib-part/contracts/LibPart.sol\\\";\\n\\ninterface RoyaltiesV2 {\\n    event RoyaltiesSet(uint256 tokenId, LibPart.Part[] royalties);\\n\\n    function getRaribleV2Royalties(uint256 id) external view returns (LibPart.Part[] memory);\\n}\\n\"\n    },\n    \"@rarible/test/contracts/TestERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\n\\ncontract TestERC20 is ERC20Upgradeable {\\n    function mint(address to, uint amount) external {\\n        _mint(to, amount);\\n    }\\n\\n    function init() external {\\n        __ERC20_init(\\\"TestERC20\\\", \\\"TE20\\\");\\n    }\\n}\\n\"\n    },\n    \"@rarible/tokens/contracts/access/MinterAccessControl.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nabstract contract MinterAccessControl is OwnableUpgradeable {\\n    mapping(address => bool) private _minters;\\n    \\n    event MinterStatusChanged(address indexed minter, bool indexed status);\\n\\n    function __MinterAccessControl_init() internal initializer {\\n        __Ownable_init_unchained();\\n        __MinterAccessControl_init_unchained();\\n    }\\n\\n    function __MinterAccessControl_init_unchained() internal initializer {\\n    }\\n\\n    /**\\n     * @dev Add `minter` to the list of allowed minters.\\n     */\\n    function addMinter(address minter) external onlyOwner {\\n        _minters[minter] = true;\\n        emit MinterStatusChanged(minter, true);\\n    }\\n\\n    /**\\n     * @dev Add `minters` to the list of allowed minters.\\n     */\\n    function addMinters(address[] memory minters) external onlyOwner {\\n        for (uint i = 0; i < minters.length; ++i) {\\n            address minter = minters[i];\\n            _minters[minter] = true;\\n            emit MinterStatusChanged(minter, true);\\n        }\\n    }\\n\\n    /**\\n     * @dev Revoke `_minter` from the list of allowed minters.\\n     */\\n    function removeMinter(address _minter) external onlyOwner {\\n        _minters[_minter] = false;\\n        emit MinterStatusChanged(_minter, false);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted to minters.\\n     */\\n    function isMinter(address account) public view returns (bool) {\\n        return _minters[account];\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\n    },\n    \"@rarible/tokens/contracts/beacons/ERC1155RaribleBeacon.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/UpgradeableBeacon.sol\\\";\\n\\ncontract ERC1155RaribleBeacon is UpgradeableBeacon {\\n    constructor(address impl) UpgradeableBeacon(impl) {\\n\\n    }\\n}\\n\"\n    },\n    \"@rarible/tokens/contracts/beacons/ERC1155RaribleBeaconMeta.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/UpgradeableBeacon.sol\\\";\\n\\ncontract ERC1155RaribleBeaconMeta is UpgradeableBeacon {\\n    constructor(address impl) UpgradeableBeacon(impl) {\\n\\n    }\\n}\\n\"\n    },\n    \"@rarible/tokens/contracts/beacons/ERC721RaribleBeacon.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/UpgradeableBeacon.sol\\\";\\n\\ncontract ERC721RaribleBeacon is UpgradeableBeacon {\\n    constructor(address impl) UpgradeableBeacon(impl) {\\n\\n    }\\n}\\n\"\n    },\n    \"@rarible/tokens/contracts/beacons/ERC721RaribleMinimalBeacon.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/UpgradeableBeacon.sol\\\";\\n\\ncontract ERC721RaribleMinimalBeacon is UpgradeableBeacon {\\n    constructor(address impl) UpgradeableBeacon(impl) {\\n\\n    }\\n}\\n\"\n    },\n    \"@rarible/tokens/contracts/beacons/ERC721RaribleMinimalBeaconMeta.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/UpgradeableBeacon.sol\\\";\\n\\ncontract ERC721RaribleMinimalBeaconMeta is UpgradeableBeacon {\\n    constructor(address impl) UpgradeableBeacon(impl) {\\n\\n    }\\n}\\n\"\n    },\n    \"@rarible/tokens/contracts/create-2/ERC1155RaribleFactoryC2.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"../erc-1155/ERC1155Rarible.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/BeaconProxy.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @dev This contract is for creating proxy to access ERC1155Rarible token.\\n *\\n * The beacon should be initialized before call ERC1155RaribleFactoryC2 constructor.\\n *\\n */\\ncontract ERC1155RaribleFactoryC2 is Ownable{\\n    address public beacon;\\n    address transferProxy;\\n    address lazyTransferProxy;\\n\\n    event Create1155RaribleProxy(address proxy);\\n    event Create1155RaribleUserProxy(address proxy);\\n\\n    constructor(address _beacon, address _transferProxy, address _lazyTransferProxy) {\\n        beacon = _beacon;\\n        transferProxy = _transferProxy;\\n        lazyTransferProxy = _lazyTransferProxy;\\n    }\\n\\n    function createToken(string memory _name, string memory _symbol, string memory baseURI, string memory contractURI, uint salt) external {        \\n        address beaconProxy = deployProxy(getData(_name, _symbol, baseURI, contractURI), salt);\\n\\n        ERC1155Rarible token = ERC1155Rarible(beaconProxy);\\n        token.transferOwnership(_msgSender());\\n        emit Create1155RaribleProxy(beaconProxy);\\n    }\\n    \\n    function createToken(string memory _name, string memory _symbol, string memory baseURI, string memory contractURI, address[] memory operators, uint salt) external {\\n        address beaconProxy = deployProxy(getData(_name, _symbol, baseURI, contractURI, operators), salt);\\n\\n        ERC1155Rarible token = ERC1155Rarible(address(beaconProxy));\\n        token.transferOwnership(_msgSender());\\n        emit Create1155RaribleUserProxy(beaconProxy);\\n    }\\n\\n    //deploying BeaconProxy contract with create2\\n    function deployProxy(bytes memory data, uint salt) internal returns(address proxy){\\n        bytes memory bytecode = getCreationBytecode(data);\\n        assembly {\\n            proxy := create2(0, add(bytecode, 0x20), mload(bytecode), salt)\\n            if iszero(extcodesize(proxy)) {\\n                revert(0, 0)\\n            }\\n        }\\n    }\\n\\n    //adding constructor arguments to BeaconProxy bytecode\\n    function getCreationBytecode(bytes memory _data) internal view returns (bytes memory) {\\n        return abi.encodePacked(type(BeaconProxy).creationCode, abi.encode(beacon, _data));\\n    }\\n\\n    //returns address that contract with such arguments will be deployed on\\n    function getAddress(string memory _name, string memory _symbol, string memory baseURI, string memory contractURI, uint _salt)\\n        public\\n        view\\n        returns (address)\\n    {   \\n        bytes memory bytecode = getCreationBytecode(getData(_name, _symbol, baseURI, contractURI));\\n\\n        bytes32 hash = keccak256(\\n            abi.encodePacked(bytes1(0xff), address(this), _salt, keccak256(bytecode))\\n        );\\n\\n        return address(uint160(uint(hash)));\\n    }\\n\\n    function getData(string memory _name, string memory _symbol, string memory baseURI, string memory contractURI) view internal returns(bytes memory){\\n        return abi.encodeWithSelector(ERC1155Rarible(0).__ERC1155Rarible_init.selector, _name, _symbol, baseURI, contractURI, transferProxy, lazyTransferProxy);\\n    }\\n\\n    //returns address that contract with such arguments will be deployed on\\n    function getAddress(string memory _name, string memory _symbol, string memory baseURI, string memory contractURI, address[] memory operators, uint _salt)\\n        public\\n        view\\n        returns (address)\\n    {   \\n        bytes memory bytecode = getCreationBytecode(getData(_name, _symbol, baseURI, contractURI, operators));\\n\\n        bytes32 hash = keccak256(\\n            abi.encodePacked(bytes1(0xff), address(this), _salt, keccak256(bytecode))\\n        );\\n\\n        return address(uint160(uint(hash)));\\n    }\\n\\n    function getData(string memory _name, string memory _symbol, string memory baseURI, string memory contractURI, address[] memory operators) view internal returns(bytes memory){\\n        return abi.encodeWithSelector(ERC1155Rarible(0).__ERC1155RaribleUser_init.selector, _name, _symbol, baseURI, contractURI, operators, transferProxy, lazyTransferProxy);\\n    }\\n\\n}\\n\"\n    },\n    \"@rarible/tokens/contracts/create-2/ERC721RaribleFactoryC2.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"../erc-721-minimal/ERC721RaribleMinimal.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/BeaconProxy.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @dev This contract is for creating proxy to access ERC721Rarible token.\\n *\\n * The beacon should be initialized before call ERC721RaribleFactoryC2 constructor.\\n *\\n */\\ncontract ERC721RaribleFactoryC2 is Ownable {\\n    address public beacon;\\n    address transferProxy;\\n    address lazyTransferProxy;\\n\\n    event Create721RaribleProxy(address proxy);\\n    event Create721RaribleUserProxy(address proxy);\\n\\n    constructor(address _beacon, address _transferProxy, address _lazyTransferProxy) {\\n        beacon = _beacon;\\n        transferProxy = _transferProxy;\\n        lazyTransferProxy = _lazyTransferProxy;\\n    }\\n\\n    function createToken(string memory _name, string memory _symbol, string memory baseURI, string memory contractURI, uint salt) external {\\n        address beaconProxy = deployProxy(getData(_name, _symbol, baseURI, contractURI), salt);\\n        ERC721RaribleMinimal token = ERC721RaribleMinimal(address(beaconProxy));\\n        token.transferOwnership(_msgSender());\\n        emit Create721RaribleProxy(beaconProxy);\\n    }\\n\\n    function createToken(string memory _name, string memory _symbol, string memory baseURI, string memory contractURI, address[] memory operators, uint salt) external {\\n        address beaconProxy = deployProxy(getData(_name, _symbol, baseURI, contractURI, operators), salt);\\n        ERC721RaribleMinimal token = ERC721RaribleMinimal(address(beaconProxy));\\n        token.transferOwnership(_msgSender());\\n        emit Create721RaribleUserProxy(beaconProxy);\\n    }\\n\\n    //deploying BeaconProxy contract with create2\\n    function deployProxy(bytes memory data, uint salt) internal returns(address proxy){\\n        bytes memory bytecode = getCreationBytecode(data);\\n        assembly {\\n            proxy := create2(0, add(bytecode, 0x20), mload(bytecode), salt)\\n            if iszero(extcodesize(proxy)) {\\n                revert(0, 0)\\n            }\\n        }\\n    }\\n\\n    //adding constructor arguments to BeaconProxy bytecode\\n    function getCreationBytecode(bytes memory _data) internal view returns (bytes memory) {\\n        return abi.encodePacked(type(BeaconProxy).creationCode, abi.encode(beacon, _data));\\n    }\\n\\n    //returns address that contract with such arguments will be deployed on\\n    function getAddress(string memory _name, string memory _symbol, string memory baseURI, string memory contractURI, uint _salt)\\n        public\\n        view\\n        returns (address)\\n    {   \\n        bytes memory bytecode = getCreationBytecode(getData(_name, _symbol, baseURI, contractURI));\\n\\n        bytes32 hash = keccak256(\\n            abi.encodePacked(bytes1(0xff), address(this), _salt, keccak256(bytecode))\\n        );\\n\\n        return address(uint160(uint(hash)));\\n    }\\n\\n    function getData(string memory _name, string memory _symbol, string memory baseURI, string memory contractURI) view internal returns(bytes memory){\\n        return abi.encodeWithSelector(ERC721RaribleMinimal(0).__ERC721Rarible_init.selector, _name, _symbol, baseURI, contractURI, transferProxy, lazyTransferProxy);\\n    }\\n\\n    //returns address that private contract with such arguments will be deployed on\\n    function getAddress(string memory _name, string memory _symbol, string memory baseURI, string memory contractURI, address[] memory operators, uint _salt)\\n        public\\n        view\\n        returns (address)\\n    {   \\n        bytes memory bytecode = getCreationBytecode(getData(_name, _symbol, baseURI, contractURI, operators));\\n\\n        bytes32 hash = keccak256(\\n            abi.encodePacked(bytes1(0xff), address(this), _salt, keccak256(bytecode))\\n        );\\n\\n        return address(uint160(uint(hash)));\\n    }\\n\\n    function getData(string memory _name, string memory _symbol, string memory baseURI, string memory contractURI, address[] memory operators) view internal returns(bytes memory){\\n        return abi.encodeWithSelector(ERC721RaribleMinimal(0).__ERC721RaribleUser_init.selector, _name, _symbol, baseURI, contractURI, operators, transferProxy, lazyTransferProxy);\\n    }\\n}\\n\"\n    },\n    \"@rarible/tokens/contracts/erc-1155/erc-1155-meta/ERC1155RaribleMeta.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@rarible/meta-tx/contracts/EIP712MetaTransaction.sol\\\";\\nimport \\\"../ERC1155Base.sol\\\";\\nimport \\\"../../IsPrivateCollection.sol\\\";\\nimport \\\"../../access/MinterAccessControl.sol\\\";\\n\\ncontract ERC1155RaribleMeta is ERC1155Base, IsPrivateCollection, MinterAccessControl, EIP712MetaTransaction {\\n    event CreateERC1155Rarible(address owner, string name, string symbol);\\n    event CreateERC1155RaribleUser(address owner, string name, string symbol);\\n\\n    function __ERC1155RaribleUser_init(string memory _name, string memory _symbol, string memory baseURI, string memory contractURI, address[] memory operators, address transferProxy, address lazyTransferProxy) external {\\n        __ERC1155Rarible_init_unchained(_name, _symbol, baseURI, contractURI, transferProxy, lazyTransferProxy);\\n\\n        __MetaTransaction_init_unchained(\\\"ERC1155RaribleUserMeta\\\", \\\"1\\\");\\n        \\n        isPrivate = true;\\n\\n        emit CreateERC1155RaribleUser(_msgSender(), _name, _symbol);\\n    }\\n    \\n    function __ERC1155Rarible_init(string memory _name, string memory _symbol, string memory baseURI, string memory contractURI, address transferProxy, address lazyTransferProxy) external {\\n        __ERC1155Rarible_init_unchained(_name, _symbol, baseURI, contractURI, transferProxy, lazyTransferProxy);\\n\\n        __MetaTransaction_init_unchained(\\\"ERC1155RaribleMeta\\\", \\\"1\\\");\\n\\n        isPrivate = false;\\n\\n        emit CreateERC1155Rarible(_msgSender(), _name, _symbol);\\n    }\\n\\n    function _msgSender() internal view virtual override(ContextUpgradeable, EIP712MetaTransaction) returns (address payable) {\\n        return super._msgSender();\\n    }\\n\\n    function __ERC1155Rarible_init_unchained(string memory _name, string memory _symbol, string memory baseURI, string memory contractURI, address transferProxy, address lazyTransferProxy) internal initializer {\\n        __Ownable_init_unchained();\\n        __ERC1155Lazy_init_unchained();\\n        __ERC165_init_unchained();\\n        __Context_init_unchained();\\n        __Mint1155Validator_init_unchained();\\n        __ERC1155_init_unchained(\\\"\\\");\\n        __HasContractURI_init_unchained(contractURI);\\n        __ERC1155Burnable_init_unchained();\\n        __RoyaltiesV2Upgradeable_init_unchained();\\n        __ERC1155Base_init_unchained(_name, _symbol);\\n        __MinterAccessControl_init_unchained();\\n        _setBaseURI(baseURI);\\n\\n        //setting default approver for transferProxies\\n        _setDefaultApproval(transferProxy, true);\\n        _setDefaultApproval(lazyTransferProxy, true);\\n    }\\n\\n    function mintAndTransfer(LibERC1155LazyMint.Mint1155Data memory data, address to, uint256 _amount) public override {\\n        if (isPrivate){\\n          require(owner() == data.creators[0].account || isMinter(data.creators[0].account), \\\"not owner or minter\\\");\\n        }\\n        super.mintAndTransfer(data, to, _amount);\\n    }\\n}\\n\"\n    },\n    \"@rarible/tokens/contracts/erc-1155/ERC1155Base.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./ERC1155BurnableUpgradeable.sol\\\";\\nimport \\\"./ERC1155DefaultApproval.sol\\\";\\nimport \\\"./ERC1155Lazy.sol\\\";\\nimport \\\"../HasContractURI.sol\\\";\\n\\nabstract contract ERC1155Base is OwnableUpgradeable, ERC1155DefaultApproval, ERC1155BurnableUpgradeable, ERC1155Lazy, HasContractURI {\\n    string public name;\\n    string public symbol;\\n\\n    event BurnLazy(address indexed operator, address indexed account, uint256 id, uint256 amount);\\n    event BurnLazyBatch(address indexed operator, address indexed account, uint256[] ids, uint256[] amounts);\\n    event BaseUriChanged(string newBaseURI);\\n\\n    function isApprovedForAll(address _owner, address _operator) public override(ERC1155Upgradeable, ERC1155DefaultApproval, IERC1155Upgradeable) view returns (bool) {\\n        return ERC1155DefaultApproval.isApprovedForAll(_owner, _operator);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC1155Lazy, ERC165Upgradeable) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    function burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) public virtual override {\\n        require(ids.length == amounts.length, \\\"ids != amounts\\\");\\n        uint256[] memory leftToBurns = new uint256[](ids.length);\\n        uint256[] memory lazyToBurns = new uint256[](ids.length);\\n        for (uint i = 0; i < ids.length; ++i) {\\n            (leftToBurns[i], lazyToBurns[i]) = _burnLazy(ids[i], amounts[i]);\\n        }\\n        ERC1155BurnableUpgradeable.burnBatch(account, ids, leftToBurns);\\n        emit BurnLazyBatch(_msgSender(), account, ids, lazyToBurns);\\n    }\\n\\n    function burn(address account, uint256 id, uint256 amount) public virtual override {\\n        (uint256 leftToBurn, uint256 lazyToBurn) = _burnLazy(id, amount);\\n        if (leftToBurn > 0) {\\n            //token exists, burn Minted\\n            ERC1155BurnableUpgradeable.burn(account, id, leftToBurn);\\n        }\\n        if (lazyToBurn > 0) {\\n            emit BurnLazy(_msgSender(), account, id, lazyToBurn);\\n        }\\n\\n    }\\n\\n    function _burnLazy(uint256 id, uint256 amount) internal returns (uint256 leftToBurn, uint256 lazyToBurn) {\\n        leftToBurn = amount;\\n        lazyToBurn = 0;\\n        address creator = address(id >> 96);\\n        if (creator == _msgSender()) {\\n            lazyToBurn = amount;\\n            uint supply = ERC1155Lazy._getSupply(id);\\n            if (supply != 0) {\\n                //calculate Lazy amount available for burn\\n                uint256 lazyBalance = supply - ERC1155Lazy._getMinted(id);\\n                if (amount > lazyBalance) {//need to burn more than available\\n                    lazyToBurn = lazyBalance;\\n                }\\n            }\\n            ERC1155Lazy._addMinted(id, lazyToBurn);\\n            leftToBurn = amount - lazyToBurn;\\n        }\\n    }\\n\\n    function _mint(address account, uint256 id, uint256 amount, bytes memory data) internal virtual override(ERC1155Upgradeable, ERC1155Lazy) {\\n        ERC1155Lazy._mint(account, id, amount, data);\\n    }\\n\\n    function __ERC1155Base_init_unchained(string memory _name, string memory _symbol) internal {\\n        name = _name;\\n        symbol = _symbol;\\n    }\\n\\n    function uri(uint id) external view override(ERC1155BaseURI, ERC1155Upgradeable) virtual returns (string memory) {\\n        return _tokenURI(id);\\n    }\\n\\n    function setBaseURI(string memory newBaseURI) external onlyOwner {\\n        super._setBaseURI(newBaseURI);\\n\\n        emit BaseUriChanged(newBaseURI);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\n    },\n    \"@rarible/tokens/contracts/erc-1155/ERC1155BaseURI.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"../LibURI.sol\\\";\\n\\nimport \\\"./ERC1155Upgradeable.sol\\\";\\n\\ncontract ERC1155BaseURI is ERC1155Upgradeable {\\n    using StringsUpgradeable for uint;\\n\\n    // Optional mapping for token URIs\\n    mapping (uint256 => string) private _tokenURIs;\\n\\n    // Base URI\\n    string private _baseURI;\\n\\n    /**\\n    * @dev Returns the base URI set via {_setBaseURI}. This will be\\n    * automatically added as a prefix in {tokenURI} to each token's URI, or\\n    * to the token ID if no specific URI is set for that token ID.\\n    */\\n    function baseURI() public view virtual returns (string memory) {\\n        return _baseURI;\\n    }\\n\\n    function uri(uint id) external view override virtual returns (string memory) {\\n        return _tokenURI(id);\\n    }\\n\\n    function _tokenURI(uint256 tokenId) internal view virtual returns (string memory) {\\n        string memory __tokenURI = _tokenURIs[tokenId];\\n        string memory base = baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return __tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(__tokenURI).length > 0) {\\n            return LibURI.checkPrefix(base, __tokenURI);\\n        }\\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\\n        return string(abi.encodePacked(base, tokenId.toString()));\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _uri) internal virtual {\\n        _tokenURIs[tokenId] = _uri;\\n        emit URI(_tokenURI(tokenId), tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to set the base URI for all token IDs. It is\\n     * automatically added as a prefix to the value returned in {tokenURI},\\n     * or to the token ID if {tokenURI} is empty.\\n     */\\n    function _setBaseURI(string memory baseURI_) internal virtual {\\n        _baseURI = baseURI_;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\n    },\n    \"@rarible/tokens/contracts/erc-1155/ERC1155BurnableUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./ERC1155Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\\n * own tokens and those that they have been approved to use.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155BurnableUpgradeable is Initializable, ERC1155Upgradeable {\\n    function __ERC1155Burnable_init() internal {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC1155Burnable_init_unchained();\\n    }\\n\\n    function __ERC1155Burnable_init_unchained() internal {\\n    }\\n    function burn(address account, uint256 id, uint256 value) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _burn(account, id, value);\\n    }\\n\\n    function burnBatch(address account, uint256[] memory ids, uint256[] memory values) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _burnBatch(account, ids, values);\\n    }\\n    \\n    uint256[50] private __gap;\\n}\\n\"\n    },\n    \"@rarible/tokens/contracts/erc-1155/ERC1155DefaultApproval.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"./ERC1155Upgradeable.sol\\\";\\n\\nabstract contract ERC1155DefaultApproval is ERC1155Upgradeable {\\n    mapping(address => bool) private defaultApprovals;\\n\\n    event DefaultApproval(address indexed operator, bool hasApproval);\\n\\n    function _setDefaultApproval(address operator, bool hasApproval) internal {\\n        defaultApprovals[operator] = hasApproval;\\n        emit DefaultApproval(operator, hasApproval);\\n    }\\n\\n    function isApprovedForAll(address _owner, address _operator) public virtual override view returns (bool) {\\n        return defaultApprovals[_operator] || super.isApprovedForAll(_owner, _operator);\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\n    },\n    \"@rarible/tokens/contracts/erc-1155/ERC1155Lazy.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./ERC1155Upgradeable.sol\\\";\\nimport \\\"@rarible/royalties/contracts/impl/RoyaltiesV2Impl.sol\\\";\\nimport \\\"@rarible/royalties-upgradeable/contracts/RoyaltiesV2Upgradeable.sol\\\";\\nimport \\\"@rarible/lazy-mint/contracts/erc-1155/IERC1155LazyMint.sol\\\";\\nimport \\\"./Mint1155Validator.sol\\\";\\nimport \\\"./ERC1155BaseURI.sol\\\";\\n\\nabstract contract ERC1155Lazy is IERC1155LazyMint, ERC1155BaseURI, Mint1155Validator, RoyaltiesV2Upgradeable, RoyaltiesV2Impl {\\n    using SafeMathUpgradeable for uint;\\n\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n    bytes4 private constant _INTERFACE_ID_ERC1155 = 0xd9b67a26;\\n    bytes4 private constant _INTERFACE_ID_ERC1155_METADATA_URI = 0x0e89341c;\\n\\n    mapping(uint256 => LibPart.Part[]) private creators;\\n    mapping(uint => uint) private supply;\\n    mapping(uint => uint) private minted;\\n\\n    function __ERC1155Lazy_init_unchained() internal {\\n\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC165Upgradeable) returns (bool) {\\n        return interfaceId == LibERC1155LazyMint._INTERFACE_ID_MINT_AND_TRANSFER\\n        || interfaceId == LibRoyaltiesV2._INTERFACE_ID_ROYALTIES\\n        || interfaceId == LibRoyalties2981._INTERFACE_ID_ROYALTIES\\n        || interfaceId == _INTERFACE_ID_ERC165\\n        || interfaceId == _INTERFACE_ID_ERC1155\\n        || interfaceId == _INTERFACE_ID_ERC1155_METADATA_URI;\\n    }\\n\\n    function transferFromOrMint(\\n        LibERC1155LazyMint.Mint1155Data memory data,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) override external {\\n        uint balance = balanceOf(from, data.tokenId);\\n        uint left = amount;\\n        if (balance != 0) {\\n            uint transfer = amount;\\n            if (balance < amount) {\\n                transfer = balance;\\n            }\\n            safeTransferFrom(from, to, data.tokenId, transfer, \\\"\\\");\\n            left = amount - transfer;\\n        }\\n        if (left > 0) {\\n            require(from == data.creators[0].account, \\\"wrong order maker\\\");\\n            mintAndTransfer(data, to, left);\\n        }\\n    }\\n\\n    function mintAndTransfer(LibERC1155LazyMint.Mint1155Data memory data, address to, uint256 _amount) public override virtual {\\n        address minter = address(data.tokenId >> 96);\\n        address sender = _msgSender();\\n\\n        require(minter == sender || isApprovedForAll(minter, sender), \\\"ERC1155: transfer caller is not approved\\\");\\n        require(_amount > 0, \\\"amount incorrect\\\");\\n\\n        if (supply[data.tokenId] == 0) {\\n            require(minter == data.creators[0].account, \\\"tokenId incorrect\\\");\\n            require(data.supply > 0, \\\"supply incorrect\\\");\\n            require(data.creators.length == data.signatures.length);\\n\\n            bytes32 hash = LibERC1155LazyMint.hash(data);\\n            for (uint i = 0; i < data.creators.length; ++i) {\\n                address creator = data.creators[i].account;\\n                if (creator != sender) {\\n                    validate(creator, hash, data.signatures[i]);\\n                }\\n            }\\n\\n            _saveSupply(data.tokenId, data.supply);\\n            _saveRoyalties(data.tokenId, data.royalties);\\n            _saveCreators(data.tokenId, data.creators);\\n            _setTokenURI(data.tokenId, data.tokenURI);\\n        }\\n\\n        _mint(to, data.tokenId, _amount, \\\"\\\");\\n        if (minter != to) {\\n            emit TransferSingle(sender, address(0), minter, data.tokenId, _amount);\\n            emit TransferSingle(sender, minter, to, data.tokenId, _amount);\\n        } else {\\n            emit TransferSingle(sender, address(0), to, data.tokenId, _amount);\\n        }\\n    }\\n\\n    function _mint(address account, uint256 id, uint256 amount, bytes memory data) internal virtual override {\\n        uint newMinted = amount.add(minted[id]);\\n        require(newMinted <= supply[id], \\\"more than supply\\\");\\n        minted[id] = newMinted;\\n\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][account] = _balances[id][account].add(amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    function _saveSupply(uint tokenId, uint _supply) internal {\\n        require(supply[tokenId] == 0);\\n        supply[tokenId] = _supply;\\n        emit Supply(tokenId, _supply);\\n    }\\n\\n    function _saveCreators(uint tokenId, LibPart.Part[] memory _creators) internal {\\n        LibPart.Part[] storage creatorsOfToken = creators[tokenId];\\n        uint total = 0;\\n        for (uint i = 0; i < _creators.length; ++i) {\\n            require(_creators[i].account != address(0x0), \\\"Account should be present\\\");\\n            require(_creators[i].value != 0, \\\"Creator share should be positive\\\");\\n            creatorsOfToken.push(_creators[i]);\\n            total = total.add(_creators[i].value);\\n        }\\n        require(total == 10000, \\\"total amount of creators share should be 10000\\\");\\n        emit Creators(tokenId, _creators);\\n    }\\n\\n    function updateAccount(uint256 _id, address _from, address _to) external {\\n        require(_msgSender() == _from, \\\"not allowed\\\");\\n        super._updateAccount(_id, _from, _to);\\n    }\\n\\n    function getCreators(uint256 _id) external view returns (LibPart.Part[] memory) {\\n        return creators[_id];\\n    }\\n\\n    function _addMinted(uint256 tokenId, uint amount) internal {\\n        minted[tokenId] += amount;\\n    }\\n\\n    function _getMinted(uint256 tokenId) internal view returns (uint) {\\n        return minted[tokenId];\\n    }\\n\\n    function _getSupply(uint256 tokenId) internal view returns (uint) {\\n        return supply[tokenId];\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\n    },\n    \"@rarible/tokens/contracts/erc-1155/ERC1155Rarible.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./ERC1155Base.sol\\\";\\nimport \\\"../IsPrivateCollection.sol\\\";\\nimport \\\"../access/MinterAccessControl.sol\\\";\\n\\ncontract ERC1155Rarible is ERC1155Base, IsPrivateCollection, MinterAccessControl {\\n    event CreateERC1155Rarible(address owner, string name, string symbol);\\n    event CreateERC1155RaribleUser(address owner, string name, string symbol);\\n\\n    function __ERC1155RaribleUser_init(string memory _name, string memory _symbol, string memory baseURI, string memory contractURI, address[] memory operators, address transferProxy, address lazyTransferProxy) external virtual {\\n        __ERC1155Rarible_init_unchained(_name, _symbol, baseURI, contractURI, transferProxy, lazyTransferProxy);\\n        \\n        isPrivate = true;\\n        emit CreateERC1155RaribleUser(_msgSender(), _name, _symbol);\\n    }\\n    \\n    function __ERC1155Rarible_init(string memory _name, string memory _symbol, string memory baseURI, string memory contractURI, address transferProxy, address lazyTransferProxy) external virtual {\\n        __ERC1155Rarible_init_unchained(_name, _symbol, baseURI, contractURI, transferProxy, lazyTransferProxy);\\n\\n        isPrivate = false;\\n        emit CreateERC1155Rarible(_msgSender(), _name, _symbol);\\n    }\\n\\n    function __ERC1155Rarible_init_unchained(string memory _name, string memory _symbol, string memory baseURI, string memory contractURI, address transferProxy, address lazyTransferProxy) internal initializer {\\n        __Ownable_init_unchained();\\n        __ERC1155Lazy_init_unchained();\\n        __ERC165_init_unchained();\\n        __Context_init_unchained();\\n        __Mint1155Validator_init_unchained();\\n        __ERC1155_init_unchained(\\\"\\\");\\n        __HasContractURI_init_unchained(contractURI);\\n        __ERC1155Burnable_init_unchained();\\n        __RoyaltiesV2Upgradeable_init_unchained();\\n        __ERC1155Base_init_unchained(_name, _symbol);\\n        __MinterAccessControl_init_unchained();\\n        _setBaseURI(baseURI);\\n\\n        //setting default approver for transferProxies\\n        _setDefaultApproval(transferProxy, true);\\n        _setDefaultApproval(lazyTransferProxy, true);\\n    }\\n\\n    function mintAndTransfer(LibERC1155LazyMint.Mint1155Data memory data, address to, uint256 _amount) public override {\\n        if (isPrivate){\\n          require(owner() == data.creators[0].account || isMinter(data.creators[0].account), \\\"not owner or minter\\\");\\n        }\\n        super.mintAndTransfer(data, to, _amount);\\n    }\\n}\\n\"\n    },\n    \"@rarible/tokens/contracts/erc-1155/ERC1155Upgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\n\\n/**\\n *\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\\n    using SafeMathUpgradeable for uint256;\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping (uint256 => mapping(address => uint256)) internal _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping (address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /*\\n     *     bytes4(keccak256('balanceOf(address,uint256)')) == 0x00fdd58e\\n     *     bytes4(keccak256('balanceOfBatch(address[],uint256[])')) == 0x4e1273f4\\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,uint256,bytes)')) == 0xf242432a\\n     *     bytes4(keccak256('safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)')) == 0x2eb2c2d6\\n     *\\n     *     => 0x00fdd58e ^ 0x4e1273f4 ^ 0xa22cb465 ^\\n     *        0xe985e9c5 ^ 0xf242432a ^ 0x2eb2c2d6 == 0xd9b67a26\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC1155 = 0xd9b67a26;\\n\\n    /*\\n     *     bytes4(keccak256('uri(uint256)')) == 0x0e89341c\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC1155_METADATA_URI = 0x0e89341c;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal initializer {\\n        _setURI(uri_);\\n\\n        // register the supported interfaces to conform to ERC1155 via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC1155);\\n\\n        // register the supported interfaces to conform to ERC1155MetadataURI via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC1155_METADATA_URI);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) external view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    )\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    )\\n        public\\n        virtual\\n        override\\n    {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][from] = _balances[id][from].sub(amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        _balances[id][to] = _balances[id][to].add(amount);\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        public\\n        virtual\\n        override\\n    {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            _balances[id][from] = _balances[id][from].sub(\\n                amount,\\n                \\\"ERC1155: insufficient balance for transfer\\\"\\n            );\\n            _balances[id][to] = _balances[id][to].add(amount);\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address account, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][account] = _balances[id][account].add(amount);\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint i = 0; i < ids.length; ++i) {\\n            _balances[ids[i]][to] = amounts[i].add(_balances[ids[i]][to]);\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(address account, uint256 id, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        _balances[id][account] = _balances[id][account].sub(\\n            amount,\\n            \\\"ERC1155: burn amount exceeds balance\\\"\\n        );\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint i = 0; i < ids.length; ++i) {\\n            _balances[ids[i]][account] = _balances[ids[i]][account].sub(\\n                amounts[i],\\n                \\\"ERC1155: burn amount exceeds balance\\\"\\n            );\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        internal\\n        virtual\\n    { }\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    )\\n        internal\\n    {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable(to).onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        private\\n    {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) internal pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n    uint256[47] private __gap;\\n}\\n\"\n    },\n    \"@rarible/tokens/contracts/erc-1155/Mint1155Validator.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"../erc-1271/ERC1271Validator.sol\\\";\\nimport \\\"@rarible/lazy-mint/contracts/erc-1155/LibERC1155LazyMint.sol\\\";\\n\\ncontract Mint1155Validator is ERC1271Validator {\\n    function __Mint1155Validator_init_unchained() internal initializer {\\n        __EIP712_init_unchained(\\\"Mint1155\\\", \\\"1\\\");\\n    }\\n\\n    function validate(address account, bytes32 hash, bytes memory signature) internal view {\\n        validate1271(account, hash, signature);\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\n    },\n    \"@rarible/tokens/contracts/erc-1271/ERC1271Validator.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@rarible/lib-signature/contracts/ERC1271.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol\\\";\\nimport \\\"@rarible/lib-signature/contracts/LibSignature.sol\\\";\\n\\nabstract contract ERC1271Validator is EIP712Upgradeable {\\n    using AddressUpgradeable for address;\\n    using LibSignature for bytes32;\\n\\n    string constant SIGNATURE_ERROR = \\\"signature verification error\\\";\\n    bytes4 constant internal MAGICVALUE = 0x1626ba7e;\\n\\n    function validate1271(address signer, bytes32 structHash, bytes memory signature) internal view {\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signerFromSig;\\n        if (signature.length == 65) {\\n            signerFromSig = hash.recover(signature);\\n        }\\n        if  (signerFromSig != signer) {\\n            if (signer.isContract()) {\\n                require(\\n                    ERC1271(signer).isValidSignature(hash, signature) == MAGICVALUE,\\n                    SIGNATURE_ERROR\\n                );\\n            } else {\\n                revert(SIGNATURE_ERROR);\\n            }\\n        }\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\n    },\n    \"@rarible/tokens/contracts/erc-721-minimal/erc-721-minimal-meta/ERC721RaribleMeta.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@rarible/meta-tx/contracts/EIP712MetaTransaction.sol\\\";\\nimport \\\"../ERC721BaseMinimal.sol\\\";\\nimport \\\"../../IsPrivateCollection.sol\\\";\\nimport \\\"../../access/MinterAccessControl.sol\\\";\\n\\ncontract ERC721RaribleMeta is ERC721BaseMinimal, IsPrivateCollection, MinterAccessControl, EIP712MetaTransaction {\\n    event CreateERC721Rarible(address owner, string name, string symbol);\\n    event CreateERC721RaribleUser(address owner, string name, string symbol);\\n\\n    function __ERC721RaribleUser_init(string memory _name, string memory _symbol, string memory baseURI, string memory contractURI, address[] memory operators, address transferProxy, address lazyTransferProxy) external {\\n        __ERC721Rarible_init_unchained(_name, _symbol, baseURI, contractURI, transferProxy, lazyTransferProxy);\\n\\n        __MetaTransaction_init_unchained(\\\"ERC721RaribleUserMeta\\\", \\\"1\\\");\\n\\n        isPrivate = true;\\n\\n        emit CreateERC721RaribleUser(_msgSender(), _name, _symbol);\\n    }\\n\\n    function __ERC721Rarible_init(string memory _name, string memory _symbol, string memory baseURI, string memory contractURI, address transferProxy, address lazyTransferProxy) external {\\n        __ERC721Rarible_init_unchained(_name, _symbol, baseURI, contractURI, transferProxy, lazyTransferProxy);\\n\\n        __MetaTransaction_init_unchained(\\\"ERC721RaribleMeta\\\", \\\"1\\\");\\n\\n        isPrivate = false;\\n\\n        emit CreateERC721Rarible(_msgSender(), _name, _symbol);\\n    }\\n\\n    function _msgSender() internal view virtual override(ContextUpgradeable, EIP712MetaTransaction) returns (address payable) {\\n        return super._msgSender();\\n    }\\n\\n    function __ERC721Rarible_init_unchained(string memory _name, string memory _symbol, string memory baseURI, string memory contractURI, address transferProxy, address lazyTransferProxy) internal initializer {\\n        _setBaseURI(baseURI);\\n        __ERC721Lazy_init_unchained();\\n        __RoyaltiesV2Upgradeable_init_unchained();\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __Ownable_init_unchained();\\n        __ERC721Burnable_init_unchained();\\n        __Mint721Validator_init_unchained();\\n        __MinterAccessControl_init_unchained();\\n        __HasContractURI_init_unchained(contractURI);\\n        __ERC721_init_unchained(_name, _symbol);\\n\\n        //setting default approver for transferProxies\\n        _setDefaultApproval(transferProxy, true);\\n        _setDefaultApproval(lazyTransferProxy, true);\\n    }\\n\\n    function mintAndTransfer(LibERC721LazyMint.Mint721Data memory data, address to) public override virtual {\\n        if (isPrivate){\\n            require(owner() == data.creators[0].account || isMinter(data.creators[0].account), \\\"not owner or minter\\\");\\n        }\\n        super.mintAndTransfer(data, to);\\n    }\\n}\\n\"\n    },\n    \"@rarible/tokens/contracts/erc-721-minimal/ERC721BaseMinimal.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./ERC721BurnableUpgradeableMinimal.sol\\\";\\nimport \\\"./ERC721DefaultApprovalMinimal.sol\\\";\\nimport \\\"./ERC721LazyMinimal.sol\\\";\\nimport \\\"../HasContractURI.sol\\\";\\n\\nabstract contract ERC721BaseMinimal is OwnableUpgradeable, ERC721DefaultApprovalMinimal, ERC721BurnableUpgradeableMinimal, ERC721LazyMinimal, HasContractURI {\\n    event BaseUriChanged(string newBaseURI);\\n\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal virtual override(ERC721UpgradeableMinimal, ERC721DefaultApprovalMinimal) view returns (bool) {\\n        return ERC721DefaultApprovalMinimal._isApprovedOrOwner(spender, tokenId);\\n    }\\n\\n    function isApprovedForAll(address owner, address operator) public view virtual override(ERC721DefaultApprovalMinimal, ERC721UpgradeableMinimal, IERC721Upgradeable) returns (bool) {\\n        return ERC721DefaultApprovalMinimal.isApprovedForAll(owner, operator);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, ERC721LazyMinimal) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view virtual override(ERC721UpgradeableMinimal, ERC721LazyMinimal) returns (string memory) {\\n        return ERC721LazyMinimal.tokenURI(tokenId);\\n    }\\n\\n    function _clearMetadata(uint256 tokenId) internal override(ERC721UpgradeableMinimal, ERC721LazyMinimal) virtual {\\n        return ERC721LazyMinimal._clearMetadata(tokenId);\\n    }\\n\\n    function _emitMintEvent(address to, uint tokenId) internal override(ERC721UpgradeableMinimal, ERC721LazyMinimal) virtual {\\n        return ERC721LazyMinimal._emitMintEvent(to, tokenId);\\n    }\\n\\n    function setBaseURI(string memory newBaseURI) external onlyOwner {\\n        super._setBaseURI(newBaseURI);\\n\\n        emit BaseUriChanged(newBaseURI);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\n    },\n    \"@rarible/tokens/contracts/erc-721-minimal/ERC721BurnableUpgradeableMinimal.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"./ERC721UpgradeableMinimal.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\\n */\\nabstract contract ERC721BurnableUpgradeableMinimal is Initializable, ContextUpgradeable, ERC721UpgradeableMinimal {\\n    function __ERC721Burnable_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721Burnable_init_unchained();\\n    }\\n\\n    function __ERC721Burnable_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        if(!_exists(tokenId)) {\\n            address owner = address(tokenId >> 96);\\n            require(owner == _msgSender(), \\\"ERC721Burnable: caller is not owner, not burn\\\");\\n            _setBurned(tokenId);\\n        } else {\\n            //solhint-disable-next-line max-line-length\\n            require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721Burnable: caller is not owner nor approved\\\");\\n            _burn(tokenId);\\n        }\\n    }\\n\\n    uint256[50] private __gap;\\n}\"\n    },\n    \"@rarible/tokens/contracts/erc-721-minimal/ERC721DefaultApprovalMinimal.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"./ERC721UpgradeableMinimal.sol\\\";\\n\\nabstract contract ERC721DefaultApprovalMinimal is ERC721UpgradeableMinimal {\\n    mapping(address => bool) private defaultApprovals;\\n\\n    event DefaultApproval(address indexed operator, bool hasApproval);\\n\\n    function _setDefaultApproval(address operator, bool hasApproval) internal {\\n        defaultApprovals[operator] = hasApproval;\\n        emit DefaultApproval(operator, hasApproval);\\n    }\\n\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal virtual override view returns (bool) {\\n        return defaultApprovals[spender] || super._isApprovedOrOwner(spender, tokenId);\\n    }\\n\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return defaultApprovals[operator] || super.isApprovedForAll(owner, operator);\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\n    },\n    \"@rarible/tokens/contracts/erc-721-minimal/ERC721LazyMinimal.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./ERC721UpgradeableMinimal.sol\\\";\\nimport \\\"@rarible/royalties/contracts/impl/RoyaltiesV2Impl.sol\\\";\\nimport \\\"@rarible/royalties-upgradeable/contracts/RoyaltiesV2Upgradeable.sol\\\";\\nimport \\\"@rarible/lazy-mint/contracts/erc-721/IERC721LazyMint.sol\\\";\\nimport \\\"../Mint721Validator.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"./ERC721URI.sol\\\";\\n\\nabstract contract ERC721LazyMinimal is IERC721LazyMint, ERC721UpgradeableMinimal, Mint721Validator, RoyaltiesV2Upgradeable, RoyaltiesV2Impl, ERC721URI {\\n    using SafeMathUpgradeable for uint;\\n\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\\n\\n    // tokenId => creators\\n    mapping(uint256 => LibPart.Part[]) private creators;\\n\\n    function __ERC721Lazy_init_unchained() internal initializer {\\n\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC165Upgradeable) returns (bool) {\\n        return interfaceId == LibERC721LazyMint._INTERFACE_ID_MINT_AND_TRANSFER\\n        || interfaceId == LibRoyaltiesV2._INTERFACE_ID_ROYALTIES\\n        || interfaceId == LibRoyalties2981._INTERFACE_ID_ROYALTIES\\n        || interfaceId == _INTERFACE_ID_ERC165\\n        || interfaceId == _INTERFACE_ID_ERC721\\n        || interfaceId == _INTERFACE_ID_ERC721_METADATA\\n        || interfaceId == _INTERFACE_ID_ERC721_ENUMERABLE;\\n    }\\n\\n    function transferFromOrMint(\\n        LibERC721LazyMint.Mint721Data memory data,\\n        address from,\\n        address to\\n    ) override external {\\n        if (_exists(data.tokenId)) {\\n            safeTransferFrom(from, to, data.tokenId);\\n        } else {\\n            require(from == data.creators[0].account, \\\"wrong order maker\\\");\\n            mintAndTransfer(data, to);\\n        }\\n    }\\n\\n    function mintAndTransfer(LibERC721LazyMint.Mint721Data memory data, address to) public override virtual {\\n        address minter = address(data.tokenId >> 96);\\n        address sender = _msgSender();\\n\\n        require(minter == data.creators[0].account, \\\"tokenId incorrect\\\");\\n        require(data.creators.length == data.signatures.length);\\n        require(minter == sender || isApprovedForAll(minter, sender), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        bytes32 hash = LibERC721LazyMint.hash(data);\\n        for (uint i = 0; i < data.creators.length; ++i) {\\n            address creator = data.creators[i].account;\\n            if (creator != sender) {\\n                validate(creator, hash, data.signatures[i]);\\n            }\\n        }\\n\\n        _safeMint(to, data.tokenId);\\n        _saveRoyalties(data.tokenId, data.royalties);\\n        _saveCreators(data.tokenId, data.creators);\\n        _setTokenURI(data.tokenId, data.tokenURI);\\n    }\\n\\n    function _emitMintEvent(address to, uint tokenId) internal override virtual {\\n        address minter = address(tokenId >> 96);\\n        if (minter != to) {\\n            emit Transfer(address(0), minter, tokenId);\\n            emit Transfer(minter, to, tokenId);\\n        } else {\\n            emit Transfer(address(0), to, tokenId);\\n        }\\n    }\\n\\n    function _saveCreators(uint tokenId, LibPart.Part[] memory _creators) internal {\\n        LibPart.Part[] storage creatorsOfToken = creators[tokenId];\\n        uint total = 0;\\n        for (uint i = 0; i < _creators.length; ++i) {\\n            require(_creators[i].account != address(0x0), \\\"Account should be present\\\");\\n            require(_creators[i].value != 0, \\\"Creator share should be positive\\\");\\n            creatorsOfToken.push(_creators[i]);\\n            total = total.add(_creators[i].value);\\n        }\\n        require(total == 10000, \\\"total amount of creators share should be 10000\\\");\\n        emit Creators(tokenId, _creators);\\n    }\\n\\n    function updateAccount(uint256 _id, address _from, address _to) external {\\n        require(_msgSender() == _from, \\\"not allowed\\\");\\n        super._updateAccount(_id, _from, _to);\\n    }\\n\\n    function getCreators(uint256 _id) external view returns (LibPart.Part[] memory) {\\n        return creators[_id];\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view virtual override(ERC721UpgradeableMinimal, ERC721URI) returns (string memory) {\\n        return ERC721URI.tokenURI(tokenId);\\n    }\\n\\n    function _clearMetadata(uint256 tokenId) internal override(ERC721UpgradeableMinimal, ERC721URI) virtual {\\n        return ERC721URI._clearMetadata(tokenId);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\n    },\n    \"@rarible/tokens/contracts/erc-721-minimal/ERC721RaribleMinimal.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./ERC721BaseMinimal.sol\\\";\\nimport \\\"../IsPrivateCollection.sol\\\";\\nimport \\\"../access/MinterAccessControl.sol\\\";\\n\\ncontract ERC721RaribleMinimal is ERC721BaseMinimal, IsPrivateCollection, MinterAccessControl {\\n    event CreateERC721Rarible(address owner, string name, string symbol);\\n    event CreateERC721RaribleUser(address owner, string name, string symbol);\\n\\n    function __ERC721RaribleUser_init(string memory _name, string memory _symbol, string memory baseURI, string memory contractURI, address[] memory operators, address transferProxy, address lazyTransferProxy) external virtual {\\n        __ERC721Rarible_init_unchained(_name, _symbol, baseURI, contractURI, transferProxy, lazyTransferProxy);\\n\\n        isPrivate = true;\\n        emit CreateERC721RaribleUser(_msgSender(), _name, _symbol);\\n    }\\n\\n    function __ERC721Rarible_init(string memory _name, string memory _symbol, string memory baseURI, string memory contractURI, address transferProxy, address lazyTransferProxy) external virtual {\\n        __ERC721Rarible_init_unchained(_name, _symbol, baseURI, contractURI, transferProxy, lazyTransferProxy);\\n\\n        isPrivate = false;\\n        emit CreateERC721Rarible(_msgSender(), _name, _symbol);\\n    }\\n\\n    function __ERC721Rarible_init_unchained(string memory _name, string memory _symbol, string memory baseURI, string memory contractURI, address transferProxy, address lazyTransferProxy) internal initializer {\\n        _setBaseURI(baseURI);\\n        __ERC721Lazy_init_unchained();\\n        __RoyaltiesV2Upgradeable_init_unchained();\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __Ownable_init_unchained();\\n        __ERC721Burnable_init_unchained();\\n        __Mint721Validator_init_unchained();\\n        __MinterAccessControl_init_unchained();\\n        __HasContractURI_init_unchained(contractURI);\\n        __ERC721_init_unchained(_name, _symbol);\\n\\n        //setting default approver for transferProxies\\n        _setDefaultApproval(transferProxy, true);\\n        _setDefaultApproval(lazyTransferProxy, true);\\n    }\\n\\n    function mintAndTransfer(LibERC721LazyMint.Mint721Data memory data, address to) public override virtual {\\n        if (isPrivate){\\n            require(owner() == data.creators[0].account || isMinter(data.creators[0].account), \\\"not owner or minter\\\");\\n        }\\n        super.mintAndTransfer(data, to);\\n    }\\n}\\n\"\n    },\n    \"@rarible/tokens/contracts/erc-721-minimal/ERC721UpgradeableMinimal.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721UpgradeableMinimal is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /*\\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\\n     *\\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\\n     *        0xa22cb465 ^ 0xe985e9c5 ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\\n\\n    /*\\n     *     bytes4(keccak256('name()')) == 0x06fdde03\\n     *     bytes4(keccak256('symbol()')) == 0x95d89b41\\n     *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\\n     *\\n     *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\\n\\n    // Mapping from token ID to flag == true, means token already burned\\n    mapping(uint256 => bool) private _burnedTokens;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n\\n        // register the supported interfaces to conform to ERC721 via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC721);\\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721UpgradeableMinimal.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721UpgradeableMinimal.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_burnedTokens[tokenId], \\\"token already burned\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        _emitMintEvent(to, tokenId);\\n    }\\n\\n    function _emitMintEvent(address to, uint tokenId) internal virtual {\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721UpgradeableMinimal.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _clearMetadata(tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n        //set token is burned\\n        _setBurned(tokenId);\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /*Set token with tokenId burned*/\\n    function _setBurned(uint256 tokenId) internal {\\n        _burnedTokens[tokenId] = true;\\n    }\\n\\n    function _clearMetadata(uint256 tokenId) internal virtual {\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721UpgradeableMinimal.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721UpgradeableMinimal.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n    uint256[43] private __gap;\\n}\"\n    },\n    \"@rarible/tokens/contracts/erc-721-minimal/ERC721URI.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"./ERC721UpgradeableMinimal.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"../LibURI.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\\n */\\nabstract contract ERC721URI is ContextUpgradeable, ERC721UpgradeableMinimal {\\n    using StringsUpgradeable for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping (uint256 => string) private _tokenURIs;\\n\\n    // Base URI\\n    string private _baseURI;\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Internal function to set the base URI for all token IDs. It is\\n     * automatically added as a prefix to the value returned in {tokenURI},\\n     * or to the token ID if {tokenURI} is empty.\\n     */\\n    function _setBaseURI(string memory baseURI_) internal virtual {\\n        _baseURI = baseURI_;\\n    }\\n\\n    /**\\n    * @dev Returns the base URI set via {_setBaseURI}. This will be\\n    * automatically added as a prefix in {tokenURI} to each token's URI, or\\n    * to the token ID if no specific URI is set for that token ID.\\n    */\\n    function baseURI() public view virtual returns (string memory) {\\n        return _baseURI;\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _clearMetadata(uint256 tokenId) internal override virtual {\\n        // Clear metadata (if any)\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return LibURI.checkPrefix(base, _tokenURI);\\n        }\\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\\n        return string(abi.encodePacked(base, tokenId.toString()));\\n    }\\n\\n    uint256[50] private __gap;\\n}\"\n    },\n    \"@rarible/tokens/contracts/erc-721/ERC721Base.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./ERC721BurnableUpgradeable.sol\\\";\\nimport \\\"./ERC721DefaultApproval.sol\\\";\\nimport \\\"./ERC721Lazy.sol\\\";\\nimport \\\"../HasContractURI.sol\\\";\\n\\nabstract contract ERC721Base is OwnableUpgradeable, ERC721DefaultApproval, ERC721BurnableUpgradeable, ERC721Lazy, HasContractURI {\\n\\n    event BaseUriChanged(string newBaseURI);\\n\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal virtual override(ERC721Upgradeable, ERC721DefaultApproval) view returns (bool) {\\n        return ERC721DefaultApproval._isApprovedOrOwner(spender, tokenId);\\n    }\\n\\n    function isApprovedForAll(address owner, address operator) public view virtual override(ERC721DefaultApproval, ERC721Upgradeable, IERC721Upgradeable) returns (bool) {\\n        return ERC721DefaultApproval.isApprovedForAll(owner, operator);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, ERC721Lazy) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    function _mint(address to, uint256 tokenId) internal override(ERC721Lazy, ERC721Upgradeable) {\\n        super._mint(to, tokenId);\\n    }\\n\\n    function setBaseURI(string memory newBaseURI) external onlyOwner {\\n        super._setBaseURI(newBaseURI);\\n\\n        emit BaseUriChanged(newBaseURI);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\n    },\n    \"@rarible/tokens/contracts/erc-721/ERC721BurnableUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"./ERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\\n */\\nabstract contract ERC721BurnableUpgradeable is Initializable, ContextUpgradeable, ERC721Upgradeable {\\n    function __ERC721Burnable_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721Burnable_init_unchained();\\n    }\\n\\n    function __ERC721Burnable_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        if(!_exists(tokenId)) {\\n            address owner = address(tokenId >> 96);\\n            require(owner == _msgSender(), \\\"ERC721Burnable: caller is not owner, not burn\\\");\\n            _setBurned(tokenId);\\n        } else {\\n            //solhint-disable-next-line max-line-length\\n            require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721Burnable: caller is not owner nor approved\\\");\\n            _burn(tokenId);\\n        }\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\n    },\n    \"@rarible/tokens/contracts/erc-721/ERC721DefaultApproval.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"./ERC721Upgradeable.sol\\\";\\n\\nabstract contract ERC721DefaultApproval is ERC721Upgradeable {\\n    mapping(address => bool) private defaultApprovals;\\n\\n    event DefaultApproval(address indexed operator, bool hasApproval);\\n\\n    function _setDefaultApproval(address operator, bool hasApproval) internal {\\n        defaultApprovals[operator] = hasApproval;\\n        emit DefaultApproval(operator, hasApproval);\\n    }\\n\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal virtual override view returns (bool) {\\n        return defaultApprovals[spender] || super._isApprovedOrOwner(spender, tokenId);\\n    }\\n\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return defaultApprovals[operator] || super.isApprovedForAll(owner, operator);\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\n    },\n    \"@rarible/tokens/contracts/erc-721/ERC721Lazy.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./ERC721Upgradeable.sol\\\";\\nimport \\\"@rarible/royalties/contracts/impl/RoyaltiesV2Impl.sol\\\";\\nimport \\\"@rarible/royalties-upgradeable/contracts/RoyaltiesV2Upgradeable.sol\\\";\\nimport \\\"@rarible/lazy-mint/contracts/erc-721/IERC721LazyMint.sol\\\";\\nimport \\\"../Mint721Validator.sol\\\";\\n\\nabstract contract ERC721Lazy is IERC721LazyMint, ERC721Upgradeable, Mint721Validator, RoyaltiesV2Upgradeable, RoyaltiesV2Impl {\\n    using SafeMathUpgradeable for uint;\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.UintSet;\\n    using EnumerableMapUpgradeable for EnumerableMapUpgradeable.UintToAddressMap;\\n\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\\n\\n    // tokenId => creators\\n    mapping(uint256 => LibPart.Part[]) private creators;\\n\\n    function __ERC721Lazy_init_unchained() internal initializer {\\n\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC165Upgradeable) returns (bool) {\\n        return interfaceId == LibERC721LazyMint._INTERFACE_ID_MINT_AND_TRANSFER\\n        || interfaceId == LibRoyaltiesV2._INTERFACE_ID_ROYALTIES\\n        || interfaceId == LibRoyalties2981._INTERFACE_ID_ROYALTIES\\n        || interfaceId == _INTERFACE_ID_ERC165\\n        || interfaceId == _INTERFACE_ID_ERC721\\n        || interfaceId == _INTERFACE_ID_ERC721_METADATA\\n        || interfaceId == _INTERFACE_ID_ERC721_ENUMERABLE;\\n    }\\n\\n    function transferFromOrMint(\\n        LibERC721LazyMint.Mint721Data memory data,\\n        address from,\\n        address to\\n    ) override external {\\n        if (_exists(data.tokenId)) {\\n            safeTransferFrom(from, to, data.tokenId);\\n        } else {\\n            require(from == data.creators[0].account, \\\"wrong order maker\\\");\\n            mintAndTransfer(data, to);\\n        }\\n    }\\n\\n    function mintAndTransfer(LibERC721LazyMint.Mint721Data memory data, address to) public override virtual {\\n        address minter = address(data.tokenId >> 96);\\n        address sender = _msgSender();\\n\\n        require(minter == data.creators[0].account, \\\"tokenId incorrect\\\");\\n        require(data.creators.length == data.signatures.length);\\n        require(minter == sender || isApprovedForAll(minter, sender), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        bytes32 hash = LibERC721LazyMint.hash(data);\\n        for (uint i = 0; i < data.creators.length; ++i) {\\n            address creator = data.creators[i].account;\\n            if (creator != sender) {\\n                validate(creator, hash, data.signatures[i]);\\n            }\\n        }\\n\\n        _safeMint(to, data.tokenId);\\n        _saveRoyalties(data.tokenId, data.royalties);\\n        _saveCreators(data.tokenId, data.creators);\\n        _setTokenURI(data.tokenId, data.tokenURI);\\n    }\\n\\n    function _mint(address to, uint256 tokenId) internal virtual override {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_burned(tokenId), \\\"token already burned\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _holderTokens[to].add(tokenId);\\n\\n        _tokenOwners.set(tokenId, to);\\n\\n        address minter = address(tokenId >> 96);\\n        if (minter != to) {\\n            emit Transfer(address(0), minter, tokenId);\\n            emit Transfer(minter, to, tokenId);\\n        } else {\\n            emit Transfer(address(0), to, tokenId);\\n        }\\n    }\\n\\n    function _saveCreators(uint tokenId, LibPart.Part[] memory _creators) internal {\\n        LibPart.Part[] storage creatorsOfToken = creators[tokenId];\\n        uint total = 0;\\n        for (uint i = 0; i < _creators.length; ++i) {\\n            require(_creators[i].account != address(0x0), \\\"Account should be present\\\");\\n            require(_creators[i].value != 0, \\\"Creator share should be positive\\\");\\n            creatorsOfToken.push(_creators[i]);\\n            total = total.add(_creators[i].value);\\n        }\\n        require(total == 10000, \\\"total amount of creators share should be 10000\\\");\\n        emit Creators(tokenId, _creators);\\n    }\\n\\n    function updateAccount(uint256 _id, address _from, address _to) external {\\n        require(_msgSender() == _from, \\\"not allowed\\\");\\n        super._updateAccount(_id, _from, _to);\\n    }\\n\\n    function getCreators(uint256 _id) external view returns (LibPart.Part[] memory) {\\n        return creators[_id];\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\n    },\n    \"@rarible/tokens/contracts/erc-721/ERC721Rarible.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./ERC721Base.sol\\\";\\n\\ncontract ERC721Rarible is ERC721Base {\\n\\n    event CreateERC721Rarible(address owner, string name, string symbol);\\n\\n    function __ERC721Rarible_init(string memory _name, string memory _symbol, string memory baseURI, string memory contractURI, address transferProxy, address lazyTransferProxy) external initializer {\\n        __ERC721Rarible_init_unchained(_name, _symbol, baseURI, contractURI, transferProxy, lazyTransferProxy);\\n        emit CreateERC721Rarible(_msgSender(), _name, _symbol);\\n    }\\n\\n    function __ERC721Rarible_init_unchained(string memory _name, string memory _symbol, string memory baseURI, string memory contractURI, address transferProxy, address lazyTransferProxy) internal {\\n        _setBaseURI(baseURI);\\n        __ERC721Lazy_init_unchained();\\n        __RoyaltiesV2Upgradeable_init_unchained();\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __Ownable_init_unchained();\\n        __ERC721Burnable_init_unchained();\\n        __Mint721Validator_init_unchained();\\n        __HasContractURI_init_unchained(contractURI);\\n        __ERC721_init_unchained(_name, _symbol);\\n\\n        //setting default approver for transferProxies\\n        _setDefaultApproval(transferProxy, true);\\n        _setDefaultApproval(lazyTransferProxy, true);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\n    },\n    \"@rarible/tokens/contracts/erc-721/ERC721Upgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/EnumerableMapUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"../LibURI.sol\\\";\\n\\n/**\\n * @title ERC721 Non-Fungible Token Standard basic implementation\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable, IERC721EnumerableUpgradeable {\\n    using SafeMathUpgradeable for uint256;\\n    using AddressUpgradeable for address;\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.UintSet;\\n    using EnumerableMapUpgradeable for EnumerableMapUpgradeable.UintToAddressMap;\\n    using StringsUpgradeable for uint256;\\n\\n    // Equals to `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\\n\\n    // Mapping from holder address to their (enumerable) set of owned tokens\\n    mapping (address => EnumerableSetUpgradeable.UintSet) _holderTokens;\\n\\n    // Enumerable mapping from token ids to their owners\\n    EnumerableMapUpgradeable.UintToAddressMap _tokenOwners;\\n\\n    // Mapping from token ID to approved address\\n    mapping (uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Optional mapping for token URIs\\n    mapping (uint256 => string) private _tokenURIs;\\n\\n    // Base URI\\n    string private _baseURI;\\n\\n    /*\\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\\n     *\\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\\n     *        0xa22cb465 ^ 0xe985e9c5 ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\\n\\n    /*\\n     *     bytes4(keccak256('name()')) == 0x06fdde03\\n     *     bytes4(keccak256('symbol()')) == 0x95d89b41\\n     *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\\n     *\\n     *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\\n\\n    /*\\n     *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\\n     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\\n     *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\\n     *\\n     *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\\n\\n    // Mapping from token ID to flag == true, means token already burned\\n    mapping(uint256 => bool) private _burnedTokens;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n\\n        // register the supported interfaces to conform to ERC721 via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC721);\\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _holderTokens[owner].length();\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        return _tokenOwners.get(tokenId, \\\"ERC721: owner query for nonexistent token\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return LibURI.checkPrefix(base, _tokenURI);\\n        }\\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\\n        return string(abi.encodePacked(base, tokenId.toString()));\\n    }\\n\\n    /**\\n    * @dev Returns the base URI set via {_setBaseURI}. This will be\\n    * automatically added as a prefix in {tokenURI} to each token's URI, or\\n    * to the token ID if no specific URI is set for that token ID.\\n    */\\n    function baseURI() public view virtual returns (string memory) {\\n        return _baseURI;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        return _holderTokens[owner].at(index);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        // _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\\n        return _tokenOwners.length();\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        (uint256 tokenId, ) = _tokenOwners.at(index);\\n        return tokenId;\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(_msgSender() == owner || ERC721Upgradeable.isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _tokenOwners.contains(tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || ERC721Upgradeable.isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     d*\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _mint(to, tokenId);\\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_burnedTokens[tokenId], \\\"token already burned\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _holderTokens[to].add(tokenId);\\n\\n        _tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId); // internal owner\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        // Clear metadata (if any)\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n\\n        _holderTokens[owner].remove(tokenId);\\n\\n        _tokenOwners.remove(tokenId);\\n        _setBurned(tokenId);\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /*Returns true if token with tokenId already burned*/\\n    function _burned(uint256 tokenId) internal returns (bool) {\\n        return _burnedTokens[tokenId];\\n    }\\n\\n    /*Set token with tokenId burned*/\\n    function _setBurned(uint256 tokenId) internal {\\n        _burnedTokens[tokenId] = true;\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\"); // internal owner\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _holderTokens[from].remove(tokenId);\\n        _holderTokens[to].add(tokenId);\\n\\n        _tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Internal function to set the base URI for all token IDs. It is\\n     * automatically added as a prefix to the value returned in {tokenURI},\\n     * or to the token ID if {tokenURI} is empty.\\n     */\\n    function _setBaseURI(string memory baseURI_) internal virtual {\\n        _baseURI = baseURI_;\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\n        private returns (bool)\\n    {\\n        if (!to.isContract()) {\\n            return true;\\n        }\\n        bytes memory returndata = to.functionCall(abi.encodeWithSelector(\\n            IERC721ReceiverUpgradeable(to).onERC721Received.selector,\\n            _msgSender(),\\n            from,\\n            tokenId,\\n            _data\\n        ), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n        bytes4 retval = abi.decode(returndata, (bytes4));\\n        return (retval == _ERC721_RECEIVED);\\n    }\\n\\n    function _approve(address to, uint256 tokenId) private {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId); // internal owner\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\\n    uint256[40] private __gap;\\n}\\n\"\n    },\n    \"@rarible/tokens/contracts/HasContractURI.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol\\\";\\n\\nabstract contract HasContractURI is ERC165Upgradeable {\\n\\n    string public contractURI;\\n\\n    /*\\n     * bytes4(keccak256('contractURI()')) == 0xe8a3d485\\n     */\\n    bytes4 private constant _INTERFACE_ID_CONTRACT_URI = 0xe8a3d485;\\n\\n    function __HasContractURI_init_unchained(string memory _contractURI) internal initializer {\\n        contractURI = _contractURI;\\n        _registerInterface(_INTERFACE_ID_CONTRACT_URI);\\n    }\\n\\n    /**\\n     * @dev Internal function to set the contract URI\\n     * @param _contractURI string URI prefix to assign\\n     */\\n    function _setContractURI(string memory _contractURI) internal {\\n        contractURI = _contractURI;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\"\n    },\n    \"@rarible/tokens/contracts/IsPrivateCollection.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\ncontract IsPrivateCollection {\\n    /// @dev true if collection is private, false if public\\n    bool isPrivate;\\n\\n    uint256[49] private __gap;\\n}\"\n    },\n    \"@rarible/tokens/contracts/LibURI.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nlibrary LibURI {\\n    /// @dev checks if _tokenURI starts with base. if true returns _tokenURI, else base + _tokenURI\\n    function checkPrefix(string memory base, string memory _tokenURI)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        bytes memory whatBytes = bytes(base);\\n        bytes memory whereBytes = bytes(_tokenURI);\\n\\n        if (whatBytes.length > whereBytes.length) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        for (uint256 j = 0; j < whatBytes.length; j++) {\\n            if (whereBytes[j] != whatBytes[j]) {\\n                return string(abi.encodePacked(base, _tokenURI));\\n            }\\n        }\\n\\n        return _tokenURI;\\n    }\\n}\\n\"\n    },\n    \"@rarible/tokens/contracts/Mint721Validator.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"./erc-1271/ERC1271Validator.sol\\\";\\nimport \\\"@rarible/lazy-mint/contracts/erc-721/LibERC721LazyMint.sol\\\";\\n\\ncontract Mint721Validator is ERC1271Validator {\\n    function __Mint721Validator_init_unchained() internal initializer {\\n        __EIP712_init_unchained(\\\"Mint721\\\", \\\"1\\\");\\n    }\\n\\n    function validate(address account, bytes32 hash, bytes memory signature) internal view {\\n        validate1271(account, hash, signature);\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\n    },\n    \"@rarible/transfer-manager/contracts/interfaces/ITransferExecutor.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@rarible/lib-asset/contracts/LibAsset.sol\\\";\\n\\nabstract contract ITransferExecutor {\\n    function transfer(\\n        LibAsset.Asset memory asset,\\n        address from,\\n        address to,\\n        address proxy\\n    ) internal virtual;\\n}\\n\"\n    },\n    \"@rarible/transfer-manager/contracts/interfaces/ITransferManager.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"../lib/LibDeal.sol\\\";\\nimport \\\"./ITransferExecutor.sol\\\";\\n\\nabstract contract ITransferManager is ITransferExecutor {\\n\\n    function doTransfers(\\n        LibDeal.DealSide memory left,\\n        LibDeal.DealSide memory right,\\n        LibFeeSide.FeeSide feeSide\\n    ) internal virtual returns (uint totalMakeValue, uint totalTakeValue);\\n}\"\n    },\n    \"@rarible/transfer-manager/contracts/lib/LibDeal.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@rarible/lib-part/contracts/LibPart.sol\\\";\\nimport \\\"@rarible/lib-asset/contracts/LibAsset.sol\\\";\\nimport \\\"./LibFeeSide.sol\\\";\\n\\nlibrary LibDeal {\\n    struct DealSide {\\n        LibAsset.Asset asset;\\n        LibPart.Part[] payouts;\\n        LibPart.Part[] originFees;\\n        address proxy;\\n        address from;\\n        bool protocolFeeEnabled;\\n    }\\n}\\n\"\n    },\n    \"@rarible/transfer-manager/contracts/lib/LibFeeSide.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@rarible/lib-asset/contracts/LibAsset.sol\\\";\\n\\nlibrary LibFeeSide {\\n\\n    enum FeeSide {NONE, LEFT, RIGHT}\\n\\n    function getFeeSide(bytes4 leftClass, bytes4 rightClass) internal pure returns (FeeSide) {\\n        if (leftClass == LibAsset.ETH_ASSET_CLASS) {\\n            return FeeSide.LEFT;\\n        }\\n        if (rightClass == LibAsset.ETH_ASSET_CLASS) {\\n            return FeeSide.RIGHT;\\n        }\\n        if (leftClass == LibAsset.ERC20_ASSET_CLASS) {\\n            return FeeSide.LEFT;\\n        }\\n        if (rightClass == LibAsset.ERC20_ASSET_CLASS) {\\n            return FeeSide.RIGHT;\\n        }\\n        if (leftClass == LibAsset.ERC1155_ASSET_CLASS) {\\n            return FeeSide.LEFT;\\n        }\\n        if (rightClass == LibAsset.ERC1155_ASSET_CLASS) {\\n            return FeeSide.RIGHT;\\n        }\\n        return FeeSide.NONE;\\n    }\\n}\\n\"\n    },\n    \"@rarible/transfer-manager/contracts/lib/LibTransfer.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nlibrary LibTransfer {\\n    function transferEth(address to, uint value) internal {\\n        (bool success,) = to.call{ value: value }(\\\"\\\");\\n        require(success, \\\"transfer failed\\\");\\n    }\\n}\\n\"\n    },\n    \"@rarible/transfer-manager/contracts/RaribleTransferManager.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport \\\"@rarible/lazy-mint/contracts/erc-721/LibERC721LazyMint.sol\\\";\\nimport \\\"@rarible/lazy-mint/contracts/erc-1155/LibERC1155LazyMint.sol\\\";\\n\\nimport \\\"@rarible/exchange-interfaces/contracts/IRoyaltiesProvider.sol\\\";\\n\\nimport \\\"@rarible/lib-bp/contracts/BpLibrary.sol\\\";\\n\\nimport \\\"./interfaces/ITransferManager.sol\\\";\\n\\nabstract contract RaribleTransferManager is OwnableUpgradeable, ITransferManager {\\n    using BpLibrary for uint;\\n    using SafeMathUpgradeable for uint;\\n\\n    ProtocolFeeData public protocolFee;\\n    IRoyaltiesProvider public royaltiesRegistry;\\n\\n    //deprecated\\n    address private defaultFeeReceiver;\\n    // deprecated\\n    mapping(address => address) private feeReceivers;\\n\\n    /// @dev event that's emitted when ProtocolFeeData buyerAmount changes\\n    event BuyerFeeAmountChanged(uint oldValue, uint newValue);\\n\\n    /// @dev event that's emitted when ProtocolFeeData sellerAmount changes\\n    event SellerFeeAmountChanged(uint oldValue, uint newValue);\\n\\n    /// @dev event that's emitted when ProtocolFeeData receiver changes\\n    event FeeReceiverChanged(address oldValue, address newValue);\\n\\n    /// @dev struct to store protocol fee - receiver address, buyer fee amount (in bp), seller fee amount (in bp)\\n    struct ProtocolFeeData {\\n        address receiver;\\n        uint48 buyerAmount;\\n        uint48 sellerAmount;\\n    }\\n\\n    /**\\n        @notice initialises RaribleTransferManager state\\n        @param newProtocolFee deprecated\\n        @param newDefaultFeeReceiver deprecated\\n        @param newRoyaltiesProvider royaltiesRegistry contract address\\n     */\\n    function __RaribleTransferManager_init_unchained(\\n        uint newProtocolFee,\\n        address newDefaultFeeReceiver,\\n        IRoyaltiesProvider newRoyaltiesProvider\\n    ) internal initializer {\\n        royaltiesRegistry = newRoyaltiesProvider;\\n    }\\n\\n    function setRoyaltiesRegistry(IRoyaltiesProvider newRoyaltiesRegistry) external onlyOwner {\\n        royaltiesRegistry = newRoyaltiesRegistry;\\n    }\\n\\n    function setPrtocolFeeReceiver(address _receiver) public onlyOwner {\\n        emit FeeReceiverChanged(protocolFee.receiver, _receiver);\\n        protocolFee.receiver = _receiver;\\n    }\\n\\n    function setPrtocolFeeBuyerAmount(uint48 _buyerAmount) public onlyOwner {\\n        emit BuyerFeeAmountChanged(protocolFee.buyerAmount, _buyerAmount);\\n        protocolFee.buyerAmount = _buyerAmount;\\n    }\\n\\n    function setPrtocolFeeSellerAmount(uint48 _sellerAmount) public onlyOwner {\\n        emit SellerFeeAmountChanged(protocolFee.sellerAmount, _sellerAmount);\\n        protocolFee.sellerAmount = _sellerAmount;\\n    }\\n\\n    function setAllProtocolFeeData(address _receiver, uint48 _buyerAmount, uint48 _sellerAmount) public onlyOwner {\\n        setPrtocolFeeReceiver(_receiver);\\n        setPrtocolFeeBuyerAmount(_buyerAmount);\\n        setPrtocolFeeSellerAmount(_sellerAmount);\\n    }\\n\\n    /**\\n        @notice executes transfers for 2 matched orders\\n        @param left DealSide from the left order (see LibDeal.sol)\\n        @param right DealSide from the right order (see LibDeal.sol)\\n        @param feeSide feeSide of the match\\n        @return totalLeftValue - total amount for the left order\\n        @return totalRightValue - total amout for the right order\\n    */\\n    function doTransfers(\\n        LibDeal.DealSide memory left,\\n        LibDeal.DealSide memory right,\\n        LibFeeSide.FeeSide feeSide\\n    ) override internal returns (uint totalLeftValue, uint totalRightValue) {\\n        totalLeftValue = left.asset.value;\\n        totalRightValue = right.asset.value;\\n\\n        if (feeSide == LibFeeSide.FeeSide.LEFT) {\\n            totalLeftValue = doTransfersWithFees(left, right, protocolFee);\\n            transferPayouts(right.asset.assetType, right.asset.value, right.from, left.payouts, right.proxy);\\n        } else if (feeSide == LibFeeSide.FeeSide.RIGHT) {\\n            totalRightValue = doTransfersWithFees(right, left,protocolFee);\\n            transferPayouts(left.asset.assetType, left.asset.value, left.from, right.payouts, left.proxy);\\n        } else {\\n            transferPayouts(left.asset.assetType, left.asset.value, left.from, right.payouts, left.proxy);\\n            transferPayouts(right.asset.assetType, right.asset.value, right.from, left.payouts, right.proxy);\\n        }\\n    }\\n\\n    /**\\n        @notice executes the fee-side transfers (payment + fees)\\n        @param paymentSide DealSide of the fee-side order\\n        @param nftSide  DealSide of the nft-side order\\n        @param _protocolFee protocol fee data\\n        @return totalAmount of fee-side asset\\n    */\\n    function doTransfersWithFees(\\n        LibDeal.DealSide memory paymentSide,\\n        LibDeal.DealSide memory nftSide,\\n        ProtocolFeeData memory _protocolFee\\n    ) internal returns (uint totalAmount) {\\n        uint buyerProtocolFee = paymentSide.protocolFeeEnabled ? _protocolFee.buyerAmount : 0;\\n        uint sellerProtocolFee = nftSide.protocolFeeEnabled ? _protocolFee.sellerAmount : 0;\\n        totalAmount = calculateTotalAmount(paymentSide.asset.value, buyerProtocolFee, paymentSide.originFees);\\n        uint rest = transferProtocolFee(totalAmount, paymentSide.asset.value, paymentSide.from, buyerProtocolFee + sellerProtocolFee, _protocolFee.receiver, paymentSide.asset.assetType, paymentSide.proxy);\\n\\n        rest = transferRoyalties(paymentSide.asset.assetType, nftSide.asset.assetType, nftSide.payouts, rest, paymentSide.asset.value, paymentSide.from, paymentSide.proxy);\\n        if (\\n            paymentSide.originFees.length  == 1 &&\\n            nftSide.originFees.length  == 1 &&\\n            nftSide.originFees[0].account == paymentSide.originFees[0].account\\n        ) { \\n            LibPart.Part[] memory origin = new  LibPart.Part[](1);\\n            origin[0].account = nftSide.originFees[0].account;\\n            origin[0].value = nftSide.originFees[0].value + paymentSide.originFees[0].value;\\n            (rest,) = transferFees(paymentSide.asset.assetType, rest, paymentSide.asset.value, origin, paymentSide.from, paymentSide.proxy);\\n        } else {\\n            (rest,) = transferFees(paymentSide.asset.assetType, rest, paymentSide.asset.value, paymentSide.originFees, paymentSide.from, paymentSide.proxy);\\n            (rest,) = transferFees(paymentSide.asset.assetType, rest, paymentSide.asset.value, nftSide.originFees, paymentSide.from, paymentSide.proxy);\\n        }\\n        transferPayouts(paymentSide.asset.assetType, rest, paymentSide.from, nftSide.payouts, paymentSide.proxy);\\n    }\\n\\n    /**\\n        @notice transfers protocol fee to protocol fee receiver\\n    */\\n    function transferProtocolFee(\\n        uint totalAmount,\\n        uint amount,\\n        address from,\\n        uint protocolFeeTotal,\\n        address protocolFeeReceiver,\\n        LibAsset.AssetType memory matchCalculate,\\n        address proxy\\n    ) internal returns (uint) {\\n        (uint rest, uint fee) = subFeeInBp(totalAmount, amount, protocolFeeTotal);\\n        if (fee > 0) {\\n            transfer(LibAsset.Asset(matchCalculate, fee), from, protocolFeeReceiver, proxy);\\n        }\\n        return rest;\\n    }\\n\\n    /**\\n        @notice Transfer royalties. If there is only one royalties receiver and one address in payouts and they match,\\n           nothing is transferred in this function\\n        @param paymentAssetType Asset Type which represents payment\\n        @param nftAssetType Asset Type which represents NFT to pay royalties for\\n        @param payouts Payouts to be made\\n        @param rest How much of the amount left after previous transfers\\n        @param from owner of the Asset to transfer\\n        @param proxy Transfer proxy to use\\n        @return How much left after transferring royalties\\n    */\\n    function transferRoyalties(\\n        LibAsset.AssetType memory paymentAssetType,\\n        LibAsset.AssetType memory nftAssetType,\\n        LibPart.Part[] memory payouts,\\n        uint rest,\\n        uint amount,\\n        address from,\\n        address proxy\\n    ) internal returns (uint) {\\n        LibPart.Part[] memory royalties = getRoyaltiesByAssetType(nftAssetType);\\n        if (\\n            royalties.length == 1 &&\\n            payouts.length == 1 &&\\n            royalties[0].account == payouts[0].account\\n        ) {\\n            require(royalties[0].value <= 5000, \\\"Royalties are too high (>50%)\\\");\\n            return rest;\\n        }\\n        (uint result, uint totalRoyalties) = transferFees(paymentAssetType, rest, amount, royalties, from, proxy);\\n        require(totalRoyalties <= 5000, \\\"Royalties are too high (>50%)\\\");\\n        return result;\\n    }\\n\\n    /**\\n        @notice calculates royalties by asset type. If it's a lazy NFT, then royalties are extracted from asset. otherwise using royaltiesRegistry\\n        @param nftAssetType NFT Asset Type to calculate royalties for\\n        @return calculated royalties (Array of LibPart.Part)\\n    */\\n    function getRoyaltiesByAssetType(LibAsset.AssetType memory nftAssetType) internal returns (LibPart.Part[] memory) {\\n        if (nftAssetType.assetClass == LibAsset.ERC1155_ASSET_CLASS || nftAssetType.assetClass == LibAsset.ERC721_ASSET_CLASS) {\\n            (address token, uint tokenId) = abi.decode(nftAssetType.data, (address, uint));\\n            return royaltiesRegistry.getRoyalties(token, tokenId);\\n        } else if (nftAssetType.assetClass == LibERC1155LazyMint.ERC1155_LAZY_ASSET_CLASS) {\\n            (, LibERC1155LazyMint.Mint1155Data memory data) = abi.decode(nftAssetType.data, (address, LibERC1155LazyMint.Mint1155Data));\\n            return data.royalties;\\n        } else if (nftAssetType.assetClass == LibERC721LazyMint.ERC721_LAZY_ASSET_CLASS) {\\n            (, LibERC721LazyMint.Mint721Data memory data) = abi.decode(nftAssetType.data, (address, LibERC721LazyMint.Mint721Data));\\n            return data.royalties;\\n        }\\n        LibPart.Part[] memory empty;\\n        return empty;\\n    }\\n\\n    /**\\n        @notice Transfer fees\\n        @param assetType Asset Type to transfer\\n        @param rest How much of the amount left after previous transfers\\n        @param amount Total amount of the Asset. Used as a base to calculate part from (100%)\\n        @param fees Array of LibPart.Part which represents fees to pay\\n        @param from owner of the Asset to transfer\\n        @param proxy Transfer proxy to use\\n        @return newRest how much left after transferring fees\\n        @return totalFees total number of fees in bp\\n    */\\n    function transferFees(\\n        LibAsset.AssetType memory assetType,\\n        uint rest,\\n        uint amount,\\n        LibPart.Part[] memory fees,\\n        address from,\\n        address proxy\\n    ) internal returns (uint newRest, uint totalFees) {\\n        totalFees = 0;\\n        newRest = rest;\\n        for (uint256 i = 0; i < fees.length; ++i) {\\n            totalFees = totalFees.add(fees[i].value);\\n            uint feeValue;\\n            (newRest, feeValue) = subFeeInBp(newRest, amount, fees[i].value);\\n            if (feeValue > 0) {\\n                transfer(LibAsset.Asset(assetType, feeValue), from, fees[i].account, proxy);\\n            }\\n        }\\n    }\\n\\n    /**\\n        @notice transfers main part of the asset (payout)\\n        @param assetType Asset Type to transfer\\n        @param amount Amount of the asset to transfer\\n        @param from Current owner of the asset\\n        @param payouts List of payouts - receivers of the Asset\\n        @param proxy Transfer Proxy to use\\n    */\\n    function transferPayouts(\\n        LibAsset.AssetType memory assetType,\\n        uint amount,\\n        address from,\\n        LibPart.Part[] memory payouts,\\n        address proxy\\n    ) internal {\\n        require(payouts.length > 0, \\\"transferPayouts: nothing to transfer\\\");\\n        uint sumBps = 0;\\n        uint rest = amount;\\n        for (uint256 i = 0; i < payouts.length - 1; ++i) {\\n            uint currentAmount = amount.bp(payouts[i].value);\\n            sumBps = sumBps.add(payouts[i].value);\\n            if (currentAmount > 0) {\\n                rest = rest.sub(currentAmount);\\n                transfer(LibAsset.Asset(assetType, currentAmount), from, payouts[i].account, proxy);\\n            }\\n        }\\n        LibPart.Part memory lastPayout = payouts[payouts.length - 1];\\n        sumBps = sumBps.add(lastPayout.value);\\n        require(sumBps == 10000, \\\"Sum payouts Bps not equal 100%\\\");\\n        if (rest > 0) {\\n            transfer(LibAsset.Asset(assetType, rest), from, lastPayout.account, proxy);\\n        }\\n    }\\n    \\n    /**\\n        @notice calculates total amount of fee-side asset that is going to be used in match\\n        @param amount fee-side order value\\n        @param buyerProtocolFee buyer protocol fee\\n        @param orderOriginFees fee-side order's origin fee (it adds on top of the amount)\\n        @return total amount of fee-side asset\\n    */\\n    function calculateTotalAmount(\\n        uint amount,\\n        uint buyerProtocolFee,\\n        LibPart.Part[] memory orderOriginFees\\n    ) internal pure returns (uint) {\\n        \\n        uint fees = buyerProtocolFee;\\n        for (uint256 i = 0; i < orderOriginFees.length; ++i) {\\n            require(orderOriginFees[i].value <= 10000, \\\"origin fee is too big\\\");\\n            fees = fees + orderOriginFees[i].value;\\n        }\\n\\n        return amount.add(amount.bp(fees));\\n    }\\n\\n    function subFeeInBp(uint value, uint total, uint feeInBp) internal pure returns (uint newValue, uint realFee) {\\n        return subFee(value, total.bp(feeInBp));\\n    }\\n\\n    function subFee(uint value, uint fee) internal pure returns (uint newValue, uint realFee) {\\n        if (value > fee) {\\n            newValue = value.sub(fee);\\n            realFee = fee;\\n        } else {\\n            newValue = 0;\\n            realFee = value;\\n        }\\n    }\\n\\n    uint256[46] private __gap;\\n}\\n\"\n    },\n    \"@rarible/transfer-manager/contracts/TransferExecutor.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@rarible/exchange-interfaces/contracts/ITransferProxy.sol\\\";\\nimport \\\"@rarible/exchange-interfaces/contracts/INftTransferProxy.sol\\\";\\nimport \\\"@rarible/exchange-interfaces/contracts/IERC20TransferProxy.sol\\\";\\nimport \\\"./interfaces/ITransferExecutor.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport \\\"./lib/LibTransfer.sol\\\";\\n\\nabstract contract TransferExecutor is Initializable, OwnableUpgradeable, ITransferExecutor {\\n    using LibTransfer for address;\\n\\n    mapping (bytes4 => address) internal proxies;\\n\\n    event ProxyChange(bytes4 indexed assetType, address proxy);\\n\\n    function __TransferExecutor_init_unchained(address transferProxy, address erc20TransferProxy) internal { \\n        proxies[LibAsset.ERC20_ASSET_CLASS] = address(erc20TransferProxy);\\n        proxies[LibAsset.ERC721_ASSET_CLASS] = address(transferProxy);\\n        proxies[LibAsset.ERC1155_ASSET_CLASS] = address(transferProxy);\\n    }\\n\\n    function setTransferProxy(bytes4 assetType, address proxy) external onlyOwner {\\n        proxies[assetType] = proxy;\\n        emit ProxyChange(assetType, proxy);\\n    }\\n\\n    function transfer(\\n        LibAsset.Asset memory asset,\\n        address from,\\n        address to,\\n        address proxy\\n    ) internal override {\\n        if (asset.assetType.assetClass == LibAsset.ERC721_ASSET_CLASS) {\\n            //not using transfer proxy when transfering from this contract\\n            (address token, uint tokenId) = abi.decode(asset.assetType.data, (address, uint256));\\n            require(asset.value == 1, \\\"erc721 value error\\\");\\n            if (from == address(this)){\\n                IERC721Upgradeable(token).safeTransferFrom(address(this), to, tokenId);\\n            } else {\\n                INftTransferProxy(proxy).erc721safeTransferFrom(IERC721Upgradeable(token), from, to, tokenId);\\n            }\\n        } else if (asset.assetType.assetClass == LibAsset.ERC20_ASSET_CLASS) {\\n            //not using transfer proxy when transfering from this contract\\n            (address token) = abi.decode(asset.assetType.data, (address));\\n            if (from == address(this)){\\n                require(IERC20Upgradeable(token).transfer(to, asset.value), \\\"erc20 transfer failed\\\");\\n            } else {\\n                IERC20TransferProxy(proxy).erc20safeTransferFrom(IERC20Upgradeable(token), from, to, asset.value);\\n            }\\n        } else if (asset.assetType.assetClass == LibAsset.ERC1155_ASSET_CLASS) {\\n            //not using transfer proxy when transfering from this contract\\n            (address token, uint tokenId) = abi.decode(asset.assetType.data, (address, uint256));\\n            if (from == address(this)){\\n                IERC1155Upgradeable(token).safeTransferFrom(address(this), to, tokenId, asset.value, \\\"\\\");\\n            } else {\\n                INftTransferProxy(proxy).erc1155safeTransferFrom(IERC1155Upgradeable(token), from, to, tokenId, asset.value, \\\"\\\");  \\n            }\\n        } else if (asset.assetType.assetClass == LibAsset.ETH_ASSET_CLASS) {\\n            if (to != address(this)) {\\n                to.transferEth(asset.value);\\n            }\\n        } else {\\n            ITransferProxy(proxy).transfer(asset, from, to);\\n        }\\n    }\\n    \\n    uint256[49] private __gap;\\n}\\n\"\n    },\n    \"@rarible/transfer-proxy/contracts/lazy-mint/erc1155/ERC1155LazyMintTransferProxy.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.9 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@rarible/exchange-interfaces/contracts/ITransferProxy.sol\\\";\\nimport \\\"@rarible/lazy-mint/contracts/erc-1155/LibERC1155LazyMint.sol\\\";\\nimport \\\"@rarible/lazy-mint/contracts/erc-1155/IERC1155LazyMint.sol\\\";\\nimport \\\"@rarible/role-operator/contracts/OperatorRole.sol\\\";\\n\\ncontract ERC1155LazyMintTransferProxy is OperatorRole, ITransferProxy {\\n    function transfer(LibAsset.Asset memory asset, address from, address to) override onlyOperator external {\\n        (address token, LibERC1155LazyMint.Mint1155Data memory data) = abi.decode(asset.assetType.data, (address, LibERC1155LazyMint.Mint1155Data));\\n        IERC1155LazyMint(token).transferFromOrMint(data, from, to, asset.value);\\n    }\\n}\\n\"\n    },\n    \"@rarible/transfer-proxy/contracts/lazy-mint/erc721/ERC721LazyMintTransferProxy.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.9 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@rarible/exchange-interfaces/contracts/ITransferProxy.sol\\\";\\nimport \\\"@rarible/lazy-mint/contracts/erc-721/LibERC721LazyMint.sol\\\";\\nimport \\\"@rarible/lazy-mint/contracts/erc-721/IERC721LazyMint.sol\\\";\\nimport \\\"@rarible/role-operator/contracts/OperatorRole.sol\\\";\\n\\ncontract ERC721LazyMintTransferProxy is OperatorRole, ITransferProxy {\\n    function transfer(LibAsset.Asset memory asset, address from, address to) override onlyOperator external {\\n        require(asset.value == 1, \\\"erc721 value error\\\");\\n        (address token, LibERC721LazyMint.Mint721Data memory data) = abi.decode(asset.assetType.data, (address, LibERC721LazyMint.Mint721Data));\\n        IERC721LazyMint(token).transferFromOrMint(data, from, to);\\n    }\\n}\\n\"\n    },\n    \"@rarible/transfer-proxy/contracts/proxy/ERC20TransferProxy.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.9 <0.8.0;\\n\\nimport \\\"@rarible/role-operator/contracts/OperatorRole.sol\\\";\\nimport \\\"@rarible/exchange-interfaces/contracts/IERC20TransferProxy.sol\\\";\\n\\ncontract ERC20TransferProxy is IERC20TransferProxy, Initializable, OperatorRole {\\n\\n    function __ERC20TransferProxy_init() external initializer {\\n        __Ownable_init();\\n    }\\n\\n    function erc20safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) override external onlyOperator {\\n        require(token.transferFrom(from, to, value), \\\"failure while transferring\\\");\\n    }\\n}\\n\"\n    },\n    \"@rarible/transfer-proxy/contracts/proxy/TransferProxy.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.9 <0.8.0;\\n\\nimport \\\"@rarible/role-operator/contracts/OperatorRole.sol\\\";\\nimport \\\"@rarible/exchange-interfaces/contracts/INftTransferProxy.sol\\\";\\n\\ncontract TransferProxy is INftTransferProxy, Initializable, OperatorRole {\\n\\n    function __TransferProxy_init() external initializer {\\n        __Ownable_init();\\n    }\\n\\n    function erc721safeTransferFrom(IERC721Upgradeable token, address from, address to, uint256 tokenId) override external onlyOperator {\\n        token.safeTransferFrom(from, to, tokenId);\\n    }\\n\\n    function erc1155safeTransferFrom(IERC1155Upgradeable token, address from, address to, uint256 id, uint256 value, bytes calldata data) override external onlyOperator {\\n        token.safeTransferFrom(from, to, id, value, data);\\n    }\\n}\\n\"\n    },\n    \"src/AssetMatchersImport.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport { AssetMatcherCollection } from \\\"@rarible/custom-matchers/contracts/AssetMatcherCollection.sol\\\";\\n\"\n    },\n    \"src/ExchangeV2Import.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport {ExchangeV2} from \\\"@rarible/exchange-v2/contracts/ExchangeV2.sol\\\";\\n\\nimport {ExchangeMetaV2} from \\\"@rarible/exchange-v2/contracts/ExchangeMetaV2.sol\\\";\"\n    },\n    \"src/ExchangeWrapperImport.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@rarible/exchange-wrapper/contracts/RaribleExchangeWrapper.sol\\\";\"\n    },\n    \"src/ProxyAdmin.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/proxy/ProxyAdmin.sol\\\";\\n\"\n    },\n    \"src/RaribleExchangeWrapper.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport {RaribleExchangeWrapper} from \\\"@rarible/exchange-wrapper/contracts/RaribleExchangeWrapper.sol\\\";\"\n    },\n    \"src/RoyaltiesRegistryImport.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport {RoyaltiesRegistry} from \\\"@rarible/royalties-registry/contracts/RoyaltiesRegistry.sol\\\";\\nimport {RoyaltiesRegistryPermissioned} from \\\"@rarible/royalties-registry/contracts/RoyaltiesRegistryPermissioned.sol\\\";\\nimport {RoyaltiesProviderV2Legacy} from \\\"@rarible/royalties-registry/contracts/providers/RoyaltiesProviderV2Legacy.sol\\\";\\nimport {RoyaltiesProviderArtBlocks} from \\\"@rarible/royalties-registry/contracts/providers/RoyaltiesProviderArtBlocks.sol\\\";\\nimport {RoyaltiesProviderArtBlocksV2} from \\\"@rarible/royalties-registry/contracts/providers/RoyaltiesProviderArtBlocksV2.sol\\\";\\n\"\n    },\n    \"src/TokensImport.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\n//tokens 721\\nimport {ERC721Rarible} from \\\"@rarible/tokens/contracts/erc-721/ERC721Rarible.sol\\\";\\nimport {ERC721RaribleMinimal} from \\\"@rarible/tokens/contracts/erc-721-minimal/ERC721RaribleMinimal.sol\\\";\\nimport {ERC721RaribleFactoryC2} from \\\"@rarible/tokens/contracts/create-2/ERC721RaribleFactoryC2.sol\\\";\\n\\n//tokens 1155\\nimport {ERC1155Rarible} from \\\"@rarible/tokens/contracts/erc-1155/ERC1155Rarible.sol\\\";\\nimport {ERC1155RaribleFactoryC2} from \\\"@rarible/tokens/contracts/create-2/ERC1155RaribleFactoryC2.sol\\\";\\n\\n//meta tokens\\nimport {ERC721RaribleMeta} from \\\"@rarible/tokens/contracts/erc-721-minimal/erc-721-minimal-meta/ERC721RaribleMeta.sol\\\";\\nimport {ERC1155RaribleMeta} from \\\"@rarible/tokens/contracts/erc-1155/erc-1155-meta/ERC1155RaribleMeta.sol\\\";\\n\\n//beacons\\nimport {ERC1155RaribleBeacon} from \\\"@rarible/tokens/contracts/beacons/ERC1155RaribleBeacon.sol\\\";\\nimport {ERC721RaribleMinimalBeacon} from \\\"@rarible/tokens/contracts/beacons/ERC721RaribleMinimalBeacon.sol\\\";\\nimport {ERC721RaribleBeacon} from \\\"@rarible/tokens/contracts/beacons/ERC721RaribleBeacon.sol\\\";\\nimport {ERC1155RaribleBeaconMeta} from \\\"@rarible/tokens/contracts/beacons/ERC1155RaribleBeaconMeta.sol\\\";\\nimport {ERC721RaribleMinimalBeaconMeta} from \\\"@rarible/tokens/contracts/beacons/ERC721RaribleMinimalBeaconMeta.sol\\\";\\n\\nimport { TestERC20 } from \\\"@rarible/test/contracts/TestERC20.sol\\\";\\n\"\n    },\n    \"src/TransferProxiesImport.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport {ERC721LazyMintTransferProxy} from \\\"@rarible/transfer-proxy/contracts/lazy-mint/erc721/ERC721LazyMintTransferProxy.sol\\\";\\nimport {ERC1155LazyMintTransferProxy} from \\\"@rarible/transfer-proxy/contracts/lazy-mint/erc1155/ERC1155LazyMintTransferProxy.sol\\\";\\nimport {TransferProxy} from \\\"@rarible/transfer-proxy/contracts/proxy/TransferProxy.sol\\\";\\nimport {ERC20TransferProxy} from \\\"@rarible/transfer-proxy/contracts/proxy/ERC20TransferProxy.sol\\\";\\n\\n\"\n    }\n  },\n  \"settings\": {\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 200\n    },\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    }\n  }\n}",
      "solcInputHash": "d9b740a9568ef6ec226ff85af33742e2",
      "transactionHash": "0x4aa71ef0f74da0aff1ee634c688063ad3f3f1f375ce1821067f06d7795494135",
      "args": []
    },
    "decoded": {
      "from": "0xe223825497c435BAeaf318F03d33Ec704954028A",
      "maxFeePerGas": "2002500000",
      "maxPriorityFeePerGas": "2002500000",
      "gasLimit": "1480154352",
      "to": null,
      "value": "0",
      "nonce": 13,
      "data": "",
      "r": "0x28917d32ed59e89c592a5deb31b26f9db5f3aeb1d3c1538d4991bbd5296a14b7",
      "s": "0x0ad8afafefd8ac9dcaa9af6f493b87ce6c6df0862bbb83f1a120310a7bb9c2ba",
      "v": 0,
      "chainId": 6343
    }
  }
}