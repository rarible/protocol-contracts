{
  "address": "0x7Eabe83e0F99B6bf24Ec3F50994B972DC38D11dF",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "__OperatorRole_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "addOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "removeOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "bytes4",
                  "name": "assetClass",
                  "type": "bytes4"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "internalType": "struct LibAsset.AssetType",
              "name": "assetType",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibAsset.Asset",
          "name": "asset",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x09f350d4164e978d6e7fd5350a70bd654023fb569b3e1df28551d64722674d49",
  "receipt": {
    "to": null,
    "from": "0xfb571F9da71D1aC33E069571bf5c67faDCFf18e4",
    "contractAddress": "0x7Eabe83e0F99B6bf24Ec3F50994B972DC38D11dF",
    "transactionIndex": 0,
    "gasUsed": "837104",
    "logsBloom": "0x
    "blockHash": "0x8f95d5bb59171dd957cda4cc81691fed557b141c22cb990c63d343b89b269a54",
    "transactionHash": "0x09f350d4164e978d6e7fd5350a70bd654023fb569b3e1df28551d64722674d49",
    "logs": [],
    "blockNumber": 22179106,
    "cumulativeGasUsed": "837104",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "bf917ed004d0f3f4e7ddfe1dd4d0856b",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"__OperatorRole_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"assetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@rarible/transfer-proxy/contracts/lazy-mint/erc1155/ERC1155LazyMintTransferProxy.sol\":\"ERC1155LazyMintTransferProxy\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb419e68addcb82ecda3ad3974b0d2db76435ce9b08435a04d5b119a0c5d45ea5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4784c3f8a520a739dd25d76f514833a653990902d0e21601aed45bda44c87524\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xcbc02d192c55298cf65e5695375c839eac979a597a0fbdc1635195c4d28ca5ac\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"@rarible/exchange-interfaces/contracts/ITransferProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.9 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@rarible/lib-asset/contracts/LibAsset.sol\\\";\\n\\ninterface ITransferProxy {\\n    function transfer(LibAsset.Asset calldata asset, address from, address to) external;\\n}\\n\",\"keccak256\":\"0xd9400959d0a108534601673e480a55c4e760e03211594e8123d9c19e5d3890ac\",\"license\":\"MIT\"},\"@rarible/lazy-mint/contracts/erc-1155/IERC1155LazyMint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\nimport \\\"./LibERC1155LazyMint.sol\\\";\\nimport \\\"@rarible/lib-part/contracts/LibPart.sol\\\";\\n\\ninterface IERC1155LazyMint is IERC1155Upgradeable {\\n\\n    event Supply(\\n        uint256 tokenId,\\n        uint256 value\\n    );\\n    event Creators(\\n        uint256 tokenId,\\n        LibPart.Part[] creators\\n    );\\n\\n    function mintAndTransfer(\\n        LibERC1155LazyMint.Mint1155Data memory data,\\n        address to,\\n        uint256 _amount\\n    ) external;\\n\\n    function transferFromOrMint(\\n        LibERC1155LazyMint.Mint1155Data memory data,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x4b532bac4a391b204a67bf25358dcc7f0bafa46202199c1b04a9d7a1cdc0e8b5\",\"license\":\"MIT\"},\"@rarible/lazy-mint/contracts/erc-1155/LibERC1155LazyMint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"@rarible/lib-part/contracts/LibPart.sol\\\";\\n\\nlibrary LibERC1155LazyMint {\\n    bytes4 constant public ERC1155_LAZY_ASSET_CLASS = bytes4(keccak256(\\\"ERC1155_LAZY\\\"));\\n    bytes4 constant _INTERFACE_ID_MINT_AND_TRANSFER = 0x6db15a0f;\\n\\n    struct Mint1155Data {\\n        uint tokenId;\\n        string tokenURI;\\n        uint supply;\\n        LibPart.Part[] creators;\\n        LibPart.Part[] royalties;\\n        bytes[] signatures;\\n    }\\n\\n    bytes32 public constant MINT_AND_TRANSFER_TYPEHASH = keccak256(\\\"Mint1155(uint256 tokenId,uint256 supply,string tokenURI,Part[] creators,Part[] royalties)Part(address account,uint96 value)\\\");\\n\\n    function hash(Mint1155Data memory data) internal pure returns (bytes32) {\\n        bytes32[] memory royaltiesBytes = new bytes32[](data.royalties.length);\\n        for (uint i = 0; i < data.royalties.length; ++i) {\\n            royaltiesBytes[i] = LibPart.hash(data.royalties[i]);\\n        }\\n        bytes32[] memory creatorsBytes = new bytes32[](data.creators.length);\\n        for (uint i = 0; i < data.creators.length; ++i) {\\n            creatorsBytes[i] = LibPart.hash(data.creators[i]);\\n        }\\n        return keccak256(abi.encode(\\n                MINT_AND_TRANSFER_TYPEHASH,\\n                data.tokenId,\\n                data.supply,\\n                keccak256(bytes(data.tokenURI)),\\n                keccak256(abi.encodePacked(creatorsBytes)),\\n                keccak256(abi.encodePacked(royaltiesBytes))\\n            ));\\n    }\\n}\\n\",\"keccak256\":\"0x541f8f29d7d643c5eab654e1e86fc97392f79b246fc5072fc0dcc5c93802b98d\",\"license\":\"MIT\"},\"@rarible/lib-asset/contracts/LibAsset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nlibrary LibAsset {\\n    bytes4 constant public ETH_ASSET_CLASS = bytes4(keccak256(\\\"ETH\\\"));\\n    bytes4 constant public ERC20_ASSET_CLASS = bytes4(keccak256(\\\"ERC20\\\"));\\n    bytes4 constant public ERC721_ASSET_CLASS = bytes4(keccak256(\\\"ERC721\\\"));\\n    bytes4 constant public ERC1155_ASSET_CLASS = bytes4(keccak256(\\\"ERC1155\\\"));\\n    bytes4 constant public COLLECTION = bytes4(keccak256(\\\"COLLECTION\\\"));\\n    bytes4 constant public CRYPTO_PUNKS = bytes4(keccak256(\\\"CRYPTO_PUNKS\\\"));\\n\\n    bytes32 constant ASSET_TYPE_TYPEHASH = keccak256(\\n        \\\"AssetType(bytes4 assetClass,bytes data)\\\"\\n    );\\n\\n    bytes32 constant ASSET_TYPEHASH = keccak256(\\n        \\\"Asset(AssetType assetType,uint256 value)AssetType(bytes4 assetClass,bytes data)\\\"\\n    );\\n\\n    struct AssetType {\\n        bytes4 assetClass;\\n        bytes data;\\n    }\\n\\n    struct Asset {\\n        AssetType assetType;\\n        uint value;\\n    }\\n\\n    function hash(AssetType memory assetType) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n                ASSET_TYPE_TYPEHASH,\\n                assetType.assetClass,\\n                keccak256(assetType.data)\\n            ));\\n    }\\n\\n    function hash(Asset memory asset) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n                ASSET_TYPEHASH,\\n                hash(asset.assetType),\\n                asset.value\\n            ));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x5d63bba4747a12a83c5628dba94bf56714b4dcf94f742ff28863034831061c8a\",\"license\":\"MIT\"},\"@rarible/lib-part/contracts/LibPart.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nlibrary LibPart {\\n    bytes32 public constant TYPE_HASH = keccak256(\\\"Part(address account,uint96 value)\\\");\\n\\n    struct Part {\\n        address payable account;\\n        uint96 value;\\n    }\\n\\n    function hash(Part memory part) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, part.account, part.value));\\n    }\\n}\\n\",\"keccak256\":\"0xd0123f7411573a6a7e1527e0d3901913d7642e504ff240d5b7c5b76a28587def\",\"license\":\"MIT\"},\"@rarible/role-operator/contracts/OperatorRole.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.9 <0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ncontract OperatorRole is OwnableUpgradeable {\\n    mapping (address => bool) operators;\\n\\n    function __OperatorRole_init() external initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function addOperator(address operator) external onlyOwner {\\n        operators[operator] = true;\\n    }\\n\\n    function removeOperator(address operator) external onlyOwner {\\n        operators[operator] = false;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(operators[_msgSender()], \\\"OperatorRole: caller is not the operator\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x1ea80d73e8d77f49f20b30f41c8808f97a052b34ca522b709a564eb0ba1cc376\",\"license\":\"MIT\"},\"@rarible/transfer-proxy/contracts/lazy-mint/erc1155/ERC1155LazyMintTransferProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.9 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@rarible/exchange-interfaces/contracts/ITransferProxy.sol\\\";\\nimport \\\"@rarible/lazy-mint/contracts/erc-1155/LibERC1155LazyMint.sol\\\";\\nimport \\\"@rarible/lazy-mint/contracts/erc-1155/IERC1155LazyMint.sol\\\";\\nimport \\\"@rarible/role-operator/contracts/OperatorRole.sol\\\";\\n\\ncontract ERC1155LazyMintTransferProxy is OperatorRole, ITransferProxy {\\n    function transfer(LibAsset.Asset memory asset, address from, address to) override onlyOperator external {\\n        (address token, LibERC1155LazyMint.Mint1155Data memory data) = abi.decode(asset.assetType.data, (address, LibERC1155LazyMint.Mint1155Data));\\n        IERC1155LazyMint(token).transferFromOrMint(data, from, to, asset.value);\\n    }\\n}\\n\",\"keccak256\":\"0x246520e6a1b1b2a82d45b69e7f62b9a13a989b4cf274554b380f05eeca530edc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610e2e806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638da5cb5b1161005b5780638da5cb5b146100a75780639870d7fe146100c5578063ac8a584a146100d8578063f2fde38b146100eb5761007d565b80632ff26a0a1461008257806354bc0cf11461008c578063715018a61461009f575b600080fd5b61008a6100fe565b005b61008a61009a3660046109dd565b6101b0565b61008a6102a6565b6100af610352565b6040516100bc9190610ba6565b60405180910390f35b61008a6100d33660046108c3565b610361565b61008a6100e63660046108c3565b6103e7565b61008a6100f93660046108c3565b61046a565b600054610100900460ff1680610117575061011761056d565b80610125575060005460ff16155b6101605760405162461bcd60e51b815260040180806020018281038252602e815260200180610d83602e913960400191505060405180910390fd5b600054610100900460ff1615801561018b576000805460ff1961ff0019909116610100171660011790555b61019361057e565b61019b61061e565b80156101ad576000805461ff00191690555b50565b606560006101bc610717565b6001600160a01b0316815260208101919091526040016000205460ff166102145760405162461bcd60e51b8152600401808060200182810382526028815260200180610dd16028913960400191505060405180910390fd5b60008084600001516020015180602001905181019061023391906108df565b91509150816001600160a01b031663ffc4e0a782868689602001516040518563ffffffff1660e01b815260040161026d9493929190610bba565b600060405180830381600087803b15801561028757600080fd5b505af115801561029b573d6000803e3d6000fd5b505050505050505050565b6102ae610717565b6001600160a01b03166102bf610352565b6001600160a01b031614610308576040805162461bcd60e51b81526020600482018190526024820152600080516020610db1833981519152604482015290519081900360640190fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b6033546001600160a01b031690565b610369610717565b6001600160a01b031661037a610352565b6001600160a01b0316146103c3576040805162461bcd60e51b81526020600482018190526024820152600080516020610db1833981519152604482015290519081900360640190fd5b6001600160a01b03166000908152606560205260409020805460ff19166001179055565b6103ef610717565b6001600160a01b0316610400610352565b6001600160a01b031614610449576040805162461bcd60e51b81526020600482018190526024820152600080516020610db1833981519152604482015290519081900360640190fd5b6001600160a01b03166000908152606560205260409020805460ff19169055565b610472610717565b6001600160a01b0316610483610352565b6001600160a01b0316146104cc576040805162461bcd60e51b81526020600482018190526024820152600080516020610db1833981519152604482015290519081900360640190fd5b6001600160a01b0381166105115760405162461bcd60e51b8152600401808060200182810382526026815260200180610d5d6026913960400191505060405180910390fd5b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b60006105783061071b565b15905090565b600054610100900460ff1680610597575061059761056d565b806105a5575060005460ff16155b6105e05760405162461bcd60e51b815260040180806020018281038252602e815260200180610d83602e913960400191505060405180910390fd5b600054610100900460ff1615801561019b576000805460ff1961ff00199091166101001716600117905580156101ad576000805461ff001916905550565b600054610100900460ff1680610637575061063761056d565b80610645575060005460ff16155b6106805760405162461bcd60e51b815260040180806020018281038252602e815260200180610d83602e913960400191505060405180910390fd5b600054610100900460ff161580156106ab576000805460ff1961ff0019909116610100171660011790555b60006106b5610717565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35080156101ad576000805461ff001916905550565b3390565b803b15155b919050565b600061073861073384610cf5565b610cb3565b905082815283838301111561074c57600080fd5b61075a836020830184610d17565b9392505050565b803561072081610d47565b600082601f83011261077c578081fd5b8151602061078c61073383610cd7565b82815281810190858301855b858110156107d6578151880189603f8201126107b2578788fd5b6107c38a8783015160408401610725565b8552509284019290840190600101610798565b5090979650505050505050565b600082601f8301126107f3578081fd5b8151602061080361073383610cd7565b82815281810190858301604080860288018501891015610821578687fd5b865b868110156108965781838b031215610839578788fd5b815182810181811067ffffffffffffffff8211171561085457fe5b8352835161086181610d47565b8152838701516bffffffffffffffffffffffff8116811461088057898afd5b8188015285529385019391810191600101610823565b509198975050505050505050565b600082601f8301126108b4578081fd5b61075a83835160208501610725565b6000602082840312156108d4578081fd5b813561075a81610d47565b600080604083850312156108f1578081fd5b82516108fc81610d47565b602084015190925067ffffffffffffffff80821115610919578283fd5b9084019060c0828703121561092c578283fd5b61093660c0610cb3565b8251815260208301518281111561094b578485fd5b610957888286016108a4565b60208301525060408301516040820152606083015182811115610978578485fd5b610984888286016107e3565b60608301525060808301518281111561099b578485fd5b6109a7888286016107e3565b60808301525060a0830151828111156109be578485fd5b6109ca8882860161076c565b60a0830152508093505050509250929050565b6000806000606084860312156109f1578081fd5b833567ffffffffffffffff80821115610a08578283fd5b81860191506040808389031215610a1d578384fd5b80518181018181108482111715610a3057fe5b808352843584811115610a41578687fd5b8501808b03841315610a51578687fd5b608083018281108682111715610a6357fe5b845280356001600160e01b031981168114610a7c578788fd5b825260208181013586811115610a90578889fd5b82019550601f86018c13610aa2578788fd5b85359150610ab261073383610cf5565b8281528c82848901011115610ac5578889fd5b828288018383013788828483010152806060860152508284528087013581850152839950610af4818c01610761565b985050505050610b05818801610761565b93505050509250925092565b6001600160a01b03169052565b6000815180845260208085019450808401835b83811015610b6f57815180516001600160a01b031688528301516bffffffffffffffffffffffff168388015260409096019590820190600101610b31565b509495945050505050565b60008151808452610b92816020860160208601610d17565b601f01601f19169290920160200192915050565b6001600160a01b0391909116815260200190565b6000608082528551608083015260208087015160c060a0850152610be2610140850182610b7a565b9050604088015160c08501526060880151607f19808684030160e0870152610c0a8383610b1e565b925060808a015191508086840301610100870152610c288383610b1e565b60a08b0151878203909201610120880152815180825290935090840191508383019084810284018501865b82811015610c8157601f19868303018452610c6f828651610b7a565b94870194938701939150600101610c53565b508096505050505050610c9681840187610b11565b50610ca46040830185610b11565b82606083015295945050505050565b60405181810167ffffffffffffffff81118282101715610ccf57fe5b604052919050565b600067ffffffffffffffff821115610ceb57fe5b5060209081020190565b600067ffffffffffffffff821115610d0957fe5b50601f01601f191660200190565b60005b83811015610d32578181015183820152602001610d1a565b83811115610d41576000848401525b50505050565b6001600160a01b03811681146101ad57600080fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a65644f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65724f70657261746f72526f6c653a2063616c6c6572206973206e6f7420746865206f70657261746f72a2646970667358221220a28019e3a9ffc83e27b05dd4ff150123e74358301a86a8729d2441ab31507f4664736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80638da5cb5b1161005b5780638da5cb5b146100a75780639870d7fe146100c5578063ac8a584a146100d8578063f2fde38b146100eb5761007d565b80632ff26a0a1461008257806354bc0cf11461008c578063715018a61461009f575b600080fd5b61008a6100fe565b005b61008a61009a3660046109dd565b6101b0565b61008a6102a6565b6100af610352565b6040516100bc9190610ba6565b60405180910390f35b61008a6100d33660046108c3565b610361565b61008a6100e63660046108c3565b6103e7565b61008a6100f93660046108c3565b61046a565b600054610100900460ff1680610117575061011761056d565b80610125575060005460ff16155b6101605760405162461bcd60e51b815260040180806020018281038252602e815260200180610d83602e913960400191505060405180910390fd5b600054610100900460ff1615801561018b576000805460ff1961ff0019909116610100171660011790555b61019361057e565b61019b61061e565b80156101ad576000805461ff00191690555b50565b606560006101bc610717565b6001600160a01b0316815260208101919091526040016000205460ff166102145760405162461bcd60e51b8152600401808060200182810382526028815260200180610dd16028913960400191505060405180910390fd5b60008084600001516020015180602001905181019061023391906108df565b91509150816001600160a01b031663ffc4e0a782868689602001516040518563ffffffff1660e01b815260040161026d9493929190610bba565b600060405180830381600087803b15801561028757600080fd5b505af115801561029b573d6000803e3d6000fd5b505050505050505050565b6102ae610717565b6001600160a01b03166102bf610352565b6001600160a01b031614610308576040805162461bcd60e51b81526020600482018190526024820152600080516020610db1833981519152604482015290519081900360640190fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b6033546001600160a01b031690565b610369610717565b6001600160a01b031661037a610352565b6001600160a01b0316146103c3576040805162461bcd60e51b81526020600482018190526024820152600080516020610db1833981519152604482015290519081900360640190fd5b6001600160a01b03166000908152606560205260409020805460ff19166001179055565b6103ef610717565b6001600160a01b0316610400610352565b6001600160a01b031614610449576040805162461bcd60e51b81526020600482018190526024820152600080516020610db1833981519152604482015290519081900360640190fd5b6001600160a01b03166000908152606560205260409020805460ff19169055565b610472610717565b6001600160a01b0316610483610352565b6001600160a01b0316146104cc576040805162461bcd60e51b81526020600482018190526024820152600080516020610db1833981519152604482015290519081900360640190fd5b6001600160a01b0381166105115760405162461bcd60e51b8152600401808060200182810382526026815260200180610d5d6026913960400191505060405180910390fd5b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b60006105783061071b565b15905090565b600054610100900460ff1680610597575061059761056d565b806105a5575060005460ff16155b6105e05760405162461bcd60e51b815260040180806020018281038252602e815260200180610d83602e913960400191505060405180910390fd5b600054610100900460ff1615801561019b576000805460ff1961ff00199091166101001716600117905580156101ad576000805461ff001916905550565b600054610100900460ff1680610637575061063761056d565b80610645575060005460ff16155b6106805760405162461bcd60e51b815260040180806020018281038252602e815260200180610d83602e913960400191505060405180910390fd5b600054610100900460ff161580156106ab576000805460ff1961ff0019909116610100171660011790555b60006106b5610717565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35080156101ad576000805461ff001916905550565b3390565b803b15155b919050565b600061073861073384610cf5565b610cb3565b905082815283838301111561074c57600080fd5b61075a836020830184610d17565b9392505050565b803561072081610d47565b600082601f83011261077c578081fd5b8151602061078c61073383610cd7565b82815281810190858301855b858110156107d6578151880189603f8201126107b2578788fd5b6107c38a8783015160408401610725565b8552509284019290840190600101610798565b5090979650505050505050565b600082601f8301126107f3578081fd5b8151602061080361073383610cd7565b82815281810190858301604080860288018501891015610821578687fd5b865b868110156108965781838b031215610839578788fd5b815182810181811067ffffffffffffffff8211171561085457fe5b8352835161086181610d47565b8152838701516bffffffffffffffffffffffff8116811461088057898afd5b8188015285529385019391810191600101610823565b509198975050505050505050565b600082601f8301126108b4578081fd5b61075a83835160208501610725565b6000602082840312156108d4578081fd5b813561075a81610d47565b600080604083850312156108f1578081fd5b82516108fc81610d47565b602084015190925067ffffffffffffffff80821115610919578283fd5b9084019060c0828703121561092c578283fd5b61093660c0610cb3565b8251815260208301518281111561094b578485fd5b610957888286016108a4565b60208301525060408301516040820152606083015182811115610978578485fd5b610984888286016107e3565b60608301525060808301518281111561099b578485fd5b6109a7888286016107e3565b60808301525060a0830151828111156109be578485fd5b6109ca8882860161076c565b60a0830152508093505050509250929050565b6000806000606084860312156109f1578081fd5b833567ffffffffffffffff80821115610a08578283fd5b81860191506040808389031215610a1d578384fd5b80518181018181108482111715610a3057fe5b808352843584811115610a41578687fd5b8501808b03841315610a51578687fd5b608083018281108682111715610a6357fe5b845280356001600160e01b031981168114610a7c578788fd5b825260208181013586811115610a90578889fd5b82019550601f86018c13610aa2578788fd5b85359150610ab261073383610cf5565b8281528c82848901011115610ac5578889fd5b828288018383013788828483010152806060860152508284528087013581850152839950610af4818c01610761565b985050505050610b05818801610761565b93505050509250925092565b6001600160a01b03169052565b6000815180845260208085019450808401835b83811015610b6f57815180516001600160a01b031688528301516bffffffffffffffffffffffff168388015260409096019590820190600101610b31565b509495945050505050565b60008151808452610b92816020860160208601610d17565b601f01601f19169290920160200192915050565b6001600160a01b0391909116815260200190565b6000608082528551608083015260208087015160c060a0850152610be2610140850182610b7a565b9050604088015160c08501526060880151607f19808684030160e0870152610c0a8383610b1e565b925060808a015191508086840301610100870152610c288383610b1e565b60a08b0151878203909201610120880152815180825290935090840191508383019084810284018501865b82811015610c8157601f19868303018452610c6f828651610b7a565b94870194938701939150600101610c53565b508096505050505050610c9681840187610b11565b50610ca46040830185610b11565b82606083015295945050505050565b60405181810167ffffffffffffffff81118282101715610ccf57fe5b604052919050565b600067ffffffffffffffff821115610ceb57fe5b5060209081020190565b600067ffffffffffffffff821115610d0957fe5b50601f01601f191660200190565b60005b83811015610d32578181015183820152602001610d1a565b83811115610d41576000848401525b50505050565b6001600160a01b03811681146101ad57600080fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a65644f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65724f70657261746f72526f6c653a2063616c6c6572206973206e6f7420746865206f70657261746f72a2646970667358221220a28019e3a9ffc83e27b05dd4ff150123e74358301a86a8729d2441ab31507f4664736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 739,
        "contract": "@rarible/transfer-proxy/contracts/lazy-mint/erc1155/ERC1155LazyMintTransferProxy.sol:ERC1155LazyMintTransferProxy",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 742,
        "contract": "@rarible/transfer-proxy/contracts/lazy-mint/erc1155/ERC1155LazyMintTransferProxy.sol:ERC1155LazyMintTransferProxy",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4256,
        "contract": "@rarible/transfer-proxy/contracts/lazy-mint/erc1155/ERC1155LazyMintTransferProxy.sol:ERC1155LazyMintTransferProxy",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "@rarible/transfer-proxy/contracts/lazy-mint/erc1155/ERC1155LazyMintTransferProxy.sol:ERC1155LazyMintTransferProxy",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 129,
        "contract": "@rarible/transfer-proxy/contracts/lazy-mint/erc1155/ERC1155LazyMintTransferProxy.sol:ERC1155LazyMintTransferProxy",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 19576,
        "contract": "@rarible/transfer-proxy/contracts/lazy-mint/erc1155/ERC1155LazyMintTransferProxy.sol:ERC1155LazyMintTransferProxy",
        "label": "operators",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}