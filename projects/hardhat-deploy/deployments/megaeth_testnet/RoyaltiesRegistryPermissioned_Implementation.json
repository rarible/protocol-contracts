{
  "address": "0x014940b9570Ddf327E51a4E450d3e479572c42e5",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "name": "RoyaltiesAllowedChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "value",
              "type": "uint96"
            }
          ],
          "indexed": false,
          "internalType": "struct LibPart.Part[]",
          "name": "royalties",
          "type": "tuple[]"
        }
      ],
      "name": "RoyaltiesSetForContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "value",
              "type": "uint96"
            }
          ],
          "indexed": false,
          "internalType": "struct LibPart.Part[]",
          "name": "royalties",
          "type": "tuple[]"
        }
      ],
      "name": "RoyaltiesSetForToken",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WHITELISTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_initialOwner",
          "type": "address"
        }
      ],
      "name": "__RoyaltiesRegistry_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "clearRoyaltiesType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltiesType",
          "type": "uint256"
        }
      ],
      "name": "forceSetRoyaltiesType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getProvider",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRoyalties",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "value",
              "type": "uint96"
            }
          ],
          "internalType": "struct LibPart.Part[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getRoyaltiesType",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "royaltiesAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "royaltiesByToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "initialized",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "royaltiesByTokenAndTokenId",
      "outputs": [
        {
          "internalType": "bool",
          "name": "initialized",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "royaltiesProviders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        }
      ],
      "name": "setProviderByToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "name": "setRoyaltiesAllowed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "name": "setRoyaltiesAllowedBulk",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "value",
              "type": "uint96"
            }
          ],
          "internalType": "struct LibPart.Part[]",
          "name": "royalties",
          "type": "tuple[]"
        }
      ],
      "name": "setRoyaltiesByToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa78c8b248eeede5d48a4c51ad955d817108f0e0e30c37316ec2fd6213ec938c3",
  "receipt": {
    "to": "0xA9d7374D191d80aCAAfD8D95b01d27ef354a91E0",
    "from": "0xe223825497c435BAeaf318F03d33Ec704954028A",
    "contractAddress": null,
    "transactionIndex": 167,
    "gasUsed": "2334698",
    "logsBloom": "0x
    "blockHash": "0xcca572144a02f1fc729881e6890917aeca466cd3039873bb471a7d2c2efef8d4",
    "transactionHash": "0xa78c8b248eeede5d48a4c51ad955d817108f0e0e30c37316ec2fd6213ec938c3",
    "logs": [],
    "blockNumber": 18821749,
    "cumulativeGasUsed": "38351931",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d4584ae0c1150849e2a144cc8cce12d0",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"RoyaltiesAllowedChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"}],\"indexed\":false,\"internalType\":\"struct LibPart.Part[]\",\"name\":\"royalties\",\"type\":\"tuple[]\"}],\"name\":\"RoyaltiesSetForContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"}],\"indexed\":false,\"internalType\":\"struct LibPart.Part[]\",\"name\":\"royalties\",\"type\":\"tuple[]\"}],\"name\":\"RoyaltiesSetForToken\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WHITELISTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_initialOwner\",\"type\":\"address\"}],\"name\":\"__RoyaltiesRegistry_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"clearRoyaltiesType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltiesType\",\"type\":\"uint256\"}],\"name\":\"forceSetRoyaltiesType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRoyalties\",\"outputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"}],\"internalType\":\"struct LibPart.Part[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getRoyaltiesType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"royaltiesAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"royaltiesByToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"royaltiesByTokenAndTokenId\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"royaltiesProviders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"setProviderByToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"setRoyaltiesAllowed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"setRoyaltiesAllowedBulk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"}],\"internalType\":\"struct LibPart.Part[]\",\"name\":\"royalties\",\"type\":\"tuple[]\"}],\"name\":\"setRoyaltiesByToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"RoyaltiesAllowedChanged(address,bool)\":{\"details\":\"emitted when royalties set for a collection address\"},\"RoyaltiesSetForContract(address,(address,uint96)[])\":{\"details\":\"emitted when royalties set for token in\"},\"RoyaltiesSetForToken(address,uint256,(address,uint96)[])\":{\"details\":\"deprecated\"}},\"kind\":\"dev\",\"methods\":{\"clearRoyaltiesType(address)\":{\"details\":\"clears royalties type for token contract\"},\"forceSetRoyaltiesType(address,uint256)\":{\"details\":\"clears and sets new royalties type for token contract\"},\"getProvider(address)\":{\"details\":\"returns provider address for token contract from royaltiesProviders mapping\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"getRoyalties(address,uint256)\":{\"details\":\"returns royalties for token contract and token id\"},\"getRoyaltiesType(address)\":{\"details\":\"returns royalties type for token contract\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"setProviderByToken(address,address)\":{\"details\":\"sets external provider for token contract, and royalties type = 4\"},\"setRoyaltiesByToken(address,(address,uint96)[])\":{\"details\":\"sets royalties for token contract in royaltiesByToken mapping and royalties type = 1\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"royaltiesAllowed\":{\"details\":\"stores the white list for collections with royalties\"},\"royaltiesByToken\":{\"details\":\"stores royalties for token contract, set in setRoyaltiesByToken() method\"},\"royaltiesByTokenAndTokenId\":{\"details\":\"deprecated\"},\"royaltiesProviders\":{\"details\":\"stores external provider and royalties type for token contract\"},\"royaltiesTypesAmount\":{\"details\":\"total amount or supported royalties types\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@rarible/royalties-registry/contracts/RoyaltiesRegistryPermissioned.sol\":\"RoyaltiesRegistryPermissioned\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n    using AddressUpgradeable for address;\\n\\n    struct RoleData {\\n        EnumerableSetUpgradeable.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xa3c77c9ea6b47301c7ab5bf3addc1d809d13a27a179c4629a1b55308e8633d14\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb419e68addcb82ecda3ad3974b0d2db76435ce9b08435a04d5b119a0c5d45ea5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4784c3f8a520a739dd25d76f514833a653990902d0e21601aed45bda44c87524\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x3dab19bb4a63bcbda1ee153ca291694f92f9009fad28626126b15a8503b0e5ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x20714cf126a1a984613579156d3cbc726db8025d8400e1db1d2bb714edaba335\",\"license\":\"MIT\"},\"@rarible/exchange-interfaces/contracts/IRoyaltiesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@rarible/lib-part/contracts/LibPart.sol\\\";\\n\\ninterface IRoyaltiesProvider {\\n    function getRoyalties(address token, uint tokenId) external returns (LibPart.Part[] memory);\\n}\\n\",\"keccak256\":\"0xf947c1e5ab670f631a6b2db55672829766ad410cf4730981202866e8c1a226ac\",\"license\":\"MIT\"},\"@rarible/lib-part/contracts/LibPart.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nlibrary LibPart {\\n    bytes32 public constant TYPE_HASH = keccak256(\\\"Part(address account,uint96 value)\\\");\\n\\n    struct Part {\\n        address payable account;\\n        uint96 value;\\n    }\\n\\n    function hash(Part memory part) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, part.account, part.value));\\n    }\\n}\\n\",\"keccak256\":\"0xd0123f7411573a6a7e1527e0d3901913d7642e504ff240d5b7c5b76a28587def\",\"license\":\"MIT\"},\"@rarible/royalties-registry/contracts/RoyaltiesRegistryPermissioned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\npragma abicoder v2;\\n\\nimport \\\"@rarible/exchange-interfaces/contracts/IRoyaltiesProvider.sol\\\";\\nimport \\\"@rarible/royalties/contracts/LibRoyaltiesV2.sol\\\";\\nimport \\\"@rarible/royalties/contracts/LibRoyaltiesV1.sol\\\";\\nimport \\\"@rarible/royalties/contracts/LibRoyalties2981.sol\\\";\\nimport \\\"@rarible/royalties/contracts/RoyaltiesV1.sol\\\";\\nimport \\\"@rarible/royalties/contracts/RoyaltiesV2.sol\\\";\\nimport \\\"@rarible/royalties/contracts/IERC2981.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\n\\ncontract RoyaltiesRegistryPermissioned is IRoyaltiesProvider, OwnableUpgradeable, AccessControlUpgradeable {\\n\\n    /// @dev deprecated\\n    event RoyaltiesSetForToken(address indexed token, uint indexed tokenId, LibPart.Part[] royalties);\\n    /// @dev emitted when royalties set for token in\\n    event RoyaltiesSetForContract(address indexed token, LibPart.Part[] royalties);\\n    /// @dev emitted when royalties set for a collection address\\n    event RoyaltiesAllowedChanged(address indexed token, bool allowed);\\n\\n    /// @dev struct to store royalties in royaltiesByToken\\n    struct RoyaltiesSet {\\n        bool initialized;\\n        LibPart.Part[] royalties;\\n    }\\n\\n    /// @dev deprecated\\n    mapping(bytes32 => RoyaltiesSet) public royaltiesByTokenAndTokenId;\\n    /// @dev stores royalties for token contract, set in setRoyaltiesByToken() method\\n    mapping(address => RoyaltiesSet) public royaltiesByToken;\\n    /// @dev stores external provider and royalties type for token contract\\n    mapping(address => uint) public royaltiesProviders;\\n    /// @dev stores the white list for collections with royalties\\n    mapping(address => bool) public royaltiesAllowed;\\n    /// @dev total amount or supported royalties types\\n    // 0 - royalties type is unset\\n    // 1 - royaltiesByToken, 2 - v2, 3 - v1,\\n    // 4 - external provider, 5 - EIP-2981\\n    // 6 - unsupported/nonexistent royalties type\\n\\n    uint constant royaltiesTypesAmount = 6;\\n    bytes32 public constant WHITELISTER_ROLE = keccak256(\\\"WHITELISTER_ROLE\\\");\\n\\n    function __RoyaltiesRegistry_init(address _initialOwner) external initializer {\\n        require(_initialOwner != address(0), \\\"Invalid owner\\\");\\n        __Context_init();\\n        __Ownable_init();\\n        __AccessControl_init();\\n        _setupRole(DEFAULT_ADMIN_ROLE, _initialOwner);\\n        _setupRole(WHITELISTER_ROLE, _initialOwner);\\n        transferOwnership(_initialOwner);\\n    }\\n\\n    /// @dev sets external provider for token contract, and royalties type = 4\\n    function setProviderByToken(address token, address provider) external {\\n        checkOwner(token);\\n        setRoyaltiesType(token, 4, provider);\\n    }\\n\\n    /// @dev returns provider address for token contract from royaltiesProviders mapping\\n    function getProvider(address token) public view returns(address) {\\n        return address(royaltiesProviders[token]);\\n    }\\n\\n    /// @dev returns royalties type for token contract\\n    function getRoyaltiesType(address token) external view returns(uint) {\\n        return _getRoyaltiesType(royaltiesProviders[token]);\\n    }\\n\\n    /// @dev returns royalties type from uint\\n    function _getRoyaltiesType(uint data) internal pure returns(uint) {\\n        for (uint i = 1; i <= royaltiesTypesAmount; ++i) {\\n            if (data / 2**(256-i) == 1) {\\n                return i;\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    /// @dev sets royalties type for token contract\\n    function setRoyaltiesType(address token, uint royaltiesType, address royaltiesProvider) internal {\\n        require(royaltiesType > 0 && royaltiesType <= royaltiesTypesAmount, \\\"wrong royaltiesType\\\");\\n        royaltiesProviders[token] = uint(royaltiesProvider) + 2**(256 - royaltiesType);\\n    }\\n\\n    /// @dev clears and sets new royalties type for token contract\\n    function forceSetRoyaltiesType(address token, uint royaltiesType) external {\\n        checkOwner(token);\\n        setRoyaltiesType(token, royaltiesType, getProvider(token));\\n    }\\n\\n    /// @dev clears royalties type for token contract\\n    function clearRoyaltiesType(address token) external {\\n        checkOwner(token);\\n        royaltiesProviders[token] = uint(getProvider(token));\\n    }\\n\\n    /// @dev sets royalties for token contract in royaltiesByToken mapping and royalties type = 1\\n    function setRoyaltiesByToken(address token, LibPart.Part[] memory royalties) external {\\n        checkOwner(token);\\n        //clearing royaltiesProviders value for the token\\n        delete royaltiesProviders[token];\\n        // setting royaltiesType = 1 for the token\\n        setRoyaltiesType(token, 1, address(0));\\n        uint sumRoyalties = 0;\\n        delete royaltiesByToken[token];\\n        for (uint i = 0; i < royalties.length; ++i) {\\n            require(royalties[i].account != address(0x0), \\\"RoyaltiesByToken recipient should be present\\\");\\n            require(royalties[i].value != 0, \\\"Royalty value for RoyaltiesByToken should be > 0\\\");\\n            royaltiesByToken[token].royalties.push(royalties[i]);\\n            sumRoyalties += royalties[i].value;\\n        }\\n        require(sumRoyalties < 10000, \\\"Set by token royalties sum more, than 100%\\\");\\n        royaltiesByToken[token].initialized = true;\\n        emit RoyaltiesSetForContract(token, royalties);\\n    }\\n\\n    /// @dev checks if msg.sender is owner of this contract or owner of the token contract\\n    function checkOwner(address token) internal view {\\n        if ((owner() != _msgSender()) && (OwnableUpgradeable(token).owner() != _msgSender())) {\\n            revert(\\\"Token owner not detected\\\");\\n        }\\n    }\\n\\n    /// @dev calculates royalties type for token contract\\n    function calculateRoyaltiesType(address token, address royaltiesProvider ) internal view returns(uint) {\\n        try IERC165Upgradeable(token).supportsInterface(LibRoyaltiesV2._INTERFACE_ID_ROYALTIES) returns(bool result) {\\n            if (result) {\\n                return 2;\\n            }\\n        } catch { }\\n\\n            try IERC165Upgradeable(token).supportsInterface(LibRoyaltiesV1._INTERFACE_ID_FEES) returns(bool result) {\\n            if (result) {\\n                return 3;\\n            }\\n        } catch { }\\n\\n        try IERC165Upgradeable(token).supportsInterface(LibRoyalties2981._INTERFACE_ID_ROYALTIES) returns(bool result) {\\n            if (result) {\\n                return 5;\\n            }\\n        } catch { }\\n\\n        if (royaltiesProvider != address(0)) {\\n            return 4;\\n        }\\n\\n        if (royaltiesByToken[token].initialized) {\\n            return 1;\\n        }\\n\\n        return 6;\\n    }\\n\\n    /// @dev returns royalties for token contract and token id\\n    function getRoyalties(address token, uint tokenId) override external returns (LibPart.Part[] memory) {\\n        if(royaltiesAllowed[token]) {\\n            uint royaltiesProviderData = royaltiesProviders[token];\\n            address royaltiesProvider = address(royaltiesProviderData);\\n            uint royaltiesType = _getRoyaltiesType(royaltiesProviderData);\\n\\n            // case when royaltiesType is not set\\n            if (royaltiesType == 0) {\\n                // calculating royalties type for token\\n                royaltiesType = calculateRoyaltiesType(token, royaltiesProvider);\\n                //saving royalties type\\n                setRoyaltiesType(token, royaltiesType, royaltiesProvider);\\n            }\\n\\n            //case royaltiesType = 1, royalties are set in royaltiesByToken\\n            if (royaltiesType == 1) {\\n                return royaltiesByToken[token].royalties;\\n            }\\n\\n            //case royaltiesType = 2, royalties rarible v2\\n            if (royaltiesType == 2) {\\n                return getRoyaltiesRaribleV2(token,tokenId);\\n            }\\n\\n            //case royaltiesType = 3, royalties rarible v1\\n            if (royaltiesType == 3) {\\n                return getRoyaltiesRaribleV1(token, tokenId);\\n            }\\n\\n            //case royaltiesType = 4, royalties from external provider\\n            if (royaltiesType == 4) {\\n                return providerExtractor(token, tokenId, royaltiesProvider);\\n            }\\n\\n            //case royaltiesType = 5, royalties EIP-2981\\n            if (royaltiesType == 5) {\\n                return getRoyaltiesEIP2981(token, tokenId);\\n            }\\n\\n            // case royaltiesType = 6, unknown/empty royalties\\n            if (royaltiesType == 6) {\\n                return new LibPart.Part[](0);\\n            }\\n        } else {\\n            return new LibPart.Part[](0);\\n        }\\n\\n        revert(\\\"something wrong in getRoyalties\\\");\\n    }\\n\\n    /// @dev tries to get royalties rarible-v2 for token and tokenId\\n    function getRoyaltiesRaribleV2(address token, uint tokenId) internal view returns (LibPart.Part[] memory) {\\n        try RoyaltiesV2(token).getRaribleV2Royalties(tokenId) returns (LibPart.Part[] memory result) {\\n            return result;\\n        } catch {\\n            return new LibPart.Part[](0);\\n        }\\n    }\\n\\n    /// @dev tries to get royalties rarible-v1 for token and tokenId\\n    function getRoyaltiesRaribleV1(address token, uint tokenId) internal view returns (LibPart.Part[] memory) {\\n        RoyaltiesV1 v1 = RoyaltiesV1(token);\\n        address payable[] memory recipients;\\n        try v1.getFeeRecipients(tokenId) returns (address payable[] memory resultRecipients) {\\n            recipients = resultRecipients;\\n        } catch {\\n            return new LibPart.Part[](0);\\n        }\\n        uint[] memory values;\\n        try v1.getFeeBps(tokenId) returns (uint[] memory resultValues) {\\n            values = resultValues;\\n        } catch {\\n            return new LibPart.Part[](0);\\n        }\\n        if (values.length != recipients.length) {\\n            return new LibPart.Part[](0);\\n        }\\n        LibPart.Part[] memory result = new LibPart.Part[](values.length);\\n        for (uint256 i = 0; i < values.length; ++i) {\\n            result[i].value = uint96(values[i]);\\n            result[i].account = recipients[i];\\n        }\\n        return result;\\n    }\\n\\n    /// @dev tries to get royalties EIP-2981 for token and tokenId\\n    function getRoyaltiesEIP2981(address token, uint tokenId) internal view returns (LibPart.Part[] memory) {\\n        try IERC2981(token).royaltyInfo(tokenId, LibRoyalties2981._WEIGHT_VALUE) returns (address receiver, uint256 royaltyAmount) {\\n            return LibRoyalties2981.calculateRoyalties(receiver, royaltyAmount);\\n        } catch {\\n            return new LibPart.Part[](0);\\n        }\\n    }\\n\\n    /// @dev tries to get royalties for token and tokenId from external provider set in royaltiesProviders\\n    function providerExtractor(address token, uint tokenId, address providerAddress) internal returns (LibPart.Part[] memory) {\\n        try IRoyaltiesProvider(providerAddress).getRoyalties(token, tokenId) returns (LibPart.Part[] memory result) {\\n            return result;\\n        } catch {\\n            return new LibPart.Part[](0);\\n        }\\n    }\\n\\n    function setRoyaltiesAllowed(address token, bool allowed) external {\\n        require(hasRole(WHITELISTER_ROLE, _msgSender()), \\\"not whitelister\\\");\\n        royaltiesAllowed[token] = allowed;\\n        emit RoyaltiesAllowedChanged(token, allowed);\\n    }\\n\\n    function setRoyaltiesAllowedBulk(address[] calldata tokens, bool allowed) external {\\n        require(hasRole(WHITELISTER_ROLE, _msgSender()), \\\"not whitelister\\\");\\n        for (uint i = 0; i < tokens.length; ++i) {\\n            royaltiesAllowed[tokens[i]] = allowed;\\n            emit RoyaltiesAllowedChanged(tokens[i], allowed);\\n        }\\n    }\\n\\n    uint256[45] private __gap;\\n}\",\"keccak256\":\"0xeeadcd83061c99a7f394247b6feaf60415e90d617f4c43758e1d7e042c966c91\",\"license\":\"MIT\"},\"@rarible/royalties/contracts/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\nimport \\\"@rarible/lib-part/contracts/LibPart.sol\\\";\\n///\\n/// @dev Interface for the NFT Royalty Standard\\n///\\n//interface IERC2981 is IERC165 {\\ninterface IERC2981 {\\n    /// ERC165 bytes to add to interface array - set in parent contract\\n    /// implementing this standard\\n    ///\\n    /// bytes4(keccak256(\\\"royaltyInfo(uint256,uint256)\\\")) == 0x2a55205a\\n    /// bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\\n    /// _registerInterface(_INTERFACE_ID_ERC2981);\\n\\n    /// @notice Called with the sale price to determine how much royalty\\n    //          is owed and to whom.\\n    /// @param _tokenId - the NFT asset queried for royalty information\\n    /// @param _salePrice - the sale price of the NFT asset specified by _tokenId\\n    /// @return receiver - address of who should be sent the royalty payment\\n    /// @return royaltyAmount - the royalty payment amount for _salePrice\\n    function royaltyInfo(\\n        uint256 _tokenId,\\n        uint256 _salePrice\\n    ) external view returns (\\n        address receiver,\\n        uint256 royaltyAmount\\n    );\\n}\",\"keccak256\":\"0x3d5e9391e093802a14b2a3765df0faa582ae6c5d1ea813491d9923ddf9937f97\",\"license\":\"MIT\"},\"@rarible/royalties/contracts/LibRoyalties2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"@rarible/lib-part/contracts/LibPart.sol\\\";\\n\\nlibrary LibRoyalties2981 {\\n    /*\\n     * https://eips.ethereum.org/EIPS/eip-2981: bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\\n     */\\n    bytes4 constant _INTERFACE_ID_ROYALTIES = 0x2a55205a;\\n    uint96 constant _WEIGHT_VALUE = 1000000;\\n\\n    /*Method for converting amount to percent and forming LibPart*/\\n    function calculateRoyalties(address to, uint256 amount) internal view returns (LibPart.Part[] memory) {\\n        LibPart.Part[] memory result;\\n        if (amount == 0) {\\n            return result;\\n        }\\n        uint256 percent = amount * 10000 / _WEIGHT_VALUE;\\n        require(percent < 10000, \\\"Royalties 2981 exceeds 100%\\\");\\n        result = new LibPart.Part[](1);\\n        result[0].account = payable(to);\\n        result[0].value = uint96(percent);\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x45d9500be6a3d06912d6a6489457c21940970c227b99703d46098831008b3fdc\",\"license\":\"MIT\"},\"@rarible/royalties/contracts/LibRoyaltiesV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nlibrary LibRoyaltiesV1 {\\n    /*\\n     * bytes4(keccak256('getFeeBps(uint256)')) == 0x0ebd4c7f\\n     * bytes4(keccak256('getFeeRecipients(uint256)')) == 0xb9c4d9fb\\n     *\\n     * => 0x0ebd4c7f ^ 0xb9c4d9fb == 0xb7799584\\n     */\\n    bytes4 constant _INTERFACE_ID_FEES = 0xb7799584;\\n}\\n\",\"keccak256\":\"0xa69539ead11d93c9c53c97c66c01f2aa054bdc51dfc266c05c9ff59b9c648d0f\",\"license\":\"MIT\"},\"@rarible/royalties/contracts/LibRoyaltiesV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nlibrary LibRoyaltiesV2 {\\n    /*\\n     * bytes4(keccak256('getRaribleV2Royalties(uint256)')) == 0xcad96cca\\n     */\\n    bytes4 constant _INTERFACE_ID_ROYALTIES = 0xcad96cca;\\n}\\n\",\"keccak256\":\"0xf61719a8f17946a3e49cc9cba266e8e40df616166a5186acefaa09f570f2477b\",\"license\":\"MIT\"},\"@rarible/royalties/contracts/RoyaltiesV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\ninterface RoyaltiesV1 {\\n    event SecondarySaleFees(uint256 tokenId, address[] recipients, uint[] bps);\\n\\n    function getFeeRecipients(uint256 id) external view returns (address payable[] memory);\\n    function getFeeBps(uint256 id) external view returns (uint[] memory);\\n}\\n\",\"keccak256\":\"0x9dd5165b224ab2c9a5d8243b0ba296181d00470ea9d054d1afed86453a2337a8\",\"license\":\"MIT\"},\"@rarible/royalties/contracts/RoyaltiesV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@rarible/lib-part/contracts/LibPart.sol\\\";\\n\\ninterface RoyaltiesV2 {\\n    event RoyaltiesSet(uint256 tokenId, LibPart.Part[] royalties);\\n\\n    function getRaribleV2Royalties(uint256 id) external view returns (LibPart.Part[] memory);\\n}\\n\",\"keccak256\":\"0xf9ed1454eecb96c624c4b69d074d9b047f947f77b14951e1e329a22ef470bda2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612840806100206000396000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c80639010d07c116100de578063ca15c87311610097578063d836f01311610071578063d836f01314610348578063f2fde38b1461035b578063f39cc7061461036e578063fc73be00146103815761018e565b8063ca15c8731461030f578063d1da3cce14610322578063d547741f146103355761018e565b80639010d07c1461029b57806390acb3cf146102ae57806391d14854146102c15780639ca7dc7a146102d4578063a217fddf146102f4578063acf14efb146102fc5761018e565b80634ae888971161014b578063634ce6f811610125578063634ce6f814610265578063715018a61461027857806382b19f12146102805780638da5cb5b146102935761018e565b80634ae888971461022a57806355f21eb71461023d578063570618e11461025d5761018e565b806305df952f146101935780631e535d62146101bc578063248a9ca3146101d15780632f2ff15d146101f157806336568abe1461020457806336eff6c214610217575b600080fd5b6101a66101a1366004611ef8565b610394565b6040516101b3919061245b565b60405180910390f35b6101cf6101ca366004611ef8565b6103a9565b005b6101e46101df366004612370565b6104bf565b6040516101b39190612466565b6101cf6101ff366004612388565b6104d7565b6101cf610212366004612388565b61053a565b6101cf610225366004612085565b61059b565b6101cf6102383660046120dd565b6105b7565b61025061024b366004611ef8565b6106b5565b6040516101b391906123cd565b6101e46106d0565b6101a6610273366004611ef8565b6106e2565b6101cf6106f7565b6101e461028e366004611ef8565b6107b5565b6102506107dd565b6102506102a93660046123ac565b6107ec565b6101cf6102bc366004612058565b61080b565b6101a66102cf366004612388565b6108a1565b6102e76102e2366004612085565b6108b9565b6040516101b391906123fa565b6101e4610ab1565b6101cf61030a366004611f68565b610ab6565b6101e461031d366004612370565b610cf2565b6101a6610330366004612370565b610d09565b6101cf610343366004612388565b610d1e565b6101cf610356366004611f30565b610d77565b6101cf610369366004611ef8565b610d8c565b6101e461037c366004611ef8565b610ea1565b6101cf61038f366004611ef8565b610eb3565b60986020526000908152604090205460ff1681565b600054610100900460ff16806103c257506103c2610ee4565b806103d0575060005460ff16155b61040b5760405162461bcd60e51b815260040180806020018281038252602e81526020018061278e602e913960400191505060405180910390fd5b600054610100900460ff16158015610436576000805460ff1961ff0019909116610100171660011790555b6001600160a01b0382166104655760405162461bcd60e51b815260040161045c906124bb565b60405180910390fd5b61046d610ef5565b610475610f9f565b61047d61103c565b610488600083610530565b6104a06000805160206127bc83398151915283610530565b6104a982610d8c565b80156104bb576000805461ff00191690555b5050565b6000818152606560205260409020600201545b919050565b6000828152606560205260409020600201546104f5906102cf6110d1565b6105305760405162461bcd60e51b815260040180806020018281038252602f815260200180612709602f913960400191505060405180910390fd5b6104bb82826110d5565b6105426110d1565b6001600160a01b0316816001600160a01b0316146105915760405162461bcd60e51b815260040180806020018281038252602f8152602001806127dc602f913960400191505060405180910390fd5b6104bb828261113e565b6105a4826111a7565b6104bb82826105b2856106b5565b61127d565b6105d16000805160206127bc8339815191526102cf6110d1565b6105ed5760405162461bcd60e51b815260040161045c906125af565b60005b828110156106af5781609a600086868581811061060957fe5b905060200201602081019061061e9190611ef8565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905583838281811061065257fe5b90506020020160208101906106679190611ef8565b6001600160a01b03167fe1d51bd292b8e411e57d53c9a75fd288bc1a98d159f7e92476579720abbf26c88360405161069f919061245b565b60405180910390a26001016105f0565b50505050565b6001600160a01b031660009081526099602052604090205490565b6000805160206127bc83398151915281565b609a6020526000908152604090205460ff1681565b6106ff6110d1565b6001600160a01b03166107106107dd565b6001600160a01b03161461076b576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b6001600160a01b0381166000908152609960205260408120546107d7906112d4565b92915050565b6033546001600160a01b031690565b60008281526065602052604081206108049083611312565b9392505050565b6108256000805160206127bc8339815191526102cf6110d1565b6108415760405162461bcd60e51b815260040161045c906125af565b6001600160a01b0382166000818152609a602052604090819020805460ff1916841515179055517fe1d51bd292b8e411e57d53c9a75fd288bc1a98d159f7e92476579720abbf26c89061089590849061245b565b60405180910390a25050565b6000828152606560205260408120610804908361131e565b6001600160a01b0382166000908152609a602052604090205460609060ff1615610a60576001600160a01b038316600090815260996020526040812054908190610902826112d4565b905080610920576109138683611333565b905061092086828461127d565b80600114156109bc576001600160a01b038616600090815260986020908152604080832060010180548251818502810185019093528083529193909284015b828210156109ae57600084815260209081902060408051808201909152908401546001600160a01b0381168252600160a01b90046001600160601b03168183015282526001909201910161095f565b5050505093505050506107d7565b80600214156109d9576109cf8686611541565b93505050506107d7565b80600314156109ec576109cf8686611600565b8060041415610a00576109cf8686846118b4565b8060051415610a13576109cf8686611979565b8060061415610a58576040805160008082526020820190925290610a4d565b610a3a611eaf565b815260200190600190039081610a325790505b5093505050506107d7565b505050610a99565b6040805160008082526020820190925290610a91565b610a7e611eaf565b815260200190600190039081610a765790505b5090506107d7565b60405162461bcd60e51b815260040161045c90612484565b600081565b610abf826111a7565b6001600160a01b0382166000908152609960205260408120819055610ae890839060019061127d565b6001600160a01b0382166000908152609860205260408120805460ff1916815581610b166001830182611ec6565b505060005b8251811015610c705760006001600160a01b0316838281518110610b3b57fe5b6020026020010151600001516001600160a01b03161415610b6e5760405162461bcd60e51b815260040161045c906124e2565b828181518110610b7a57fe5b6020026020010151602001516001600160601b031660001415610baf5760405162461bcd60e51b815260040161045c906125d8565b60986000856001600160a01b03166001600160a01b03168152602001908152602001600020600101838281518110610be357fe5b602090810291909101810151825460018101845560009384529282902081519301805491909201516001600160601b0316600160a01b026001600160a01b039384166001600160a01b0319909216919091179092169190911790558251839082908110610c4c57fe5b6020026020010151602001516001600160601b031682019150806001019050610b1b565b506127108110610c925760405162461bcd60e51b815260040161045c9061252e565b6001600160a01b03831660008181526098602052604090819020805460ff19166001179055517fc026171b9a7c9009d6a748a19a0a3cb877978a585e1647a87a786d724bbde12790610ce59085906123fa565b60405180910390a2505050565b60008181526065602052604081206107d790611a43565b60976020526000908152604090205460ff1681565b600082815260656020526040902060020154610d3c906102cf6110d1565b6105915760405162461bcd60e51b815260040180806020018281038252603081526020018061275e6030913960400191505060405180910390fd5b610d80826111a7565b6104bb8260048361127d565b610d946110d1565b6001600160a01b0316610da56107dd565b6001600160a01b031614610e00576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116610e455760405162461bcd60e51b81526004018080602001828103825260268152602001806127386026913960400191505060405180910390fd5b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b60996020526000908152604090205481565b610ebc816111a7565b610ec5816106b5565b6001600160a01b03918216600090815260996020526040902091169055565b6000610eef30611a4e565b15905090565b600054610100900460ff1680610f0e5750610f0e610ee4565b80610f1c575060005460ff16155b610f575760405162461bcd60e51b815260040180806020018281038252602e81526020018061278e602e913960400191505060405180910390fd5b600054610100900460ff16158015610f82576000805460ff1961ff0019909116610100171660011790555b610f8a611a54565b8015610f9c576000805461ff00191690555b50565b600054610100900460ff1680610fb85750610fb8610ee4565b80610fc6575060005460ff16155b6110015760405162461bcd60e51b815260040180806020018281038252602e81526020018061278e602e913960400191505060405180910390fd5b600054610100900460ff1615801561102c576000805460ff1961ff0019909116610100171660011790555b611034611a54565b610f8a611af4565b600054610100900460ff16806110555750611055610ee4565b80611063575060005460ff16155b61109e5760405162461bcd60e51b815260040180806020018281038252602e81526020018061278e602e913960400191505060405180910390fd5b600054610100900460ff161580156110c9576000805460ff1961ff0019909116610100171660011790555b610f82611a54565b3390565b60008281526065602052604090206110ed9082611bed565b156104bb576110fa6110d1565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526065602052604090206111569082611c02565b156104bb576111636110d1565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b6111af6110d1565b6001600160a01b03166111c06107dd565b6001600160a01b03161415801561126057506111da6110d1565b6001600160a01b0316816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561121c57600080fd5b505afa158015611230573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112549190611f14565b6001600160a01b031614155b15610f9c5760405162461bcd60e51b815260040161045c90612578565b60008211801561128e575060068211155b6112aa5760405162461bcd60e51b815260040161045c90612628565b6001600160a01b03928316600090815260996020526040902092166101009190910360020a019055565b600060015b6006811161130957806101000360020a83816112f157fe5b04600114156113015790506104d2565b6001016112d9565b50600092915050565b60006108048383611c17565b6000610804836001600160a01b038416611c7b565b6040516301ffc9a760e01b81526000906001600160a01b038416906301ffc9a7906113699063656cb66560e11b9060040161246f565b60206040518083038186803b15801561138157600080fd5b505afa9250505080156113b1575060408051601f3d908101601f191682019092526113ae91810190612354565b60015b6113ba576113cc565b80156113ca5760029150506107d7565b505b6040516301ffc9a760e01b81526001600160a01b038416906301ffc9a7906113ff90632dde656160e21b9060040161246f565b60206040518083038186803b15801561141757600080fd5b505afa925050508015611447575060408051601f3d908101601f1916820190925261144491810190612354565b60015b61145057611462565b80156114605760039150506107d7565b505b6040516301ffc9a760e01b81526001600160a01b038416906301ffc9a7906114959063152a902d60e11b9060040161246f565b60206040518083038186803b1580156114ad57600080fd5b505afa9250505080156114dd575060408051601f3d908101601f191682019092526114da91810190612354565b60015b6114e6576114f8565b80156114f65760059150506107d7565b505b6001600160a01b0382161561150f575060046107d7565b6001600160a01b03831660009081526098602052604090205460ff1615611538575060016107d7565b50600692915050565b60405163656cb66560e11b81526060906001600160a01b0384169063cad96cca90611570908590600401612466565b60006040518083038186803b15801561158857600080fd5b505afa9250505080156115bd57506040513d6000823e601f3d908101601f191682016040526115ba91908101906121f6565b60015b6115f9576040805160008082526020820190925290610a91565b6115df611eaf565b8152602001906001900390816115d75790505090506107d7565b90506107d7565b60405163b9c4d9fb60e01b8152606090839082906001600160a01b0383169063b9c4d9fb90611633908790600401612466565b60006040518083038186803b15801561164b57600080fd5b505afa92505050801561168057506040513d6000823e601f3d908101601f1916820160405261167d919081019061215d565b60015b6116bf5760408051600080825260208201909252906116b5565b6116a2611eaf565b81526020019060019003908161169a5790505b50925050506107d7565b9050604051630ebd4c7f60e01b81526060906001600160a01b03841690630ebd4c7f906116f0908890600401612466565b60006040518083038186803b15801561170857600080fd5b505afa92505050801561173d57506040513d6000823e601f3d908101601f1916820160405261173a91908101906122d0565b60015b61177c576040805160008082526020820190925290610a4d565b61175f611eaf565b8152602001906001900390816117575790505093505050506107d7565b905081518151146117c2576040805160008082526020820190925290610a4d565b6117a5611eaf565b81526020019060019003908161179d5790505093505050506107d7565b6000815167ffffffffffffffff811180156117dc57600080fd5b5060405190808252806020026020018201604052801561181657816020015b611803611eaf565b8152602001906001900390816117fb5790505b50905060005b82518110156118a95782818151811061183157fe5b602002602001015182828151811061184557fe5b6020026020010151602001906001600160601b031690816001600160601b03168152505083818151811061187557fe5b602002602001015182828151811061188957fe5b60209081029190910101516001600160a01b03909116905260010161181c565b509695505050505050565b604051634e53ee3d60e11b81526060906001600160a01b03831690639ca7dc7a906118e590879087906004016123e1565b600060405180830381600087803b1580156118ff57600080fd5b505af192505050801561193457506040513d6000823e601f3d908101601f1916820160405261193191908101906121f6565b60015b611971576040805160008082526020820190925290611969565b611956611eaf565b81526020019060019003908161194e5790505b509050610804565b949350505050565b60405163152a902d60e11b81526060906001600160a01b03841690632a55205a906119ad908590620f424090600401612655565b604080518083038186803b1580156119c457600080fd5b505afa9250505080156119f4575060408051601f3d908101601f191682019092526119f1918101906120b0565b60015b611a30576040805160008082526020820190925290610a91565b611a16611eaf565b815260200190600190039081611a0e5790505090506107d7565b611a3a8282611c93565b925050506107d7565b60006107d782611d9b565b3b151590565b600054610100900460ff1680611a6d5750611a6d610ee4565b80611a7b575060005460ff16155b611ab65760405162461bcd60e51b815260040180806020018281038252602e81526020018061278e602e913960400191505060405180910390fd5b600054610100900460ff16158015610f8a576000805460ff1961ff0019909116610100171660011790558015610f9c576000805461ff001916905550565b600054610100900460ff1680611b0d5750611b0d610ee4565b80611b1b575060005460ff16155b611b565760405162461bcd60e51b815260040180806020018281038252602e81526020018061278e602e913960400191505060405180910390fd5b600054610100900460ff16158015611b81576000805460ff1961ff0019909116610100171660011790555b6000611b8b6110d1565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015610f9c576000805461ff001916905550565b6000610804836001600160a01b038416611d9f565b6000610804836001600160a01b038416611de9565b81546000908210611c595760405162461bcd60e51b81526004018080602001828103825260228152602001806126e76022913960400191505060405180910390fd5b826000018281548110611c6857fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b60608082611ca25790506107d7565b6000620f424061271085020490506127108110611d06576040805162461bcd60e51b815260206004820152601b60248201527f526f79616c746965732032393831206578636565647320313030250000000000604482015290519081900360640190fd5b60408051600180825281830190925290816020015b611d23611eaf565b815260200190600190039081611d1b5790505091508482600081518110611d4657fe5b6020026020010151600001906001600160a01b031690816001600160a01b0316815250508082600081518110611d7857fe5b6020908102919091018101516001600160601b0390921691015250905092915050565b5490565b6000611dab8383611c7b565b611de1575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556107d7565b5060006107d7565b60008181526001830160205260408120548015611ea55783546000198083019190810190600090879083908110611e1c57fe5b9060005260206000200154905080876000018481548110611e3957fe5b600091825260208083209091019290925582815260018981019092526040902090840190558654879080611e6957fe5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506107d7565b60009150506107d7565b604080518082019091526000808252602082015290565b5080546000825590600052602060002090810190610f9c91905b80821115611ef45760008155600101611ee0565b5090565b600060208284031215611f09578081fd5b8135610804816126ae565b600060208284031215611f25578081fd5b8151610804816126ae565b60008060408385031215611f42578081fd5b8235611f4d816126ae565b91506020830135611f5d816126ae565b809150509250929050565b6000806040808486031215611f7b578283fd5b8335611f86816126ae565b925060208481013567ffffffffffffffff80821115611fa3578485fd5b818701915087601f830112611fb6578485fd5b8135611fc9611fc482612690565b61266c565b81815284810190848601878402860187018c1015611fe5578889fd5b8895505b838610156120465787818d031215611fff578889fd5b8751888101818110878211171561201257fe5b8952813561201f816126ae565b81528188013561202e816126d1565b81890152835260019590950194918601918701611fe9565b50809750505050505050509250929050565b6000806040838503121561206a578182fd5b8235612075816126ae565b91506020830135611f5d816126c3565b60008060408385031215612097578182fd5b82356120a2816126ae565b946020939093013593505050565b600080604083850312156120c2578182fd5b82516120cd816126ae565b6020939093015192949293505050565b6000806000604084860312156120f1578081fd5b833567ffffffffffffffff80821115612108578283fd5b818601915086601f83011261211b578283fd5b813581811115612129578384fd5b876020808302850101111561213c578384fd5b60209283019550935050840135612152816126c3565b809150509250925092565b6000602080838503121561216f578182fd5b825167ffffffffffffffff811115612185578283fd5b8301601f81018513612195578283fd5b80516121a3611fc482612690565b81815283810190838501858402850186018910156121bf578687fd5b8694505b838510156121ea5780516121d6816126ae565b8352600194909401939185019185016121c3565b50979650505050505050565b60006020808385031215612208578182fd5b825167ffffffffffffffff8082111561221f578384fd5b818501915085601f830112612232578384fd5b8151612240611fc482612690565b818152848101908486016040808502870188018b101561225e578889fd5b8896505b848710156122c15780828c031215612278578889fd5b8051818101818110888211171561228b57fe5b82528251612298816126ae565b8152828901516122a7816126d1565b818a01528452600196909601959287019290810190612262565b50909998505050505050505050565b600060208083850312156122e2578182fd5b825167ffffffffffffffff8111156122f8578283fd5b8301601f81018513612308578283fd5b8051612316611fc482612690565b8181528381019083850185840285018601891015612332578687fd5b8694505b838510156121ea578051835260019490940193918501918501612336565b600060208284031215612365578081fd5b8151610804816126c3565b600060208284031215612381578081fd5b5035919050565b6000806040838503121561239a578182fd5b823591506020830135611f5d816126ae565b600080604083850312156123be578182fd5b50508035926020909101359150565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b602080825282518282018190526000919060409081850190868401855b8281101561244e57815180516001600160a01b031685528601516001600160601b0316868501529284019290850190600101612417565b5091979650505050505050565b901515815260200190565b90815260200190565b6001600160e01b031991909116815260200190565b6020808252601f908201527f736f6d657468696e672077726f6e6720696e20676574526f79616c7469657300604082015260600190565b6020808252600d908201526c24b73b30b634b21037bbb732b960991b604082015260600190565b6020808252602c908201527f526f79616c746965734279546f6b656e20726563697069656e742073686f756c60408201526b19081899481c1c995cd95b9d60a21b606082015260800190565b6020808252602a908201527f53657420627920746f6b656e20726f79616c746965732073756d206d6f72652c604082015269207468616e203130302560b01b606082015260800190565b60208082526018908201527f546f6b656e206f776e6572206e6f742064657465637465640000000000000000604082015260600190565b6020808252600f908201526e3737ba103bb434ba32b634b9ba32b960891b604082015260600190565b60208082526030908201527f526f79616c74792076616c756520666f7220526f79616c746965734279546f6b60408201526f0656e2073686f756c64206265203e20360841b606082015260800190565b60208082526013908201527277726f6e6720726f79616c746965735479706560681b604082015260600190565b9182526001600160601b0316602082015260400190565b60405181810167ffffffffffffffff8111828210171561268857fe5b604052919050565b600067ffffffffffffffff8211156126a457fe5b5060209081020190565b6001600160a01b0381168114610f9c57600080fd5b8015158114610f9c57600080fd5b6001600160601b0381168114610f9c57600080fdfe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e6473416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e744f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b65496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a65648619cecd8b9e095ab43867f5b69d492180450fe862e6b50bfbfb24b75dd84c8a416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66a264697066735822122053414a0edb3c2c46578447edeaf7e37afbe916cf3f454d9df66281a684ab3b1364736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018e5760003560e01c80639010d07c116100de578063ca15c87311610097578063d836f01311610071578063d836f01314610348578063f2fde38b1461035b578063f39cc7061461036e578063fc73be00146103815761018e565b8063ca15c8731461030f578063d1da3cce14610322578063d547741f146103355761018e565b80639010d07c1461029b57806390acb3cf146102ae57806391d14854146102c15780639ca7dc7a146102d4578063a217fddf146102f4578063acf14efb146102fc5761018e565b80634ae888971161014b578063634ce6f811610125578063634ce6f814610265578063715018a61461027857806382b19f12146102805780638da5cb5b146102935761018e565b80634ae888971461022a57806355f21eb71461023d578063570618e11461025d5761018e565b806305df952f146101935780631e535d62146101bc578063248a9ca3146101d15780632f2ff15d146101f157806336568abe1461020457806336eff6c214610217575b600080fd5b6101a66101a1366004611ef8565b610394565b6040516101b3919061245b565b60405180910390f35b6101cf6101ca366004611ef8565b6103a9565b005b6101e46101df366004612370565b6104bf565b6040516101b39190612466565b6101cf6101ff366004612388565b6104d7565b6101cf610212366004612388565b61053a565b6101cf610225366004612085565b61059b565b6101cf6102383660046120dd565b6105b7565b61025061024b366004611ef8565b6106b5565b6040516101b391906123cd565b6101e46106d0565b6101a6610273366004611ef8565b6106e2565b6101cf6106f7565b6101e461028e366004611ef8565b6107b5565b6102506107dd565b6102506102a93660046123ac565b6107ec565b6101cf6102bc366004612058565b61080b565b6101a66102cf366004612388565b6108a1565b6102e76102e2366004612085565b6108b9565b6040516101b391906123fa565b6101e4610ab1565b6101cf61030a366004611f68565b610ab6565b6101e461031d366004612370565b610cf2565b6101a6610330366004612370565b610d09565b6101cf610343366004612388565b610d1e565b6101cf610356366004611f30565b610d77565b6101cf610369366004611ef8565b610d8c565b6101e461037c366004611ef8565b610ea1565b6101cf61038f366004611ef8565b610eb3565b60986020526000908152604090205460ff1681565b600054610100900460ff16806103c257506103c2610ee4565b806103d0575060005460ff16155b61040b5760405162461bcd60e51b815260040180806020018281038252602e81526020018061278e602e913960400191505060405180910390fd5b600054610100900460ff16158015610436576000805460ff1961ff0019909116610100171660011790555b6001600160a01b0382166104655760405162461bcd60e51b815260040161045c906124bb565b60405180910390fd5b61046d610ef5565b610475610f9f565b61047d61103c565b610488600083610530565b6104a06000805160206127bc83398151915283610530565b6104a982610d8c565b80156104bb576000805461ff00191690555b5050565b6000818152606560205260409020600201545b919050565b6000828152606560205260409020600201546104f5906102cf6110d1565b6105305760405162461bcd60e51b815260040180806020018281038252602f815260200180612709602f913960400191505060405180910390fd5b6104bb82826110d5565b6105426110d1565b6001600160a01b0316816001600160a01b0316146105915760405162461bcd60e51b815260040180806020018281038252602f8152602001806127dc602f913960400191505060405180910390fd5b6104bb828261113e565b6105a4826111a7565b6104bb82826105b2856106b5565b61127d565b6105d16000805160206127bc8339815191526102cf6110d1565b6105ed5760405162461bcd60e51b815260040161045c906125af565b60005b828110156106af5781609a600086868581811061060957fe5b905060200201602081019061061e9190611ef8565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905583838281811061065257fe5b90506020020160208101906106679190611ef8565b6001600160a01b03167fe1d51bd292b8e411e57d53c9a75fd288bc1a98d159f7e92476579720abbf26c88360405161069f919061245b565b60405180910390a26001016105f0565b50505050565b6001600160a01b031660009081526099602052604090205490565b6000805160206127bc83398151915281565b609a6020526000908152604090205460ff1681565b6106ff6110d1565b6001600160a01b03166107106107dd565b6001600160a01b03161461076b576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b6001600160a01b0381166000908152609960205260408120546107d7906112d4565b92915050565b6033546001600160a01b031690565b60008281526065602052604081206108049083611312565b9392505050565b6108256000805160206127bc8339815191526102cf6110d1565b6108415760405162461bcd60e51b815260040161045c906125af565b6001600160a01b0382166000818152609a602052604090819020805460ff1916841515179055517fe1d51bd292b8e411e57d53c9a75fd288bc1a98d159f7e92476579720abbf26c89061089590849061245b565b60405180910390a25050565b6000828152606560205260408120610804908361131e565b6001600160a01b0382166000908152609a602052604090205460609060ff1615610a60576001600160a01b038316600090815260996020526040812054908190610902826112d4565b905080610920576109138683611333565b905061092086828461127d565b80600114156109bc576001600160a01b038616600090815260986020908152604080832060010180548251818502810185019093528083529193909284015b828210156109ae57600084815260209081902060408051808201909152908401546001600160a01b0381168252600160a01b90046001600160601b03168183015282526001909201910161095f565b5050505093505050506107d7565b80600214156109d9576109cf8686611541565b93505050506107d7565b80600314156109ec576109cf8686611600565b8060041415610a00576109cf8686846118b4565b8060051415610a13576109cf8686611979565b8060061415610a58576040805160008082526020820190925290610a4d565b610a3a611eaf565b815260200190600190039081610a325790505b5093505050506107d7565b505050610a99565b6040805160008082526020820190925290610a91565b610a7e611eaf565b815260200190600190039081610a765790505b5090506107d7565b60405162461bcd60e51b815260040161045c90612484565b600081565b610abf826111a7565b6001600160a01b0382166000908152609960205260408120819055610ae890839060019061127d565b6001600160a01b0382166000908152609860205260408120805460ff1916815581610b166001830182611ec6565b505060005b8251811015610c705760006001600160a01b0316838281518110610b3b57fe5b6020026020010151600001516001600160a01b03161415610b6e5760405162461bcd60e51b815260040161045c906124e2565b828181518110610b7a57fe5b6020026020010151602001516001600160601b031660001415610baf5760405162461bcd60e51b815260040161045c906125d8565b60986000856001600160a01b03166001600160a01b03168152602001908152602001600020600101838281518110610be357fe5b602090810291909101810151825460018101845560009384529282902081519301805491909201516001600160601b0316600160a01b026001600160a01b039384166001600160a01b0319909216919091179092169190911790558251839082908110610c4c57fe5b6020026020010151602001516001600160601b031682019150806001019050610b1b565b506127108110610c925760405162461bcd60e51b815260040161045c9061252e565b6001600160a01b03831660008181526098602052604090819020805460ff19166001179055517fc026171b9a7c9009d6a748a19a0a3cb877978a585e1647a87a786d724bbde12790610ce59085906123fa565b60405180910390a2505050565b60008181526065602052604081206107d790611a43565b60976020526000908152604090205460ff1681565b600082815260656020526040902060020154610d3c906102cf6110d1565b6105915760405162461bcd60e51b815260040180806020018281038252603081526020018061275e6030913960400191505060405180910390fd5b610d80826111a7565b6104bb8260048361127d565b610d946110d1565b6001600160a01b0316610da56107dd565b6001600160a01b031614610e00576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116610e455760405162461bcd60e51b81526004018080602001828103825260268152602001806127386026913960400191505060405180910390fd5b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b60996020526000908152604090205481565b610ebc816111a7565b610ec5816106b5565b6001600160a01b03918216600090815260996020526040902091169055565b6000610eef30611a4e565b15905090565b600054610100900460ff1680610f0e5750610f0e610ee4565b80610f1c575060005460ff16155b610f575760405162461bcd60e51b815260040180806020018281038252602e81526020018061278e602e913960400191505060405180910390fd5b600054610100900460ff16158015610f82576000805460ff1961ff0019909116610100171660011790555b610f8a611a54565b8015610f9c576000805461ff00191690555b50565b600054610100900460ff1680610fb85750610fb8610ee4565b80610fc6575060005460ff16155b6110015760405162461bcd60e51b815260040180806020018281038252602e81526020018061278e602e913960400191505060405180910390fd5b600054610100900460ff1615801561102c576000805460ff1961ff0019909116610100171660011790555b611034611a54565b610f8a611af4565b600054610100900460ff16806110555750611055610ee4565b80611063575060005460ff16155b61109e5760405162461bcd60e51b815260040180806020018281038252602e81526020018061278e602e913960400191505060405180910390fd5b600054610100900460ff161580156110c9576000805460ff1961ff0019909116610100171660011790555b610f82611a54565b3390565b60008281526065602052604090206110ed9082611bed565b156104bb576110fa6110d1565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526065602052604090206111569082611c02565b156104bb576111636110d1565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b6111af6110d1565b6001600160a01b03166111c06107dd565b6001600160a01b03161415801561126057506111da6110d1565b6001600160a01b0316816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561121c57600080fd5b505afa158015611230573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112549190611f14565b6001600160a01b031614155b15610f9c5760405162461bcd60e51b815260040161045c90612578565b60008211801561128e575060068211155b6112aa5760405162461bcd60e51b815260040161045c90612628565b6001600160a01b03928316600090815260996020526040902092166101009190910360020a019055565b600060015b6006811161130957806101000360020a83816112f157fe5b04600114156113015790506104d2565b6001016112d9565b50600092915050565b60006108048383611c17565b6000610804836001600160a01b038416611c7b565b6040516301ffc9a760e01b81526000906001600160a01b038416906301ffc9a7906113699063656cb66560e11b9060040161246f565b60206040518083038186803b15801561138157600080fd5b505afa9250505080156113b1575060408051601f3d908101601f191682019092526113ae91810190612354565b60015b6113ba576113cc565b80156113ca5760029150506107d7565b505b6040516301ffc9a760e01b81526001600160a01b038416906301ffc9a7906113ff90632dde656160e21b9060040161246f565b60206040518083038186803b15801561141757600080fd5b505afa925050508015611447575060408051601f3d908101601f1916820190925261144491810190612354565b60015b61145057611462565b80156114605760039150506107d7565b505b6040516301ffc9a760e01b81526001600160a01b038416906301ffc9a7906114959063152a902d60e11b9060040161246f565b60206040518083038186803b1580156114ad57600080fd5b505afa9250505080156114dd575060408051601f3d908101601f191682019092526114da91810190612354565b60015b6114e6576114f8565b80156114f65760059150506107d7565b505b6001600160a01b0382161561150f575060046107d7565b6001600160a01b03831660009081526098602052604090205460ff1615611538575060016107d7565b50600692915050565b60405163656cb66560e11b81526060906001600160a01b0384169063cad96cca90611570908590600401612466565b60006040518083038186803b15801561158857600080fd5b505afa9250505080156115bd57506040513d6000823e601f3d908101601f191682016040526115ba91908101906121f6565b60015b6115f9576040805160008082526020820190925290610a91565b6115df611eaf565b8152602001906001900390816115d75790505090506107d7565b90506107d7565b60405163b9c4d9fb60e01b8152606090839082906001600160a01b0383169063b9c4d9fb90611633908790600401612466565b60006040518083038186803b15801561164b57600080fd5b505afa92505050801561168057506040513d6000823e601f3d908101601f1916820160405261167d919081019061215d565b60015b6116bf5760408051600080825260208201909252906116b5565b6116a2611eaf565b81526020019060019003908161169a5790505b50925050506107d7565b9050604051630ebd4c7f60e01b81526060906001600160a01b03841690630ebd4c7f906116f0908890600401612466565b60006040518083038186803b15801561170857600080fd5b505afa92505050801561173d57506040513d6000823e601f3d908101601f1916820160405261173a91908101906122d0565b60015b61177c576040805160008082526020820190925290610a4d565b61175f611eaf565b8152602001906001900390816117575790505093505050506107d7565b905081518151146117c2576040805160008082526020820190925290610a4d565b6117a5611eaf565b81526020019060019003908161179d5790505093505050506107d7565b6000815167ffffffffffffffff811180156117dc57600080fd5b5060405190808252806020026020018201604052801561181657816020015b611803611eaf565b8152602001906001900390816117fb5790505b50905060005b82518110156118a95782818151811061183157fe5b602002602001015182828151811061184557fe5b6020026020010151602001906001600160601b031690816001600160601b03168152505083818151811061187557fe5b602002602001015182828151811061188957fe5b60209081029190910101516001600160a01b03909116905260010161181c565b509695505050505050565b604051634e53ee3d60e11b81526060906001600160a01b03831690639ca7dc7a906118e590879087906004016123e1565b600060405180830381600087803b1580156118ff57600080fd5b505af192505050801561193457506040513d6000823e601f3d908101601f1916820160405261193191908101906121f6565b60015b611971576040805160008082526020820190925290611969565b611956611eaf565b81526020019060019003908161194e5790505b509050610804565b949350505050565b60405163152a902d60e11b81526060906001600160a01b03841690632a55205a906119ad908590620f424090600401612655565b604080518083038186803b1580156119c457600080fd5b505afa9250505080156119f4575060408051601f3d908101601f191682019092526119f1918101906120b0565b60015b611a30576040805160008082526020820190925290610a91565b611a16611eaf565b815260200190600190039081611a0e5790505090506107d7565b611a3a8282611c93565b925050506107d7565b60006107d782611d9b565b3b151590565b600054610100900460ff1680611a6d5750611a6d610ee4565b80611a7b575060005460ff16155b611ab65760405162461bcd60e51b815260040180806020018281038252602e81526020018061278e602e913960400191505060405180910390fd5b600054610100900460ff16158015610f8a576000805460ff1961ff0019909116610100171660011790558015610f9c576000805461ff001916905550565b600054610100900460ff1680611b0d5750611b0d610ee4565b80611b1b575060005460ff16155b611b565760405162461bcd60e51b815260040180806020018281038252602e81526020018061278e602e913960400191505060405180910390fd5b600054610100900460ff16158015611b81576000805460ff1961ff0019909116610100171660011790555b6000611b8b6110d1565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015610f9c576000805461ff001916905550565b6000610804836001600160a01b038416611d9f565b6000610804836001600160a01b038416611de9565b81546000908210611c595760405162461bcd60e51b81526004018080602001828103825260228152602001806126e76022913960400191505060405180910390fd5b826000018281548110611c6857fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b60608082611ca25790506107d7565b6000620f424061271085020490506127108110611d06576040805162461bcd60e51b815260206004820152601b60248201527f526f79616c746965732032393831206578636565647320313030250000000000604482015290519081900360640190fd5b60408051600180825281830190925290816020015b611d23611eaf565b815260200190600190039081611d1b5790505091508482600081518110611d4657fe5b6020026020010151600001906001600160a01b031690816001600160a01b0316815250508082600081518110611d7857fe5b6020908102919091018101516001600160601b0390921691015250905092915050565b5490565b6000611dab8383611c7b565b611de1575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556107d7565b5060006107d7565b60008181526001830160205260408120548015611ea55783546000198083019190810190600090879083908110611e1c57fe5b9060005260206000200154905080876000018481548110611e3957fe5b600091825260208083209091019290925582815260018981019092526040902090840190558654879080611e6957fe5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506107d7565b60009150506107d7565b604080518082019091526000808252602082015290565b5080546000825590600052602060002090810190610f9c91905b80821115611ef45760008155600101611ee0565b5090565b600060208284031215611f09578081fd5b8135610804816126ae565b600060208284031215611f25578081fd5b8151610804816126ae565b60008060408385031215611f42578081fd5b8235611f4d816126ae565b91506020830135611f5d816126ae565b809150509250929050565b6000806040808486031215611f7b578283fd5b8335611f86816126ae565b925060208481013567ffffffffffffffff80821115611fa3578485fd5b818701915087601f830112611fb6578485fd5b8135611fc9611fc482612690565b61266c565b81815284810190848601878402860187018c1015611fe5578889fd5b8895505b838610156120465787818d031215611fff578889fd5b8751888101818110878211171561201257fe5b8952813561201f816126ae565b81528188013561202e816126d1565b81890152835260019590950194918601918701611fe9565b50809750505050505050509250929050565b6000806040838503121561206a578182fd5b8235612075816126ae565b91506020830135611f5d816126c3565b60008060408385031215612097578182fd5b82356120a2816126ae565b946020939093013593505050565b600080604083850312156120c2578182fd5b82516120cd816126ae565b6020939093015192949293505050565b6000806000604084860312156120f1578081fd5b833567ffffffffffffffff80821115612108578283fd5b818601915086601f83011261211b578283fd5b813581811115612129578384fd5b876020808302850101111561213c578384fd5b60209283019550935050840135612152816126c3565b809150509250925092565b6000602080838503121561216f578182fd5b825167ffffffffffffffff811115612185578283fd5b8301601f81018513612195578283fd5b80516121a3611fc482612690565b81815283810190838501858402850186018910156121bf578687fd5b8694505b838510156121ea5780516121d6816126ae565b8352600194909401939185019185016121c3565b50979650505050505050565b60006020808385031215612208578182fd5b825167ffffffffffffffff8082111561221f578384fd5b818501915085601f830112612232578384fd5b8151612240611fc482612690565b818152848101908486016040808502870188018b101561225e578889fd5b8896505b848710156122c15780828c031215612278578889fd5b8051818101818110888211171561228b57fe5b82528251612298816126ae565b8152828901516122a7816126d1565b818a01528452600196909601959287019290810190612262565b50909998505050505050505050565b600060208083850312156122e2578182fd5b825167ffffffffffffffff8111156122f8578283fd5b8301601f81018513612308578283fd5b8051612316611fc482612690565b8181528381019083850185840285018601891015612332578687fd5b8694505b838510156121ea578051835260019490940193918501918501612336565b600060208284031215612365578081fd5b8151610804816126c3565b600060208284031215612381578081fd5b5035919050565b6000806040838503121561239a578182fd5b823591506020830135611f5d816126ae565b600080604083850312156123be578182fd5b50508035926020909101359150565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b602080825282518282018190526000919060409081850190868401855b8281101561244e57815180516001600160a01b031685528601516001600160601b0316868501529284019290850190600101612417565b5091979650505050505050565b901515815260200190565b90815260200190565b6001600160e01b031991909116815260200190565b6020808252601f908201527f736f6d657468696e672077726f6e6720696e20676574526f79616c7469657300604082015260600190565b6020808252600d908201526c24b73b30b634b21037bbb732b960991b604082015260600190565b6020808252602c908201527f526f79616c746965734279546f6b656e20726563697069656e742073686f756c60408201526b19081899481c1c995cd95b9d60a21b606082015260800190565b6020808252602a908201527f53657420627920746f6b656e20726f79616c746965732073756d206d6f72652c604082015269207468616e203130302560b01b606082015260800190565b60208082526018908201527f546f6b656e206f776e6572206e6f742064657465637465640000000000000000604082015260600190565b6020808252600f908201526e3737ba103bb434ba32b634b9ba32b960891b604082015260600190565b60208082526030908201527f526f79616c74792076616c756520666f7220526f79616c746965734279546f6b60408201526f0656e2073686f756c64206265203e20360841b606082015260800190565b60208082526013908201527277726f6e6720726f79616c746965735479706560681b604082015260600190565b9182526001600160601b0316602082015260400190565b60405181810167ffffffffffffffff8111828210171561268857fe5b604052919050565b600067ffffffffffffffff8211156126a457fe5b5060209081020190565b6001600160a01b0381168114610f9c57600080fd5b8015158114610f9c57600080fd5b6001600160601b0381168114610f9c57600080fdfe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e6473416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e744f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b65496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a65648619cecd8b9e095ab43867f5b69d492180450fe862e6b50bfbfb24b75dd84c8a416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66a264697066735822122053414a0edb3c2c46578447edeaf7e37afbe916cf3f454d9df66281a684ab3b1364736f6c63430007060033",
  "devdoc": {
    "events": {
      "RoyaltiesAllowedChanged(address,bool)": {
        "details": "emitted when royalties set for a collection address"
      },
      "RoyaltiesSetForContract(address,(address,uint96)[])": {
        "details": "emitted when royalties set for token in"
      },
      "RoyaltiesSetForToken(address,uint256,(address,uint96)[])": {
        "details": "deprecated"
      }
    },
    "kind": "dev",
    "methods": {
      "clearRoyaltiesType(address)": {
        "details": "clears royalties type for token contract"
      },
      "forceSetRoyaltiesType(address,uint256)": {
        "details": "clears and sets new royalties type for token contract"
      },
      "getProvider(address)": {
        "details": "returns provider address for token contract from royaltiesProviders mapping"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "getRoyalties(address,uint256)": {
        "details": "returns royalties for token contract and token id"
      },
      "getRoyaltiesType(address)": {
        "details": "returns royalties type for token contract"
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "setProviderByToken(address,address)": {
        "details": "sets external provider for token contract, and royalties type = 4"
      },
      "setRoyaltiesByToken(address,(address,uint96)[])": {
        "details": "sets royalties for token contract in royaltiesByToken mapping and royalties type = 1"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "royaltiesAllowed": {
        "details": "stores the white list for collections with royalties"
      },
      "royaltiesByToken": {
        "details": "stores royalties for token contract, set in setRoyaltiesByToken() method"
      },
      "royaltiesByTokenAndTokenId": {
        "details": "deprecated"
      },
      "royaltiesProviders": {
        "details": "stores external provider and royalties type for token contract"
      },
      "royaltiesTypesAmount": {
        "details": "total amount or supported royalties types"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1047,
        "contract": "@rarible/royalties-registry/contracts/RoyaltiesRegistryPermissioned.sol:RoyaltiesRegistryPermissioned",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1050,
        "contract": "@rarible/royalties-registry/contracts/RoyaltiesRegistryPermissioned.sol:RoyaltiesRegistryPermissioned",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2427,
        "contract": "@rarible/royalties-registry/contracts/RoyaltiesRegistryPermissioned.sol:RoyaltiesRegistryPermissioned",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 318,
        "contract": "@rarible/royalties-registry/contracts/RoyaltiesRegistryPermissioned.sol:RoyaltiesRegistryPermissioned",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 437,
        "contract": "@rarible/royalties-registry/contracts/RoyaltiesRegistryPermissioned.sol:RoyaltiesRegistryPermissioned",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 43,
        "contract": "@rarible/royalties-registry/contracts/RoyaltiesRegistryPermissioned.sol:RoyaltiesRegistryPermissioned",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)39_storage)"
      },
      {
        "astId": 306,
        "contract": "@rarible/royalties-registry/contracts/RoyaltiesRegistryPermissioned.sol:RoyaltiesRegistryPermissioned",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 13134,
        "contract": "@rarible/royalties-registry/contracts/RoyaltiesRegistryPermissioned.sol:RoyaltiesRegistryPermissioned",
        "label": "royaltiesByTokenAndTokenId",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes32,t_struct(RoyaltiesSet)13129_storage)"
      },
      {
        "astId": 13139,
        "contract": "@rarible/royalties-registry/contracts/RoyaltiesRegistryPermissioned.sol:RoyaltiesRegistryPermissioned",
        "label": "royaltiesByToken",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_address,t_struct(RoyaltiesSet)13129_storage)"
      },
      {
        "astId": 13144,
        "contract": "@rarible/royalties-registry/contracts/RoyaltiesRegistryPermissioned.sol:RoyaltiesRegistryPermissioned",
        "label": "royaltiesProviders",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 13149,
        "contract": "@rarible/royalties-registry/contracts/RoyaltiesRegistryPermissioned.sol:RoyaltiesRegistryPermissioned",
        "label": "royaltiesAllowed",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 14052,
        "contract": "@rarible/royalties-registry/contracts/RoyaltiesRegistryPermissioned.sol:RoyaltiesRegistryPermissioned",
        "label": "__gap",
        "offset": 0,
        "slot": "155",
        "type": "t_array(t_uint256)45_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Part)11574_storage)dyn_storage": {
        "base": "t_struct(Part)11574_storage",
        "encoding": "dynamic_array",
        "label": "struct LibPart.Part[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(RoyaltiesSet)13129_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RoyaltiesRegistryPermissioned.RoyaltiesSet)",
        "numberOfBytes": "32",
        "value": "t_struct(RoyaltiesSet)13129_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)39_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)39_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoyaltiesSet)13129_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct RoyaltiesRegistryPermissioned.RoyaltiesSet)",
        "numberOfBytes": "32",
        "value": "t_struct(RoyaltiesSet)13129_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)3264_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.AddressSet",
        "members": [
          {
            "astId": 3263,
            "contract": "@rarible/royalties-registry/contracts/RoyaltiesRegistryPermissioned.sol:RoyaltiesRegistryPermissioned",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2999_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Part)11574_storage": {
        "encoding": "inplace",
        "label": "struct LibPart.Part",
        "members": [
          {
            "astId": 11571,
            "contract": "@rarible/royalties-registry/contracts/RoyaltiesRegistryPermissioned.sol:RoyaltiesRegistryPermissioned",
            "label": "account",
            "offset": 0,
            "slot": "0",
            "type": "t_address_payable"
          },
          {
            "astId": 11573,
            "contract": "@rarible/royalties-registry/contracts/RoyaltiesRegistryPermissioned.sol:RoyaltiesRegistryPermissioned",
            "label": "value",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)39_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 36,
            "contract": "@rarible/royalties-registry/contracts/RoyaltiesRegistryPermissioned.sol:RoyaltiesRegistryPermissioned",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(AddressSet)3264_storage"
          },
          {
            "astId": 38,
            "contract": "@rarible/royalties-registry/contracts/RoyaltiesRegistryPermissioned.sol:RoyaltiesRegistryPermissioned",
            "label": "adminRole",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RoyaltiesSet)13129_storage": {
        "encoding": "inplace",
        "label": "struct RoyaltiesRegistryPermissioned.RoyaltiesSet",
        "members": [
          {
            "astId": 13125,
            "contract": "@rarible/royalties-registry/contracts/RoyaltiesRegistryPermissioned.sol:RoyaltiesRegistryPermissioned",
            "label": "initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 13128,
            "contract": "@rarible/royalties-registry/contracts/RoyaltiesRegistryPermissioned.sol:RoyaltiesRegistryPermissioned",
            "label": "royalties",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_struct(Part)11574_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2999_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 2994,
            "contract": "@rarible/royalties-registry/contracts/RoyaltiesRegistryPermissioned.sol:RoyaltiesRegistryPermissioned",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2998,
            "contract": "@rarible/royalties-registry/contracts/RoyaltiesRegistryPermissioned.sol:RoyaltiesRegistryPermissioned",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}