{
  "address": "0x7602B80249a09eEd9D7667aec9E7c0BA40f6B9BB",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "value",
              "type": "uint96"
            }
          ],
          "indexed": false,
          "internalType": "struct LibPart.Part[]",
          "name": "royalties",
          "type": "tuple[]"
        }
      ],
      "name": "RoyaltiesSetForContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "value",
              "type": "uint96"
            }
          ],
          "indexed": false,
          "internalType": "struct LibPart.Part[]",
          "name": "royalties",
          "type": "tuple[]"
        }
      ],
      "name": "RoyaltiesSetForToken",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "__HederaRoyaltiesRegistry_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "clearRoyaltiesType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltiesType",
          "type": "uint256"
        }
      ],
      "name": "forceSetRoyaltiesType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getProvider",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRoyalties",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "value",
              "type": "uint96"
            }
          ],
          "internalType": "struct LibPart.Part[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getRoyaltiesType",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "royaltiesByToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "initialized",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "royaltiesByTokenAndTokenId",
      "outputs": [
        {
          "internalType": "bool",
          "name": "initialized",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "royaltiesProviders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        }
      ],
      "name": "setProviderByToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "value",
              "type": "uint96"
            }
          ],
          "internalType": "struct LibPart.Part[]",
          "name": "royalties",
          "type": "tuple[]"
        }
      ],
      "name": "setRoyaltiesByToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x80338981a347f0fd3ff27cca8bf8f286202268bfa110f8fa53d1e07b39c8be79",
  "receipt": {
    "to": "0x7602B80249a09eEd9D7667aec9E7c0BA40f6B9BB",
    "from": "0x6Bf378e79F736057f64cD647e7Da99fD76800C9B",
    "contractAddress": "0x7602B80249a09eEd9D7667aec9E7c0BA40f6B9BB",
    "transactionIndex": 17,
    "gasUsed": "115216",
    "logsBloom": "0x
    "blockHash": "0xefffb34bd4479c382dd3e77f0302a6f7da9ad4d3ba4aff0cab804968b3797773",
    "transactionHash": "0x80338981a347f0fd3ff27cca8bf8f286202268bfa110f8fa53d1e07b39c8be79",
    "logs": [],
    "blockNumber": 17280741,
    "cumulativeGasUsed": "115216",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "bb392998e304b0714996efaff55adaac",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"}],\"indexed\":false,\"internalType\":\"struct LibPart.Part[]\",\"name\":\"royalties\",\"type\":\"tuple[]\"}],\"name\":\"RoyaltiesSetForContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"}],\"indexed\":false,\"internalType\":\"struct LibPart.Part[]\",\"name\":\"royalties\",\"type\":\"tuple[]\"}],\"name\":\"RoyaltiesSetForToken\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"__HederaRoyaltiesRegistry_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"clearRoyaltiesType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltiesType\",\"type\":\"uint256\"}],\"name\":\"forceSetRoyaltiesType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRoyalties\",\"outputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"}],\"internalType\":\"struct LibPart.Part[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getRoyaltiesType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"royaltiesByToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"royaltiesByTokenAndTokenId\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"royaltiesProviders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"setProviderByToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"}],\"internalType\":\"struct LibPart.Part[]\",\"name\":\"royalties\",\"type\":\"tuple[]\"}],\"name\":\"setRoyaltiesByToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"RoyaltiesSetForContract(address,(address,uint96)[])\":{\"details\":\"emitted when royalties set for token in \"},\"RoyaltiesSetForToken(address,uint256,(address,uint96)[])\":{\"details\":\"deprecated\"}},\"kind\":\"dev\",\"methods\":{\"clearRoyaltiesType(address)\":{\"details\":\"clears royalties type for token contract\"},\"forceSetRoyaltiesType(address,uint256)\":{\"details\":\"clears and sets new royalties type for token contract\"},\"getProvider(address)\":{\"details\":\"returns provider address for token contract from royaltiesProviders mapping\"},\"getRoyalties(address,uint256)\":{\"details\":\"returns royalties for token contract and token id\"},\"getRoyaltiesType(address)\":{\"details\":\"returns royalties type for token contract\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setProviderByToken(address,address)\":{\"details\":\"sets external provider for token contract, and royalties type = 4\"},\"setRoyaltiesByToken(address,(address,uint96)[])\":{\"details\":\"sets royalties for token contract in royaltiesByToken mapping and royalties type = 1\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"royaltiesByToken\":{\"details\":\"stores royalties for token contract, set in setRoyaltiesByToken() method\"},\"royaltiesByTokenAndTokenId\":{\"details\":\"deprecated\"},\"royaltiesProviders\":{\"details\":\"stores external provider and royalties type for token contract\"},\"royaltiesTypesAmount\":{\"details\":\"total amount or supported royalties types\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/royalty/HederaRoyaltiesRegistry.sol\":\"HederaRoyaltiesRegistry\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb419e68addcb82ecda3ad3974b0d2db76435ce9b08435a04d5b119a0c5d45ea5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4784c3f8a520a739dd25d76f514833a653990902d0e21601aed45bda44c87524\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x3dab19bb4a63bcbda1ee153ca291694f92f9009fad28626126b15a8503b0e5ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"@rarible/exchange-interfaces/contracts/IRoyaltiesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@rarible/lib-part/contracts/LibPart.sol\\\";\\n\\ninterface IRoyaltiesProvider {\\n    function getRoyalties(address token, uint tokenId) external returns (LibPart.Part[] memory);\\n}\\n\",\"keccak256\":\"0xf947c1e5ab670f631a6b2db55672829766ad410cf4730981202866e8c1a226ac\",\"license\":\"MIT\"},\"@rarible/lib-part/contracts/LibPart.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nlibrary LibPart {\\n    bytes32 public constant TYPE_HASH = keccak256(\\\"Part(address account,uint96 value)\\\");\\n\\n    struct Part {\\n        address payable account;\\n        uint96 value;\\n    }\\n\\n    function hash(Part memory part) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, part.account, part.value));\\n    }\\n}\\n\",\"keccak256\":\"0xd0123f7411573a6a7e1527e0d3901913d7642e504ff240d5b7c5b76a28587def\",\"license\":\"MIT\"},\"@rarible/royalties/contracts/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\nimport \\\"@rarible/lib-part/contracts/LibPart.sol\\\";\\n///\\n/// @dev Interface for the NFT Royalty Standard\\n///\\n//interface IERC2981 is IERC165 {\\ninterface IERC2981 {\\n    /// ERC165 bytes to add to interface array - set in parent contract\\n    /// implementing this standard\\n    ///\\n    /// bytes4(keccak256(\\\"royaltyInfo(uint256,uint256)\\\")) == 0x2a55205a\\n    /// bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\\n    /// _registerInterface(_INTERFACE_ID_ERC2981);\\n\\n    /// @notice Called with the sale price to determine how much royalty\\n    //          is owed and to whom.\\n    /// @param _tokenId - the NFT asset queried for royalty information\\n    /// @param _salePrice - the sale price of the NFT asset specified by _tokenId\\n    /// @return receiver - address of who should be sent the royalty payment\\n    /// @return royaltyAmount - the royalty payment amount for _salePrice\\n    function royaltyInfo(\\n        uint256 _tokenId,\\n        uint256 _salePrice\\n    ) external view returns (\\n        address receiver,\\n        uint256 royaltyAmount\\n    );\\n}\",\"keccak256\":\"0x3d5e9391e093802a14b2a3765df0faa582ae6c5d1ea813491d9923ddf9937f97\",\"license\":\"MIT\"},\"@rarible/royalties/contracts/LibRoyalties2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"@rarible/lib-part/contracts/LibPart.sol\\\";\\n\\nlibrary LibRoyalties2981 {\\n    /*\\n     * https://eips.ethereum.org/EIPS/eip-2981: bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\\n     */\\n    bytes4 constant _INTERFACE_ID_ROYALTIES = 0x2a55205a;\\n    uint96 constant _WEIGHT_VALUE = 1000000;\\n\\n    /*Method for converting amount to percent and forming LibPart*/\\n    function calculateRoyalties(address to, uint256 amount) internal view returns (LibPart.Part[] memory) {\\n        LibPart.Part[] memory result;\\n        if (amount == 0) {\\n            return result;\\n        }\\n        uint256 percent = amount * 10000 / _WEIGHT_VALUE;\\n        require(percent < 10000, \\\"Royalties 2981 exceeds 100%\\\");\\n        result = new LibPart.Part[](1);\\n        result[0].account = payable(to);\\n        result[0].value = uint96(percent);\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x45d9500be6a3d06912d6a6489457c21940970c227b99703d46098831008b3fdc\",\"license\":\"MIT\"},\"@rarible/royalties/contracts/LibRoyaltiesV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nlibrary LibRoyaltiesV1 {\\n    /*\\n     * bytes4(keccak256('getFeeBps(uint256)')) == 0x0ebd4c7f\\n     * bytes4(keccak256('getFeeRecipients(uint256)')) == 0xb9c4d9fb\\n     *\\n     * => 0x0ebd4c7f ^ 0xb9c4d9fb == 0xb7799584\\n     */\\n    bytes4 constant _INTERFACE_ID_FEES = 0xb7799584;\\n}\\n\",\"keccak256\":\"0xa69539ead11d93c9c53c97c66c01f2aa054bdc51dfc266c05c9ff59b9c648d0f\",\"license\":\"MIT\"},\"@rarible/royalties/contracts/LibRoyaltiesV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nlibrary LibRoyaltiesV2 {\\n    /*\\n     * bytes4(keccak256('getRaribleV2Royalties(uint256)')) == 0xcad96cca\\n     */\\n    bytes4 constant _INTERFACE_ID_ROYALTIES = 0xcad96cca;\\n}\\n\",\"keccak256\":\"0xf61719a8f17946a3e49cc9cba266e8e40df616166a5186acefaa09f570f2477b\",\"license\":\"MIT\"},\"@rarible/royalties/contracts/RoyaltiesV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\ninterface RoyaltiesV1 {\\n    event SecondarySaleFees(uint256 tokenId, address[] recipients, uint[] bps);\\n\\n    function getFeeRecipients(uint256 id) external view returns (address payable[] memory);\\n    function getFeeBps(uint256 id) external view returns (uint[] memory);\\n}\\n\",\"keccak256\":\"0x9dd5165b224ab2c9a5d8243b0ba296181d00470ea9d054d1afed86453a2337a8\",\"license\":\"MIT\"},\"@rarible/royalties/contracts/RoyaltiesV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@rarible/lib-part/contracts/LibPart.sol\\\";\\n\\ninterface RoyaltiesV2 {\\n    event RoyaltiesSet(uint256 tokenId, LibPart.Part[] royalties);\\n\\n    function getRaribleV2Royalties(uint256 id) external view returns (LibPart.Part[] memory);\\n}\\n\",\"keccak256\":\"0xf9ed1454eecb96c624c4b69d074d9b047f947f77b14951e1e329a22ef470bda2\",\"license\":\"MIT\"},\"contracts/interface/IHederaTokenService.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity >=0.4.9 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IHederaTokenService {\\n\\n    // Transfers cryptocurrency among two or more accounts by making the desired adjustments to their\\n    // balances. Each transfer list can specify up to 10 adjustments. Each negative amount is withdrawn\\n    // from the corresponding account (a sender), and each positive one is added to the corresponding\\n    // account (a receiver). The amounts list must sum to zero. Each amount is a number of tinybars\\n    // (there are 100,000,000 tinybars in one hbar).  If any sender account fails to have sufficient\\n    // hbars, then the entire transaction fails, and none of those transfers occur, though the\\n    // transaction fee is still charged. This transaction must be signed by the keys for all the sending\\n    // accounts, and for any receiving accounts that have receiverSigRequired == true. The signatures\\n    // are in the same order as the accounts, skipping those accounts that don't need a signature.\\n    // @custom:version 0.3.0 previous version did not include isApproval\\n    struct AccountAmount {\\n        // The Account ID, as a solidity address, that sends/receives cryptocurrency or tokens\\n        address accountID;\\n\\n        // The amount of  the lowest denomination of the given token that\\n        // the account sends(negative) or receives(positive)\\n        int64 amount;\\n\\n        // If true then the transfer is expected to be an approved allowance and the\\n        // accountID is expected to be the owner. The default is false (omitted).\\n        bool isApproval;\\n    }\\n\\n    // A sender account, a receiver account, and the serial number of an NFT of a Token with\\n    // NON_FUNGIBLE_UNIQUE type. When minting NFTs the sender will be the default AccountID instance\\n    // (0.0.0 aka 0x0) and when burning NFTs, the receiver will be the default AccountID instance.\\n    // @custom:version 0.3.0 previous version did not include isApproval\\n    struct NftTransfer {\\n        // The solidity address of the sender\\n        address senderAccountID;\\n\\n        // The solidity address of the receiver\\n        address receiverAccountID;\\n\\n        // The serial number of the NFT\\n        int64 serialNumber;\\n\\n        // If true then the transfer is expected to be an approved allowance and the\\n        // accountID is expected to be the owner. The default is false (omitted).\\n        bool isApproval;\\n    }\\n\\n    struct TokenTransferList {\\n        // The ID of the token as a solidity address\\n        address token;\\n\\n        // Applicable to tokens of type FUNGIBLE_COMMON. Multiple list of AccountAmounts, each of which\\n        // has an account and amount.\\n        AccountAmount[] transfers;\\n\\n        // Applicable to tokens of type NON_FUNGIBLE_UNIQUE. Multiple list of NftTransfers, each of\\n        // which has a sender and receiver account, including the serial number of the NFT\\n        NftTransfer[] nftTransfers;\\n    }\\n\\n    struct TransferList {\\n        // Multiple list of AccountAmounts, each of which has an account and amount.\\n        // Used to transfer hbars between the accounts in the list.\\n        AccountAmount[] transfers;\\n    }\\n\\n    // Expiry properties of a Hedera token - second, autoRenewAccount, autoRenewPeriod\\n    struct Expiry {\\n        // The epoch second at which the token should expire; if an auto-renew account and period are\\n        // specified, this is coerced to the current epoch second plus the autoRenewPeriod\\n        int64 second;\\n\\n        // ID of an account which will be automatically charged to renew the token's expiration, at\\n        // autoRenewPeriod interval, expressed as a solidity address\\n        address autoRenewAccount;\\n\\n        // The interval at which the auto-renew account will be charged to extend the token's expiry\\n        int64 autoRenewPeriod;\\n    }\\n\\n    // A Key can be a public key from either the Ed25519 or ECDSA(secp256k1) signature schemes, where\\n    // in the ECDSA(secp256k1) case we require the 33-byte compressed form of the public key. We call\\n    // these public keys <b>primitive keys</b>.\\n    // A Key can also be the ID of a smart contract instance, which is then authorized to perform any\\n    // precompiled contract action that requires this key to sign.\\n    // Note that when a Key is a smart contract ID, it <i>doesn't</i> mean the contract with that ID\\n    // will actually create a cryptographic signature. It only means that when the contract calls a\\n    // precompiled contract, the resulting \\\"child transaction\\\" will be authorized to perform any action\\n    // controlled by the Key.\\n    // Exactly one of the possible values should be populated in order for the Key to be valid.\\n    struct KeyValue {\\n\\n        // if set to true, the key of the calling Hedera account will be inherited as the token key\\n        bool inheritAccountKey;\\n\\n        // smart contract instance that is authorized as if it had signed with a key\\n        address contractId;\\n\\n        // Ed25519 public key bytes\\n        bytes ed25519;\\n\\n        // Compressed ECDSA(secp256k1) public key bytes\\n        bytes ECDSA_secp256k1;\\n\\n        // A smart contract that, if the recipient of the active message frame, should be treated\\n        // as having signed. (Note this does not mean the <i>code being executed in the frame</i>\\n        // will belong to the given contract, since it could be running another contract's code via\\n        // <tt>delegatecall</tt>. So setting this key is a more permissive version of setting the\\n        // contractID key, which also requires the code in the active message frame belong to the\\n        // the contract with the given id.)\\n        address delegatableContractId;\\n    }\\n\\n    // A list of token key types the key should be applied to and the value of the key\\n    struct TokenKey {\\n\\n        // bit field representing the key type. Keys of all types that have corresponding bits set to 1\\n        // will be created for the token.\\n        // 0th bit: adminKey\\n        // 1st bit: kycKey\\n        // 2nd bit: freezeKey\\n        // 3rd bit: wipeKey\\n        // 4th bit: supplyKey\\n        // 5th bit: feeScheduleKey\\n        // 6th bit: pauseKey\\n        // 7th bit: ignored\\n        uint keyType;\\n\\n        // the value that will be set to the key type\\n        KeyValue key;\\n    }\\n\\n    // Basic properties of a Hedera Token - name, symbol, memo, tokenSupplyType, maxSupply,\\n    // treasury, freezeDefault. These properties are related both to Fungible and NFT token types.\\n    struct HederaToken {\\n        // The publicly visible name of the token. The token name is specified as a Unicode string.\\n        // Its UTF-8 encoding cannot exceed 100 bytes, and cannot contain the 0 byte (NUL).\\n        string name;\\n\\n        // The publicly visible token symbol. The token symbol is specified as a Unicode string.\\n        // Its UTF-8 encoding cannot exceed 100 bytes, and cannot contain the 0 byte (NUL).\\n        string symbol;\\n\\n        // The ID of the account which will act as a treasury for the token as a solidity address.\\n        // This account will receive the specified initial supply or the newly minted NFTs in\\n        // the case for NON_FUNGIBLE_UNIQUE Type\\n        address treasury;\\n\\n        // The memo associated with the token (UTF-8 encoding max 100 bytes)\\n        string memo;\\n\\n        // IWA compatibility. Specified the token supply type. Defaults to INFINITE\\n        bool tokenSupplyType;\\n\\n        // IWA Compatibility. Depends on TokenSupplyType. For tokens of type FUNGIBLE_COMMON - the\\n        // maximum number of tokens that can be in circulation. For tokens of type NON_FUNGIBLE_UNIQUE -\\n        // the maximum number of NFTs (serial numbers) that can be minted. This field can never be changed!\\n        int64 maxSupply;\\n\\n        // The default Freeze status (frozen or unfrozen) of Hedera accounts relative to this token. If\\n        // true, an account must be unfrozen before it can receive the token\\n        bool freezeDefault;\\n\\n        // list of keys to set to the token\\n        TokenKey[] tokenKeys;\\n\\n        // expiry properties of a Hedera token - second, autoRenewAccount, autoRenewPeriod\\n        Expiry expiry;\\n    }\\n\\n    // Additional post creation fungible and non fungible properties of a Hedera Token.\\n    struct TokenInfo {\\n        // Basic properties of a Hedera Token\\n        HederaToken token;\\n\\n        // The number of tokens (fungible) or serials (non-fungible) of the token\\n        int64 totalSupply;\\n\\n        // Specifies whether the token is deleted or not\\n        bool deleted;\\n\\n        // Specifies whether the token kyc was defaulted with KycNotApplicable (true) or Revoked (false)\\n        bool defaultKycStatus;\\n\\n        // Specifies whether the token is currently paused or not\\n        bool pauseStatus;\\n\\n        // The fixed fees collected when transferring the token\\n        FixedFee[] fixedFees;\\n\\n        // The fractional fees collected when transferring the token\\n        FractionalFee[] fractionalFees;\\n\\n        // The royalty fees collected when transferring the token\\n        RoyaltyFee[] royaltyFees;\\n\\n        // The ID of the network ledger\\n        string ledgerId;\\n    }\\n\\n    // Additional fungible properties of a Hedera Token.\\n    struct FungibleTokenInfo {\\n        // The shared hedera token info\\n        TokenInfo tokenInfo;\\n\\n        // The number of decimal places a token is divisible by\\n        int32 decimals;\\n    }\\n\\n    // Additional non fungible properties of a Hedera Token.\\n    struct NonFungibleTokenInfo {\\n        // The shared hedera token info\\n        TokenInfo tokenInfo;\\n\\n        // The serial number of the nft\\n        int64 serialNumber;\\n\\n        // The account id specifying the owner of the non fungible token\\n        address ownerId;\\n\\n        // The epoch second at which the token was created.\\n        int64 creationTime;\\n\\n        // The unique metadata of the NFT\\n        bytes metadata;\\n\\n        // The account id specifying an account that has been granted spending permissions on this nft\\n        address spenderId;\\n    }\\n\\n    // A fixed number of units (hbar or token) to assess as a fee during a transfer of\\n    // units of the token to which this fixed fee is attached. The denomination of\\n    // the fee depends on the values of tokenId, useHbarsForPayment and\\n    // useCurrentTokenForPayment. Exactly one of the values should be set.\\n    struct FixedFee {\\n\\n        int64 amount;\\n\\n        // Specifies ID of token that should be used for fixed fee denomination\\n        address tokenId;\\n\\n        // Specifies this fixed fee should be denominated in Hbar\\n        bool useHbarsForPayment;\\n\\n        // Specifies this fixed fee should be denominated in the Token currently being created\\n        bool useCurrentTokenForPayment;\\n\\n        // The ID of the account to receive the custom fee, expressed as a solidity address\\n        address feeCollector;\\n    }\\n\\n    // A fraction of the transferred units of a token to assess as a fee. The amount assessed will never\\n    // be less than the given minimumAmount, and never greater than the given maximumAmount.  The\\n    // denomination is always units of the token to which this fractional fee is attached.\\n    struct FractionalFee {\\n        // A rational number's numerator, used to set the amount of a value transfer to collect as a custom fee\\n        int64 numerator;\\n\\n        // A rational number's denominator, used to set the amount of a value transfer to collect as a custom fee\\n        int64 denominator;\\n\\n        // The minimum amount to assess\\n        int64 minimumAmount;\\n\\n        // The maximum amount to assess (zero implies no maximum)\\n        int64 maximumAmount;\\n        bool netOfTransfers;\\n\\n        // The ID of the account to receive the custom fee, expressed as a solidity address\\n        address feeCollector;\\n    }\\n\\n    // A fee to assess during a transfer that changes ownership of an NFT. Defines the fraction of\\n    // the fungible value exchanged for an NFT that the ledger should collect as a royalty. (\\\"Fungible\\n    // value\\\" includes both \\u210f and units of fungible HTS tokens.) When the NFT sender does not receive\\n    // any fungible value, the ledger will assess the fallback fee, if present, to the new NFT owner.\\n    // Royalty fees can only be added to tokens of type type NON_FUNGIBLE_UNIQUE.\\n    struct RoyaltyFee {\\n        // A fraction's numerator of fungible value exchanged for an NFT to collect as royalty\\n        int64 numerator;\\n\\n        // A fraction's denominator of fungible value exchanged for an NFT to collect as royalty\\n        int64 denominator;\\n\\n        // If present, the fee to assess to the NFT receiver when no fungible value\\n        // is exchanged with the sender. Consists of:\\n        // amount: the amount to charge for the fee\\n        // tokenId: Specifies ID of token that should be used for fixed fee denomination\\n        // useHbarsForPayment: Specifies this fee should be denominated in Hbar\\n        int64 amount;\\n        address tokenId;\\n        bool useHbarsForPayment;\\n\\n        // The ID of the account to receive the custom fee, expressed as a solidity address\\n        address feeCollector;\\n    }\\n\\n    /**********************\\n     * Direct HTS Calls   *\\n     **********************/\\n\\n    // Performs transfers among combinations of tokens and hbars\\n    // @param transferList the list of hbar transfers to do\\n    // @param tokenTransfers the list of token transfers to do\\n    // @custom:version 0.3.0 the signature of the previous version was cryptoTransfer(TokenTransferList[] memory tokenTransfers)\\n    function cryptoTransfer(TransferList memory transferList, TokenTransferList[] memory tokenTransfers)\\n        external\\n        returns (int64 responseCode);\\n\\n    // Mints an amount of the token to the defined treasury account\\n    // @param token The token for which to mint tokens. If token does not exist, transaction results in\\n    //              INVALID_TOKEN_ID\\n    // @param amount Applicable to tokens of type FUNGIBLE_COMMON. The amount to mint to the Treasury Account.\\n    //               Amount must be a positive non-zero number represented in the lowest denomination of the\\n    //               token. The new supply must be lower than 2^63.\\n    // @param metadata Applicable to tokens of type NON_FUNGIBLE_UNIQUE. A list of metadata that are being created.\\n    //                 Maximum allowed size of each metadata is 100 bytes\\n    // @return responseCode The response code for the status of the request. SUCCESS is 22.\\n    // @return newTotalSupply The new supply of tokens. For NFTs it is the total count of NFTs\\n    // @return serialNumbers If the token is an NFT the newly generate serial numbers, othersise empty.\\n    function mintToken(\\n        address token,\\n        int64 amount,\\n        bytes[] memory metadata\\n    )\\n        external\\n        returns (\\n            int64 responseCode,\\n            int64 newTotalSupply,\\n            int64[] memory serialNumbers\\n        );\\n\\n    // Burns an amount of the token from the defined treasury account\\n    // @param token The token for which to burn tokens. If token does not exist, transaction results in\\n    //              INVALID_TOKEN_ID\\n    // @param amount  Applicable to tokens of type FUNGIBLE_COMMON. The amount to burn from the Treasury Account.\\n    //                Amount must be a positive non-zero number, not bigger than the token balance of the treasury\\n    //                account (0; balance], represented in the lowest denomination.\\n    // @param serialNumbers Applicable to tokens of type NON_FUNGIBLE_UNIQUE. The list of serial numbers to be burned.\\n    // @return responseCode The response code for the status of the request. SUCCESS is 22.\\n    // @return newTotalSupply The new supply of tokens. For NFTs it is the total count of NFTs\\n    function burnToken(\\n        address token,\\n        int64 amount,\\n        int64[] memory serialNumbers\\n    ) external returns (int64 responseCode, int64 newTotalSupply);\\n\\n    //  Associates the provided account with the provided tokens. Must be signed by the provided\\n    //  Account's key or called from the accounts contract key\\n    //  If the provided account is not found, the transaction will resolve to INVALID_ACCOUNT_ID.\\n    //  If the provided account has been deleted, the transaction will resolve to ACCOUNT_DELETED.\\n    //  If any of the provided tokens is not found, the transaction will resolve to INVALID_TOKEN_REF.\\n    //  If any of the provided tokens has been deleted, the transaction will resolve to TOKEN_WAS_DELETED.\\n    //  If an association between the provided account and any of the tokens already exists, the\\n    //  transaction will resolve to TOKEN_ALREADY_ASSOCIATED_TO_ACCOUNT.\\n    //  If the provided account's associations count exceed the constraint of maximum token associations\\n    //    per account, the transaction will resolve to TOKENS_PER_ACCOUNT_LIMIT_EXCEEDED.\\n    //  On success, associations between the provided account and tokens are made and the account is\\n    //    ready to interact with the tokens.\\n    // @param account The account to be associated with the provided tokens\\n    // @param tokens The tokens to be associated with the provided account. In the case of NON_FUNGIBLE_UNIQUE\\n    //               Type, once an account is associated, it can hold any number of NFTs (serial numbers) of that\\n    //               token type\\n    // @return responseCode The response code for the status of the request. SUCCESS is 22.\\n    function associateTokens(address account, address[] memory tokens)\\n        external\\n        returns (int64 responseCode);\\n\\n    // Single-token variant of associateTokens. Will be mapped to a single entry array call of associateTokens\\n    // @param account The account to be associated with the provided token\\n    // @param token The token to be associated with the provided account\\n    function associateToken(address account, address token)\\n        external\\n        returns (int64 responseCode);\\n\\n    // Dissociates the provided account with the provided tokens. Must be signed by the provided\\n    // Account's key.\\n    // If the provided account is not found, the transaction will resolve to INVALID_ACCOUNT_ID.\\n    // If the provided account has been deleted, the transaction will resolve to ACCOUNT_DELETED.\\n    // If any of the provided tokens is not found, the transaction will resolve to INVALID_TOKEN_REF.\\n    // If any of the provided tokens has been deleted, the transaction will resolve to TOKEN_WAS_DELETED.\\n    // If an association between the provided account and any of the tokens does not exist, the\\n    // transaction will resolve to TOKEN_NOT_ASSOCIATED_TO_ACCOUNT.\\n    // If a token has not been deleted and has not expired, and the user has a nonzero balance, the\\n    // transaction will resolve to TRANSACTION_REQUIRES_ZERO_TOKEN_BALANCES.\\n    // If a <b>fungible token</b> has expired, the user can disassociate even if their token balance is\\n    // not zero.\\n    // If a <b>non fungible token</b> has expired, the user can <b>not</b> disassociate if their token\\n    // balance is not zero. The transaction will resolve to TRANSACTION_REQUIRED_ZERO_TOKEN_BALANCES.\\n    // On success, associations between the provided account and tokens are removed.\\n    // @param account The account to be dissociated from the provided tokens\\n    // @param tokens The tokens to be dissociated from the provided account.\\n    // @return responseCode The response code for the status of the request. SUCCESS is 22.\\n    function dissociateTokens(address account, address[] memory tokens)\\n        external\\n        returns (int64 responseCode);\\n\\n    // Single-token variant of dissociateTokens. Will be mapped to a single entry array call of dissociateTokens\\n    // @param account The account to be associated with the provided token\\n    // @param token The token to be associated with the provided account\\n    function dissociateToken(address account, address token)\\n        external\\n        returns (int64 responseCode);\\n\\n    // Creates a Fungible Token with the specified properties\\n    // @param token the basic properties of the token being created\\n    // @param initialTotalSupply Specifies the initial supply of tokens to be put in circulation. The\\n    // initial supply is sent to the Treasury Account. The supply is in the lowest denomination possible.\\n    // @param decimals the number of decimal places a token is divisible by\\n    // @return responseCode The response code for the status of the request. SUCCESS is 22.\\n    // @return tokenAddress the created token's address\\n    function createFungibleToken(\\n        HederaToken memory token,\\n        int64 initialTotalSupply,\\n        int32 decimals\\n    ) external payable returns (int64 responseCode, address tokenAddress);\\n\\n    // Creates a Fungible Token with the specified properties\\n    // @param token the basic properties of the token being created\\n    // @param initialTotalSupply Specifies the initial supply of tokens to be put in circulation. The\\n    // initial supply is sent to the Treasury Account. The supply is in the lowest denomination possible.\\n    // @param decimals the number of decimal places a token is divisible by.\\n    // @param fixedFees list of fixed fees to apply to the token\\n    // @param fractionalFees list of fractional fees to apply to the token\\n    // @return responseCode The response code for the status of the request. SUCCESS is 22.\\n    // @return tokenAddress the created token's address\\n    function createFungibleTokenWithCustomFees(\\n        HederaToken memory token,\\n        int64 initialTotalSupply,\\n        int32 decimals,\\n        FixedFee[] memory fixedFees,\\n        FractionalFee[] memory fractionalFees\\n    ) external payable returns (int64 responseCode, address tokenAddress);\\n\\n    // Creates an Non Fungible Unique Token with the specified properties\\n    // @param token the basic properties of the token being created\\n    // @return responseCode The response code for the status of the request. SUCCESS is 22.\\n    // @return tokenAddress the created token's address\\n    function createNonFungibleToken(HederaToken memory token)\\n        external\\n        payable\\n        returns (int64 responseCode, address tokenAddress);\\n\\n    // Creates an Non Fungible Unique Token with the specified properties\\n    // @param token the basic properties of the token being created\\n    // @param fixedFees list of fixed fees to apply to the token\\n    // @param royaltyFees list of royalty fees to apply to the token\\n    // @return responseCode The response code for the status of the request. SUCCESS is 22.\\n    // @return tokenAddress the created token's address\\n    function createNonFungibleTokenWithCustomFees(\\n        HederaToken memory token,\\n        FixedFee[] memory fixedFees,\\n        RoyaltyFee[] memory royaltyFees\\n    ) external payable returns (int64 responseCode, address tokenAddress);\\n\\n    /**********************\\n     * ABIV1 calls        *\\n     **********************/\\n\\n    // Initiates a Fungible Token Transfer\\n    // @param token The ID of the token as a solidity address\\n    // @param accountId account to do a transfer to/from\\n    // @param amount The amount from the accountId at the same index\\n    function transferTokens(\\n        address token,\\n        address[] memory accountId,\\n        int64[] memory amount\\n    ) external returns (int64 responseCode);\\n\\n    // Initiates a Non-Fungable Token Transfer\\n    // @param token The ID of the token as a solidity address\\n    // @param sender the sender of an nft\\n    // @param receiver the receiver of the nft sent by the same index at sender\\n    // @param serialNumber the serial number of the nft sent by the same index at sender\\n    function transferNFTs(\\n        address token,\\n        address[] memory sender,\\n        address[] memory receiver,\\n        int64[] memory serialNumber\\n    ) external returns (int64 responseCode);\\n\\n    // Transfers tokens where the calling account/contract is implicitly the first entry in the token transfer list,\\n    // where the amount is the value needed to zero balance the transfers. Regular signing rules apply for sending\\n    // (positive amount) or receiving (negative amount)\\n    // @param token The token to transfer to/from\\n    // @param sender The sender for the transaction\\n    // @param recipient The receiver of the transaction\\n    // @param amount Non-negative value to send. a negative value will result in a failure.\\n    function transferToken(\\n        address token,\\n        address sender,\\n        address recipient,\\n        int64 amount\\n    ) external returns (int64 responseCode);\\n\\n    // Transfers tokens where the calling account/contract is implicitly the first entry in the token transfer list,\\n    // where the amount is the value needed to zero balance the transfers. Regular signing rules apply for sending\\n    // (positive amount) or receiving (negative amount)\\n    // @param token The token to transfer to/from\\n    // @param sender The sender for the transaction\\n    // @param recipient The receiver of the transaction\\n    // @param serialNumber The serial number of the NFT to transfer.\\n    function transferNFT(\\n        address token,\\n        address sender,\\n        address recipient,\\n        int64 serialNumber\\n    ) external returns (int64 responseCode);\\n\\n    // Allows spender to withdraw from your account multiple times, up to the value amount. If this function is called\\n    // again it overwrites the current allowance with value.\\n    // Only Applicable to Fungible Tokens\\n    // @param token The hedera token address to approve\\n    // @param spender the account address authorized to spend\\n    // @param amount the amount of tokens authorized to spend.\\n    // @return responseCode The response code for the status of the request. SUCCESS is 22.\\n    function approve(\\n        address token,\\n        address spender,\\n        uint256 amount\\n    ) external returns (int64 responseCode);\\n\\n    // Transfers `amount` tokens from `from` to `to` using the\\n    //  allowance mechanism. `amount` is then deducted from the caller's allowance.\\n    // Only applicable to fungible tokens\\n    // @param token The address of the fungible Hedera token to transfer\\n    // @param from The account address of the owner of the token, on the behalf of which to transfer `amount` tokens\\n    // @param to The account address of the receiver of the `amount` tokens\\n    // @param amount The amount of tokens to transfer from `from` to `to`\\n    // @return responseCode The response code for the status of the request. SUCCESS is 22.\\n    function transferFrom(address token, address from, address to, uint256 amount) external returns (int64 responseCode);\\n\\n    // Returns the amount which spender is still allowed to withdraw from owner.\\n    // Only Applicable to Fungible Tokens\\n    // @param token The Hedera token address to check the allowance of\\n    // @param owner the owner of the tokens to be spent\\n    // @param spender the spender of the tokens\\n    // @return responseCode The response code for the status of the request. SUCCESS is 22.\\n    // @return allowance The amount which spender is still allowed to withdraw from owner.\\n    function allowance(\\n        address token,\\n        address owner,\\n        address spender\\n    ) external returns (int64 responseCode, uint256 allowance);\\n\\n    // Allow or reaffirm the approved address to transfer an NFT the approved address does not own.\\n    // Only Applicable to NFT Tokens\\n    // @param token The Hedera NFT token address to approve\\n    // @param approved The new approved NFT controller.  To revoke approvals pass in the zero address.\\n    // @param serialNumber The NFT serial number  to approve\\n    // @return responseCode The response code for the status of the request. SUCCESS is 22.\\n    function approveNFT(\\n        address token,\\n        address approved,\\n        uint256 serialNumber\\n    ) external returns (int64 responseCode);\\n\\n    // Transfers `serialNumber` of `token` from `from` to `to` using the allowance mechanism.\\n    // Only applicable to NFT tokens\\n    // @param token The address of the non-fungible Hedera token to transfer\\n    // @param from The account address of the owner of `serialNumber` of `token`\\n    // @param to The account address of the receiver of `serialNumber`\\n    // @param serialNumber The NFT serial number to transfer\\n    // @return responseCode The response code for the status of the request. SUCCESS is 22.\\n    function transferFromNFT(address token, address from, address to, uint256 serialNumber) external returns (int64 responseCode);\\n\\n    // Get the approved address for a single NFT\\n    // Only Applicable to NFT Tokens\\n    // @param token The Hedera NFT token address to check approval\\n    // @param serialNumber The NFT to find the approved address for\\n    // @return responseCode The response code for the status of the request. SUCCESS is 22.\\n    // @return approved The approved address for this NFT, or the zero address if there is none\\n    function getApproved(address token, uint256 serialNumber)\\n        external\\n        returns (int64 responseCode, address approved);\\n\\n    // Enable or disable approval for a third party (\\\"operator\\\") to manage\\n    //  all of `msg.sender`'s assets\\n    // @param token The Hedera NFT token address to approve\\n    // @param operator Address to add to the set of authorized operators\\n    // @param approved True if the operator is approved, false to revoke approval\\n    // @return responseCode The response code for the status of the request. SUCCESS is 22.\\n    function setApprovalForAll(\\n        address token,\\n        address operator,\\n        bool approved\\n    ) external returns (int64 responseCode);\\n\\n    // Query if an address is an authorized operator for another address\\n    // Only Applicable to NFT Tokens\\n    // @param token The Hedera NFT token address to approve\\n    // @param owner The address that owns the NFTs\\n    // @param operator The address that acts on behalf of the owner\\n    // @return responseCode The response code for the status of the request. SUCCESS is 22.\\n    // @return approved True if `operator` is an approved operator for `owner`, false otherwise\\n    function isApprovedForAll(\\n        address token,\\n        address owner,\\n        address operator\\n    ) external returns (int64 responseCode, bool approved);\\n\\n    // Query if token account is frozen\\n    // @param token The token address to check\\n    // @param account The account address associated with the token\\n    // @return responseCode The response code for the status of the request. SUCCESS is 22.\\n    // @return frozen True if `account` is frozen for `token`\\n    function isFrozen(address token, address account)\\n        external\\n        returns (int64 responseCode, bool frozen);\\n\\n    // Query if token account has kyc granted\\n    // @param token The token address to check\\n    // @param account The account address associated with the token\\n    // @return responseCode The response code for the status of the request. SUCCESS is 22.\\n    // @return kycGranted True if `account` has kyc granted for `token`\\n    function isKyc(address token, address account)\\n        external\\n        returns (int64 responseCode, bool kycGranted);\\n\\n    // Operation to delete token\\n    // @param token The token address to be deleted\\n    // @return responseCode The response code for the status of the request. SUCCESS is 22.\\n    function deleteToken(address token) external returns (int64 responseCode);\\n\\n    // Query token custom fees\\n    // @param token The token address to check\\n    // @return responseCode The response code for the status of the request. SUCCESS is 22.\\n    // @return fixedFees Set of fixed fees for `token`\\n    // @return fractionalFees Set of fractional fees for `token`\\n    // @return royaltyFees Set of royalty fees for `token`\\n    function getTokenCustomFees(address token)\\n        external\\n        returns (int64 responseCode, FixedFee[] memory fixedFees, FractionalFee[] memory fractionalFees, RoyaltyFee[] memory royaltyFees);\\n\\n    // Query token default freeze status\\n    // @param token The token address to check\\n    // @return responseCode The response code for the status of the request. SUCCESS is 22.\\n    // @return defaultFreezeStatus True if `token` default freeze status is frozen.\\n    function getTokenDefaultFreezeStatus(address token)\\n        external\\n        returns (int64 responseCode, bool defaultFreezeStatus);\\n\\n    // Query token default kyc status\\n    // @param token The token address to check\\n    // @return responseCode The response code for the status of the request. SUCCESS is 22.\\n    // @return defaultKycStatus True if `token` default kyc status is KycNotApplicable and false if Revoked.\\n    function getTokenDefaultKycStatus(address token)\\n        external\\n        returns (int64 responseCode, bool defaultKycStatus);\\n\\n    // Query token expiry info\\n    // @param token The token address to check\\n    // @return responseCode The response code for the status of the request. SUCCESS is 22.\\n    // @return expiry Expiry info for `token`\\n    function getTokenExpiryInfo(address token)\\n        external\\n        returns (int64 responseCode, Expiry memory expiry);\\n\\n    // Query fungible token info\\n    // @param token The token address to check\\n    // @return responseCode The response code for the status of the request. SUCCESS is 22.\\n    // @return fungibleTokenInfo FungibleTokenInfo info for `token`\\n    function getFungibleTokenInfo(address token)\\n        external\\n        returns (int64 responseCode, FungibleTokenInfo memory fungibleTokenInfo);\\n\\n    // Query token info\\n    // @param token The token address to check\\n    // @return responseCode The response code for the status of the request. SUCCESS is 22.\\n    // @return tokenInfo TokenInfo info for `token`\\n    function getTokenInfo(address token)\\n        external\\n        returns (int64 responseCode, TokenInfo memory tokenInfo);\\n\\n    // Query token KeyValue\\n    // @param token The token address to check\\n    // @param keyType The keyType of the desired KeyValue\\n    // @return responseCode The response code for the status of the request. SUCCESS is 22.\\n    // @return key KeyValue info for key of type `keyType`\\n    function getTokenKey(address token, uint keyType)\\n        external\\n        returns (int64 responseCode, KeyValue memory key);\\n\\n    // Query non fungible token info\\n    // @param token The token address to check\\n    // @param serialNumber The NFT serialNumber to check\\n    // @return responseCode The response code for the status of the request. SUCCESS is 22.\\n    // @return nonFungibleTokenInfo NonFungibleTokenInfo info for `token` `serialNumber`\\n    function getNonFungibleTokenInfo(address token, int64 serialNumber)\\n        external\\n        returns (int64 responseCode, NonFungibleTokenInfo memory nonFungibleTokenInfo);\\n\\n    // Operation to freeze token account\\n    // @param token The token address\\n    // @param account The account address to be frozen\\n    // @return responseCode The response code for the status of the request. SUCCESS is 22.\\n    function freezeToken(address token, address account)\\n        external\\n        returns (int64 responseCode);\\n\\n    // Operation to unfreeze token account\\n    // @param token The token address\\n    // @param account The account address to be unfrozen\\n    // @return responseCode The response code for the status of the request. SUCCESS is 22.\\n    function unfreezeToken(address token, address account)\\n        external\\n        returns (int64 responseCode);\\n\\n    // Operation to grant kyc to token account\\n    // @param token The token address\\n    // @param account The account address to grant kyc\\n    // @return responseCode The response code for the status of the request. SUCCESS is 22.\\n    function grantTokenKyc(address token, address account)\\n        external\\n        returns (int64 responseCode);\\n\\n    // Operation to revoke kyc to token account\\n    // @param token The token address\\n    // @param account The account address to revoke kyc\\n    // @return responseCode The response code for the status of the request. SUCCESS is 22.\\n    function revokeTokenKyc(address token, address account)\\n        external\\n        returns (int64 responseCode);\\n\\n    // Operation to pause token\\n    // @param token The token address to be paused\\n    // @return responseCode The response code for the status of the request. SUCCESS is 22.\\n    function pauseToken(address token) external returns (int64 responseCode);\\n\\n    // Operation to unpause token\\n    // @param token The token address to be unpaused\\n    // @return responseCode The response code for the status of the request. SUCCESS is 22.\\n    function unpauseToken(address token) external returns (int64 responseCode);\\n\\n    // Operation to wipe fungible tokens from account\\n    // @param token The token address\\n    // @param account The account address to revoke kyc\\n    // @param amount The number of tokens to wipe\\n    // @return responseCode The response code for the status of the request. SUCCESS is 22.\\n    function wipeTokenAccount(\\n        address token,\\n        address account,\\n        int64 amount\\n    ) external returns (int64 responseCode);\\n\\n    // Operation to wipe non fungible tokens from account\\n    // @param token The token address\\n    // @param account The account address to revoke kyc\\n    // @param  serialNumbers The serial numbers of token to wipe\\n    // @return responseCode The response code for the status of the request. SUCCESS is 22.\\n    function wipeTokenAccountNFT(\\n        address token,\\n        address account,\\n        int64[] memory serialNumbers\\n    ) external returns (int64 responseCode);\\n\\n    // Operation to update token info\\n    // @param token The token address\\n    // @param tokenInfo The hedera token info to update token with\\n    // @return responseCode The response code for the status of the request. SUCCESS is 22.\\n    function updateTokenInfo(address token, HederaToken memory tokenInfo)\\n        external\\n        returns (int64 responseCode);\\n\\n    // Operation to update token expiry info\\n    // @param token The token address\\n    // @param expiryInfo The hedera token expiry info\\n    // @return responseCode The response code for the status of the request. SUCCESS is 22.\\n    function updateTokenExpiryInfo(address token, Expiry memory expiryInfo)\\n        external\\n        returns (int64 responseCode);\\n\\n    // Operation to update token expiry info\\n    // @param token The token address\\n    // @param keys The token keys\\n    // @return responseCode The response code for the status of the request. SUCCESS is 22.\\n    function updateTokenKeys(address token, TokenKey[] memory keys)\\n        external\\n        returns (int64 responseCode);\\n\\n    // Query if valid token found for the given address\\n    // @param token The token address\\n    // @return responseCode The response code for the status of the request. SUCCESS is 22.\\n    // @return isToken True if valid token found for the given address\\n    function isToken(address token)\\n        external returns\\n        (int64 responseCode, bool isToken);\\n\\n    // Query to return the token type for a given address\\n    // @param token The token address\\n    // @return responseCode The response code for the status of the request. SUCCESS is 22.\\n    // @return tokenType the token type. 0 is FUNGIBLE_COMMON, 1 is NON_FUNGIBLE_UNIQUE, -1 is UNRECOGNIZED\\n    function getTokenType(address token)\\n        external returns\\n        (int64 responseCode, int32 tokenType);\\n\\n    // Initiates a Redirect For Token\\n    // @param token The token address\\n    // @param encodedFunctionSelector The function selector from the ERC20 interface + the bytes input for the function called\\n    // @return responseCode The response code for the status of the request. SUCCESS is 22.\\n    // @return response The result of the call that had been encoded and sent for execution.\\n    function redirectForToken(address token, bytes memory encodedFunctionSelector) external returns (int64 responseCode, bytes memory response);\\n\\n    // Update the custom fees for a fungible token\\n    // @param token The token address\\n    // @param fixedFees Set of fixed fees for `token`\\n    // @param fractionalFees Set of fractional fees for `token`\\n    // @return responseCode The response code for the status of the request. SUCCESS is 22.\\n    function updateFungibleTokenCustomFees(address token,  IHederaTokenService.FixedFee[] memory fixedFees, IHederaTokenService.FractionalFee[] memory fractionalFees) external returns (int64 responseCode);\\n\\n    // Update the custom fees for a non-fungible token\\n    // @param token The token address\\n    // @param fixedFees Set of fixed fees for `token`\\n    // @param royaltyFees Set of royalty fees for `token`\\n    // @return responseCode The response code for the status of the request. SUCCESS is 22.\\n    function updateNonFungibleTokenCustomFees(address token, IHederaTokenService.FixedFee[] memory fixedFees, IHederaTokenService.RoyaltyFee[] memory royaltyFees) external returns (int64 responseCode);\\n}\\n\",\"keccak256\":\"0x3b4f22d4379957a6d8db36d73ea0c8ebee6a9156275a97ed4a0cf6b1c5069acf\",\"license\":\"Apache-2.0\"},\"contracts/royalty/HederaRoyaltiesRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@rarible/exchange-interfaces/contracts/IRoyaltiesProvider.sol\\\";\\nimport \\\"@rarible/royalties/contracts/LibRoyaltiesV2.sol\\\";\\nimport \\\"@rarible/royalties/contracts/LibRoyaltiesV1.sol\\\";\\nimport \\\"@rarible/royalties/contracts/LibRoyalties2981.sol\\\";\\nimport \\\"@rarible/royalties/contracts/RoyaltiesV1.sol\\\";\\nimport \\\"@rarible/royalties/contracts/RoyaltiesV2.sol\\\";\\nimport \\\"@rarible/royalties/contracts/IERC2981.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"../interface/IHederaTokenService.sol\\\";\\n\\ncontract HederaRoyaltiesRegistry is IRoyaltiesProvider, OwnableUpgradeable {\\n    /// @dev deprecated\\n    event RoyaltiesSetForToken(address indexed token, uint indexed tokenId, LibPart.Part[] royalties);\\n    /// @dev emitted when royalties set for token in \\n    event RoyaltiesSetForContract(address indexed token, LibPart.Part[] royalties);\\n\\n    /// @dev struct to store royalties in royaltiesByToken\\n    struct RoyaltiesSet {\\n        bool initialized;\\n        LibPart.Part[] royalties;\\n    }\\n\\n    /// @dev deprecated\\n    mapping(bytes32 => RoyaltiesSet) public royaltiesByTokenAndTokenId;\\n    /// @dev stores royalties for token contract, set in setRoyaltiesByToken() method\\n    mapping(address => RoyaltiesSet) public royaltiesByToken;\\n    /// @dev stores external provider and royalties type for token contract\\n    mapping(address => uint) public royaltiesProviders;\\n\\n    /// @dev total amount or supported royalties types\\n    // 0 - royalties type is unset\\n    // 1 - royaltiesByToken, 2 - v2, 3 - v1,\\n    // 4 - external provider, 5 - EIP-2981\\n    // 6 - unsupported/nonexistent royalties type\\n    uint constant royaltiesTypesAmount = 6;\\n\\n    function __HederaRoyaltiesRegistry_init() external initializer {\\n        __Ownable_init_unchained();\\n    }\\n\\n    /// @dev sets external provider for token contract, and royalties type = 4\\n    function setProviderByToken(address token, address provider) external {\\n        checkOwner(token);\\n        setRoyaltiesType(token, 4, provider);\\n    }\\n\\n    /// @dev returns provider address for token contract from royaltiesProviders mapping\\n    function getProvider(address token) public view returns(address) {\\n        return address(royaltiesProviders[token]);\\n    }\\n\\n    /// @dev returns royalties type for token contract\\n    function getRoyaltiesType(address token) external view returns(uint) {\\n        return _getRoyaltiesType(royaltiesProviders[token]);\\n    }\\n\\n    /// @dev returns royalties type from uint\\n    function _getRoyaltiesType(uint data) internal pure returns(uint) {\\n        for (uint i = 1; i <= royaltiesTypesAmount; ++i) {\\n            if (data / 2**(256-i) == 1) {\\n                return i;\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    /// @dev sets royalties type for token contract\\n    function setRoyaltiesType(address token, uint royaltiesType, address royaltiesProvider) internal {\\n        require(royaltiesType > 0 && royaltiesType <= royaltiesTypesAmount, \\\"wrong royaltiesType\\\");\\n        royaltiesProviders[token] = uint(royaltiesProvider) + 2**(256 - royaltiesType);\\n    }\\n\\n    /// @dev clears and sets new royalties type for token contract\\n    function forceSetRoyaltiesType(address token, uint royaltiesType) external {\\n        checkOwner(token);\\n        setRoyaltiesType(token, royaltiesType, getProvider(token));\\n    }\\n\\n    /// @dev clears royalties type for token contract\\n    function clearRoyaltiesType(address token) external {\\n        checkOwner(token);\\n        royaltiesProviders[token] = uint(getProvider(token));\\n    }\\n\\n    /// @dev sets royalties for token contract in royaltiesByToken mapping and royalties type = 1\\n    function setRoyaltiesByToken(address token, LibPart.Part[] memory royalties) external {\\n        checkOwner(token);\\n        //clearing royaltiesProviders value for the token\\n        delete royaltiesProviders[token];\\n        // setting royaltiesType = 1 for the token\\n        setRoyaltiesType(token, 1, address(0));\\n        uint sumRoyalties = 0;\\n        delete royaltiesByToken[token];\\n        for (uint i = 0; i < royalties.length; ++i) {\\n            require(royalties[i].account != address(0x0), \\\"RoyaltiesByToken recipient should be present\\\");\\n            require(royalties[i].value != 0, \\\"Royalty value for RoyaltiesByToken should be > 0\\\");\\n            royaltiesByToken[token].royalties.push(royalties[i]);\\n            sumRoyalties += royalties[i].value;\\n        }\\n        require(sumRoyalties < 10000, \\\"Set by token royalties sum more, than 100%\\\");\\n        royaltiesByToken[token].initialized = true;\\n        emit RoyaltiesSetForContract(token, royalties);\\n    }\\n\\n    /// @dev checks if msg.sender is owner of this contract or owner of the token contract\\n    function checkOwner(address token) internal view {\\n        if ((owner() != _msgSender()) && (OwnableUpgradeable(token).owner() != _msgSender())) {\\n            revert(\\\"Token owner not detected\\\");\\n        }\\n    }\\n\\n    /// @dev calculates royalties type for token contract\\n    function calculateRoyaltiesType(address token, address royaltiesProvider ) internal view returns(uint) {   \\n\\n        return 6;\\n    }\\n\\n    /// @dev returns royalties for token contract and token id\\n    function getRoyalties(address token, uint tokenId) override external returns (LibPart.Part[] memory) {\\n        return new LibPart.Part[](0);\\n    }\\n\\n    /// @dev tries to get royalties rarible-v2 for token and tokenId\\n    function getRoyaltiesRaribleV2(address token, uint tokenId) internal view returns (LibPart.Part[] memory) {\\n        try RoyaltiesV2(token).getRaribleV2Royalties(tokenId) returns (LibPart.Part[] memory result) {\\n            return result;\\n        } catch {\\n            return new LibPart.Part[](0);\\n        }\\n    }\\n\\n    /// @dev tries to get royalties rarible-v1 for token and tokenId\\n    function getRoyaltiesRaribleV1(address token, uint tokenId) internal view returns (LibPart.Part[] memory) {\\n        RoyaltiesV1 v1 = RoyaltiesV1(token);\\n        address payable[] memory recipients;\\n        try v1.getFeeRecipients(tokenId) returns (address payable[] memory resultRecipients) {\\n            recipients = resultRecipients;\\n        } catch {\\n            return new LibPart.Part[](0);\\n        }\\n        uint[] memory values;\\n        try v1.getFeeBps(tokenId) returns (uint[] memory resultValues) {\\n            values = resultValues;\\n        } catch {\\n            return new LibPart.Part[](0);\\n        }\\n        if (values.length != recipients.length) {\\n            return new LibPart.Part[](0);\\n        }\\n        LibPart.Part[] memory result = new LibPart.Part[](values.length);\\n        for (uint256 i = 0; i < values.length; ++i) {\\n            result[i].value = uint96(values[i]);\\n            result[i].account = recipients[i];\\n        }\\n        return result;\\n    }\\n\\n    /// @dev tries to get royalties EIP-2981 for token and tokenId\\n    function getRoyaltiesEIP2981(address token, uint tokenId) internal view returns (LibPart.Part[] memory) {\\n        try IERC2981(token).royaltyInfo(tokenId, LibRoyalties2981._WEIGHT_VALUE) returns (address receiver, uint256 royaltyAmount) {\\n            return LibRoyalties2981.calculateRoyalties(receiver, royaltyAmount);\\n        } catch {\\n            return new LibPart.Part[](0);\\n        }\\n    }\\n\\n    /// @dev tries to get royalties for token and tokenId from external provider set in royaltiesProviders\\n    function providerExtractor(address token, uint tokenId, address providerAddress) internal returns (LibPart.Part[] memory) {\\n        try IRoyaltiesProvider(providerAddress).getRoyalties(token, tokenId) returns (LibPart.Part[] memory result) {\\n            return result;\\n        } catch {\\n            return new LibPart.Part[](0);\\n        }\\n    }\\n\\n    uint256[46] private __gap;\\n}\\n\",\"keccak256\":\"0x4decc66065734765e98ae92d1a5102bfe8b503b1b868ecccd89e68555cc90b54\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610f25806100206000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063acf14efb1161008c578063d836f01311610066578063d836f013146101cb578063f2fde38b146101de578063f39cc706146101f1578063fc73be0014610204576100ea565b8063acf14efb1461019d578063c10b77a6146101b0578063d1da3cce146101b8576100ea565b8063715018a6116100c8578063715018a61461014d57806382b19f12146101555780638da5cb5b146101755780639ca7dc7a1461017d576100ea565b806305df952f146100ef57806336eff6c21461011857806355f21eb71461012d575b600080fd5b6101026100fd366004610ad4565b610217565b60405161010f9190610d04565b60405180910390f35b61012b610126366004610c4c565b61022c565b005b61014061013b366004610ad4565b61024c565b60405161010f9190610c8f565b61012b61026b565b610168610163366004610ad4565b610329565b60405161010f9190610e59565b610140610351565b61019061018b366004610c4c565b610360565b60405161010f9190610ca3565b61012b6101ab366004610b4b565b61039b565b61012b6105e0565b6101026101c6366004610c77565b61068a565b61012b6101d9366004610b13565b61069f565b61012b6101ec366004610ad4565b6106b4565b6101686101ff366004610ad4565b6107c9565b61012b610212366004610ad4565b6107db565b60666020526000908152604090205460ff1681565b6102358261080c565b61024882826102438561024c565b6108e2565b5050565b6001600160a01b0381166000908152606760205260409020545b919050565b610273610939565b6001600160a01b0316610284610351565b6001600160a01b0316146102df576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b6001600160a01b03811660009081526067602052604081205461034b9061093d565b92915050565b6033546001600160a01b031690565b60408051600080825260208201909252606091610393565b610380610a8b565b8152602001906001900390816103785790505b509392505050565b6103a48261080c565b6001600160a01b03821660009081526067602052604081208190556103cd9083906001906108e2565b6001600160a01b0382166000908152606660205260408120805460ff19168155816103fb6001830182610aa2565b505060005b825181101561055e5760006001600160a01b031683828151811061042057fe5b6020026020010151600001516001600160a01b0316141561045c5760405162461bcd60e51b815260040161045390610d0f565b60405180910390fd5b82818151811061046857fe5b6020026020010151602001516001600160601b03166000141561049d5760405162461bcd60e51b815260040161045390610ddc565b60666000856001600160a01b03166001600160a01b031681526020019081526020016000206001018382815181106104d157fe5b602090810291909101810151825460018101845560009384529282902081519301805491909201516001600160601b0316600160a01b026001600160a01b039384166001600160a01b031990921691909117909216919091179055825183908290811061053a57fe5b6020026020010151602001516001600160601b031682019150806001019050610400565b5061271081106105805760405162461bcd60e51b815260040161045390610d5b565b6001600160a01b03831660008181526066602052604090819020805460ff19166001179055517fc026171b9a7c9009d6a748a19a0a3cb877978a585e1647a87a786d724bbde127906105d3908590610ca3565b60405180910390a2505050565b600054610100900460ff16806105f957506105f961097b565b80610607575060005460ff16155b6106425760405162461bcd60e51b815260040180806020018281038252602e815260200180610ec2602e913960400191505060405180910390fd5b600054610100900460ff1615801561066d576000805460ff1961ff0019909116610100171660011790555b61067561098c565b8015610687576000805461ff00191690555b50565b60656020526000908152604090205460ff1681565b6106a88261080c565b610248826004836108e2565b6106bc610939565b6001600160a01b03166106cd610351565b6001600160a01b031614610728576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03811661076d5760405162461bcd60e51b8152600401808060200182810382526026815260200180610e9c6026913960400191505060405180910390fd5b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b60676020526000908152604090205481565b6107e48161080c565b6107ed8161024c565b6001600160a01b03918216600090815260676020526040902091169055565b610814610939565b6001600160a01b0316610825610351565b6001600160a01b0316141580156108c5575061083f610939565b6001600160a01b0316816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561088157600080fd5b505afa158015610895573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b99190610af7565b6001600160a01b031614155b156106875760405162461bcd60e51b815260040161045390610da5565b6000821180156108f3575060068211155b61090f5760405162461bcd60e51b815260040161045390610e2c565b6001600160a01b03928316600090815260676020526040902092166101009190910360020a019055565b3390565b600060015b6006811161097257806101000360020a838161095a57fe5b046001141561096a579050610266565b600101610942565b50600092915050565b600061098630610a85565b15905090565b600054610100900460ff16806109a557506109a561097b565b806109b3575060005460ff16155b6109ee5760405162461bcd60e51b815260040180806020018281038252602e815260200180610ec2602e913960400191505060405180910390fd5b600054610100900460ff16158015610a19576000805460ff1961ff0019909116610100171660011790555b6000610a23610939565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015610687576000805461ff001916905550565b3b151590565b604080518082019091526000808252602082015290565b508054600082559060005260206000209081019061068791905b80821115610ad05760008155600101610abc565b5090565b600060208284031215610ae5578081fd5b8135610af081610e86565b9392505050565b600060208284031215610b08578081fd5b8151610af081610e86565b60008060408385031215610b25578081fd5b8235610b3081610e86565b91506020830135610b4081610e86565b809150509250929050565b6000806040808486031215610b5e578283fd5b8335610b6981610e86565b925060208481013567ffffffffffffffff80821115610b86578485fd5b818701915087601f830112610b99578485fd5b813581811115610ba557fe5b610bb28485830201610e62565b81815284810190848601878402860187018c1015610bce578889fd5b8895505b83861015610c3a5787818d031215610be8578889fd5b87518881018181108782111715610bfb57fe5b89528135610c0881610e86565b8152818801356001600160601b0381168114610c22578a8bfd5b81890152835260019590950194918601918701610bd2565b50809750505050505050509250929050565b60008060408385031215610c5e578182fd5b8235610c6981610e86565b946020939093013593505050565b600060208284031215610c88578081fd5b5035919050565b6001600160a01b0391909116815260200190565b602080825282518282018190526000919060409081850190868401855b82811015610cf757815180516001600160a01b031685528601516001600160601b0316868501529284019290850190600101610cc0565b5091979650505050505050565b901515815260200190565b6020808252602c908201527f526f79616c746965734279546f6b656e20726563697069656e742073686f756c60408201526b19081899481c1c995cd95b9d60a21b606082015260800190565b6020808252602a908201527f53657420627920746f6b656e20726f79616c746965732073756d206d6f72652c604082015269207468616e203130302560b01b606082015260800190565b60208082526018908201527f546f6b656e206f776e6572206e6f742064657465637465640000000000000000604082015260600190565b60208082526030908201527f526f79616c74792076616c756520666f7220526f79616c746965734279546f6b60408201526f0656e2073686f756c64206265203e20360841b606082015260800190565b60208082526013908201527277726f6e6720726f79616c746965735479706560681b604082015260600190565b90815260200190565b60405181810167ffffffffffffffff81118282101715610e7e57fe5b604052919050565b6001600160a01b038116811461068757600080fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564a2646970667358221220213c72bb984d3a16d38ccbe851831609f8cd9e432d2bf7a1010e19cb3d552ed364736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063acf14efb1161008c578063d836f01311610066578063d836f013146101cb578063f2fde38b146101de578063f39cc706146101f1578063fc73be0014610204576100ea565b8063acf14efb1461019d578063c10b77a6146101b0578063d1da3cce146101b8576100ea565b8063715018a6116100c8578063715018a61461014d57806382b19f12146101555780638da5cb5b146101755780639ca7dc7a1461017d576100ea565b806305df952f146100ef57806336eff6c21461011857806355f21eb71461012d575b600080fd5b6101026100fd366004610ad4565b610217565b60405161010f9190610d04565b60405180910390f35b61012b610126366004610c4c565b61022c565b005b61014061013b366004610ad4565b61024c565b60405161010f9190610c8f565b61012b61026b565b610168610163366004610ad4565b610329565b60405161010f9190610e59565b610140610351565b61019061018b366004610c4c565b610360565b60405161010f9190610ca3565b61012b6101ab366004610b4b565b61039b565b61012b6105e0565b6101026101c6366004610c77565b61068a565b61012b6101d9366004610b13565b61069f565b61012b6101ec366004610ad4565b6106b4565b6101686101ff366004610ad4565b6107c9565b61012b610212366004610ad4565b6107db565b60666020526000908152604090205460ff1681565b6102358261080c565b61024882826102438561024c565b6108e2565b5050565b6001600160a01b0381166000908152606760205260409020545b919050565b610273610939565b6001600160a01b0316610284610351565b6001600160a01b0316146102df576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b6001600160a01b03811660009081526067602052604081205461034b9061093d565b92915050565b6033546001600160a01b031690565b60408051600080825260208201909252606091610393565b610380610a8b565b8152602001906001900390816103785790505b509392505050565b6103a48261080c565b6001600160a01b03821660009081526067602052604081208190556103cd9083906001906108e2565b6001600160a01b0382166000908152606660205260408120805460ff19168155816103fb6001830182610aa2565b505060005b825181101561055e5760006001600160a01b031683828151811061042057fe5b6020026020010151600001516001600160a01b0316141561045c5760405162461bcd60e51b815260040161045390610d0f565b60405180910390fd5b82818151811061046857fe5b6020026020010151602001516001600160601b03166000141561049d5760405162461bcd60e51b815260040161045390610ddc565b60666000856001600160a01b03166001600160a01b031681526020019081526020016000206001018382815181106104d157fe5b602090810291909101810151825460018101845560009384529282902081519301805491909201516001600160601b0316600160a01b026001600160a01b039384166001600160a01b031990921691909117909216919091179055825183908290811061053a57fe5b6020026020010151602001516001600160601b031682019150806001019050610400565b5061271081106105805760405162461bcd60e51b815260040161045390610d5b565b6001600160a01b03831660008181526066602052604090819020805460ff19166001179055517fc026171b9a7c9009d6a748a19a0a3cb877978a585e1647a87a786d724bbde127906105d3908590610ca3565b60405180910390a2505050565b600054610100900460ff16806105f957506105f961097b565b80610607575060005460ff16155b6106425760405162461bcd60e51b815260040180806020018281038252602e815260200180610ec2602e913960400191505060405180910390fd5b600054610100900460ff1615801561066d576000805460ff1961ff0019909116610100171660011790555b61067561098c565b8015610687576000805461ff00191690555b50565b60656020526000908152604090205460ff1681565b6106a88261080c565b610248826004836108e2565b6106bc610939565b6001600160a01b03166106cd610351565b6001600160a01b031614610728576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03811661076d5760405162461bcd60e51b8152600401808060200182810382526026815260200180610e9c6026913960400191505060405180910390fd5b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b60676020526000908152604090205481565b6107e48161080c565b6107ed8161024c565b6001600160a01b03918216600090815260676020526040902091169055565b610814610939565b6001600160a01b0316610825610351565b6001600160a01b0316141580156108c5575061083f610939565b6001600160a01b0316816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561088157600080fd5b505afa158015610895573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b99190610af7565b6001600160a01b031614155b156106875760405162461bcd60e51b815260040161045390610da5565b6000821180156108f3575060068211155b61090f5760405162461bcd60e51b815260040161045390610e2c565b6001600160a01b03928316600090815260676020526040902092166101009190910360020a019055565b3390565b600060015b6006811161097257806101000360020a838161095a57fe5b046001141561096a579050610266565b600101610942565b50600092915050565b600061098630610a85565b15905090565b600054610100900460ff16806109a557506109a561097b565b806109b3575060005460ff16155b6109ee5760405162461bcd60e51b815260040180806020018281038252602e815260200180610ec2602e913960400191505060405180910390fd5b600054610100900460ff16158015610a19576000805460ff1961ff0019909116610100171660011790555b6000610a23610939565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015610687576000805461ff001916905550565b3b151590565b604080518082019091526000808252602082015290565b508054600082559060005260206000209081019061068791905b80821115610ad05760008155600101610abc565b5090565b600060208284031215610ae5578081fd5b8135610af081610e86565b9392505050565b600060208284031215610b08578081fd5b8151610af081610e86565b60008060408385031215610b25578081fd5b8235610b3081610e86565b91506020830135610b4081610e86565b809150509250929050565b6000806040808486031215610b5e578283fd5b8335610b6981610e86565b925060208481013567ffffffffffffffff80821115610b86578485fd5b818701915087601f830112610b99578485fd5b813581811115610ba557fe5b610bb28485830201610e62565b81815284810190848601878402860187018c1015610bce578889fd5b8895505b83861015610c3a5787818d031215610be8578889fd5b87518881018181108782111715610bfb57fe5b89528135610c0881610e86565b8152818801356001600160601b0381168114610c22578a8bfd5b81890152835260019590950194918601918701610bd2565b50809750505050505050509250929050565b60008060408385031215610c5e578182fd5b8235610c6981610e86565b946020939093013593505050565b600060208284031215610c88578081fd5b5035919050565b6001600160a01b0391909116815260200190565b602080825282518282018190526000919060409081850190868401855b82811015610cf757815180516001600160a01b031685528601516001600160601b0316868501529284019290850190600101610cc0565b5091979650505050505050565b901515815260200190565b6020808252602c908201527f526f79616c746965734279546f6b656e20726563697069656e742073686f756c60408201526b19081899481c1c995cd95b9d60a21b606082015260800190565b6020808252602a908201527f53657420627920746f6b656e20726f79616c746965732073756d206d6f72652c604082015269207468616e203130302560b01b606082015260800190565b60208082526018908201527f546f6b656e206f776e6572206e6f742064657465637465640000000000000000604082015260600190565b60208082526030908201527f526f79616c74792076616c756520666f7220526f79616c746965734279546f6b60408201526f0656e2073686f756c64206265203e20360841b606082015260800190565b60208082526013908201527277726f6e6720726f79616c746965735479706560681b604082015260600190565b90815260200190565b60405181810167ffffffffffffffff81118282101715610e7e57fe5b604052919050565b6001600160a01b038116811461068757600080fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564a2646970667358221220213c72bb984d3a16d38ccbe851831609f8cd9e432d2bf7a1010e19cb3d552ed364736f6c63430007060033",
  "devdoc": {
    "events": {
      "RoyaltiesSetForContract(address,(address,uint96)[])": {
        "details": "emitted when royalties set for token in "
      },
      "RoyaltiesSetForToken(address,uint256,(address,uint96)[])": {
        "details": "deprecated"
      }
    },
    "kind": "dev",
    "methods": {
      "clearRoyaltiesType(address)": {
        "details": "clears royalties type for token contract"
      },
      "forceSetRoyaltiesType(address,uint256)": {
        "details": "clears and sets new royalties type for token contract"
      },
      "getProvider(address)": {
        "details": "returns provider address for token contract from royaltiesProviders mapping"
      },
      "getRoyalties(address,uint256)": {
        "details": "returns royalties for token contract and token id"
      },
      "getRoyaltiesType(address)": {
        "details": "returns royalties type for token contract"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setProviderByToken(address,address)": {
        "details": "sets external provider for token contract, and royalties type = 4"
      },
      "setRoyaltiesByToken(address,(address,uint96)[])": {
        "details": "sets royalties for token contract in royaltiesByToken mapping and royalties type = 1"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "royaltiesByToken": {
        "details": "stores royalties for token contract, set in setRoyaltiesByToken() method"
      },
      "royaltiesByTokenAndTokenId": {
        "details": "deprecated"
      },
      "royaltiesProviders": {
        "details": "stores external provider and royalties type for token contract"
      },
      "royaltiesTypesAmount": {
        "details": "total amount or supported royalties types"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 664,
        "contract": "contracts/royalty/HederaRoyaltiesRegistry.sol:HederaRoyaltiesRegistry",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 667,
        "contract": "contracts/royalty/HederaRoyaltiesRegistry.sol:HederaRoyaltiesRegistry",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1327,
        "contract": "contracts/royalty/HederaRoyaltiesRegistry.sol:HederaRoyaltiesRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/royalty/HederaRoyaltiesRegistry.sol:HederaRoyaltiesRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 129,
        "contract": "contracts/royalty/HederaRoyaltiesRegistry.sol:HederaRoyaltiesRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 10820,
        "contract": "contracts/royalty/HederaRoyaltiesRegistry.sol:HederaRoyaltiesRegistry",
        "label": "royaltiesByTokenAndTokenId",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoyaltiesSet)10815_storage)"
      },
      {
        "astId": 10825,
        "contract": "contracts/royalty/HederaRoyaltiesRegistry.sol:HederaRoyaltiesRegistry",
        "label": "royaltiesByToken",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_struct(RoyaltiesSet)10815_storage)"
      },
      {
        "astId": 10830,
        "contract": "contracts/royalty/HederaRoyaltiesRegistry.sol:HederaRoyaltiesRegistry",
        "label": "royaltiesProviders",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11435,
        "contract": "contracts/royalty/HederaRoyaltiesRegistry.sol:HederaRoyaltiesRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "104",
        "type": "t_array(t_uint256)46_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Part)6068_storage)dyn_storage": {
        "base": "t_struct(Part)6068_storage",
        "encoding": "dynamic_array",
        "label": "struct LibPart.Part[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)46_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[46]",
        "numberOfBytes": "1472"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(RoyaltiesSet)10815_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct HederaRoyaltiesRegistry.RoyaltiesSet)",
        "numberOfBytes": "32",
        "value": "t_struct(RoyaltiesSet)10815_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoyaltiesSet)10815_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct HederaRoyaltiesRegistry.RoyaltiesSet)",
        "numberOfBytes": "32",
        "value": "t_struct(RoyaltiesSet)10815_storage"
      },
      "t_struct(Part)6068_storage": {
        "encoding": "inplace",
        "label": "struct LibPart.Part",
        "members": [
          {
            "astId": 6065,
            "contract": "contracts/royalty/HederaRoyaltiesRegistry.sol:HederaRoyaltiesRegistry",
            "label": "account",
            "offset": 0,
            "slot": "0",
            "type": "t_address_payable"
          },
          {
            "astId": 6067,
            "contract": "contracts/royalty/HederaRoyaltiesRegistry.sol:HederaRoyaltiesRegistry",
            "label": "value",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoyaltiesSet)10815_storage": {
        "encoding": "inplace",
        "label": "struct HederaRoyaltiesRegistry.RoyaltiesSet",
        "members": [
          {
            "astId": 10811,
            "contract": "contracts/royalty/HederaRoyaltiesRegistry.sol:HederaRoyaltiesRegistry",
            "label": "initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 10814,
            "contract": "contracts/royalty/HederaRoyaltiesRegistry.sol:HederaRoyaltiesRegistry",
            "label": "royalties",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_struct(Part)6068_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}