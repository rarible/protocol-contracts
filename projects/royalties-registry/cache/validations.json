{
  "version": "3.4",
  "log": [
    {
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:45",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/EnumerableSetUpgradeable.sol:EnumerableSetUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleMemberCount(bytes32)",
          "getRoleMember(bytes32,uint256)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)39_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
            }
          ],
          "types": {
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)39_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)3314_storage": {
              "label": "struct EnumerableSetUpgradeable.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)3049_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(RoleData)39_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_struct(AddressSet)3314_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Set)3049_storage": {
              "label": "struct EnumerableSetUpgradeable.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.7.6"
      },
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.7.6"
      },
      "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:14",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            },
            {
              "label": "_supportedInterfaces",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes4,t_bool)",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.7.6"
      },
      "@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol:IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.7.6"
      },
      "@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol:SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol:18",
        "version": {
          "withMetadata": "e40a047d02568e4b09dc42878e7cb030c4836e31e9ce9e7f5442d6bf8db99aa6",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.7.6"
      },
      "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.7.6"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.7.6"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:ERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:22",
        "version": {
          "withMetadata": "9684fa3c38ee8f81b4ce7c422187055b46938d63fc0908ddeede53202fc9450a",
          "withoutMetadata": "91f33d86f4e83ed4d0e0eb5db43c1a013804f7bae657323ae672f3b095ae097c",
          "linkedWithoutMetadata": "91f33d86f4e83ed4d0e0eb5db43c1a013804f7bae657323ae672f3b095ae097c"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721EnumerableUpgradeable.sol:IERC721EnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721MetadataUpgradeable.sol:IERC721MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol:IERC721Upgradeable",
          "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol:SafeMathUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/EnumerableSetUpgradeable.sol:EnumerableSetUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/EnumerableMapUpgradeable.sol:EnumerableMapUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable"
        ],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "baseURI()",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "incorrect-initializer-order",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:96",
            "expectedLinearization": [
              "ContextUpgradeable",
              "ERC165Upgradeable"
            ],
            "foundOrder": [
              "ERC165Upgradeable"
            ]
          },
          {
            "kind": "missing-initializer-call",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:94",
            "parentContracts": [
              "ContextUpgradeable"
            ]
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            },
            {
              "label": "_supportedInterfaces",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_bytes4,t_bool)",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
            },
            {
              "label": "_holderTokens",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_address,t_struct(UintSet)3435_storage)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
            },
            {
              "label": "_tokenOwners",
              "offset": 0,
              "slot": "102",
              "type": "t_struct(UintToAddressMap)2812_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "105",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:43"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "106",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:46"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "107",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:49"
            },
            {
              "label": "_tokenURIs",
              "offset": 0,
              "slot": "108",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:52"
            },
            {
              "label": "_baseURI",
              "offset": 0,
              "slot": "109",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:55"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "110",
              "type": "t_array(t_uint256)41_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:480"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(MapEntry)2486_storage)dyn_storage": {
              "label": "struct EnumerableMapUpgradeable.MapEntry[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)41_storage": {
              "label": "uint256[41]",
              "numberOfBytes": "1312"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UintSet)3435_storage)": {
              "label": "mapping(address => struct EnumerableSetUpgradeable.UintSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Map)2494_storage": {
              "label": "struct EnumerableMapUpgradeable.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)2486_storage)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(MapEntry)2486_storage": {
              "label": "struct EnumerableMapUpgradeable.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)3049_storage": {
              "label": "struct EnumerableSetUpgradeable.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintSet)3435_storage": {
              "label": "struct EnumerableSetUpgradeable.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)3049_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintToAddressMap)2812_storage": {
              "label": "struct EnumerableMapUpgradeable.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)2494_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.7.6"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721EnumerableUpgradeable.sol:IERC721EnumerableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721EnumerableUpgradeable.sol:11",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol:IERC721Upgradeable",
          "@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol:IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.7.6"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721MetadataUpgradeable.sol:IERC721MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721MetadataUpgradeable.sol:11",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol:IERC721Upgradeable",
          "@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol:IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.7.6"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol:IERC721ReceiverUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.7.6"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol:IERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol:10",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol:IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.7.6"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "7d6a811c59c82701d72d6870ca95440d0a136dde39f17c6c6c3b7add1f2cb935",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.7.6"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.7.6"
      },
      "@openzeppelin/contracts-upgradeable/utils/EnumerableMapUpgradeable.sol:EnumerableMapUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/EnumerableMapUpgradeable.sol:29",
        "version": {
          "withMetadata": "d68f951d9afd4de07d2fdd2e0108453795f3e7a7297394e08046c15e2111cdbc",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.7.6"
      },
      "@openzeppelin/contracts-upgradeable/utils/EnumerableSetUpgradeable.sol:EnumerableSetUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/EnumerableSetUpgradeable.sol:29",
        "version": {
          "withMetadata": "8087312fefba91d77326158d394f177f8e2cf096b704b39e48a0c58120c4cddf",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.7.6"
      },
      "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:8",
        "version": {
          "withMetadata": "13ec13ddac86cccdf66d6835d3771e31048341c79ceacac06809adc6a72cb484",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.7.6"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.7.6"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.7.6"
      },
      "@rarible/exchange-interfaces/contracts/IRoyaltiesProvider.sol:IRoyaltiesProvider": {
        "src": "@rarible/exchange-interfaces/contracts/IRoyaltiesProvider.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getRoyalties(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.7.6"
      },
      "@rarible/lib-bp/contracts/BpLibrary.sol:BpLibrary": {
        "src": "@rarible/lib-bp/contracts/BpLibrary.sol:7",
        "version": {
          "withMetadata": "3935f31ca36d5764dad6ddc4306fc971b7c70db42cc51989d975ddc77a734e42",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol:SafeMathUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.7.6"
      },
      "@rarible/lib-part/contracts/LibPart.sol:LibPart": {
        "src": "@rarible/lib-part/contracts/LibPart.sol:5",
        "version": {
          "withMetadata": "1e15b904046cd0ace63b43061c288583efbada2020af59ab16c20aa684bd553e",
          "withoutMetadata": "cf9a2784efad9e0204aae8177c738952b8e0ef9678c42c6202ab3384327ad817",
          "linkedWithoutMetadata": "cf9a2784efad9e0204aae8177c738952b8e0ef9678c42c6202ab3384327ad817"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.7.6"
      },
      "@rarible/royalties/contracts/IERC2981.sol:IERC2981": {
        "src": "@rarible/royalties/contracts/IERC2981.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "royaltyInfo(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.7.6"
      },
      "@rarible/royalties/contracts/LibRoyalties2981.sol:LibRoyalties2981": {
        "src": "@rarible/royalties/contracts/LibRoyalties2981.sol:7",
        "version": {
          "withMetadata": "5e91a4e0643c29a618703bc15f59ecbd0fba5a1c2805070319238c12b50d4850",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.7.6"
      },
      "@rarible/royalties/contracts/LibRoyaltiesV1.sol:LibRoyaltiesV1": {
        "src": "@rarible/royalties/contracts/LibRoyaltiesV1.sol:5",
        "version": {
          "withMetadata": "a9aa5917074ecd1057e08d5fa0afeaeaa39e2bfafd0139622ec2311cc61dbce6",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.7.6"
      },
      "@rarible/royalties/contracts/LibRoyaltiesV2.sol:LibRoyaltiesV2": {
        "src": "@rarible/royalties/contracts/LibRoyaltiesV2.sol:5",
        "version": {
          "withMetadata": "11b652e8e75fec691a455ebe543c8c6cde6b203d5e0f3f965d8be82f832ae4f2",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.7.6"
      },
      "@rarible/royalties/contracts/RoyaltiesV1.sol:RoyaltiesV1": {
        "src": "@rarible/royalties/contracts/RoyaltiesV1.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getFeeRecipients(uint256)",
          "getFeeBps(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.7.6"
      },
      "@rarible/royalties/contracts/RoyaltiesV2.sol:RoyaltiesV2": {
        "src": "@rarible/royalties/contracts/RoyaltiesV2.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getRaribleV2Royalties(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.7.6"
      },
      "@rarible/royalties/contracts/impl/AbstractRoyalties.sol:AbstractRoyalties": {
        "src": "@rarible/royalties/contracts/impl/AbstractRoyalties.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "royalties",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_array(t_struct(Part)3802_storage)dyn_storage)",
              "contract": "AbstractRoyalties",
              "src": "@rarible/royalties/contracts/impl/AbstractRoyalties.sol:8"
            }
          ],
          "types": {
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Part)3802_storage)dyn_storage": {
              "label": "struct LibPart.Part[]",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_array(t_struct(Part)3802_storage)dyn_storage)": {
              "label": "mapping(uint256 => struct LibPart.Part[])",
              "numberOfBytes": "32"
            },
            "t_struct(Part)3802_storage": {
              "label": "struct LibPart.Part",
              "members": [
                {
                  "label": "account",
                  "type": "t_address_payable",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "value",
                  "type": "t_uint96",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.7.6"
      },
      "@rarible/royalties/contracts/impl/RoyaltiesV1Impl.sol:RoyaltiesV1Impl": {
        "src": "@rarible/royalties/contracts/impl/RoyaltiesV1Impl.sol:8",
        "version": {
          "withMetadata": "bf72530e86c359c292252967dd5c727ecaa10b25004bb397190053744a3424ff",
          "withoutMetadata": "b56734591c545688a26927c1200d9314e546732bb015861f36df1c47097a3520",
          "linkedWithoutMetadata": "b56734591c545688a26927c1200d9314e546732bb015861f36df1c47097a3520"
        },
        "inherit": [
          "@rarible/royalties/contracts/RoyaltiesV1.sol:RoyaltiesV1",
          "@rarible/royalties/contracts/impl/AbstractRoyalties.sol:AbstractRoyalties"
        ],
        "libraries": [],
        "methods": [
          "getFeeRecipients(uint256)",
          "getFeeBps(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "royalties",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_array(t_struct(Part)3802_storage)dyn_storage)",
              "contract": "AbstractRoyalties",
              "src": "@rarible/royalties/contracts/impl/AbstractRoyalties.sol:8"
            }
          ],
          "types": {
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Part)3802_storage)dyn_storage": {
              "label": "struct LibPart.Part[]",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_array(t_struct(Part)3802_storage)dyn_storage)": {
              "label": "mapping(uint256 => struct LibPart.Part[])",
              "numberOfBytes": "32"
            },
            "t_struct(Part)3802_storage": {
              "label": "struct LibPart.Part",
              "members": [
                {
                  "label": "account",
                  "type": "t_address_payable",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "value",
                  "type": "t_uint96",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.7.6"
      },
      "@rarible/royalties/contracts/impl/RoyaltiesV2Impl.sol:RoyaltiesV2Impl": {
        "src": "@rarible/royalties/contracts/impl/RoyaltiesV2Impl.sol:11",
        "version": {
          "withMetadata": "9a74dbcc826062979335908aa7cbac18d407bfb6e742ea3cdeb4555b5bff99b4",
          "withoutMetadata": "8f687c8c5ae8cb68d6b54f7b3d9640d8d3623c5a37d3c9f3d6f8e2c0fdbc968b",
          "linkedWithoutMetadata": "8f687c8c5ae8cb68d6b54f7b3d9640d8d3623c5a37d3c9f3d6f8e2c0fdbc968b"
        },
        "inherit": [
          "@rarible/royalties/contracts/IERC2981.sol:IERC2981",
          "@rarible/royalties/contracts/RoyaltiesV2.sol:RoyaltiesV2",
          "@rarible/royalties/contracts/impl/AbstractRoyalties.sol:AbstractRoyalties"
        ],
        "libraries": [],
        "methods": [
          "getRaribleV2Royalties(uint256)",
          "royaltyInfo(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "royalties",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_array(t_struct(Part)3802_storage)dyn_storage)",
              "contract": "AbstractRoyalties",
              "src": "@rarible/royalties/contracts/impl/AbstractRoyalties.sol:8"
            }
          ],
          "types": {
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Part)3802_storage)dyn_storage": {
              "label": "struct LibPart.Part[]",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_array(t_struct(Part)3802_storage)dyn_storage)": {
              "label": "mapping(uint256 => struct LibPart.Part[])",
              "numberOfBytes": "32"
            },
            "t_struct(Part)3802_storage": {
              "label": "struct LibPart.Part",
              "members": [
                {
                  "label": "account",
                  "type": "t_address_payable",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "value",
                  "type": "t_uint96",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.7.6"
      },
      "@rarible/royalties/test/contracts/Royalties2981TestImpl.sol:Royalties2981TestImpl": {
        "src": "@rarible/royalties/test/contracts/Royalties2981TestImpl.sol:10",
        "version": {
          "withMetadata": "e783f6ff6c5a14e0e1779b35e474a9c3e1a23a52326cd8a6cd72328d256a64ec",
          "withoutMetadata": "aa2099218a2750333a380746efa633eab22bd84e65c786a6e99fd3dbe59f82ff",
          "linkedWithoutMetadata": "aa2099218a2750333a380746efa633eab22bd84e65c786a6e99fd3dbe59f82ff"
        },
        "inherit": [
          "@rarible/royalties/contracts/IERC2981.sol:IERC2981"
        ],
        "libraries": [
          "@rarible/royalties/contracts/LibRoyalties2981.sol:LibRoyalties2981"
        ],
        "methods": [
          "setRoyalties(uint256)",
          "royaltyInfo(uint256,uint256)",
          "calculateRoyaltiesTest(address payable,uint96)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "royaltiesBasePoint",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Royalties2981TestImpl",
              "src": "@rarible/royalties/test/contracts/Royalties2981TestImpl.sol:11"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.7.6"
      },
      "@rarible/royalties/test/contracts/TestERC721RoyaltiesV2.sol:TestERC721RoyaltiesV2": {
        "src": "@rarible/royalties/test/contracts/TestERC721RoyaltiesV2.sol:10",
        "version": {
          "withMetadata": "b96ad1149de8618289df12f1574c1ab1306075f61160f69e3dc0e167bb2a813b",
          "withoutMetadata": "2e0e7d022455aee2ccec4720a7c0bc322f4a0fc864d4ec5a2dff2fa0c8659233",
          "linkedWithoutMetadata": "2e0e7d022455aee2ccec4720a7c0bc322f4a0fc864d4ec5a2dff2fa0c8659233"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:ERC721Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721EnumerableUpgradeable.sol:IERC721EnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721MetadataUpgradeable.sol:IERC721MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol:IERC721Upgradeable",
          "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:Initializable",
          "@rarible/royalties/contracts/impl/RoyaltiesV2Impl.sol:RoyaltiesV2Impl",
          "@rarible/royalties/contracts/IERC2981.sol:IERC2981",
          "@rarible/royalties/contracts/RoyaltiesV2.sol:RoyaltiesV2",
          "@rarible/royalties/contracts/impl/AbstractRoyalties.sol:AbstractRoyalties"
        ],
        "libraries": [
          "@rarible/royalties/contracts/LibRoyaltiesV2.sol:LibRoyaltiesV2"
        ],
        "methods": [
          "initialize()",
          "mint(address,uint256,struct LibPart.Part[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "missing-initializer-call",
            "src": "@rarible/royalties/test/contracts/TestERC721RoyaltiesV2.sol:11",
            "parentContracts": [
              "ContextUpgradeable",
              "ERC721Upgradeable"
            ]
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "royalties",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_array(t_struct(Part)3802_storage)dyn_storage)",
              "contract": "AbstractRoyalties",
              "src": "@rarible/royalties/contracts/impl/AbstractRoyalties.sol:8"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "1",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "1",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            },
            {
              "label": "_supportedInterfaces",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_bytes4,t_bool)",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "53",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
            },
            {
              "label": "_holderTokens",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_address,t_struct(UintSet)3435_storage)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
            },
            {
              "label": "_tokenOwners",
              "offset": 0,
              "slot": "103",
              "type": "t_struct(UintToAddressMap)2812_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "105",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "106",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:43"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "107",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:46"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "108",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:49"
            },
            {
              "label": "_tokenURIs",
              "offset": 0,
              "slot": "109",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:52"
            },
            {
              "label": "_baseURI",
              "offset": 0,
              "slot": "110",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:55"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "111",
              "type": "t_array(t_uint256)41_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:480"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(MapEntry)2486_storage)dyn_storage": {
              "label": "struct EnumerableMapUpgradeable.MapEntry[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Part)3802_storage)dyn_storage": {
              "label": "struct LibPart.Part[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)41_storage": {
              "label": "uint256[41]",
              "numberOfBytes": "1312"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UintSet)3435_storage)": {
              "label": "mapping(address => struct EnumerableSetUpgradeable.UintSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_array(t_struct(Part)3802_storage)dyn_storage)": {
              "label": "mapping(uint256 => struct LibPart.Part[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Map)2494_storage": {
              "label": "struct EnumerableMapUpgradeable.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)2486_storage)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(MapEntry)2486_storage": {
              "label": "struct EnumerableMapUpgradeable.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Part)3802_storage": {
              "label": "struct LibPart.Part",
              "members": [
                {
                  "label": "account",
                  "type": "t_address_payable",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "value",
                  "type": "t_uint96",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Set)3049_storage": {
              "label": "struct EnumerableSetUpgradeable.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintSet)3435_storage": {
              "label": "struct EnumerableSetUpgradeable.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)3049_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintToAddressMap)2812_storage": {
              "label": "struct EnumerableMapUpgradeable.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)2494_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.7.6"
      },
      "@rarible/test/contracts/TestERC721.sol:TestERC721": {
        "src": "@rarible/test/contracts/TestERC721.sol:12",
        "version": {
          "withMetadata": "99e14daf8b9c146f75affabb494cbd8f22e7bdbb7688438daf6834d210376bca",
          "withoutMetadata": "99e14daf8b9c146f75affabb494cbd8f22e7bdbb7688438daf6834d210376bca",
          "linkedWithoutMetadata": "99e14daf8b9c146f75affabb494cbd8f22e7bdbb7688438daf6834d210376bca"
        },
        "inherit": [
          "@rarible/test/contracts/dependencies/IERC4906.sol:IERC4906",
          "@rarible/test/contracts/dependencies/RenderingContract.sol:RenderingContract",
          "@rarible/test/contracts/dependencies/Ownable.sol:Ownable",
          "@rarible/test/contracts/dependencies/IOwnable.sol:IOwnable",
          "@rarible/test/contracts/dependencies/ERC721Upgradeable.sol:ERC721Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721EnumerableUpgradeable.sol:IERC721EnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721MetadataUpgradeable.sol:IERC721MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol:IERC721Upgradeable",
          "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "mintFromContract(address,uint256)",
          "setBaseURI(string)",
          "reveal(uint256)",
          "getBatchIdAtIndex(uint256)",
          "mintWithPrice(address,uint256[],address,uint256)",
          "updateMetaData(uint256)",
          "updateBatchMetaData(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestERC721",
            "src": "@rarible/test/contracts/TestERC721.sol:13"
          },
          {
            "kind": "missing-initializer",
            "src": "@rarible/test/contracts/TestERC721.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            },
            {
              "label": "_supportedInterfaces",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_bytes4,t_bool)",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
            },
            {
              "label": "_holderTokens",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_address,t_struct(UintSet)3435_storage)",
              "contract": "ERC721Upgradeable",
              "src": "@rarible/test/contracts/dependencies/ERC721Upgradeable.sol:34"
            },
            {
              "label": "_tokenOwners",
              "offset": 0,
              "slot": "102",
              "type": "t_struct(UintToAddressMap)2812_storage",
              "contract": "ERC721Upgradeable",
              "src": "@rarible/test/contracts/dependencies/ERC721Upgradeable.sol:37"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@rarible/test/contracts/dependencies/ERC721Upgradeable.sol:40"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "105",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721Upgradeable",
              "src": "@rarible/test/contracts/dependencies/ERC721Upgradeable.sol:43"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "106",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@rarible/test/contracts/dependencies/ERC721Upgradeable.sol:46"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "107",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@rarible/test/contracts/dependencies/ERC721Upgradeable.sol:49"
            },
            {
              "label": "_tokenURIs",
              "offset": 0,
              "slot": "108",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "contract": "ERC721Upgradeable",
              "src": "@rarible/test/contracts/dependencies/ERC721Upgradeable.sol:52"
            },
            {
              "label": "_baseURI",
              "offset": 0,
              "slot": "109",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@rarible/test/contracts/dependencies/ERC721Upgradeable.sol:55"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "110",
              "type": "t_array(t_uint256)41_storage",
              "contract": "ERC721Upgradeable",
              "src": "@rarible/test/contracts/dependencies/ERC721Upgradeable.sol:493"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@rarible/test/contracts/dependencies/Ownable.sol:17"
            },
            {
              "label": "renderingContract",
              "offset": 0,
              "slot": "152",
              "type": "t_contract(ITokenURIGenerator)5899",
              "contract": "RenderingContract",
              "src": "@rarible/test/contracts/dependencies/RenderingContract.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(MapEntry)2486_storage)dyn_storage": {
              "label": "struct EnumerableMapUpgradeable.MapEntry[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)41_storage": {
              "label": "uint256[41]",
              "numberOfBytes": "1312"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(ITokenURIGenerator)5899": {
              "label": "contract ITokenURIGenerator",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UintSet)3435_storage)": {
              "label": "mapping(address => struct EnumerableSetUpgradeable.UintSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Map)2494_storage": {
              "label": "struct EnumerableMapUpgradeable.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)2486_storage)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(MapEntry)2486_storage": {
              "label": "struct EnumerableMapUpgradeable.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)3049_storage": {
              "label": "struct EnumerableSetUpgradeable.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintSet)3435_storage": {
              "label": "struct EnumerableSetUpgradeable.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)3049_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintToAddressMap)2812_storage": {
              "label": "struct EnumerableMapUpgradeable.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)2494_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.7.6"
      },
      "@rarible/test/contracts/dependencies/ERC721Upgradeable.sol:ERC721Upgradeable": {
        "src": "@rarible/test/contracts/dependencies/ERC721Upgradeable.sol:22",
        "version": {
          "withMetadata": "7ac7b0c3e0ef74c5ac5762a6a9720f5340df245d480677b63d90c86ad0fb7f4a",
          "withoutMetadata": "91f33d86f4e83ed4d0e0eb5db43c1a013804f7bae657323ae672f3b095ae097c",
          "linkedWithoutMetadata": "91f33d86f4e83ed4d0e0eb5db43c1a013804f7bae657323ae672f3b095ae097c"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721EnumerableUpgradeable.sol:IERC721EnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721MetadataUpgradeable.sol:IERC721MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol:IERC721Upgradeable",
          "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol:SafeMathUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/EnumerableSetUpgradeable.sol:EnumerableSetUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/EnumerableMapUpgradeable.sol:EnumerableMapUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable"
        ],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "baseURI()",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "incorrect-initializer-order",
            "src": "@rarible/test/contracts/dependencies/ERC721Upgradeable.sol:96",
            "expectedLinearization": [
              "ContextUpgradeable",
              "ERC165Upgradeable"
            ],
            "foundOrder": [
              "ERC165Upgradeable"
            ]
          },
          {
            "kind": "missing-initializer-call",
            "src": "@rarible/test/contracts/dependencies/ERC721Upgradeable.sol:94",
            "parentContracts": [
              "ContextUpgradeable"
            ]
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            },
            {
              "label": "_supportedInterfaces",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_bytes4,t_bool)",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
            },
            {
              "label": "_holderTokens",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_address,t_struct(UintSet)3435_storage)",
              "contract": "ERC721Upgradeable",
              "src": "@rarible/test/contracts/dependencies/ERC721Upgradeable.sol:34"
            },
            {
              "label": "_tokenOwners",
              "offset": 0,
              "slot": "102",
              "type": "t_struct(UintToAddressMap)2812_storage",
              "contract": "ERC721Upgradeable",
              "src": "@rarible/test/contracts/dependencies/ERC721Upgradeable.sol:37"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@rarible/test/contracts/dependencies/ERC721Upgradeable.sol:40"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "105",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721Upgradeable",
              "src": "@rarible/test/contracts/dependencies/ERC721Upgradeable.sol:43"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "106",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@rarible/test/contracts/dependencies/ERC721Upgradeable.sol:46"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "107",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@rarible/test/contracts/dependencies/ERC721Upgradeable.sol:49"
            },
            {
              "label": "_tokenURIs",
              "offset": 0,
              "slot": "108",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "contract": "ERC721Upgradeable",
              "src": "@rarible/test/contracts/dependencies/ERC721Upgradeable.sol:52"
            },
            {
              "label": "_baseURI",
              "offset": 0,
              "slot": "109",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@rarible/test/contracts/dependencies/ERC721Upgradeable.sol:55"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "110",
              "type": "t_array(t_uint256)41_storage",
              "contract": "ERC721Upgradeable",
              "src": "@rarible/test/contracts/dependencies/ERC721Upgradeable.sol:493"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(MapEntry)2486_storage)dyn_storage": {
              "label": "struct EnumerableMapUpgradeable.MapEntry[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)41_storage": {
              "label": "uint256[41]",
              "numberOfBytes": "1312"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UintSet)3435_storage)": {
              "label": "mapping(address => struct EnumerableSetUpgradeable.UintSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Map)2494_storage": {
              "label": "struct EnumerableMapUpgradeable.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)2486_storage)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(MapEntry)2486_storage": {
              "label": "struct EnumerableMapUpgradeable.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)3049_storage": {
              "label": "struct EnumerableSetUpgradeable.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintSet)3435_storage": {
              "label": "struct EnumerableSetUpgradeable.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)3049_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintToAddressMap)2812_storage": {
              "label": "struct EnumerableMapUpgradeable.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)2494_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.7.6"
      },
      "@rarible/test/contracts/dependencies/IERC4906.sol:IERC4906": {
        "src": "@rarible/test/contracts/dependencies/IERC4906.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.7.6"
      },
      "@rarible/test/contracts/dependencies/IOwnable.sol:IOwnable": {
        "src": "@rarible/test/contracts/dependencies/IOwnable.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "setOwner(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.7.6"
      },
      "@rarible/test/contracts/dependencies/Ownable.sol:Ownable": {
        "src": "@rarible/test/contracts/dependencies/Ownable.sol:15",
        "inherit": [
          "@rarible/test/contracts/dependencies/IOwnable.sol:IOwnable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "setOwner(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@rarible/test/contracts/dependencies/Ownable.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.7.6"
      },
      "@rarible/test/contracts/dependencies/RenderingContract.sol:ITokenURIGenerator": {
        "src": "@rarible/test/contracts/dependencies/RenderingContract.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.7.6"
      },
      "@rarible/test/contracts/dependencies/RenderingContract.sol:RenderingContract": {
        "src": "@rarible/test/contracts/dependencies/RenderingContract.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setRenderingContract(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "renderingContract",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(ITokenURIGenerator)5899",
              "contract": "RenderingContract",
              "src": "@rarible/test/contracts/dependencies/RenderingContract.sol:9"
            }
          ],
          "types": {
            "t_contract(ITokenURIGenerator)5899": {
              "label": "contract ITokenURIGenerator",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.7.6"
      },
      "contracts/RoyaltiesRegistry.sol:RoyaltiesRegistry": {
        "src": "contracts/RoyaltiesRegistry.sol:16",
        "version": {
          "withMetadata": "6352851b53dac708c74c3472ef9b2c84e6ed3c4be933f95f5be8384e57b9a75c",
          "withoutMetadata": "9daa2de0be55235e53ea65391ac057d3bac9177c851ee45aab59e1ee9e54c3bd",
          "linkedWithoutMetadata": "9daa2de0be55235e53ea65391ac057d3bac9177c851ee45aab59e1ee9e54c3bd"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:Initializable",
          "@rarible/exchange-interfaces/contracts/IRoyaltiesProvider.sol:IRoyaltiesProvider"
        ],
        "libraries": [
          "@rarible/royalties/contracts/LibRoyaltiesV2.sol:LibRoyaltiesV2",
          "@rarible/royalties/contracts/LibRoyaltiesV1.sol:LibRoyaltiesV1",
          "@rarible/royalties/contracts/LibRoyalties2981.sol:LibRoyalties2981"
        ],
        "methods": [
          "__RoyaltiesRegistry_init()",
          "setProviderByToken(address,address)",
          "getProvider(address)",
          "getRoyaltiesType(address)",
          "forceSetRoyaltiesType(address,uint256)",
          "clearRoyaltiesType(address)",
          "setRoyaltiesByToken(address,struct LibPart.Part[])",
          "getRoyalties(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "incorrect-initializer-order",
            "src": "contracts/RoyaltiesRegistry.sol:43",
            "expectedLinearization": [
              "ContextUpgradeable",
              "OwnableUpgradeable"
            ],
            "foundOrder": [
              "OwnableUpgradeable"
            ]
          },
          {
            "kind": "missing-initializer-call",
            "src": "contracts/RoyaltiesRegistry.sol:42",
            "parentContracts": [
              "ContextUpgradeable"
            ]
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            },
            {
              "label": "royaltiesByTokenAndTokenId",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoyaltiesSet)5952_storage)",
              "contract": "RoyaltiesRegistry",
              "src": "contracts/RoyaltiesRegistry.sol:29"
            },
            {
              "label": "royaltiesByToken",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_address,t_struct(RoyaltiesSet)5952_storage)",
              "contract": "RoyaltiesRegistry",
              "src": "contracts/RoyaltiesRegistry.sol:31"
            },
            {
              "label": "royaltiesProviders",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "RoyaltiesRegistry",
              "src": "contracts/RoyaltiesRegistry.sol:33"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "104",
              "type": "t_array(t_uint256)46_storage",
              "contract": "RoyaltiesRegistry",
              "src": "contracts/RoyaltiesRegistry.sol:250"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Part)3802_storage)dyn_storage": {
              "label": "struct LibPart.Part[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(RoyaltiesSet)5952_storage)": {
              "label": "mapping(address => struct RoyaltiesRegistry.RoyaltiesSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoyaltiesSet)5952_storage)": {
              "label": "mapping(bytes32 => struct RoyaltiesRegistry.RoyaltiesSet)",
              "numberOfBytes": "32"
            },
            "t_struct(Part)3802_storage": {
              "label": "struct LibPart.Part",
              "members": [
                {
                  "label": "account",
                  "type": "t_address_payable",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "value",
                  "type": "t_uint96",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RoyaltiesSet)5952_storage": {
              "label": "struct RoyaltiesRegistry.RoyaltiesSet",
              "members": [
                {
                  "label": "initialized",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "royalties",
                  "type": "t_array(t_struct(Part)3802_storage)dyn_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.7.6"
      },
      "contracts/RoyaltiesRegistryPermissioned.sol:RoyaltiesRegistryPermissioned": {
        "src": "contracts/RoyaltiesRegistryPermissioned.sol:19",
        "version": {
          "withMetadata": "ba0302d10a9f613cb266bcb6bf50942996da36a99576925546f8b5d9ed9a9af6",
          "withoutMetadata": "d3b40160c04a94f63029429876b7e17c985a6e4b1f3229cd13d1bdb21998a182",
          "linkedWithoutMetadata": "d3b40160c04a94f63029429876b7e17c985a6e4b1f3229cd13d1bdb21998a182"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:Initializable",
          "@rarible/exchange-interfaces/contracts/IRoyaltiesProvider.sol:IRoyaltiesProvider"
        ],
        "libraries": [
          "@rarible/royalties/contracts/LibRoyaltiesV2.sol:LibRoyaltiesV2",
          "@rarible/royalties/contracts/LibRoyaltiesV1.sol:LibRoyaltiesV1",
          "@rarible/royalties/contracts/LibRoyalties2981.sol:LibRoyalties2981"
        ],
        "methods": [
          "__RoyaltiesRegistry_init(address)",
          "setProviderByToken(address,address)",
          "getProvider(address)",
          "getRoyaltiesType(address)",
          "forceSetRoyaltiesType(address,uint256)",
          "clearRoyaltiesType(address)",
          "setRoyaltiesByToken(address,struct LibPart.Part[])",
          "getRoyalties(address,uint256)",
          "setRoyaltiesAllowed(address,bool)",
          "setRoyaltiesAllowedBulk(address[],bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)39_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
            },
            {
              "label": "royaltiesByTokenAndTokenId",
              "offset": 0,
              "slot": "151",
              "type": "t_mapping(t_bytes32,t_struct(RoyaltiesSet)6799_storage)",
              "contract": "RoyaltiesRegistryPermissioned",
              "src": "contracts/RoyaltiesRegistryPermissioned.sol:35"
            },
            {
              "label": "royaltiesByToken",
              "offset": 0,
              "slot": "152",
              "type": "t_mapping(t_address,t_struct(RoyaltiesSet)6799_storage)",
              "contract": "RoyaltiesRegistryPermissioned",
              "src": "contracts/RoyaltiesRegistryPermissioned.sol:37"
            },
            {
              "label": "royaltiesProviders",
              "offset": 0,
              "slot": "153",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "RoyaltiesRegistryPermissioned",
              "src": "contracts/RoyaltiesRegistryPermissioned.sol:39"
            },
            {
              "label": "royaltiesAllowed",
              "offset": 0,
              "slot": "154",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "RoyaltiesRegistryPermissioned",
              "src": "contracts/RoyaltiesRegistryPermissioned.sol:41"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "155",
              "type": "t_array(t_uint256)45_storage",
              "contract": "RoyaltiesRegistryPermissioned",
              "src": "contracts/RoyaltiesRegistryPermissioned.sol:285"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Part)3802_storage)dyn_storage": {
              "label": "struct LibPart.Part[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(RoyaltiesSet)6799_storage)": {
              "label": "mapping(address => struct RoyaltiesRegistryPermissioned.RoyaltiesSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)39_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoyaltiesSet)6799_storage)": {
              "label": "mapping(bytes32 => struct RoyaltiesRegistryPermissioned.RoyaltiesSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)3314_storage": {
              "label": "struct EnumerableSetUpgradeable.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)3049_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Part)3802_storage": {
              "label": "struct LibPart.Part",
              "members": [
                {
                  "label": "account",
                  "type": "t_address_payable",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "value",
                  "type": "t_uint96",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)39_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_struct(AddressSet)3314_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(RoyaltiesSet)6799_storage": {
              "label": "struct RoyaltiesRegistryPermissioned.RoyaltiesSet",
              "members": [
                {
                  "label": "initialized",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "royalties",
                  "type": "t_array(t_struct(Part)3802_storage)dyn_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)3049_storage": {
              "label": "struct EnumerableSetUpgradeable.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.7.6"
      },
      "contracts/providers/RoyaltiesProviderArtBlocks.sol:RoyaltiesProviderArtBlocks": {
        "src": "contracts/providers/RoyaltiesProviderArtBlocks.sol:11",
        "version": {
          "withMetadata": "1e2aaff383f13e5fe9b70b1ad72e5d67526db35873b9296710be39678b47a6d1",
          "withoutMetadata": "85fa953d5a281a425f5532a39bc6108a04536d88a0e97f5e47ff5cf8e846b985",
          "linkedWithoutMetadata": "85fa953d5a281a425f5532a39bc6108a04536d88a0e97f5e47ff5cf8e846b985"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "@rarible/exchange-interfaces/contracts/IRoyaltiesProvider.sol:IRoyaltiesProvider"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol:SafeMathUpgradeable",
          "@rarible/lib-bp/contracts/BpLibrary.sol:BpLibrary"
        ],
        "methods": [
          "getRoyalties(address,uint256)",
          "setArtblocksPercentage(uint96)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "artblocksPercentage",
            "src": "contracts/providers/RoyaltiesProviderArtBlocks.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            },
            {
              "label": "artblocksPercentage",
              "offset": 20,
              "slot": "0",
              "type": "t_uint96",
              "contract": "RoyaltiesProviderArtBlocks",
              "src": "contracts/providers/RoyaltiesProviderArtBlocks.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.7.6"
      },
      "contracts/providers/RoyaltiesProviderArtBlocksV2.sol:RoyaltiesProviderArtBlocksV2": {
        "src": "contracts/providers/RoyaltiesProviderArtBlocksV2.sol:9",
        "version": {
          "withMetadata": "d69c27ab75132a21e1232ee98511899b0aa73a71d39b4af40a3280acd9f45ff5",
          "withoutMetadata": "4aec8f199ddc0dfbdd000184efe9632daf07f5c891e1ac2f30177a75acba5548",
          "linkedWithoutMetadata": "4aec8f199ddc0dfbdd000184efe9632daf07f5c891e1ac2f30177a75acba5548"
        },
        "inherit": [
          "@rarible/exchange-interfaces/contracts/IRoyaltiesProvider.sol:IRoyaltiesProvider"
        ],
        "libraries": [],
        "methods": [
          "getRoyalties(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.7.6"
      },
      "contracts/providers/RoyaltiesProviderV2Legacy.sol:RoyaltiesProviderV2Legacy": {
        "src": "contracts/providers/RoyaltiesProviderV2Legacy.sol:9",
        "version": {
          "withMetadata": "958f62d774e09a45348cb257054676060915b4d0da02778a7565bfa81af212f0",
          "withoutMetadata": "0365c313cde555df40ebd0b51743e0ce3b1f8eeb4cc9569396852a1db17212b4",
          "linkedWithoutMetadata": "0365c313cde555df40ebd0b51743e0ce3b1f8eeb4cc9569396852a1db17212b4"
        },
        "inherit": [
          "@rarible/exchange-interfaces/contracts/IRoyaltiesProvider.sol:IRoyaltiesProvider"
        ],
        "libraries": [],
        "methods": [
          "getRoyalties(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.7.6"
      },
      "contracts/providers/RoyaltyArtBlocks.sol:RoyaltyArtBlocks": {
        "src": "contracts/providers/RoyaltyArtBlocks.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getRoyaltyData(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.7.6"
      },
      "contracts/providers/RoyaltyArtBlocksV2.sol:RoyaltyArtBlocksV2": {
        "src": "contracts/providers/RoyaltyArtBlocksV2.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getRoyalties(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.7.6"
      },
      "contracts/providers/RoyaltyV2Legacy.sol:RoyaltyV2Legacy": {
        "src": "contracts/providers/RoyaltyV2Legacy.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getRoyalties(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.7.6"
      },
      "contracts/test/royalty-registry/RoyaltiesArtBlocksImpl.sol:RoyaltiesArtBlocksImpl": {
        "src": "contracts/test/royalty-registry/RoyaltiesArtBlocksImpl.sol:8",
        "version": {
          "withMetadata": "492e836c622a6f10a138c009da389b9e1b2c6686fa105ccba4493eec1e386126",
          "withoutMetadata": "bf1a18162813e99ca0aca2e4d8f123f394b03064bdd2574ad54fa7ae42dd333d",
          "linkedWithoutMetadata": "bf1a18162813e99ca0aca2e4d8f123f394b03064bdd2574ad54fa7ae42dd333d"
        },
        "inherit": [
          "contracts/providers/RoyaltyArtBlocks.sol:RoyaltyArtBlocks"
        ],
        "libraries": [],
        "methods": [
          "getRoyaltyData(uint256)",
          "updateProjectAdditionalPayeeInfo(uint256,address payable,uint256)",
          "updateProjectSecondaryMarketRoyaltyPercentage(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "projects",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_struct(Project)8249_storage)",
              "contract": "RoyaltiesArtBlocksImpl",
              "src": "contracts/test/royalty-registry/RoyaltiesArtBlocksImpl.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_uint256,t_struct(Project)8249_storage)": {
              "label": "mapping(uint256 => struct RoyaltiesArtBlocksImpl.Project)",
              "numberOfBytes": "32"
            },
            "t_struct(Project)8249_storage": {
              "label": "struct RoyaltiesArtBlocksImpl.Project",
              "members": [
                {
                  "label": "artistAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "additionalPayee",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "additionalPayeePercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "secondMarketRoyalty",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.7.6"
      },
      "contracts/test/royalty-registry/RoyaltiesProviderTest.sol:RoyaltiesProviderTest": {
        "src": "contracts/test/royalty-registry/RoyaltiesProviderTest.sol:10",
        "version": {
          "withMetadata": "61ae50834421854800bb0572a1c14322c1214a3d9103410b31b0431b46408bf2",
          "withoutMetadata": "c492812224360334c2aa7c4e162aeb92d9fef735490c74e86485ae7a6e0cb53f",
          "linkedWithoutMetadata": "c492812224360334c2aa7c4e162aeb92d9fef735490c74e86485ae7a6e0cb53f"
        },
        "inherit": [
          "@rarible/exchange-interfaces/contracts/IRoyaltiesProvider.sol:IRoyaltiesProvider"
        ],
        "libraries": [],
        "methods": [
          "initializeProvider(address,uint256,struct LibPart.Part[])",
          "getRoyalties(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "royaltiesTest",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_array(t_struct(Part)3802_storage)dyn_storage))",
              "contract": "RoyaltiesProviderTest",
              "src": "contracts/test/royalty-registry/RoyaltiesProviderTest.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Part)3802_storage)dyn_storage": {
              "label": "struct LibPart.Part[]",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_array(t_struct(Part)3802_storage)dyn_storage))": {
              "label": "mapping(address => mapping(uint256 => struct LibPart.Part[]))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_array(t_struct(Part)3802_storage)dyn_storage)": {
              "label": "mapping(uint256 => struct LibPart.Part[])",
              "numberOfBytes": "32"
            },
            "t_struct(Part)3802_storage": {
              "label": "struct LibPart.Part",
              "members": [
                {
                  "label": "account",
                  "type": "t_address_payable",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "value",
                  "type": "t_uint96",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.7.6"
      },
      "contracts/test/royalty-registry/RoyaltiesRegistryOld.sol:RoyaltiesRegistryOld": {
        "src": "contracts/test/royalty-registry/RoyaltiesRegistryOld.sol:17",
        "version": {
          "withMetadata": "43e1d95880f79d46a54c97448bdf781a23484944e6b4a8117191a89b3e1d5818",
          "withoutMetadata": "1ceb68f2fbf58cc79ec9fae189e903cf2a8180a9a4a89d7067358439537721ed",
          "linkedWithoutMetadata": "1ceb68f2fbf58cc79ec9fae189e903cf2a8180a9a4a89d7067358439537721ed"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:Initializable",
          "@rarible/exchange-interfaces/contracts/IRoyaltiesProvider.sol:IRoyaltiesProvider"
        ],
        "libraries": [
          "@rarible/royalties/contracts/LibRoyaltiesV2.sol:LibRoyaltiesV2",
          "@rarible/royalties/contracts/LibRoyalties2981.sol:LibRoyalties2981"
        ],
        "methods": [
          "__RoyaltiesRegistry_init()",
          "setProviderByToken(address,address)",
          "getProvider(address)",
          "setRoyaltiesByToken(address,struct LibPart.Part[])",
          "setRoyaltiesByTokenAndTokenId(address,uint256,struct LibPart.Part[])",
          "getRoyalties(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "incorrect-initializer-order",
            "src": "contracts/test/royalty-registry/RoyaltiesRegistryOld.sol:32",
            "expectedLinearization": [
              "ContextUpgradeable",
              "OwnableUpgradeable"
            ],
            "foundOrder": [
              "OwnableUpgradeable"
            ]
          },
          {
            "kind": "missing-initializer-call",
            "src": "contracts/test/royalty-registry/RoyaltiesRegistryOld.sol:31",
            "parentContracts": [
              "ContextUpgradeable"
            ]
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            },
            {
              "label": "royaltiesByTokenAndTokenId",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoyaltiesSet)8439_storage)",
              "contract": "RoyaltiesRegistryOld",
              "src": "contracts/test/royalty-registry/RoyaltiesRegistryOld.sol:27"
            },
            {
              "label": "royaltiesByToken",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_address,t_struct(RoyaltiesSet)8439_storage)",
              "contract": "RoyaltiesRegistryOld",
              "src": "contracts/test/royalty-registry/RoyaltiesRegistryOld.sol:28"
            },
            {
              "label": "royaltiesProviders",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "RoyaltiesRegistryOld",
              "src": "contracts/test/royalty-registry/RoyaltiesRegistryOld.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "104",
              "type": "t_array(t_uint256)46_storage",
              "contract": "RoyaltiesRegistryOld",
              "src": "contracts/test/royalty-registry/RoyaltiesRegistryOld.sol:167"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Part)3802_storage)dyn_storage": {
              "label": "struct LibPart.Part[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(RoyaltiesSet)8439_storage)": {
              "label": "mapping(address => struct RoyaltiesRegistryOld.RoyaltiesSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoyaltiesSet)8439_storage)": {
              "label": "mapping(bytes32 => struct RoyaltiesRegistryOld.RoyaltiesSet)",
              "numberOfBytes": "32"
            },
            "t_struct(Part)3802_storage": {
              "label": "struct LibPart.Part",
              "members": [
                {
                  "label": "account",
                  "type": "t_address_payable",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "value",
                  "type": "t_uint96",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RoyaltiesSet)8439_storage": {
              "label": "struct RoyaltiesRegistryOld.RoyaltiesSet",
              "members": [
                {
                  "label": "initialized",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "royalties",
                  "type": "t_array(t_struct(Part)3802_storage)dyn_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.7.6"
      },
      "contracts/test/royalty-registry/RoyaltiesRegistryTest.sol:RoyaltiesRegistryTest": {
        "src": "contracts/test/royalty-registry/RoyaltiesRegistryTest.sol:10",
        "version": {
          "withMetadata": "59d7991ea24a1f525290d158ac2c4d56a75b7aec40e3d7174df122dc5d28509b",
          "withoutMetadata": "a53849bc8c1a130982697d19bdde84bc64b67755d81b2740f945b3c0048e357b",
          "linkedWithoutMetadata": "a53849bc8c1a130982697d19bdde84bc64b67755d81b2740f945b3c0048e357b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "_getRoyalties(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.7.6"
      },
      "contracts/test/royalty-registry/RoyaltiesV2LegacyImpl.sol:RoyaltiesV2LegacyImpl": {
        "src": "contracts/test/royalty-registry/RoyaltiesV2LegacyImpl.sol:8",
        "version": {
          "withMetadata": "dd505837278ac07e803b88582112fe790f3539da655789ada56e4d1a7bc05286",
          "withoutMetadata": "ad8b6150fd068b22764049c20b59a3b23c95f86c12987f8f06228c8e9bb3e798",
          "linkedWithoutMetadata": "ad8b6150fd068b22764049c20b59a3b23c95f86c12987f8f06228c8e9bb3e798"
        },
        "inherit": [
          "contracts/providers/RoyaltyV2Legacy.sol:RoyaltyV2Legacy"
        ],
        "libraries": [],
        "methods": [
          "_saveRoyalties(uint256,struct LibPart.Part[])",
          "getRoyalties(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "royalties",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_array(t_struct(Part)3802_storage)dyn_storage)",
              "contract": "RoyaltiesV2LegacyImpl",
              "src": "contracts/test/royalty-registry/RoyaltiesV2LegacyImpl.sol:10"
            }
          ],
          "types": {
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Part)3802_storage)dyn_storage": {
              "label": "struct LibPart.Part[]",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_array(t_struct(Part)3802_storage)dyn_storage)": {
              "label": "mapping(uint256 => struct LibPart.Part[])",
              "numberOfBytes": "32"
            },
            "t_struct(Part)3802_storage": {
              "label": "struct LibPart.Part",
              "members": [
                {
                  "label": "account",
                  "type": "t_address_payable",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "value",
                  "type": "t_uint96",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.7.6"
      },
      "contracts/test/royalty-registry/TestERC721ArtBlocks.sol:TestERC721ArtBlocks": {
        "src": "contracts/test/royalty-registry/TestERC721ArtBlocks.sol:8",
        "version": {
          "withMetadata": "e5fd9a7db5bc7c8942d50d67e3166eb8946addea3daae8548b2ca25ed2f26485",
          "withoutMetadata": "475b38dc7978ab556dcc42ebbf139da30d12d7672ba1304351949de0fd21140e",
          "linkedWithoutMetadata": "475b38dc7978ab556dcc42ebbf139da30d12d7672ba1304351949de0fd21140e"
        },
        "inherit": [
          "contracts/test/royalty-registry/RoyaltiesArtBlocksImpl.sol:RoyaltiesArtBlocksImpl",
          "contracts/providers/RoyaltyArtBlocks.sol:RoyaltyArtBlocks",
          "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:ERC721Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721EnumerableUpgradeable.sol:IERC721EnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721MetadataUpgradeable.sol:IERC721MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol:IERC721Upgradeable",
          "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "missing-initializer",
            "src": "contracts/test/royalty-registry/TestERC721ArtBlocks.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            },
            {
              "label": "_supportedInterfaces",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_bytes4,t_bool)",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
            },
            {
              "label": "_holderTokens",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_address,t_struct(UintSet)3435_storage)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
            },
            {
              "label": "_tokenOwners",
              "offset": 0,
              "slot": "102",
              "type": "t_struct(UintToAddressMap)2812_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "105",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:43"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "106",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:46"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "107",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:49"
            },
            {
              "label": "_tokenURIs",
              "offset": 0,
              "slot": "108",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:52"
            },
            {
              "label": "_baseURI",
              "offset": 0,
              "slot": "109",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:55"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "110",
              "type": "t_array(t_uint256)41_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:480"
            },
            {
              "label": "projects",
              "offset": 0,
              "slot": "151",
              "type": "t_mapping(t_uint256,t_struct(Project)8249_storage)",
              "contract": "RoyaltiesArtBlocksImpl",
              "src": "contracts/test/royalty-registry/RoyaltiesArtBlocksImpl.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(MapEntry)2486_storage)dyn_storage": {
              "label": "struct EnumerableMapUpgradeable.MapEntry[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)41_storage": {
              "label": "uint256[41]",
              "numberOfBytes": "1312"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UintSet)3435_storage)": {
              "label": "mapping(address => struct EnumerableSetUpgradeable.UintSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Project)8249_storage)": {
              "label": "mapping(uint256 => struct RoyaltiesArtBlocksImpl.Project)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Map)2494_storage": {
              "label": "struct EnumerableMapUpgradeable.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)2486_storage)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(MapEntry)2486_storage": {
              "label": "struct EnumerableMapUpgradeable.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Project)8249_storage": {
              "label": "struct RoyaltiesArtBlocksImpl.Project",
              "members": [
                {
                  "label": "artistAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "additionalPayee",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "additionalPayeePercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "secondMarketRoyalty",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Set)3049_storage": {
              "label": "struct EnumerableSetUpgradeable.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintSet)3435_storage": {
              "label": "struct EnumerableSetUpgradeable.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)3049_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintToAddressMap)2812_storage": {
              "label": "struct EnumerableMapUpgradeable.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)2494_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.7.6"
      },
      "contracts/test/tokens/TestERC721ArtBlocksV2.sol:TestERC721ArtBlocksV2": {
        "src": "contracts/test/tokens/TestERC721ArtBlocksV2.sol:8",
        "version": {
          "withMetadata": "8d67827eb0dcec6aef06836291a88a35a40970293e3fbee7f31a990745edbc4d",
          "withoutMetadata": "8d67827eb0dcec6aef06836291a88a35a40970293e3fbee7f31a990745edbc4d",
          "linkedWithoutMetadata": "8d67827eb0dcec6aef06836291a88a35a40970293e3fbee7f31a990745edbc4d"
        },
        "inherit": [
          "contracts/providers/RoyaltyArtBlocksV2.sol:RoyaltyArtBlocksV2",
          "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:ERC721Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721EnumerableUpgradeable.sol:IERC721EnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721MetadataUpgradeable.sol:IERC721MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol:IERC721Upgradeable",
          "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "setRoyalties(uint256,address payable[],uint256[])",
          "getRoyalties(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestERC721ArtBlocksV2",
            "src": "contracts/test/tokens/TestERC721ArtBlocksV2.sol:13"
          },
          {
            "kind": "missing-initializer",
            "src": "contracts/test/tokens/TestERC721ArtBlocksV2.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            },
            {
              "label": "_supportedInterfaces",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_bytes4,t_bool)",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
            },
            {
              "label": "_holderTokens",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_address,t_struct(UintSet)3435_storage)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
            },
            {
              "label": "_tokenOwners",
              "offset": 0,
              "slot": "102",
              "type": "t_struct(UintToAddressMap)2812_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "105",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:43"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "106",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:46"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "107",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:49"
            },
            {
              "label": "_tokenURIs",
              "offset": 0,
              "slot": "108",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:52"
            },
            {
              "label": "_baseURI",
              "offset": 0,
              "slot": "109",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:55"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "110",
              "type": "t_array(t_uint256)41_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:480"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "151",
              "type": "t_mapping(t_uint256,t_array(t_address_payable)dyn_storage)",
              "contract": "TestERC721ArtBlocksV2",
              "src": "contracts/test/tokens/TestERC721ArtBlocksV2.sol:10"
            },
            {
              "label": "_bps",
              "offset": 0,
              "slot": "152",
              "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
              "contract": "TestERC721ArtBlocksV2",
              "src": "contracts/test/tokens/TestERC721ArtBlocksV2.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_array(t_address_payable)dyn_storage": {
              "label": "address payable[]",
              "numberOfBytes": "32"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(MapEntry)2486_storage)dyn_storage": {
              "label": "struct EnumerableMapUpgradeable.MapEntry[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)41_storage": {
              "label": "uint256[41]",
              "numberOfBytes": "1312"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UintSet)3435_storage)": {
              "label": "mapping(address => struct EnumerableSetUpgradeable.UintSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_array(t_address_payable)dyn_storage)": {
              "label": "mapping(uint256 => address payable[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(uint256 => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Map)2494_storage": {
              "label": "struct EnumerableMapUpgradeable.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)2486_storage)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(MapEntry)2486_storage": {
              "label": "struct EnumerableMapUpgradeable.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)3049_storage": {
              "label": "struct EnumerableSetUpgradeable.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintSet)3435_storage": {
              "label": "struct EnumerableSetUpgradeable.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)3049_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintToAddressMap)2812_storage": {
              "label": "struct EnumerableMapUpgradeable.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)2494_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.7.6"
      },
      "contracts/test/tokens/TestERC721RoyaltyV2Legacy.sol:TestERC721RoyaltyV2Legacy": {
        "src": "contracts/test/tokens/TestERC721RoyaltyV2Legacy.sol:8",
        "version": {
          "withMetadata": "0a27129f0b9c4dce7f30503e74f119b9c51334d864fa096e2af02f5d419f79ec",
          "withoutMetadata": "36b5b228216f1dc3ecfc70a0f3e6029197d29b97b67399d71afcccc7679f03f0",
          "linkedWithoutMetadata": "36b5b228216f1dc3ecfc70a0f3e6029197d29b97b67399d71afcccc7679f03f0"
        },
        "inherit": [
          "contracts/test/royalty-registry/RoyaltiesV2LegacyImpl.sol:RoyaltiesV2LegacyImpl",
          "contracts/providers/RoyaltyV2Legacy.sol:RoyaltyV2Legacy",
          "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:ERC721Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721EnumerableUpgradeable.sol:IERC721EnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721MetadataUpgradeable.sol:IERC721MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol:IERC721Upgradeable",
          "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "missing-initializer",
            "src": "contracts/test/tokens/TestERC721RoyaltyV2Legacy.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            },
            {
              "label": "_supportedInterfaces",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_bytes4,t_bool)",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
            },
            {
              "label": "_holderTokens",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_address,t_struct(UintSet)3435_storage)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
            },
            {
              "label": "_tokenOwners",
              "offset": 0,
              "slot": "102",
              "type": "t_struct(UintToAddressMap)2812_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "105",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:43"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "106",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:46"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "107",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:49"
            },
            {
              "label": "_tokenURIs",
              "offset": 0,
              "slot": "108",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:52"
            },
            {
              "label": "_baseURI",
              "offset": 0,
              "slot": "109",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:55"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "110",
              "type": "t_array(t_uint256)41_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:480"
            },
            {
              "label": "royalties",
              "offset": 0,
              "slot": "151",
              "type": "t_mapping(t_uint256,t_array(t_struct(Part)3802_storage)dyn_storage)",
              "contract": "RoyaltiesV2LegacyImpl",
              "src": "contracts/test/royalty-registry/RoyaltiesV2LegacyImpl.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(MapEntry)2486_storage)dyn_storage": {
              "label": "struct EnumerableMapUpgradeable.MapEntry[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Part)3802_storage)dyn_storage": {
              "label": "struct LibPart.Part[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)41_storage": {
              "label": "uint256[41]",
              "numberOfBytes": "1312"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UintSet)3435_storage)": {
              "label": "mapping(address => struct EnumerableSetUpgradeable.UintSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_array(t_struct(Part)3802_storage)dyn_storage)": {
              "label": "mapping(uint256 => struct LibPart.Part[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Map)2494_storage": {
              "label": "struct EnumerableMapUpgradeable.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)2486_storage)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(MapEntry)2486_storage": {
              "label": "struct EnumerableMapUpgradeable.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Part)3802_storage": {
              "label": "struct LibPart.Part",
              "members": [
                {
                  "label": "account",
                  "type": "t_address_payable",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "value",
                  "type": "t_uint96",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Set)3049_storage": {
              "label": "struct EnumerableSetUpgradeable.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintSet)3435_storage": {
              "label": "struct EnumerableSetUpgradeable.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)3049_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintToAddressMap)2812_storage": {
              "label": "struct EnumerableMapUpgradeable.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)2494_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.7.6"
      },
      "contracts/test/tokens/TestERC721WithRoyaltyV1OwnableUpgradeable.sol:TestERC721WithRoyaltiesV1OwnableUpgradeable": {
        "src": "contracts/test/tokens/TestERC721WithRoyaltyV1OwnableUpgradeable.sol:12",
        "version": {
          "withMetadata": "e0e8850fc0048b2d7881b429de8e8b64b60a4db0365009c04b554aa4b3a30bf2",
          "withoutMetadata": "866456683fda5041d4bfc6af0931e33fc1626b0544655ffc5f593055c181e9b9",
          "linkedWithoutMetadata": "866456683fda5041d4bfc6af0931e33fc1626b0544655ffc5f593055c181e9b9"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:ERC721Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721EnumerableUpgradeable.sol:IERC721EnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721MetadataUpgradeable.sol:IERC721MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol:IERC721Upgradeable",
          "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@rarible/royalties/contracts/impl/RoyaltiesV1Impl.sol:RoyaltiesV1Impl",
          "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:Initializable",
          "@rarible/royalties/contracts/RoyaltiesV1.sol:RoyaltiesV1",
          "@rarible/royalties/contracts/impl/AbstractRoyalties.sol:AbstractRoyalties"
        ],
        "libraries": [
          "@rarible/royalties/contracts/LibRoyaltiesV1.sol:LibRoyaltiesV1"
        ],
        "methods": [
          "initialize()",
          "mint(address,uint256,struct LibPart.Part[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "incorrect-initializer-order",
            "src": "contracts/test/tokens/TestERC721WithRoyaltyV1OwnableUpgradeable.sol:15",
            "expectedLinearization": [
              "ContextUpgradeable",
              "ERC721Upgradeable",
              "OwnableUpgradeable"
            ],
            "foundOrder": [
              "OwnableUpgradeable"
            ]
          },
          {
            "kind": "missing-initializer-call",
            "src": "contracts/test/tokens/TestERC721WithRoyaltyV1OwnableUpgradeable.sol:13",
            "parentContracts": [
              "ContextUpgradeable",
              "ERC721Upgradeable"
            ]
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "royalties",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_array(t_struct(Part)3802_storage)dyn_storage)",
              "contract": "AbstractRoyalties",
              "src": "@rarible/royalties/contracts/impl/AbstractRoyalties.sol:8"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "1",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "1",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            },
            {
              "label": "_supportedInterfaces",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_bytes4,t_bool)",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "53",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
            },
            {
              "label": "_holderTokens",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_address,t_struct(UintSet)3435_storage)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
            },
            {
              "label": "_tokenOwners",
              "offset": 0,
              "slot": "103",
              "type": "t_struct(UintToAddressMap)2812_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "105",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "106",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:43"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "107",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:46"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "108",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:49"
            },
            {
              "label": "_tokenURIs",
              "offset": 0,
              "slot": "109",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:52"
            },
            {
              "label": "_baseURI",
              "offset": 0,
              "slot": "110",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:55"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "111",
              "type": "t_array(t_uint256)41_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:480"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "152",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "153",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(MapEntry)2486_storage)dyn_storage": {
              "label": "struct EnumerableMapUpgradeable.MapEntry[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Part)3802_storage)dyn_storage": {
              "label": "struct LibPart.Part[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)41_storage": {
              "label": "uint256[41]",
              "numberOfBytes": "1312"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UintSet)3435_storage)": {
              "label": "mapping(address => struct EnumerableSetUpgradeable.UintSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_array(t_struct(Part)3802_storage)dyn_storage)": {
              "label": "mapping(uint256 => struct LibPart.Part[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Map)2494_storage": {
              "label": "struct EnumerableMapUpgradeable.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)2486_storage)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(MapEntry)2486_storage": {
              "label": "struct EnumerableMapUpgradeable.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Part)3802_storage": {
              "label": "struct LibPart.Part",
              "members": [
                {
                  "label": "account",
                  "type": "t_address_payable",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "value",
                  "type": "t_uint96",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Set)3049_storage": {
              "label": "struct EnumerableSetUpgradeable.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintSet)3435_storage": {
              "label": "struct EnumerableSetUpgradeable.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)3049_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintToAddressMap)2812_storage": {
              "label": "struct EnumerableMapUpgradeable.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)2494_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.7.6"
      },
      "contracts/test/tokens/TestERC721WithRoyaltyV2981.sol:TestERC721WithRoyaltyV2981": {
        "src": "contracts/test/tokens/TestERC721WithRoyaltyV2981.sol:12",
        "version": {
          "withMetadata": "6684ba161a65cee22c56fb39656adc0c60c6621f6683cf2c97adb11ee4790d9b",
          "withoutMetadata": "3859eec611caf7a0d4b9f3b9dc4f9f498c259ec1ffa908975a49afea0d8f2d03",
          "linkedWithoutMetadata": "3859eec611caf7a0d4b9f3b9dc4f9f498c259ec1ffa908975a49afea0d8f2d03"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:ERC721Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721EnumerableUpgradeable.sol:IERC721EnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721MetadataUpgradeable.sol:IERC721MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol:IERC721Upgradeable",
          "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@rarible/royalties/test/contracts/Royalties2981TestImpl.sol:Royalties2981TestImpl",
          "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:Initializable",
          "@rarible/royalties/contracts/IERC2981.sol:IERC2981"
        ],
        "libraries": [
          "@rarible/royalties/contracts/LibRoyalties2981.sol:LibRoyalties2981"
        ],
        "methods": [
          "initialize()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "incorrect-initializer-order",
            "src": "contracts/test/tokens/TestERC721WithRoyaltyV2981.sol:15",
            "expectedLinearization": [
              "ContextUpgradeable",
              "ERC721Upgradeable",
              "OwnableUpgradeable"
            ],
            "foundOrder": [
              "OwnableUpgradeable"
            ]
          },
          {
            "kind": "missing-initializer-call",
            "src": "contracts/test/tokens/TestERC721WithRoyaltyV2981.sol:13",
            "parentContracts": [
              "ContextUpgradeable",
              "ERC721Upgradeable"
            ]
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            },
            {
              "label": "royaltiesBasePoint",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "Royalties2981TestImpl",
              "src": "@rarible/royalties/test/contracts/Royalties2981TestImpl.sol:11"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            },
            {
              "label": "_supportedInterfaces",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_bytes4,t_bool)",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "53",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
            },
            {
              "label": "_holderTokens",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_address,t_struct(UintSet)3435_storage)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
            },
            {
              "label": "_tokenOwners",
              "offset": 0,
              "slot": "103",
              "type": "t_struct(UintToAddressMap)2812_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "105",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "106",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:43"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "107",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:46"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "108",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:49"
            },
            {
              "label": "_tokenURIs",
              "offset": 0,
              "slot": "109",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:52"
            },
            {
              "label": "_baseURI",
              "offset": 0,
              "slot": "110",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:55"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "111",
              "type": "t_array(t_uint256)41_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:480"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "152",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "153",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(MapEntry)2486_storage)dyn_storage": {
              "label": "struct EnumerableMapUpgradeable.MapEntry[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)41_storage": {
              "label": "uint256[41]",
              "numberOfBytes": "1312"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UintSet)3435_storage)": {
              "label": "mapping(address => struct EnumerableSetUpgradeable.UintSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Map)2494_storage": {
              "label": "struct EnumerableMapUpgradeable.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)2486_storage)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(MapEntry)2486_storage": {
              "label": "struct EnumerableMapUpgradeable.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)3049_storage": {
              "label": "struct EnumerableSetUpgradeable.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintSet)3435_storage": {
              "label": "struct EnumerableSetUpgradeable.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)3049_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintToAddressMap)2812_storage": {
              "label": "struct EnumerableMapUpgradeable.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)2494_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.7.6"
      },
      "contracts/test/tokens/TestERC721WithRoyaltyV2OwnableUpgradeable.sol:TestERC721WithRoyaltiesV2OwnableUpgradeable": {
        "src": "contracts/test/tokens/TestERC721WithRoyaltyV2OwnableUpgradeable.sol:12",
        "version": {
          "withMetadata": "822ca4fd6b92a97e40a41d5a24964fc7354e910539e0afb018e3b7ef927b3854",
          "withoutMetadata": "69494a04dacf64f4e01f6478bf93dfcc0c31fbedd0293efcb5b06734c01a0243",
          "linkedWithoutMetadata": "69494a04dacf64f4e01f6478bf93dfcc0c31fbedd0293efcb5b06734c01a0243"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:ERC721Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721EnumerableUpgradeable.sol:IERC721EnumerableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721MetadataUpgradeable.sol:IERC721MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol:IERC721Upgradeable",
          "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@rarible/royalties/contracts/impl/RoyaltiesV2Impl.sol:RoyaltiesV2Impl",
          "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:Initializable",
          "@rarible/royalties/contracts/IERC2981.sol:IERC2981",
          "@rarible/royalties/contracts/RoyaltiesV2.sol:RoyaltiesV2",
          "@rarible/royalties/contracts/impl/AbstractRoyalties.sol:AbstractRoyalties"
        ],
        "libraries": [
          "@rarible/royalties/contracts/LibRoyaltiesV2.sol:LibRoyaltiesV2"
        ],
        "methods": [
          "initialize()",
          "mint(address,uint256,struct LibPart.Part[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "incorrect-initializer-order",
            "src": "contracts/test/tokens/TestERC721WithRoyaltyV2OwnableUpgradeable.sol:15",
            "expectedLinearization": [
              "ContextUpgradeable",
              "ERC721Upgradeable",
              "OwnableUpgradeable"
            ],
            "foundOrder": [
              "OwnableUpgradeable"
            ]
          },
          {
            "kind": "missing-initializer-call",
            "src": "contracts/test/tokens/TestERC721WithRoyaltyV2OwnableUpgradeable.sol:13",
            "parentContracts": [
              "ContextUpgradeable",
              "ERC721Upgradeable"
            ]
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "royalties",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_array(t_struct(Part)3802_storage)dyn_storage)",
              "contract": "AbstractRoyalties",
              "src": "@rarible/royalties/contracts/impl/AbstractRoyalties.sol:8"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "1",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "1",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            },
            {
              "label": "_supportedInterfaces",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_bytes4,t_bool)",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "53",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
            },
            {
              "label": "_holderTokens",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_address,t_struct(UintSet)3435_storage)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
            },
            {
              "label": "_tokenOwners",
              "offset": 0,
              "slot": "103",
              "type": "t_struct(UintToAddressMap)2812_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "105",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "106",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:43"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "107",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:46"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "108",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:49"
            },
            {
              "label": "_tokenURIs",
              "offset": 0,
              "slot": "109",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:52"
            },
            {
              "label": "_baseURI",
              "offset": 0,
              "slot": "110",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:55"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "111",
              "type": "t_array(t_uint256)41_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:480"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "152",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "153",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(MapEntry)2486_storage)dyn_storage": {
              "label": "struct EnumerableMapUpgradeable.MapEntry[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Part)3802_storage)dyn_storage": {
              "label": "struct LibPart.Part[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)41_storage": {
              "label": "uint256[41]",
              "numberOfBytes": "1312"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UintSet)3435_storage)": {
              "label": "mapping(address => struct EnumerableSetUpgradeable.UintSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_array(t_struct(Part)3802_storage)dyn_storage)": {
              "label": "mapping(uint256 => struct LibPart.Part[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Map)2494_storage": {
              "label": "struct EnumerableMapUpgradeable.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)2486_storage)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(MapEntry)2486_storage": {
              "label": "struct EnumerableMapUpgradeable.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Part)3802_storage": {
              "label": "struct LibPart.Part",
              "members": [
                {
                  "label": "account",
                  "type": "t_address_payable",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "value",
                  "type": "t_uint96",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Set)3049_storage": {
              "label": "struct EnumerableSetUpgradeable.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintSet)3435_storage": {
              "label": "struct EnumerableSetUpgradeable.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)3049_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintToAddressMap)2812_storage": {
              "label": "struct EnumerableMapUpgradeable.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)2494_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.7.6"
      }
    },
    {
      "contracts/Migrations.sol:Migrations": {
        "src": "contracts/Migrations.sol:5",
        "version": {
          "withMetadata": "23a330354d060ecec2688ac1309b400ac3af8cdd72eb0a9add2340fa3e4f8dac",
          "withoutMetadata": "5e9a930d422fc2cdb9120658e99d215c882773554764e974cf2cac295f8bfb2c",
          "linkedWithoutMetadata": "5e9a930d422fc2cdb9120658e99d215c882773554764e974cf2cac295f8bfb2c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "setCompleted(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "owner",
            "src": "contracts/Migrations.sol:6"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Migrations",
              "src": "contracts/Migrations.sol:6"
            },
            {
              "label": "last_completed_migration",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "Migrations",
              "src": "contracts/Migrations.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.7.6"
      }
    }
  ]
}