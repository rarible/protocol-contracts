/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace LibPart {
  export type PartStruct = {
    account: PromiseOrValue<string>;
    value: PromiseOrValue<BigNumberish>;
  };

  export type PartStructOutput = [string, BigNumber] & {
    account: string;
    value: BigNumber;
  };
}

export interface RoyaltiesRegistryTestInterface extends utils.Interface {
  functions: {
    "_getRoyalties(address,address,uint256)": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "_getRoyalties"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_getRoyalties",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "_getRoyalties",
    data: BytesLike
  ): Result;

  events: {
    "getRoyaltiesTest(tuple[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "getRoyaltiesTest"): EventFragment;
}

export interface getRoyaltiesTestEventObject {
  royalties: LibPart.PartStructOutput[];
}
export type getRoyaltiesTestEvent = TypedEvent<
  [LibPart.PartStructOutput[]],
  getRoyaltiesTestEventObject
>;

export type getRoyaltiesTestEventFilter =
  TypedEventFilter<getRoyaltiesTestEvent>;

export interface RoyaltiesRegistryTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RoyaltiesRegistryTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _getRoyalties(
      royaltiesTest: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  _getRoyalties(
    royaltiesTest: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _getRoyalties(
      royaltiesTest: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "getRoyaltiesTest(tuple[])"(royalties?: null): getRoyaltiesTestEventFilter;
    getRoyaltiesTest(royalties?: null): getRoyaltiesTestEventFilter;
  };

  estimateGas: {
    _getRoyalties(
      royaltiesTest: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _getRoyalties(
      royaltiesTest: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
