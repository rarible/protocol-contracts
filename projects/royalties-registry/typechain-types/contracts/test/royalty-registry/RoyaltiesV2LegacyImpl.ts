/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace LibPart {
  export type PartStruct = {
    account: PromiseOrValue<string>;
    value: PromiseOrValue<BigNumberish>;
  };

  export type PartStructOutput = [string, BigNumber] & {
    account: string;
    value: BigNumber;
  };
}

export interface RoyaltiesV2LegacyImplInterface extends utils.Interface {
  functions: {
    "_saveRoyalties(uint256,(address,uint96)[])": FunctionFragment;
    "getRoyalties(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "_saveRoyalties" | "getRoyalties"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_saveRoyalties",
    values: [PromiseOrValue<BigNumberish>, LibPart.PartStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoyalties",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "_saveRoyalties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoyalties",
    data: BytesLike
  ): Result;

  events: {
    "RoyaltiesSet(uint256,tuple[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RoyaltiesSet"): EventFragment;
}

export interface RoyaltiesSetEventObject {
  tokenId: BigNumber;
  royalties: LibPart.PartStructOutput[];
}
export type RoyaltiesSetEvent = TypedEvent<
  [BigNumber, LibPart.PartStructOutput[]],
  RoyaltiesSetEventObject
>;

export type RoyaltiesSetEventFilter = TypedEventFilter<RoyaltiesSetEvent>;

export interface RoyaltiesV2LegacyImpl extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RoyaltiesV2LegacyImplInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _saveRoyalties(
      id: PromiseOrValue<BigNumberish>,
      _royalties: LibPart.PartStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getRoyalties(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[LibPart.PartStructOutput[]]>;
  };

  _saveRoyalties(
    id: PromiseOrValue<BigNumberish>,
    _royalties: LibPart.PartStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getRoyalties(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<LibPart.PartStructOutput[]>;

  callStatic: {
    _saveRoyalties(
      id: PromiseOrValue<BigNumberish>,
      _royalties: LibPart.PartStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    getRoyalties(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<LibPart.PartStructOutput[]>;
  };

  filters: {
    "RoyaltiesSet(uint256,tuple[])"(
      tokenId?: null,
      royalties?: null
    ): RoyaltiesSetEventFilter;
    RoyaltiesSet(tokenId?: null, royalties?: null): RoyaltiesSetEventFilter;
  };

  estimateGas: {
    _saveRoyalties(
      id: PromiseOrValue<BigNumberish>,
      _royalties: LibPart.PartStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getRoyalties(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _saveRoyalties(
      id: PromiseOrValue<BigNumberish>,
      _royalties: LibPart.PartStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getRoyalties(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
