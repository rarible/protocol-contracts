/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  RoyaltiesProviderTest,
  RoyaltiesProviderTestInterface,
} from "../../../../contracts/test/royalty-registry/RoyaltiesProviderTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getRoyalties",
    outputs: [
      {
        components: [
          {
            internalType: "address payable",
            name: "account",
            type: "address",
          },
          {
            internalType: "uint96",
            name: "value",
            type: "uint96",
          },
        ],
        internalType: "struct LibPart.Part[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "address payable",
            name: "account",
            type: "address",
          },
          {
            internalType: "uint96",
            name: "value",
            type: "uint96",
          },
        ],
        internalType: "struct LibPart.Part[]",
        name: "royalties",
        type: "tuple[]",
      },
    ],
    name: "initializeProvider",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610419806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80633ccd0a521461003b5780639ca7dc7a14610050575b600080fd5b61004e61004936600461023f565b610079565b005b61006361005e366004610214565b610141565b6040516100709190610349565b60405180910390f35b6001600160a01b03831660009081526020818152604080832085845290915281206100a3916101da565b60005b815181101561013b576001600160a01b038416600090815260208181526040808320868452909152902082518390839081106100de57fe5b60209081029190910181015182546001818101855560009485529383902082519101805492909301516001600160601b0316600160a01b026001600160a01b039182166001600160a01b03199093169290921716179055016100a6565b50505050565b6001600160a01b0382166000908152602081815260408083208484528252808320805482518185028101850190935280835260609492939192909184015b828210156101ce57600084815260209081902060408051808201909152908401546001600160a01b0381168252600160a01b90046001600160601b03168183015282526001909201910161017f565b50505050905092915050565b50805460008255906000526020600020908101906101f891906101fb565b50565b5b8082111561021057600081556001016101fc565b5090565b60008060408385031215610226578182fd5b8235610231816103ce565b946020939093013593505050565b600080600060608486031215610253578081fd5b833561025e816103ce565b9250602084810135925060408086013567ffffffffffffffff80821115610283578485fd5b818801915088601f830112610296578485fd5b8135818111156102a257fe5b6102af85868302016103aa565b81815285810190848701868402860188018d10156102cb578889fd5b8895505b838610156103375786818e0312156102e5578889fd5b865187810181811087821117156102f857fe5b88528135610305816103ce565b8152818901356001600160601b038116811461031f578a8bfd5b818a01528352600195909501949187019186016102cf565b50809750505050505050509250925092565b602080825282518282018190526000919060409081850190868401855b8281101561039d57815180516001600160a01b031685528601516001600160601b0316868501529284019290850190600101610366565b5091979650505050505050565b60405181810167ffffffffffffffff811182821017156103c657fe5b604052919050565b6001600160a01b03811681146101f857600080fdfea2646970667358221220bb7a283e42e4ebfb685ba4176781ba3dd39962d73c090ad633a5d45820b1b1cf64736f6c63430007060033";

type RoyaltiesProviderTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RoyaltiesProviderTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RoyaltiesProviderTest__factory extends ContractFactory {
  constructor(...args: RoyaltiesProviderTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<RoyaltiesProviderTest> {
    return super.deploy(overrides || {}) as Promise<RoyaltiesProviderTest>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): RoyaltiesProviderTest {
    return super.attach(address) as RoyaltiesProviderTest;
  }
  override connect(signer: Signer): RoyaltiesProviderTest__factory {
    return super.connect(signer) as RoyaltiesProviderTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RoyaltiesProviderTestInterface {
    return new utils.Interface(_abi) as RoyaltiesProviderTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RoyaltiesProviderTest {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as RoyaltiesProviderTest;
  }
}
