/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  RoyaltiesRegistryTest,
  RoyaltiesRegistryTestInterface,
} from "../../../../contracts/test/royalty-registry/RoyaltiesRegistryTest";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "address payable",
            name: "account",
            type: "address",
          },
          {
            internalType: "uint96",
            name: "value",
            type: "uint96",
          },
        ],
        indexed: false,
        internalType: "struct LibPart.Part[]",
        name: "royalties",
        type: "tuple[]",
      },
    ],
    name: "getRoyaltiesTest",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "royaltiesTest",
        type: "address",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "_getRoyalties",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610334806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80636fc2ffa614610030575b600080fd5b61004361003e36600461010e565b610045565b005b604051634e53ee3d60e11b815283906000906001600160a01b03831690639ca7dc7a906100789087908790600401610243565b600060405180830381600087803b15801561009257600080fd5b505af11580156100a6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526100ce919081019061014e565b90507fbad441da2f332e8da73c536e34c9f618998ec1149ac88bfb3a9eb977bc8f8db7816040516100ff919061025c565b60405180910390a15050505050565b600080600060608486031215610122578283fd5b833561012d816102e6565b9250602084013561013d816102e6565b929592945050506040919091013590565b60006020808385031215610160578182fd5b825167ffffffffffffffff80821115610177578384fd5b818501915085601f83011261018a578384fd5b81518181111561019657fe5b6101a384858302016102c2565b818152848101908486016040808502870188018b10156101c1578889fd5b8896505b848710156102345780828c0312156101db578889fd5b805181810181811088821117156101ee57fe5b825282516101fb816102e6565b8152828901516bffffffffffffffffffffffff8116811461021a578a8bfd5b818a015284526001969096019592870192908101906101c5565b50909998505050505050505050565b6001600160a01b03929092168252602082015260400190565b602080825282518282018190526000919060409081850190868401855b828110156102b557815180516001600160a01b031685528601516bffffffffffffffffffffffff16868501529284019290850190600101610279565b5091979650505050505050565b60405181810167ffffffffffffffff811182821017156102de57fe5b604052919050565b6001600160a01b03811681146102fb57600080fd5b5056fea2646970667358221220c31682a73485839abeeb49b80b195e4cb0551cfd932c1a6e0d2aa4542c55a1d464736f6c63430007060033";

type RoyaltiesRegistryTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RoyaltiesRegistryTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RoyaltiesRegistryTest__factory extends ContractFactory {
  constructor(...args: RoyaltiesRegistryTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<RoyaltiesRegistryTest> {
    return super.deploy(overrides || {}) as Promise<RoyaltiesRegistryTest>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): RoyaltiesRegistryTest {
    return super.attach(address) as RoyaltiesRegistryTest;
  }
  override connect(signer: Signer): RoyaltiesRegistryTest__factory {
    return super.connect(signer) as RoyaltiesRegistryTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RoyaltiesRegistryTestInterface {
    return new utils.Interface(_abi) as RoyaltiesRegistryTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RoyaltiesRegistryTest {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as RoyaltiesRegistryTest;
  }
}
