/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IDropERC721 {
  export type ClaimConditionStruct = {
    startTimestamp: PromiseOrValue<BigNumberish>;
    maxClaimableSupply: PromiseOrValue<BigNumberish>;
    supplyClaimed: PromiseOrValue<BigNumberish>;
    quantityLimitPerWallet: PromiseOrValue<BigNumberish>;
    merkleRoot: PromiseOrValue<BytesLike>;
    pricePerToken: PromiseOrValue<BigNumberish>;
    currency: PromiseOrValue<string>;
    metadata: PromiseOrValue<string>;
  };

  export type ClaimConditionStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    string,
    string
  ] & {
    startTimestamp: BigNumber;
    maxClaimableSupply: BigNumber;
    supplyClaimed: BigNumber;
    quantityLimitPerWallet: BigNumber;
    merkleRoot: string;
    pricePerToken: BigNumber;
    currency: string;
    metadata: string;
  };
}

export declare namespace DropERC721Reader {
  export type FeeDataStruct = {
    recipient: PromiseOrValue<string>;
    bps: PromiseOrValue<BigNumberish>;
  };

  export type FeeDataStructOutput = [string, BigNumber] & {
    recipient: string;
    bps: BigNumber;
  };

  export type GlobalDataStruct = {
    totalMinted: PromiseOrValue<BigNumberish>;
    claimedByUser: PromiseOrValue<BigNumberish>;
    totalSupply: PromiseOrValue<BigNumberish>;
    maxTotalSupply: PromiseOrValue<BigNumberish>;
    nextTokenIdToMint: PromiseOrValue<BigNumberish>;
    nextTokenIdToClaim: PromiseOrValue<BigNumberish>;
    name: PromiseOrValue<string>;
    symbol: PromiseOrValue<string>;
    contractURI: PromiseOrValue<string>;
    baseURICount: PromiseOrValue<BigNumberish>;
    userBalance: PromiseOrValue<BigNumberish>;
    blockTimeStamp: PromiseOrValue<BigNumberish>;
    defaultRoyaltyInfo: DropERC721Reader.FeeDataStruct;
    platformFeeInfo: DropERC721Reader.FeeDataStruct;
  };

  export type GlobalDataStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    DropERC721Reader.FeeDataStructOutput,
    DropERC721Reader.FeeDataStructOutput
  ] & {
    totalMinted: BigNumber;
    claimedByUser: BigNumber;
    totalSupply: BigNumber;
    maxTotalSupply: BigNumber;
    nextTokenIdToMint: BigNumber;
    nextTokenIdToClaim: BigNumber;
    name: string;
    symbol: string;
    contractURI: string;
    baseURICount: BigNumber;
    userBalance: BigNumber;
    blockTimeStamp: BigNumber;
    defaultRoyaltyInfo: DropERC721Reader.FeeDataStructOutput;
    platformFeeInfo: DropERC721Reader.FeeDataStructOutput;
  };
}

export interface DropERC721ReaderInterface extends utils.Interface {
  functions: {
    "getAllData(address,address)": FunctionFragment;
    "initialize(address,address,address)": FunctionFragment;
    "native1()": FunctionFragment;
    "native2()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getAllData"
      | "initialize"
      | "native1"
      | "native2"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAllData",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "native1", values?: undefined): string;
  encodeFunctionData(functionFragment: "native2", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "getAllData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "native1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "native2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface DropERC721Reader extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DropERC721ReaderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getAllData(
      _dropERC721: PromiseOrValue<string>,
      _claimer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        IDropERC721.ClaimConditionStructOutput[],
        DropERC721Reader.GlobalDataStructOutput
      ] & {
        activeClaimConditionIndex: BigNumber;
        conditions: IDropERC721.ClaimConditionStructOutput[];
        globalData: DropERC721Reader.GlobalDataStructOutput;
      }
    >;

    initialize(
      _native1: PromiseOrValue<string>,
      _native2: PromiseOrValue<string>,
      initialOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    native1(overrides?: CallOverrides): Promise<[string]>;

    native2(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getAllData(
    _dropERC721: PromiseOrValue<string>,
    _claimer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      IDropERC721.ClaimConditionStructOutput[],
      DropERC721Reader.GlobalDataStructOutput
    ] & {
      activeClaimConditionIndex: BigNumber;
      conditions: IDropERC721.ClaimConditionStructOutput[];
      globalData: DropERC721Reader.GlobalDataStructOutput;
    }
  >;

  initialize(
    _native1: PromiseOrValue<string>,
    _native2: PromiseOrValue<string>,
    initialOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  native1(overrides?: CallOverrides): Promise<string>;

  native2(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getAllData(
      _dropERC721: PromiseOrValue<string>,
      _claimer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        IDropERC721.ClaimConditionStructOutput[],
        DropERC721Reader.GlobalDataStructOutput
      ] & {
        activeClaimConditionIndex: BigNumber;
        conditions: IDropERC721.ClaimConditionStructOutput[];
        globalData: DropERC721Reader.GlobalDataStructOutput;
      }
    >;

    initialize(
      _native1: PromiseOrValue<string>,
      _native2: PromiseOrValue<string>,
      initialOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    native1(overrides?: CallOverrides): Promise<string>;

    native2(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    getAllData(
      _dropERC721: PromiseOrValue<string>,
      _claimer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _native1: PromiseOrValue<string>,
      _native2: PromiseOrValue<string>,
      initialOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    native1(overrides?: CallOverrides): Promise<BigNumber>;

    native2(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAllData(
      _dropERC721: PromiseOrValue<string>,
      _claimer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _native1: PromiseOrValue<string>,
      _native2: PromiseOrValue<string>,
      initialOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    native1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    native2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
