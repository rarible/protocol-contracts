/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IDropERC721 {
  export type ClaimConditionStruct = {
    startTimestamp: PromiseOrValue<BigNumberish>;
    maxClaimableSupply: PromiseOrValue<BigNumberish>;
    supplyClaimed: PromiseOrValue<BigNumberish>;
    quantityLimitPerWallet: PromiseOrValue<BigNumberish>;
    merkleRoot: PromiseOrValue<BytesLike>;
    pricePerToken: PromiseOrValue<BigNumberish>;
    currency: PromiseOrValue<string>;
    metadata: PromiseOrValue<string>;
  };

  export type ClaimConditionStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    string,
    string
  ] & {
    startTimestamp: BigNumber;
    maxClaimableSupply: BigNumber;
    supplyClaimed: BigNumber;
    quantityLimitPerWallet: BigNumber;
    merkleRoot: string;
    pricePerToken: BigNumber;
    currency: string;
    metadata: string;
  };
}

export interface IDropERC721Interface extends utils.Interface {
  functions: {
    "claimCondition()": FunctionFragment;
    "contractURI()": FunctionFragment;
    "getActiveClaimConditionId()": FunctionFragment;
    "getBaseURICount()": FunctionFragment;
    "getClaimConditionById(uint256)": FunctionFragment;
    "getDefaultRoyaltyInfo()": FunctionFragment;
    "getPlatformFeeInfo()": FunctionFragment;
    "getSupplyClaimedByWallet(uint256,address)": FunctionFragment;
    "maxTotalSupply()": FunctionFragment;
    "name()": FunctionFragment;
    "nextTokenIdToClaim()": FunctionFragment;
    "nextTokenIdToMint()": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalMinted()": FunctionFragment;
    "totalSupply()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "claimCondition"
      | "contractURI"
      | "getActiveClaimConditionId"
      | "getBaseURICount"
      | "getClaimConditionById"
      | "getDefaultRoyaltyInfo"
      | "getPlatformFeeInfo"
      | "getSupplyClaimedByWallet"
      | "maxTotalSupply"
      | "name"
      | "nextTokenIdToClaim"
      | "nextTokenIdToMint"
      | "symbol"
      | "totalMinted"
      | "totalSupply"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claimCondition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveClaimConditionId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBaseURICount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimConditionById",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDefaultRoyaltyInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlatformFeeInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSupplyClaimedByWallet",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "maxTotalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextTokenIdToClaim",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextTokenIdToMint",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalMinted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "claimCondition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveClaimConditionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBaseURICount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimConditionById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDefaultRoyaltyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlatformFeeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupplyClaimedByWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextTokenIdToClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextTokenIdToMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalMinted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;

  events: {
    "ClaimConditionsUpdated(tuple[],bool)": EventFragment;
    "TokensClaimed(uint256,address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClaimConditionsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensClaimed"): EventFragment;
}

export interface ClaimConditionsUpdatedEventObject {
  claimConditions: IDropERC721.ClaimConditionStructOutput[];
  resetEligibility: boolean;
}
export type ClaimConditionsUpdatedEvent = TypedEvent<
  [IDropERC721.ClaimConditionStructOutput[], boolean],
  ClaimConditionsUpdatedEventObject
>;

export type ClaimConditionsUpdatedEventFilter =
  TypedEventFilter<ClaimConditionsUpdatedEvent>;

export interface TokensClaimedEventObject {
  claimConditionIndex: BigNumber;
  claimer: string;
  receiver: string;
  startTokenId: BigNumber;
  quantityClaimed: BigNumber;
}
export type TokensClaimedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber],
  TokensClaimedEventObject
>;

export type TokensClaimedEventFilter = TypedEventFilter<TokensClaimedEvent>;

export interface IDropERC721 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IDropERC721Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claimCondition(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { currentStartId: BigNumber; count: BigNumber }
    >;

    contractURI(overrides?: CallOverrides): Promise<[string]>;

    getActiveClaimConditionId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBaseURICount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getClaimConditionById(
      _conditionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [IDropERC721.ClaimConditionStructOutput] & {
        condition: IDropERC721.ClaimConditionStructOutput;
      }
    >;

    getDefaultRoyaltyInfo(overrides?: CallOverrides): Promise<[string, number]>;

    getPlatformFeeInfo(overrides?: CallOverrides): Promise<[string, number]>;

    getSupplyClaimedByWallet(
      _conditionId: PromiseOrValue<BigNumberish>,
      _claimer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxTotalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nextTokenIdToClaim(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextTokenIdToMint(overrides?: CallOverrides): Promise<[BigNumber]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalMinted(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  claimCondition(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { currentStartId: BigNumber; count: BigNumber }
  >;

  contractURI(overrides?: CallOverrides): Promise<string>;

  getActiveClaimConditionId(overrides?: CallOverrides): Promise<BigNumber>;

  getBaseURICount(overrides?: CallOverrides): Promise<BigNumber>;

  getClaimConditionById(
    _conditionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IDropERC721.ClaimConditionStructOutput>;

  getDefaultRoyaltyInfo(overrides?: CallOverrides): Promise<[string, number]>;

  getPlatformFeeInfo(overrides?: CallOverrides): Promise<[string, number]>;

  getSupplyClaimedByWallet(
    _conditionId: PromiseOrValue<BigNumberish>,
    _claimer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  nextTokenIdToClaim(overrides?: CallOverrides): Promise<BigNumber>;

  nextTokenIdToMint(overrides?: CallOverrides): Promise<BigNumber>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalMinted(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    claimCondition(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { currentStartId: BigNumber; count: BigNumber }
    >;

    contractURI(overrides?: CallOverrides): Promise<string>;

    getActiveClaimConditionId(overrides?: CallOverrides): Promise<BigNumber>;

    getBaseURICount(overrides?: CallOverrides): Promise<BigNumber>;

    getClaimConditionById(
      _conditionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IDropERC721.ClaimConditionStructOutput>;

    getDefaultRoyaltyInfo(overrides?: CallOverrides): Promise<[string, number]>;

    getPlatformFeeInfo(overrides?: CallOverrides): Promise<[string, number]>;

    getSupplyClaimedByWallet(
      _conditionId: PromiseOrValue<BigNumberish>,
      _claimer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    nextTokenIdToClaim(overrides?: CallOverrides): Promise<BigNumber>;

    nextTokenIdToMint(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalMinted(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "ClaimConditionsUpdated(tuple[],bool)"(
      claimConditions?: null,
      resetEligibility?: null
    ): ClaimConditionsUpdatedEventFilter;
    ClaimConditionsUpdated(
      claimConditions?: null,
      resetEligibility?: null
    ): ClaimConditionsUpdatedEventFilter;

    "TokensClaimed(uint256,address,address,uint256,uint256)"(
      claimConditionIndex?: PromiseOrValue<BigNumberish> | null,
      claimer?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      startTokenId?: null,
      quantityClaimed?: null
    ): TokensClaimedEventFilter;
    TokensClaimed(
      claimConditionIndex?: PromiseOrValue<BigNumberish> | null,
      claimer?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      startTokenId?: null,
      quantityClaimed?: null
    ): TokensClaimedEventFilter;
  };

  estimateGas: {
    claimCondition(overrides?: CallOverrides): Promise<BigNumber>;

    contractURI(overrides?: CallOverrides): Promise<BigNumber>;

    getActiveClaimConditionId(overrides?: CallOverrides): Promise<BigNumber>;

    getBaseURICount(overrides?: CallOverrides): Promise<BigNumber>;

    getClaimConditionById(
      _conditionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDefaultRoyaltyInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getPlatformFeeInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getSupplyClaimedByWallet(
      _conditionId: PromiseOrValue<BigNumberish>,
      _claimer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nextTokenIdToClaim(overrides?: CallOverrides): Promise<BigNumber>;

    nextTokenIdToMint(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalMinted(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    claimCondition(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contractURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getActiveClaimConditionId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBaseURICount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getClaimConditionById(
      _conditionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDefaultRoyaltyInfo(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlatformFeeInfo(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSupplyClaimedByWallet(
      _conditionId: PromiseOrValue<BigNumberish>,
      _claimer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxTotalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextTokenIdToClaim(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextTokenIdToMint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalMinted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
