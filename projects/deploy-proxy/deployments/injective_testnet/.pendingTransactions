{
  "0x10cba3bfc637d020a172d2147d2634584b335a0eac397d7595eb81bc94cdfd0a": {
    "name": "ImmutableCreate2Factory",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "ImmutableCreate2Factory",
      "sourceName": "contracts/ImmutableCreate2Factory.sol",
      "abi": [
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "salt",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "initCode",
              "type": "bytes"
            }
          ],
          "name": "findCreate2Address",
          "outputs": [
            {
              "internalType": "address",
              "name": "deploymentAddress",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "salt",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "initCodeHash",
              "type": "bytes32"
            }
          ],
          "name": "findCreate2AddressViaHash",
          "outputs": [
            {
              "internalType": "address",
              "name": "deploymentAddress",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "deploymentAddress",
              "type": "address"
            }
          ],
          "name": "hasBeenDeployed",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "salt",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "initializationCode",
              "type": "bytes"
            }
          ],
          "name": "safeCreate2",
          "outputs": [
            {
              "internalType": "address",
              "name": "deploymentAddress",
              "type": "address"
            }
          ],
          "stateMutability": "payable",
          "type": "function"
        }
      ],
      "bytecode": "0x608060405234801561001057600080fd5b506105e6806100206000396000f3fe60806040526004361061003f5760003560e01c806308508b8f1461004457806364e030871461009257806385cf97ab146100bd578063a49a7c90146100dd575b600080fd5b34801561005057600080fd5b5061007d61005f366004610472565b6001600160a01b031660009081526020819052604090205460ff1690565b60405190151581526020015b60405180910390f35b6100a56100a036600461049b565b6100fd565b6040516001600160a01b039091168152602001610089565b3480156100c957600080fd5b506100a56100d836600461049b565b610395565b3480156100e957600080fd5b506100a56100f8366004610517565b610418565b600083606081901c33148061011f57506bffffffffffffffffffffffff198116155b6101a45760405162461bcd60e51b815260206004820152604560248201527f496e76616c69642073616c74202d206669727374203230206279746573206f6660448201527f207468652073616c74206d757374206d617463682063616c6c696e67206164646064820152643932b9b99760d91b608482015260a4015b60405180910390fd5b600084848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250604051949550933093508a92506101f491508590602001610539565b6040516020818303038152906040528051906020012060405160200161021c93929190610568565b60408051601f1981840301815291815281516020928301206001600160a01b03811660009081529283905291205490915060ff16156102c35760405162461bcd60e51b815260206004820152603f60248201527f496e76616c696420636f6e7472616374206372656174696f6e202d20636f6e7460448201527f726163742068617320616c7265616479206265656e206465706c6f7965642e00606482015260840161019b565b81602001825188818334f595505050806001600160a01b0316846001600160a01b0316146103685760405162461bcd60e51b815260206004820152604660248201527f4661696c656420746f206465706c6f7920636f6e7472616374207573696e672060448201527f70726f76696465642073616c7420616e6420696e697469616c697a6174696f6e6064820152651031b7b2329760d11b608482015260a40161019b565b5050506001600160a01b0381166000908152602081905260409020805460ff191660011790559392505050565b6000308484846040516020016103ac9291906105a0565b604051602081830303815290604052805190602001206040516020016103d493929190610568565b60408051601f1981840301815291815281516020928301206001600160a01b03811660009081529283905291205490915060ff1615610411575060005b9392505050565b600030838360405160200161042f93929190610568565b60408051601f1981840301815291815281516020928301206001600160a01b03811660009081529283905291205490915060ff161561046c575060005b92915050565b60006020828403121561048457600080fd5b81356001600160a01b038116811461041157600080fd5b6000806000604084860312156104b057600080fd5b83359250602084013567ffffffffffffffff808211156104cf57600080fd5b818601915086601f8301126104e357600080fd5b8135818111156104f257600080fd5b87602082850101111561050457600080fd5b6020830194508093505050509250925092565b6000806040838503121561052a57600080fd5b50508035926020909101359150565b6000825160005b8181101561055a5760208186018101518583015201610540565b506000920191825250919050565b6001600160f81b0319815260609390931b6bffffffffffffffffffffffff191660018401526015830191909152603582015260550190565b818382376000910190815291905056fea2646970667358221220cc97bac233e24594acfe449ff572ecb1fe74b390301bcbd876b2b4f4e557d2ef64736f6c63430008140033",
      "deployedBytecode": "0x60806040526004361061003f5760003560e01c806308508b8f1461004457806364e030871461009257806385cf97ab146100bd578063a49a7c90146100dd575b600080fd5b34801561005057600080fd5b5061007d61005f366004610472565b6001600160a01b031660009081526020819052604090205460ff1690565b60405190151581526020015b60405180910390f35b6100a56100a036600461049b565b6100fd565b6040516001600160a01b039091168152602001610089565b3480156100c957600080fd5b506100a56100d836600461049b565b610395565b3480156100e957600080fd5b506100a56100f8366004610517565b610418565b600083606081901c33148061011f57506bffffffffffffffffffffffff198116155b6101a45760405162461bcd60e51b815260206004820152604560248201527f496e76616c69642073616c74202d206669727374203230206279746573206f6660448201527f207468652073616c74206d757374206d617463682063616c6c696e67206164646064820152643932b9b99760d91b608482015260a4015b60405180910390fd5b600084848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250604051949550933093508a92506101f491508590602001610539565b6040516020818303038152906040528051906020012060405160200161021c93929190610568565b60408051601f1981840301815291815281516020928301206001600160a01b03811660009081529283905291205490915060ff16156102c35760405162461bcd60e51b815260206004820152603f60248201527f496e76616c696420636f6e7472616374206372656174696f6e202d20636f6e7460448201527f726163742068617320616c7265616479206265656e206465706c6f7965642e00606482015260840161019b565b81602001825188818334f595505050806001600160a01b0316846001600160a01b0316146103685760405162461bcd60e51b815260206004820152604660248201527f4661696c656420746f206465706c6f7920636f6e7472616374207573696e672060448201527f70726f76696465642073616c7420616e6420696e697469616c697a6174696f6e6064820152651031b7b2329760d11b608482015260a40161019b565b5050506001600160a01b0381166000908152602081905260409020805460ff191660011790559392505050565b6000308484846040516020016103ac9291906105a0565b604051602081830303815290604052805190602001206040516020016103d493929190610568565b60408051601f1981840301815291815281516020928301206001600160a01b03811660009081529283905291205490915060ff1615610411575060005b9392505050565b600030838360405160200161042f93929190610568565b60408051601f1981840301815291815281516020928301206001600160a01b03811660009081529283905291205490915060ff161561046c575060005b92915050565b60006020828403121561048457600080fd5b81356001600160a01b038116811461041157600080fd5b6000806000604084860312156104b057600080fd5b83359250602084013567ffffffffffffffff808211156104cf57600080fd5b818601915086601f8301126104e357600080fd5b8135818111156104f257600080fd5b87602082850101111561050457600080fd5b6020830194508093505050509250925092565b6000806040838503121561052a57600080fd5b50508035926020909101359150565b6000825160005b8181101561055a5760208186018101518583015201610540565b506000920191825250919050565b6001600160f81b0319815260609390931b6bffffffffffffffffffffffff191660018401526015830191909152603582015260550190565b818382376000910190815291905056fea2646970667358221220cc97bac233e24594acfe449ff572ecb1fe74b390301bcbd876b2b4f4e557d2ef64736f6c63430008140033",
      "linkReferences": {},
      "deployedLinkReferences": {},
      "devdoc": {
        "author": "0age",
        "details": "This contract has not yet been fully tested or audited - proceed with caution and please share any exploits or optimizations you discover.",
        "kind": "dev",
        "methods": {
          "findCreate2Address(bytes32,bytes)": {
            "details": "Compute the address of the contract that will be created when submitting a given salt or nonce to the contract along with the contract's initialization code. The CREATE2 address is computed in accordance with EIP-1014, and adheres to the formula therein of `keccak256( 0xff ++ address ++ salt ++ keccak256(init_code)))[12:]` when performing the computation. The computed address is then checked for any existing contract code - if so, the null address will be returned instead.",
            "params": {
              "initCode": "bytes The contract initialization code to be used. that will be passed into the CREATE2 address calculation.",
              "salt": "bytes32 The nonce passed into the CREATE2 address calculation."
            },
            "returns": {
              "deploymentAddress": "Address of the contract that will be created, or the null address if a contract has already been deployed to that address."
            }
          },
          "findCreate2AddressViaHash(bytes32,bytes32)": {
            "details": "Compute the address of the contract that will be created when submitting a given salt or nonce to the contract along with the keccak256 hash of the contract's initialization code. The CREATE2 address is computed in accordance with EIP-1014, and adheres to the formula therein of `keccak256( 0xff ++ address ++ salt ++ keccak256(init_code)))[12:]` when performing the computation. The computed address is then checked for any existing contract code - if so, the null address will be returned instead.",
            "params": {
              "initCodeHash": "bytes32 The keccak256 hash of the initialization code that will be passed into the CREATE2 address calculation.",
              "salt": "bytes32 The nonce passed into the CREATE2 address calculation."
            },
            "returns": {
              "deploymentAddress": "Address of the contract that will be created, or the null address if a contract has already been deployed to that address."
            }
          },
          "hasBeenDeployed(address)": {
            "details": "Determine if a contract has already been deployed by the factory to a given address.",
            "params": {
              "deploymentAddress": "address The contract address to check."
            },
            "returns": {
              "_0": "True if the contract has been deployed, false otherwise."
            }
          },
          "safeCreate2(bytes32,bytes)": {
            "details": "Create a contract using CREATE2 by submitting a given salt or nonce along with the initialization code for the contract. Note that the first 20 bytes of the salt must match those of the calling address, which prevents contract creation events from being submitted by unintended parties.",
            "params": {
              "initializationCode": "bytes The initialization code that will be passed into the CREATE2 call.",
              "salt": "bytes32 The nonce that will be passed into the CREATE2 call."
            },
            "returns": {
              "deploymentAddress": "Address of the contract that will be created, or the null address if a contract already exists at that address."
            }
          }
        },
        "title": "Immutable Create2 Contract Factory",
        "version": 1
      },
      "evm": {
        "bytecode": {
          "functionDebugData": {},
          "generatedSources": [],
          "linkReferences": {},
          "object": "608060405234801561001057600080fd5b506105e6806100206000396000f3fe60806040526004361061003f5760003560e01c806308508b8f1461004457806364e030871461009257806385cf97ab146100bd578063a49a7c90146100dd575b600080fd5b34801561005057600080fd5b5061007d61005f366004610472565b6001600160a01b031660009081526020819052604090205460ff1690565b60405190151581526020015b60405180910390f35b6100a56100a036600461049b565b6100fd565b6040516001600160a01b039091168152602001610089565b3480156100c957600080fd5b506100a56100d836600461049b565b610395565b3480156100e957600080fd5b506100a56100f8366004610517565b610418565b600083606081901c33148061011f57506bffffffffffffffffffffffff198116155b6101a45760405162461bcd60e51b815260206004820152604560248201527f496e76616c69642073616c74202d206669727374203230206279746573206f6660448201527f207468652073616c74206d757374206d617463682063616c6c696e67206164646064820152643932b9b99760d91b608482015260a4015b60405180910390fd5b600084848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250604051949550933093508a92506101f491508590602001610539565b6040516020818303038152906040528051906020012060405160200161021c93929190610568565b60408051601f1981840301815291815281516020928301206001600160a01b03811660009081529283905291205490915060ff16156102c35760405162461bcd60e51b815260206004820152603f60248201527f496e76616c696420636f6e7472616374206372656174696f6e202d20636f6e7460448201527f726163742068617320616c7265616479206265656e206465706c6f7965642e00606482015260840161019b565b81602001825188818334f595505050806001600160a01b0316846001600160a01b0316146103685760405162461bcd60e51b815260206004820152604660248201527f4661696c656420746f206465706c6f7920636f6e7472616374207573696e672060448201527f70726f76696465642073616c7420616e6420696e697469616c697a6174696f6e6064820152651031b7b2329760d11b608482015260a40161019b565b5050506001600160a01b0381166000908152602081905260409020805460ff191660011790559392505050565b6000308484846040516020016103ac9291906105a0565b604051602081830303815290604052805190602001206040516020016103d493929190610568565b60408051601f1981840301815291815281516020928301206001600160a01b03811660009081529283905291205490915060ff1615610411575060005b9392505050565b600030838360405160200161042f93929190610568565b60408051601f1981840301815291815281516020928301206001600160a01b03811660009081529283905291205490915060ff161561046c575060005b92915050565b60006020828403121561048457600080fd5b81356001600160a01b038116811461041157600080fd5b6000806000604084860312156104b057600080fd5b83359250602084013567ffffffffffffffff808211156104cf57600080fd5b818601915086601f8301126104e357600080fd5b8135818111156104f257600080fd5b87602082850101111561050457600080fd5b6020830194508093505050509250925092565b6000806040838503121561052a57600080fd5b50508035926020909101359150565b6000825160005b8181101561055a5760208186018101518583015201610540565b506000920191825250919050565b6001600160f81b0319815260609390931b6bffffffffffffffffffffffff191660018401526015830191909152603582015260550190565b818382376000910190815291905056fea2646970667358221220cc97bac233e24594acfe449ff572ecb1fe74b390301bcbd876b2b4f4e557d2ef64736f6c63430008140033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5E6 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x3F JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8508B8F EQ PUSH2 0x44 JUMPI DUP1 PUSH4 0x64E03087 EQ PUSH2 0x92 JUMPI DUP1 PUSH4 0x85CF97AB EQ PUSH2 0xBD JUMPI DUP1 PUSH4 0xA49A7C90 EQ PUSH2 0xDD JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x50 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7D PUSH2 0x5F CALLDATASIZE PUSH1 0x4 PUSH2 0x472 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xA5 PUSH2 0xA0 CALLDATASIZE PUSH1 0x4 PUSH2 0x49B JUMP JUMPDEST PUSH2 0xFD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x89 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xA5 PUSH2 0xD8 CALLDATASIZE PUSH1 0x4 PUSH2 0x49B JUMP JUMPDEST PUSH2 0x395 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xA5 PUSH2 0xF8 CALLDATASIZE PUSH1 0x4 PUSH2 0x517 JUMP JUMPDEST PUSH2 0x418 JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x60 DUP2 SWAP1 SHR CALLER EQ DUP1 PUSH2 0x11F JUMPI POP PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT DUP2 AND ISZERO JUMPDEST PUSH2 0x1A4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x45 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C69642073616C74202D206669727374203230206279746573206F66 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x207468652073616C74206D757374206D617463682063616C6C696E6720616464 PUSH1 0x64 DUP3 ADD MSTORE PUSH5 0x3932B9B997 PUSH1 0xD9 SHL PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP5 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD DUP3 SWAP1 MSTORE POP PUSH1 0x40 MLOAD SWAP5 SWAP6 POP SWAP4 ADDRESS SWAP4 POP DUP11 SWAP3 POP PUSH2 0x1F4 SWAP2 POP DUP6 SWAP1 PUSH1 0x20 ADD PUSH2 0x539 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x21C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x568 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE DUP2 MLOAD PUSH1 0x20 SWAP3 DUP4 ADD KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP3 DUP4 SWAP1 MSTORE SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0xFF AND ISZERO PUSH2 0x2C3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C696420636F6E7472616374206372656174696F6E202D20636F6E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x726163742068617320616C7265616479206265656E206465706C6F7965642E00 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x19B JUMP JUMPDEST DUP2 PUSH1 0x20 ADD DUP3 MLOAD DUP9 DUP2 DUP4 CALLVALUE CREATE2 SWAP6 POP POP POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x368 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x46 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4661696C656420746F206465706C6F7920636F6E7472616374207573696E6720 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x70726F76696465642073616C7420616E6420696E697469616C697A6174696F6E PUSH1 0x64 DUP3 ADD MSTORE PUSH6 0x1031B7B23297 PUSH1 0xD1 SHL PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 ADD PUSH2 0x19B JUMP JUMPDEST POP POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 ADDRESS DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3AC SWAP3 SWAP2 SWAP1 PUSH2 0x5A0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3D4 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x568 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE DUP2 MLOAD PUSH1 0x20 SWAP3 DUP4 ADD KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP3 DUP4 SWAP1 MSTORE SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0xFF AND ISZERO PUSH2 0x411 JUMPI POP PUSH1 0x0 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 ADDRESS DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x42F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x568 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE DUP2 MLOAD PUSH1 0x20 SWAP3 DUP4 ADD KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP3 DUP4 SWAP1 MSTORE SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0xFF AND ISZERO PUSH2 0x46C JUMPI POP PUSH1 0x0 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x484 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x411 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x4B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x4CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x4E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x4F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x504 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP5 POP DUP1 SWAP4 POP POP POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x52A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x55A JUMPI PUSH1 0x20 DUP2 DUP7 ADD DUP2 ADD MLOAD DUP6 DUP4 ADD MSTORE ADD PUSH2 0x540 JUMP JUMPDEST POP PUSH1 0x0 SWAP3 ADD SWAP2 DUP3 MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT DUP2 MSTORE PUSH1 0x60 SWAP4 SWAP1 SWAP4 SHL PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 DUP5 ADD MSTORE PUSH1 0x15 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x35 DUP3 ADD MSTORE PUSH1 0x55 ADD SWAP1 JUMP JUMPDEST DUP2 DUP4 DUP3 CALLDATACOPY PUSH1 0x0 SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCC SWAP8 0xBA 0xC2 CALLER 0xE2 GASLIMIT SWAP5 0xAC INVALID PREVRANDAO SWAP16 CREATE2 PUSH19 0xECB1FE74B390301BCBD876B2B4F4E557D2EF64 PUSH20 0x6F6C634300081400330000000000000000000000 ",
          "sourceMap": "1017:8493:1:-:0;;;;;;;;;;;;;;;;;;;"
        },
        "deployedBytecode": {
          "functionDebugData": {
            "@findCreate2AddressViaHash_2029": {
              "entryPoint": 1048,
              "id": 2029,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@findCreate2Address_1984": {
              "entryPoint": 917,
              "id": 1984,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "@hasBeenDeployed_2042": {
              "entryPoint": null,
              "id": 2042,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@safeCreate2_1934": {
              "entryPoint": 253,
              "id": 1934,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_address": {
              "entryPoint": 1138,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_bytes32t_bytes32": {
              "entryPoint": 1303,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_bytes32t_bytes_calldata_ptr": {
              "entryPoint": 1179,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 3
            },
            "abi_encode_tuple_packed_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
              "entryPoint": 1440,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
              "entryPoint": 1337,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_packed_t_stringliteral_8b1a944cf13a9a1c08facb2c9e98623ef3254d2ddb48113885c3e8e97fec8db9_t_address_t_bytes32_t_bytes32__to_t_string_memory_ptr_t_address_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed": {
              "entryPoint": 1384,
              "id": null,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_735ef0aec3aeab9c6d0fa63f0ebfc7e89ac3fc816654e42f47857e7444f9897e__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_979150ea917af01af711df6e6f8e813d8cc9edb535cd6f8c22f812e1f4b5ed9c__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_ae6dfa985d082b03716242249ee9dfc03892785e8454a5c191b9d15c11998bd4__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            }
          },
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:4209:2",
                "statements": [
                  {
                    "nodeType": "YulBlock",
                    "src": "6:3:2",
                    "statements": []
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "84:216:2",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "130:16:2",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "139:1:2",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "142:1:2",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "132:6:2"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "132:12:2"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "132:12:2"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "105:7:2"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "114:9:2"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "101:3:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "101:23:2"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "126:2:2",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "97:3:2"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "97:32:2"
                          },
                          "nodeType": "YulIf",
                          "src": "94:52:2"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "155:36:2",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "181:9:2"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "168:12:2"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "168:23:2"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "159:5:2",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "254:16:2",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "263:1:2",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "266:1:2",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "256:6:2"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "256:12:2"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "256:12:2"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "213:5:2"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "224:5:2"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "239:3:2",
                                                "type": "",
                                                "value": "160"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "244:1:2",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "235:3:2"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "235:11:2"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "248:1:2",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nodeType": "YulIdentifier",
                                          "src": "231:3:2"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "231:19:2"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "220:3:2"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "220:31:2"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "210:2:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "210:42:2"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "203:6:2"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "203:50:2"
                          },
                          "nodeType": "YulIf",
                          "src": "200:70:2"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "279:15:2",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "289:5:2"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "279:6:2"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "50:9:2",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "61:7:2",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "73:6:2",
                        "type": ""
                      }
                    ],
                    "src": "14:286:2"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "400:92:2",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "410:26:2",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "422:9:2"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "433:2:2",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "418:3:2"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "418:18:2"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "410:4:2"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "452:9:2"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "477:6:2"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "470:6:2"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "470:14:2"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "463:6:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "463:22:2"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "445:6:2"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "445:41:2"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "445:41:2"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "369:9:2",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "380:6:2",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "391:4:2",
                        "type": ""
                      }
                    ],
                    "src": "305:187:2"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "603:553:2",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "649:16:2",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "658:1:2",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "661:1:2",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "651:6:2"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "651:12:2"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "651:12:2"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "624:7:2"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "633:9:2"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "620:3:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "620:23:2"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "645:2:2",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "616:3:2"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "616:32:2"
                          },
                          "nodeType": "YulIf",
                          "src": "613:52:2"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "674:33:2",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "697:9:2"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "684:12:2"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "684:23:2"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "674:6:2"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "716:46:2",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "747:9:2"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "758:2:2",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "743:3:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "743:18:2"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "730:12:2"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "730:32:2"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "720:6:2",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "771:28:2",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "781:18:2",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "775:2:2",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "826:16:2",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "835:1:2",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "838:1:2",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "828:6:2"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "828:12:2"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "828:12:2"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "814:6:2"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "822:2:2"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "811:2:2"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "811:14:2"
                          },
                          "nodeType": "YulIf",
                          "src": "808:34:2"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "851:32:2",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "865:9:2"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "876:6:2"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "861:3:2"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "861:22:2"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "855:2:2",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "931:16:2",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "940:1:2",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "943:1:2",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "933:6:2"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "933:12:2"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "933:12:2"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "910:2:2"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "914:4:2",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "906:3:2"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "906:13:2"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "921:7:2"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "902:3:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "902:27:2"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "895:6:2"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "895:35:2"
                          },
                          "nodeType": "YulIf",
                          "src": "892:55:2"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "956:30:2",
                          "value": {
                            "arguments": [
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "983:2:2"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "970:12:2"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "970:16:2"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "960:6:2",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1013:16:2",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1022:1:2",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1025:1:2",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1015:6:2"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1015:12:2"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1015:12:2"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "1001:6:2"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "1009:2:2"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "998:2:2"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "998:14:2"
                          },
                          "nodeType": "YulIf",
                          "src": "995:34:2"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1079:16:2",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1088:1:2",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1091:1:2",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1081:6:2"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1081:12:2"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1081:12:2"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "1052:2:2"
                                      },
                                      {
                                        "name": "length",
                                        "nodeType": "YulIdentifier",
                                        "src": "1056:6:2"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1048:3:2"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1048:15:2"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1065:2:2",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1044:3:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1044:24:2"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "1070:7:2"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1041:2:2"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1041:37:2"
                          },
                          "nodeType": "YulIf",
                          "src": "1038:57:2"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1104:21:2",
                          "value": {
                            "arguments": [
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "1118:2:2"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1122:2:2",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1114:3:2"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1114:11:2"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "1104:6:2"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1134:16:2",
                          "value": {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "1144:6:2"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "1134:6:2"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes32t_bytes_calldata_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "553:9:2",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "564:7:2",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "576:6:2",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "584:6:2",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "592:6:2",
                        "type": ""
                      }
                    ],
                    "src": "497:659:2"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1262:102:2",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "1272:26:2",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1284:9:2"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1295:2:2",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1280:3:2"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1280:18:2"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "1272:4:2"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1314:9:2"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "1329:6:2"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1345:3:2",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1350:1:2",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "1341:3:2"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1341:11:2"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1354:1:2",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "1337:3:2"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1337:19:2"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "1325:3:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1325:32:2"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1307:6:2"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1307:51:2"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1307:51:2"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1231:9:2",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1242:6:2",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "1253:4:2",
                        "type": ""
                      }
                    ],
                    "src": "1161:203:2"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1456:161:2",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1502:16:2",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1511:1:2",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1514:1:2",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1504:6:2"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1504:12:2"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1504:12:2"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1477:7:2"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1486:9:2"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1473:3:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1473:23:2"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1498:2:2",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1469:3:2"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1469:32:2"
                          },
                          "nodeType": "YulIf",
                          "src": "1466:52:2"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1527:33:2",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1550:9:2"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1537:12:2"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1537:23:2"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "1527:6:2"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1569:42:2",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1596:9:2"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1607:2:2",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1592:3:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1592:18:2"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1579:12:2"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1579:32:2"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "1569:6:2"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes32t_bytes32",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1414:9:2",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "1425:7:2",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1437:6:2",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "1445:6:2",
                        "type": ""
                      }
                    ],
                    "src": "1369:248:2"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1796:299:2",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1813:9:2"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1824:2:2",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1806:6:2"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1806:21:2"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1806:21:2"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1847:9:2"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1858:2:2",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1843:3:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1843:18:2"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1863:2:2",
                                "type": "",
                                "value": "69"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1836:6:2"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1836:30:2"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1836:30:2"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1886:9:2"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1897:2:2",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1882:3:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1882:18:2"
                              },
                              {
                                "hexValue": "496e76616c69642073616c74202d206669727374203230206279746573206f66",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "1902:34:2",
                                "type": "",
                                "value": "Invalid salt - first 20 bytes of"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1875:6:2"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1875:62:2"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1875:62:2"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1957:9:2"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1968:2:2",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1953:3:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1953:18:2"
                              },
                              {
                                "hexValue": "207468652073616c74206d757374206d617463682063616c6c696e6720616464",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "1973:34:2",
                                "type": "",
                                "value": " the salt must match calling add"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1946:6:2"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1946:62:2"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1946:62:2"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2028:9:2"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2039:3:2",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2024:3:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2024:19:2"
                              },
                              {
                                "hexValue": "726573732e",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "2045:7:2",
                                "type": "",
                                "value": "ress."
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2017:6:2"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2017:36:2"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2017:36:2"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2062:27:2",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2074:9:2"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2085:3:2",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2070:3:2"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2070:19:2"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "2062:4:2"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_979150ea917af01af711df6e6f8e813d8cc9edb535cd6f8c22f812e1f4b5ed9c__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1773:9:2",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "1787:4:2",
                        "type": ""
                      }
                    ],
                    "src": "1622:473:2"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2237:275:2",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2247:27:2",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "2267:6:2"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "2261:5:2"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2261:13:2"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "2251:6:2",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2283:10:2",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2292:1:2",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "2287:1:2",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2354:77:2",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "2379:3:2"
                                        },
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "2384:1:2"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "2375:3:2"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2375:11:2"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "name": "value0",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "2402:6:2"
                                                },
                                                {
                                                  "name": "i",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "2410:1:2"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "add",
                                                "nodeType": "YulIdentifier",
                                                "src": "2398:3:2"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "2398:14:2"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "2414:4:2",
                                              "type": "",
                                              "value": "0x20"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "2394:3:2"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "2394:25:2"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "2388:5:2"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2388:32:2"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "2368:6:2"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2368:53:2"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2368:53:2"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "2313:1:2"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "2316:6:2"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "2310:2:2"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2310:13:2"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "2324:21:2",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "2326:17:2",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "2335:1:2"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2338:4:2",
                                      "type": "",
                                      "value": "0x20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "2331:3:2"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2331:12:2"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "2326:1:2"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "2306:3:2",
                            "statements": []
                          },
                          "src": "2302:129:2"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2440:26:2",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "2454:3:2"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "2459:6:2"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2450:3:2"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2450:16:2"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "2444:2:2",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "2482:2:2"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2486:1:2",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2475:6:2"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2475:13:2"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2475:13:2"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2497:9:2",
                          "value": {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "2504:2:2"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "2497:3:2"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "2213:3:2",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2218:6:2",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "2229:3:2",
                        "type": ""
                      }
                    ],
                    "src": "2100:412:2"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2793:227:2",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "2810:3:2"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2819:3:2",
                                    "type": "",
                                    "value": "248"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2824:3:2",
                                    "type": "",
                                    "value": "255"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "2815:3:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2815:13:2"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2803:6:2"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2803:26:2"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2803:26:2"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "2849:3:2"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2854:1:2",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2845:3:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2845:11:2"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2866:2:2",
                                        "type": "",
                                        "value": "96"
                                      },
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "2870:6:2"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "2862:3:2"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2862:15:2"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2883:26:2",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "2879:3:2"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2879:31:2"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "2858:3:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2858:53:2"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2838:6:2"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2838:74:2"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2838:74:2"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "2932:3:2"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2937:2:2",
                                    "type": "",
                                    "value": "21"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2928:3:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2928:12:2"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "2942:6:2"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2921:6:2"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2921:28:2"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2921:28:2"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "2969:3:2"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2974:2:2",
                                    "type": "",
                                    "value": "53"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2965:3:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2965:12:2"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "2979:6:2"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2958:6:2"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2958:28:2"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2958:28:2"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2995:19:2",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "3006:3:2"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3011:2:2",
                                "type": "",
                                "value": "85"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3002:3:2"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3002:12:2"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "2995:3:2"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_stringliteral_8b1a944cf13a9a1c08facb2c9e98623ef3254d2ddb48113885c3e8e97fec8db9_t_address_t_bytes32_t_bytes32__to_t_string_memory_ptr_t_address_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "2753:3:2",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "2758:6:2",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "2766:6:2",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2774:6:2",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "2785:3:2",
                        "type": ""
                      }
                    ],
                    "src": "2517:503:2"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3199:253:2",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3216:9:2"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3227:2:2",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3209:6:2"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3209:21:2"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3209:21:2"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3250:9:2"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3261:2:2",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3246:3:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3246:18:2"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3266:2:2",
                                "type": "",
                                "value": "63"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3239:6:2"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3239:30:2"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3239:30:2"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3289:9:2"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3300:2:2",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3285:3:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3285:18:2"
                              },
                              {
                                "hexValue": "496e76616c696420636f6e7472616374206372656174696f6e202d20636f6e74",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "3305:34:2",
                                "type": "",
                                "value": "Invalid contract creation - cont"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3278:6:2"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3278:62:2"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3278:62:2"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3360:9:2"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3371:2:2",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3356:3:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3356:18:2"
                              },
                              {
                                "hexValue": "726163742068617320616c7265616479206265656e206465706c6f7965642e",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "3376:33:2",
                                "type": "",
                                "value": "ract has already been deployed."
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3349:6:2"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3349:61:2"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3349:61:2"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3419:27:2",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3431:9:2"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3442:3:2",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3427:3:2"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3427:19:2"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "3419:4:2"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_735ef0aec3aeab9c6d0fa63f0ebfc7e89ac3fc816654e42f47857e7444f9897e__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3176:9:2",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "3190:4:2",
                        "type": ""
                      }
                    ],
                    "src": "3025:427:2"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3631:300:2",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3648:9:2"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3659:2:2",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3641:6:2"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3641:21:2"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3641:21:2"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3682:9:2"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3693:2:2",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3678:3:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3678:18:2"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3698:2:2",
                                "type": "",
                                "value": "70"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3671:6:2"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3671:30:2"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3671:30:2"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3721:9:2"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3732:2:2",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3717:3:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3717:18:2"
                              },
                              {
                                "hexValue": "4661696c656420746f206465706c6f7920636f6e7472616374207573696e6720",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "3737:34:2",
                                "type": "",
                                "value": "Failed to deploy contract using "
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3710:6:2"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3710:62:2"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3710:62:2"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3792:9:2"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3803:2:2",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3788:3:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3788:18:2"
                              },
                              {
                                "hexValue": "70726f76696465642073616c7420616e6420696e697469616c697a6174696f6e",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "3808:34:2",
                                "type": "",
                                "value": "provided salt and initialization"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3781:6:2"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3781:62:2"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3781:62:2"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3863:9:2"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3874:3:2",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3859:3:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3859:19:2"
                              },
                              {
                                "hexValue": "20636f64652e",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "3880:8:2",
                                "type": "",
                                "value": " code."
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3852:6:2"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3852:37:2"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3852:37:2"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3898:27:2",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3910:9:2"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3921:3:2",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3906:3:2"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3906:19:2"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "3898:4:2"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_ae6dfa985d082b03716242249ee9dfc03892785e8454a5c191b9d15c11998bd4__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3608:9:2",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "3622:4:2",
                        "type": ""
                      }
                    ],
                    "src": "3457:474:2"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4083:124:2",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "4106:3:2"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "4111:6:2"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "4119:6:2"
                              }
                            ],
                            "functionName": {
                              "name": "calldatacopy",
                              "nodeType": "YulIdentifier",
                              "src": "4093:12:2"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4093:33:2"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4093:33:2"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4135:26:2",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "4149:3:2"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "4154:6:2"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4145:3:2"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4145:16:2"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "4139:2:2",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "4177:2:2"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4181:1:2",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4170:6:2"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4170:13:2"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4170:13:2"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4192:9:2",
                          "value": {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "4199:2:2"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "4192:3:2"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "4051:3:2",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "4056:6:2",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "4064:6:2",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "4075:3:2",
                        "type": ""
                      }
                    ],
                    "src": "3936:271:2"
                  }
                ]
              },
              "contents": "{\n    { }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_bytes32t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let offset := calldataload(add(headStart, 32))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, length), 32), dataEnd) { revert(0, 0) }\n        value1 := add(_2, 32)\n        value2 := length\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_stringliteral_979150ea917af01af711df6e6f8e813d8cc9edb535cd6f8c22f812e1f4b5ed9c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 69)\n        mstore(add(headStart, 64), \"Invalid salt - first 20 bytes of\")\n        mstore(add(headStart, 96), \" the salt must match calling add\")\n        mstore(add(headStart, 128), \"ress.\")\n        tail := add(headStart, 160)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 0x20) }\n        {\n            mstore(add(pos, i), mload(add(add(value0, i), 0x20)))\n        }\n        let _1 := add(pos, length)\n        mstore(_1, 0)\n        end := _1\n    }\n    function abi_encode_tuple_packed_t_stringliteral_8b1a944cf13a9a1c08facb2c9e98623ef3254d2ddb48113885c3e8e97fec8db9_t_address_t_bytes32_t_bytes32__to_t_string_memory_ptr_t_address_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed(pos, value2, value1, value0) -> end\n    {\n        mstore(pos, shl(248, 255))\n        mstore(add(pos, 1), and(shl(96, value0), not(0xffffffffffffffffffffffff)))\n        mstore(add(pos, 21), value1)\n        mstore(add(pos, 53), value2)\n        end := add(pos, 85)\n    }\n    function abi_encode_tuple_t_stringliteral_735ef0aec3aeab9c6d0fa63f0ebfc7e89ac3fc816654e42f47857e7444f9897e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 63)\n        mstore(add(headStart, 64), \"Invalid contract creation - cont\")\n        mstore(add(headStart, 96), \"ract has already been deployed.\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_ae6dfa985d082b03716242249ee9dfc03892785e8454a5c191b9d15c11998bd4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 70)\n        mstore(add(headStart, 64), \"Failed to deploy contract using \")\n        mstore(add(headStart, 96), \"provided salt and initialization\")\n        mstore(add(headStart, 128), \" code.\")\n        tail := add(headStart, 160)\n    }\n    function abi_encode_tuple_packed_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        calldatacopy(pos, value0, value1)\n        let _1 := add(pos, value1)\n        mstore(_1, 0)\n        end := _1\n    }\n}",
              "id": 2,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "immutableReferences": {},
          "linkReferences": {},
          "object": "60806040526004361061003f5760003560e01c806308508b8f1461004457806364e030871461009257806385cf97ab146100bd578063a49a7c90146100dd575b600080fd5b34801561005057600080fd5b5061007d61005f366004610472565b6001600160a01b031660009081526020819052604090205460ff1690565b60405190151581526020015b60405180910390f35b6100a56100a036600461049b565b6100fd565b6040516001600160a01b039091168152602001610089565b3480156100c957600080fd5b506100a56100d836600461049b565b610395565b3480156100e957600080fd5b506100a56100f8366004610517565b610418565b600083606081901c33148061011f57506bffffffffffffffffffffffff198116155b6101a45760405162461bcd60e51b815260206004820152604560248201527f496e76616c69642073616c74202d206669727374203230206279746573206f6660448201527f207468652073616c74206d757374206d617463682063616c6c696e67206164646064820152643932b9b99760d91b608482015260a4015b60405180910390fd5b600084848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250604051949550933093508a92506101f491508590602001610539565b6040516020818303038152906040528051906020012060405160200161021c93929190610568565b60408051601f1981840301815291815281516020928301206001600160a01b03811660009081529283905291205490915060ff16156102c35760405162461bcd60e51b815260206004820152603f60248201527f496e76616c696420636f6e7472616374206372656174696f6e202d20636f6e7460448201527f726163742068617320616c7265616479206265656e206465706c6f7965642e00606482015260840161019b565b81602001825188818334f595505050806001600160a01b0316846001600160a01b0316146103685760405162461bcd60e51b815260206004820152604660248201527f4661696c656420746f206465706c6f7920636f6e7472616374207573696e672060448201527f70726f76696465642073616c7420616e6420696e697469616c697a6174696f6e6064820152651031b7b2329760d11b608482015260a40161019b565b5050506001600160a01b0381166000908152602081905260409020805460ff191660011790559392505050565b6000308484846040516020016103ac9291906105a0565b604051602081830303815290604052805190602001206040516020016103d493929190610568565b60408051601f1981840301815291815281516020928301206001600160a01b03811660009081529283905291205490915060ff1615610411575060005b9392505050565b600030838360405160200161042f93929190610568565b60408051601f1981840301815291815281516020928301206001600160a01b03811660009081529283905291205490915060ff161561046c575060005b92915050565b60006020828403121561048457600080fd5b81356001600160a01b038116811461041157600080fd5b6000806000604084860312156104b057600080fd5b83359250602084013567ffffffffffffffff808211156104cf57600080fd5b818601915086601f8301126104e357600080fd5b8135818111156104f257600080fd5b87602082850101111561050457600080fd5b6020830194508093505050509250925092565b6000806040838503121561052a57600080fd5b50508035926020909101359150565b6000825160005b8181101561055a5760208186018101518583015201610540565b506000920191825250919050565b6001600160f81b0319815260609390931b6bffffffffffffffffffffffff191660018401526015830191909152603582015260550190565b818382376000910190815291905056fea2646970667358221220cc97bac233e24594acfe449ff572ecb1fe74b390301bcbd876b2b4f4e557d2ef64736f6c63430008140033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x3F JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8508B8F EQ PUSH2 0x44 JUMPI DUP1 PUSH4 0x64E03087 EQ PUSH2 0x92 JUMPI DUP1 PUSH4 0x85CF97AB EQ PUSH2 0xBD JUMPI DUP1 PUSH4 0xA49A7C90 EQ PUSH2 0xDD JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x50 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7D PUSH2 0x5F CALLDATASIZE PUSH1 0x4 PUSH2 0x472 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xA5 PUSH2 0xA0 CALLDATASIZE PUSH1 0x4 PUSH2 0x49B JUMP JUMPDEST PUSH2 0xFD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x89 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xA5 PUSH2 0xD8 CALLDATASIZE PUSH1 0x4 PUSH2 0x49B JUMP JUMPDEST PUSH2 0x395 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xA5 PUSH2 0xF8 CALLDATASIZE PUSH1 0x4 PUSH2 0x517 JUMP JUMPDEST PUSH2 0x418 JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x60 DUP2 SWAP1 SHR CALLER EQ DUP1 PUSH2 0x11F JUMPI POP PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT DUP2 AND ISZERO JUMPDEST PUSH2 0x1A4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x45 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C69642073616C74202D206669727374203230206279746573206F66 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x207468652073616C74206D757374206D617463682063616C6C696E6720616464 PUSH1 0x64 DUP3 ADD MSTORE PUSH5 0x3932B9B997 PUSH1 0xD9 SHL PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP5 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD DUP3 SWAP1 MSTORE POP PUSH1 0x40 MLOAD SWAP5 SWAP6 POP SWAP4 ADDRESS SWAP4 POP DUP11 SWAP3 POP PUSH2 0x1F4 SWAP2 POP DUP6 SWAP1 PUSH1 0x20 ADD PUSH2 0x539 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x21C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x568 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE DUP2 MLOAD PUSH1 0x20 SWAP3 DUP4 ADD KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP3 DUP4 SWAP1 MSTORE SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0xFF AND ISZERO PUSH2 0x2C3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C696420636F6E7472616374206372656174696F6E202D20636F6E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x726163742068617320616C7265616479206265656E206465706C6F7965642E00 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x19B JUMP JUMPDEST DUP2 PUSH1 0x20 ADD DUP3 MLOAD DUP9 DUP2 DUP4 CALLVALUE CREATE2 SWAP6 POP POP POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x368 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x46 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4661696C656420746F206465706C6F7920636F6E7472616374207573696E6720 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x70726F76696465642073616C7420616E6420696E697469616C697A6174696F6E PUSH1 0x64 DUP3 ADD MSTORE PUSH6 0x1031B7B23297 PUSH1 0xD1 SHL PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 ADD PUSH2 0x19B JUMP JUMPDEST POP POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 ADDRESS DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3AC SWAP3 SWAP2 SWAP1 PUSH2 0x5A0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3D4 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x568 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE DUP2 MLOAD PUSH1 0x20 SWAP3 DUP4 ADD KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP3 DUP4 SWAP1 MSTORE SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0xFF AND ISZERO PUSH2 0x411 JUMPI POP PUSH1 0x0 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 ADDRESS DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x42F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x568 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE DUP2 MLOAD PUSH1 0x20 SWAP3 DUP4 ADD KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP3 DUP4 SWAP1 MSTORE SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0xFF AND ISZERO PUSH2 0x46C JUMPI POP PUSH1 0x0 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x484 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x411 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x4B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x4CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x4E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x4F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x504 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP5 POP DUP1 SWAP4 POP POP POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x52A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x55A JUMPI PUSH1 0x20 DUP2 DUP7 ADD DUP2 ADD MLOAD DUP6 DUP4 ADD MSTORE ADD PUSH2 0x540 JUMP JUMPDEST POP PUSH1 0x0 SWAP3 ADD SWAP2 DUP3 MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT DUP2 MSTORE PUSH1 0x60 SWAP4 SWAP1 SWAP4 SHL PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 DUP5 ADD MSTORE PUSH1 0x15 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x35 DUP3 ADD MSTORE PUSH1 0x55 ADD SWAP1 JUMP JUMPDEST DUP2 DUP4 DUP3 CALLDATACOPY PUSH1 0x0 SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCC SWAP8 0xBA 0xC2 CALLER 0xE2 GASLIMIT SWAP5 0xAC INVALID PREVRANDAO SWAP16 CREATE2 PUSH19 0xECB1FE74B390301BCBD876B2B4F4E557D2EF64 PUSH20 0x6F6C634300081400330000000000000000000000 ",
          "sourceMap": "1017:8493:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8512:209;;;;;;;;;;-1:-1:-1;8512:209:1;;;;;:::i;:::-;-1:-1:-1;;;;;8688:28:1;8595:4;8688:28;;;;;;;;;;;;;;8512:209;;;;470:14:2;;463:22;445:41;;433:2;418:18;8512:209:1;;;;;;;;1826:2385;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;1325:32:2;;;1307:51;;1295:2;1280:18;1826:2385:1;1161:203:2;5119:1146:1;;;;;;;;;;-1:-1:-1;5119:1146:1;;;;;:::i;:::-;;:::i;7202:1055::-;;;;;;;;;;-1:-1:-1;7202:1055:1;;;;;:::i;:::-;;:::i;1826:2385::-;1955:25;1940:4;9335:22;;;;9361:10;9335:36;;9334:77;;-1:-1:-1;;;9383:27:1;;;9334:77;9319:177;;;;-1:-1:-1;;;9319:177:1;;1824:2:2;9319:177:1;;;1806:21:2;1863:2;1843:18;;;1836:30;1902:34;1882:18;;;1875:62;1973:34;1953:18;;;1946:62;-1:-1:-1;;;2024:19:2;;;2017:36;2070:19;;9319:177:1;;;;;;;;;2049:21:::1;2073:18;;2049:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;::::0;;;-1:-1:-1;2820:62:1::1;::::0;2049:42;;-1:-1:-1;2049:42:1;2607:4:::1;::::0;-1:-1:-1;2670:4:1;;-1:-1:-1;2820:62:1::1;::::0;-1:-1:-1;2049:42:1;;2820:62:::1;;;:::i;:::-;;;;;;;;;;;;;2740:158;;;;;;2444:468;;;;;;;;;;:::i;:::-;;::::0;;-1:-1:-1;;2444:468:1;;::::1;::::0;;;;;;2364:560;;2444:468:::1;2364:560:::0;;::::1;::::0;-1:-1:-1;;;;;3052:34:1;::::1;2283:651;3052:34:::0;;;;;;;;;;2364:560;;-1:-1:-1;3052:34:1::1;;3051:35;3036:129;;;::::0;-1:-1:-1;;;3036:129:1;;3227:2:2;3036:129:1::1;::::0;::::1;3209:21:2::0;3266:2;3246:18;;;3239:30;3305:34;3285:18;;;3278:62;3376:33;3356:18;;;3349:61;3427:19;;3036:129:1::1;3025:427:2::0;3036:129:1::1;3353:8;3347:4;3343:19;3424:8;3418:15;3790:4;3713:12;3635;3558:11;3497:365;3476:386;;;;3988:23;-1:-1:-1::0;;;;;3967:44:1::1;:17;-1:-1:-1::0;;;;;3967:44:1::1;;3952:145;;;::::0;-1:-1:-1;;;3952:145:1;;3659:2:2;3952:145:1::1;::::0;::::1;3641:21:2::0;3698:2;3678:18;;;3671:30;3737:34;3717:18;;;3710:62;3808:34;3788:18;;;3781:62;-1:-1:-1;;;3859:19:2;;;3852:37;3906:19;;3952:145:1::1;3457:474:2::0;3952:145:1::1;-1:-1:-1::0;;;;;;;;4171:28:1;::::1;:9;:28:::0;;;::::1;::::0;;;;;;:35;;-1:-1:-1;;4171:35:1::1;4202:4;4171:35;::::0;;4181:17;1826:2385;-1:-1:-1;;;1826:2385:1:o;5119:1146::-;5221:25;5764:4;5829;6019:8;;5983:62;;;;;;;;;:::i;:::-;;;;;;;;;;;;;5901:160;;;;;;5597:478;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;5597:478:1;;;;;;;;;5515:572;;5597:478;5515:572;;;;-1:-1:-1;;;;;6199:28:1;;5432:665;6199:28;;;;;;;;;;5515:572;;-1:-1:-1;6199:28:1;;6195:66;;;-1:-1:-1;6252:1:1;6195:66;5119:1146;;;;;:::o;7202:1055::-;7308:25;7851:4;7916;7988:12;7684:383;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;7684:383:1;;;;;;;;;7602:477;;7684:383;7602:477;;;;-1:-1:-1;;;;;8191:28:1;;7519:570;8191:28;;;;;;;;;;7602:477;;-1:-1:-1;8191:28:1;;8187:66;;;-1:-1:-1;8244:1:1;8187:66;7202:1055;;;;:::o;14:286:2:-;73:6;126:2;114:9;105:7;101:23;97:32;94:52;;;142:1;139;132:12;94:52;168:23;;-1:-1:-1;;;;;220:31:2;;210:42;;200:70;;266:1;263;256:12;497:659;576:6;584;592;645:2;633:9;624:7;620:23;616:32;613:52;;;661:1;658;651:12;613:52;697:9;684:23;674:33;;758:2;747:9;743:18;730:32;781:18;822:2;814:6;811:14;808:34;;;838:1;835;828:12;808:34;876:6;865:9;861:22;851:32;;921:7;914:4;910:2;906:13;902:27;892:55;;943:1;940;933:12;892:55;983:2;970:16;1009:2;1001:6;998:14;995:34;;;1025:1;1022;1015:12;995:34;1070:7;1065:2;1056:6;1052:2;1048:15;1044:24;1041:37;1038:57;;;1091:1;1088;1081:12;1038:57;1122:2;1118;1114:11;1104:21;;1144:6;1134:16;;;;;497:659;;;;;:::o;1369:248::-;1437:6;1445;1498:2;1486:9;1477:7;1473:23;1469:32;1466:52;;;1514:1;1511;1504:12;1466:52;-1:-1:-1;;1537:23:2;;;1607:2;1592:18;;;1579:32;;-1:-1:-1;1369:248:2:o;2100:412::-;2229:3;2267:6;2261:13;2292:1;2302:129;2316:6;2313:1;2310:13;2302:129;;;2414:4;2398:14;;;2394:25;;2388:32;2375:11;;;2368:53;2331:12;2302:129;;;-1:-1:-1;2486:1:2;2450:16;;2475:13;;;-1:-1:-1;2450:16:2;2100:412;-1:-1:-1;2100:412:2:o;2517:503::-;-1:-1:-1;;;;;;2803:26:2;;2866:2;2862:15;;;;-1:-1:-1;;2858:53:2;2854:1;2845:11;;2838:74;2937:2;2928:12;;2921:28;;;;2974:2;2965:12;;2958:28;3011:2;3002:12;;2517:503::o;3936:271::-;4119:6;4111;4106:3;4093:33;4075:3;4145:16;;4170:13;;;4145:16;3936:271;-1:-1:-1;3936:271:2:o"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "302000",
            "executionCost": "343",
            "totalCost": "302343"
          },
          "external": {
            "findCreate2Address(bytes32,bytes)": "infinite",
            "findCreate2AddressViaHash(bytes32,bytes32)": "2883",
            "hasBeenDeployed(address)": "2484",
            "safeCreate2(bytes32,bytes)": "infinite"
          }
        },
        "methodIdentifiers": {
          "findCreate2Address(bytes32,bytes)": "85cf97ab",
          "findCreate2AddressViaHash(bytes32,bytes32)": "a49a7c90",
          "hasBeenDeployed(address)": "08508b8f",
          "safeCreate2(bytes32,bytes)": "64e03087"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"}],\"name\":\"findCreate2Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"deploymentAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"initCodeHash\",\"type\":\"bytes32\"}],\"name\":\"findCreate2AddressViaHash\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"deploymentAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"deploymentAddress\",\"type\":\"address\"}],\"name\":\"hasBeenDeployed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"initializationCode\",\"type\":\"bytes\"}],\"name\":\"safeCreate2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"deploymentAddress\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"0age\",\"details\":\"This contract has not yet been fully tested or audited - proceed with caution and please share any exploits or optimizations you discover.\",\"kind\":\"dev\",\"methods\":{\"findCreate2Address(bytes32,bytes)\":{\"details\":\"Compute the address of the contract that will be created when submitting a given salt or nonce to the contract along with the contract's initialization code. The CREATE2 address is computed in accordance with EIP-1014, and adheres to the formula therein of `keccak256( 0xff ++ address ++ salt ++ keccak256(init_code)))[12:]` when performing the computation. The computed address is then checked for any existing contract code - if so, the null address will be returned instead.\",\"params\":{\"initCode\":\"bytes The contract initialization code to be used. that will be passed into the CREATE2 address calculation.\",\"salt\":\"bytes32 The nonce passed into the CREATE2 address calculation.\"},\"returns\":{\"deploymentAddress\":\"Address of the contract that will be created, or the null address if a contract has already been deployed to that address.\"}},\"findCreate2AddressViaHash(bytes32,bytes32)\":{\"details\":\"Compute the address of the contract that will be created when submitting a given salt or nonce to the contract along with the keccak256 hash of the contract's initialization code. The CREATE2 address is computed in accordance with EIP-1014, and adheres to the formula therein of `keccak256( 0xff ++ address ++ salt ++ keccak256(init_code)))[12:]` when performing the computation. The computed address is then checked for any existing contract code - if so, the null address will be returned instead.\",\"params\":{\"initCodeHash\":\"bytes32 The keccak256 hash of the initialization code that will be passed into the CREATE2 address calculation.\",\"salt\":\"bytes32 The nonce passed into the CREATE2 address calculation.\"},\"returns\":{\"deploymentAddress\":\"Address of the contract that will be created, or the null address if a contract has already been deployed to that address.\"}},\"hasBeenDeployed(address)\":{\"details\":\"Determine if a contract has already been deployed by the factory to a given address.\",\"params\":{\"deploymentAddress\":\"address The contract address to check.\"},\"returns\":{\"_0\":\"True if the contract has been deployed, false otherwise.\"}},\"safeCreate2(bytes32,bytes)\":{\"details\":\"Create a contract using CREATE2 by submitting a given salt or nonce along with the initialization code for the contract. Note that the first 20 bytes of the salt must match those of the calling address, which prevents contract creation events from being submitted by unintended parties.\",\"params\":{\"initializationCode\":\"bytes The initialization code that will be passed into the CREATE2 call.\",\"salt\":\"bytes32 The nonce that will be passed into the CREATE2 call.\"},\"returns\":{\"deploymentAddress\":\"Address of the contract that will be created, or the null address if a contract already exists at that address.\"}}},\"title\":\"Immutable Create2 Contract Factory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract provides a safeCreate2 function that takes a salt value and a block of initialization code as arguments and passes them into inline assembly. The contract prevents redeploys by maintaining a mapping of all contracts that have already been deployed, and prevents frontrunning or other collisions by requiring that the first 20 bytes of the salt are equal to the address of the caller (this can be bypassed by setting the first 20 bytes to the null address). There is also a view function that computes the address of the contract that will be created when submitting a given salt or nonce along with a given block of initialization code.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ImmutableCreate2Factory.sol\":\"ImmutableCreate2Factory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ImmutableCreate2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20; // optimization enabled, 99999 runs, evm: petersburg\\n\\n\\n/**\\n * @title Immutable Create2 Contract Factory\\n * @author 0age\\n * @notice This contract provides a safeCreate2 function that takes a salt value\\n * and a block of initialization code as arguments and passes them into inline\\n * assembly. The contract prevents redeploys by maintaining a mapping of all\\n * contracts that have already been deployed, and prevents frontrunning or other\\n * collisions by requiring that the first 20 bytes of the salt are equal to the\\n * address of the caller (this can be bypassed by setting the first 20 bytes to\\n * the null address). There is also a view function that computes the address of\\n * the contract that will be created when submitting a given salt or nonce along\\n * with a given block of initialization code.\\n * @dev This contract has not yet been fully tested or audited - proceed with\\n * caution and please share any exploits or optimizations you discover.\\n */\\ncontract ImmutableCreate2Factory {\\n  // mapping to track which addresses have already been deployed.\\n  mapping(address => bool) private _deployed;\\n\\n  /**\\n   * @dev Create a contract using CREATE2 by submitting a given salt or nonce\\n   * along with the initialization code for the contract. Note that the first 20\\n   * bytes of the salt must match those of the calling address, which prevents\\n   * contract creation events from being submitted by unintended parties.\\n   * @param salt bytes32 The nonce that will be passed into the CREATE2 call.\\n   * @param initializationCode bytes The initialization code that will be passed\\n   * into the CREATE2 call.\\n   * @return deploymentAddress Address of the contract that will be created, or\\n   * the null address if a contract already exists at that address.\\n   */\\n  function safeCreate2(\\n    bytes32 salt,\\n    bytes calldata initializationCode\\n  ) external payable containsCaller(salt) returns (address deploymentAddress) {\\n    // move the initialization code from calldata to memory.\\n    bytes memory initCode = initializationCode;\\n\\n    // determine the target address for contract deployment.\\n    address targetDeploymentAddress = address(\\n      uint160(                    // downcast to match the address type.\\n        uint256(                  // convert to uint to truncate upper digits.\\n          keccak256(              // compute the CREATE2 hash using 4 inputs.\\n            abi.encodePacked(     // pack all inputs to the hash together.\\n              hex\\\"ff\\\",            // start with 0xff to distinguish from RLP.\\n              address(this),      // this contract will be the caller.\\n              salt,               // pass in the supplied salt value.\\n              keccak256(          // pass in the hash of initialization code.\\n                abi.encodePacked(\\n                  initCode\\n                )\\n              )\\n            )\\n          )\\n        )\\n      )\\n    );\\n\\n    // ensure that a contract hasn't been previously deployed to target address.\\n    require(\\n      !_deployed[targetDeploymentAddress],\\n      \\\"Invalid contract creation - contract has already been deployed.\\\"\\n    );\\n\\n    // using inline assembly: load data and length of data, then call CREATE2.\\n    assembly {                                // solhint-disable-line\\n      let encoded_data := add(0x20, initCode) // load initialization code.\\n      let encoded_size := mload(initCode)     // load the init code's length.\\n      deploymentAddress := create2(           // call CREATE2 with 4 arguments.\\n        callvalue(),                          // forward any attached value.\\n        encoded_data,                         // pass in initialization code.\\n        encoded_size,                         // pass in init code's length.\\n        salt                                  // pass in the salt value.\\n      )\\n    }\\n\\n    // check address against target to ensure that deployment was successful.\\n    require(\\n      deploymentAddress == targetDeploymentAddress,\\n      \\\"Failed to deploy contract using provided salt and initialization code.\\\"\\n    );\\n\\n    // record the deployment of the contract to prevent redeploys.\\n    _deployed[deploymentAddress] = true;\\n  }\\n\\n  /**\\n   * @dev Compute the address of the contract that will be created when\\n   * submitting a given salt or nonce to the contract along with the contract's\\n   * initialization code. The CREATE2 address is computed in accordance with\\n   * EIP-1014, and adheres to the formula therein of\\n   * `keccak256( 0xff ++ address ++ salt ++ keccak256(init_code)))[12:]` when\\n   * performing the computation. The computed address is then checked for any\\n   * existing contract code - if so, the null address will be returned instead.\\n   * @param salt bytes32 The nonce passed into the CREATE2 address calculation.\\n   * @param initCode bytes The contract initialization code to be used.\\n   * that will be passed into the CREATE2 address calculation.\\n   * @return deploymentAddress Address of the contract that will be created, or the null address\\n   * if a contract has already been deployed to that address.\\n   */\\n  function findCreate2Address(\\n    bytes32 salt,\\n    bytes calldata initCode\\n  ) external view returns (address deploymentAddress) {\\n    // determine the address where the contract will be deployed.\\n    deploymentAddress = address(\\n      uint160(                      // downcast to match the address type.\\n        uint256(                    // convert to uint to truncate upper digits.\\n          keccak256(                // compute the CREATE2 hash using 4 inputs.\\n            abi.encodePacked(       // pack all inputs to the hash together.\\n              hex\\\"ff\\\",              // start with 0xff to distinguish from RLP.\\n              address(this),        // this contract will be the caller.\\n              salt,                 // pass in the supplied salt value.\\n              keccak256(            // pass in the hash of initialization code.\\n                abi.encodePacked(\\n                  initCode\\n                )\\n              )\\n            )\\n          )\\n        )\\n      )\\n    );\\n\\n    // return null address to signify failure if contract has been deployed.\\n    if (_deployed[deploymentAddress]) {\\n      return address(0);\\n    }\\n  }\\n\\n  /**\\n   * @dev Compute the address of the contract that will be created when\\n   * submitting a given salt or nonce to the contract along with the keccak256\\n   * hash of the contract's initialization code. The CREATE2 address is computed\\n   * in accordance with EIP-1014, and adheres to the formula therein of\\n   * `keccak256( 0xff ++ address ++ salt ++ keccak256(init_code)))[12:]` when\\n   * performing the computation. The computed address is then checked for any\\n   * existing contract code - if so, the null address will be returned instead.\\n   * @param salt bytes32 The nonce passed into the CREATE2 address calculation.\\n   * @param initCodeHash bytes32 The keccak256 hash of the initialization code\\n   * that will be passed into the CREATE2 address calculation.\\n   * @return deploymentAddress Address of the contract that will be created, or\\n   * the null address if a contract has already been deployed to that address.\\n   */\\n  function findCreate2AddressViaHash(\\n    bytes32 salt,\\n    bytes32 initCodeHash\\n  ) external view returns (address deploymentAddress) {\\n    // determine the address where the contract will be deployed.\\n    deploymentAddress = address(\\n      uint160(                      // downcast to match the address type.\\n        uint256(                    // convert to uint to truncate upper digits.\\n          keccak256(                // compute the CREATE2 hash using 4 inputs.\\n            abi.encodePacked(       // pack all inputs to the hash together.\\n              hex\\\"ff\\\",              // start with 0xff to distinguish from RLP.\\n              address(this),        // this contract will be the caller.\\n              salt,                 // pass in the supplied salt value.\\n              initCodeHash          // pass in the hash of initialization code.\\n            )\\n          )\\n        )\\n      )\\n    );\\n\\n    // return null address to signify failure if contract has been deployed.\\n    if (_deployed[deploymentAddress]) {\\n      return address(0);\\n    }\\n  }\\n\\n  /**\\n   * @dev Determine if a contract has already been deployed by the factory to a\\n   * given address.\\n   * @param deploymentAddress address The contract address to check.\\n   * @return True if the contract has been deployed, false otherwise.\\n   */\\n  function hasBeenDeployed(\\n    address deploymentAddress\\n  ) external view returns (bool) {\\n    // determine if a contract has been deployed to the provided address.\\n    return _deployed[deploymentAddress];\\n  }\\n\\n  /**\\n   * @dev Modifier to ensure that the first 20 bytes of a submitted salt match\\n   * those of the calling account. This provides protection against the salt\\n   * being stolen by frontrunners or other attackers. The protection can also be\\n   * bypassed if desired by setting each of the first 20 bytes to zero.\\n   * @param salt bytes32 The salt value to check against the calling address.\\n   */\\n  modifier containsCaller(bytes32 salt) {\\n    // prevent contract submissions from being stolen from tx.pool by requiring\\n    // that the first 20 bytes of the submitted salt match msg.sender.\\n    require(\\n      (address(bytes20(salt)) == msg.sender) ||\\n      (bytes20(salt) == bytes20(0)),\\n      \\\"Invalid salt - first 20 bytes of the salt must match calling address.\\\"\\n    );\\n    _;\\n  }\\n}\",\"keccak256\":\"0x12df33ea171f11e761b1099cfd96664a3a24cc3a23e492c8fa2a53a9a6b476d6\",\"license\":\"MIT\"}},\"version\":1}",
      "storageLayout": {
        "storage": [
          {
            "astId": 1865,
            "contract": "contracts/ImmutableCreate2Factory.sol:ImmutableCreate2Factory",
            "label": "_deployed",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "types": {
          "t_address": {
            "encoding": "inplace",
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "encoding": "inplace",
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_bool)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => bool)",
            "numberOfBytes": "32",
            "value": "t_bool"
          }
        }
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "notice": "This contract provides a safeCreate2 function that takes a salt value and a block of initialization code as arguments and passes them into inline assembly. The contract prevents redeploys by maintaining a mapping of all contracts that have already been deployed, and prevents frontrunning or other collisions by requiring that the first 20 bytes of the salt are equal to the address of the caller (this can be bypassed by setting the first 20 bytes to the null address). There is also a view function that computes the address of the contract that will be created when submitting a given salt or nonce along with a given block of initialization code.",
        "version": 1
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"contracts/CreateX.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.20;\\n\\n/**\\n * @title CreateX Factory Smart Contract\\n * @author RARIBLE team\\n * @notice Factory smart contract to make easier and safer usage of the\\n * `CREATE` (https://web.archive.org/web/20230921103540/https://www.evm.codes/#f0?fork=shanghai) and `CREATE2`\\n * (https://web.archive.org/web/20230921103540/https://www.evm.codes/#f5?fork=shanghai) EVM opcodes as well as of\\n * `CREATE3`-based (https://web.archive.org/web/20230921103920/https://github.com/ethereum/EIPs/pull/3171) contract creations.\\n * @dev To simplify testing of non-public variables and functions, we use the `internal`\\n * function visibility specifier `internal` for all variables and functions, even though\\n * they could technically be `private` since we do not expect anyone to inherit from\\n * the `CreateX` contract.\\n * @custom:based-on Implementation by pcaversaccio (https://web.archive.org/web/20230921103111/https://pcaversaccio.com/)\\n * and Matt Solomon (https://web.archive.org/web/20230921103335/https://mattsolomon.dev/), modified by RARIBLE team\\n * for specific use cases.\\n */\\ncontract CreateX {\\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\\n    /*                         IMMUTABLES                         */\\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\\n\\n    /**\\n     * @dev Caches the contract address at construction, to be used for the custom errors.\\n     */\\n    address internal immutable _SELF = address(this);\\n\\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\\n    /*                       CREATE2 MAPPING                      */\\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\\n\\n    mapping(address => bool) private _create2Deployed;\\n\\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\\n    /*                      CREATE2 MODIFIER                      */\\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\\n\\n    /**\\n     * @dev Modifier to ensure that the first 20 bytes of a submitted salt match\\n     * those of the calling account. This provides protection against the salt\\n     * being stolen by frontrunners or other attackers. The protection can also be\\n     * bypassed if desired by setting each of the first 20 bytes to zero.\\n     * @param salt bytes32 The salt value to check against the calling address.\\n     * */\\n    modifier containsCaller(bytes32 salt) {\\n        // prevent contract submissions from being stolen from tx.pool by requiring\\n        // that the first 20 bytes of the submitted salt match msg.sender.\\n        require(\\n        (address(bytes20(salt)) == msg.sender) ||\\n        (bytes20(salt) == bytes20(0)),\\n        \\\"Invalid salt - first 20 bytes of the salt must match calling address.\\\"\\n        );\\n        _;\\n    }\\n\\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\\n    /*                            TYPES                           */\\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\\n\\n    /**\\n     * @dev Struct for the `payable` amounts in a deploy-and-initialise call.\\n     */\\n    struct Values {\\n        uint256 constructorAmount;\\n        uint256 initCallAmount;\\n    }\\n\\n    /**\\n     * @dev Enum for the selection of a permissioned deploy protection.\\n     */\\n    enum SenderBytes {\\n        MsgSender,\\n        ZeroAddress,\\n        Random\\n    }\\n\\n    /**\\n     * @dev Enum for the selection of a cross-chain redeploy protection.\\n     */\\n    enum RedeployProtectionFlag {\\n        True,\\n        False,\\n        Unspecified\\n    }\\n\\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\\n    /*                           EVENTS                           */\\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\\n\\n    /**\\n     * @dev Event that is emitted when a contract is successfully created.\\n     * @param newContract The address of the new contract.\\n     * @param salt The 32-byte random value used to create the contract address.\\n     */\\n    event ContractCreation(address indexed newContract, bytes32 indexed salt);\\n\\n    /**\\n     * @dev Event that is emitted when a contract is successfully created.\\n     * @param newContract The address of the new contract.\\n     */\\n    event ContractCreation(address indexed newContract);\\n\\n    /**\\n     * @dev Event that is emitted when a `CREATE3` proxy contract is successfully created.\\n     * @param newContract The address of the new proxy contract.\\n     * @param salt The 32-byte random value used to create the proxy address.\\n     */\\n    event Create3ProxyContractCreation(address indexed newContract, bytes32 indexed salt);\\n\\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\\n    /*                        CUSTOM ERRORS                       */\\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\\n\\n    /**\\n     * @dev Error that occurs when the contract creation failed.\\n     * @param emitter The contract that emits the error.\\n     */\\n    error FailedContractCreation(address emitter);\\n\\n    /**\\n     * @dev Error that occurs when the contract initialisation call failed.\\n     * @param emitter The contract that emits the error.\\n     * @param revertData The data returned by the failed initialisation call.\\n     */\\n    error FailedContractInitialisation(address emitter, bytes revertData);\\n\\n    /**\\n     * @dev Error that occurs when the salt value is invalid.\\n     * @param emitter The contract that emits the error.\\n     */\\n    error InvalidSalt(address emitter);\\n\\n    /**\\n     * @dev Error that occurs when the nonce value is invalid.\\n     * @param emitter The contract that emits the error.\\n     */\\n    error InvalidNonceValue(address emitter);\\n\\n    /**\\n     * @dev Error that occurs when transferring ether has failed.\\n     * @param emitter The contract that emits the error.\\n     * @param revertData The data returned by the failed ether transfer.\\n     */\\n    error FailedEtherTransfer(address emitter, bytes revertData);\\n\\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\\n    /*                           CREATE                           */\\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\\n\\n    /**\\n     * @dev Deploys a new contract via calling the `CREATE` opcode and using the creation\\n     * bytecode `initCode` and `msg.value` as inputs. In order to save deployment costs,\\n     * we do not sanity check the `initCode` length. Note that if `msg.value` is non-zero,\\n     * `initCode` must have a `payable` constructor.\\n     * @param initCode The creation bytecode.\\n     * @return newContract The 20-byte address where the contract was deployed.\\n     */\\n    function deployCreate(bytes memory initCode) public payable returns (address newContract) {\\n        assembly (\\\"memory-safe\\\") {\\n            newContract := create(callvalue(), add(initCode, 0x20), mload(initCode))\\n        }\\n        _requireSuccessfulContractCreation({newContract: newContract});\\n        emit ContractCreation({newContract: newContract});\\n    }\\n\\n    /**\\n     * @dev Deploys and initialises a new contract via calling the `CREATE` opcode and using the\\n     * creation bytecode `initCode`, the initialisation code `data`, the struct for the `payable`\\n     * amounts `values`, the refund address `refundAddress`, and `msg.value` as inputs. In order to\\n     * save deployment costs, we do not sanity check the `initCode` length. Note that if `values.constructorAmount`\\n     * is non-zero, `initCode` must have a `payable` constructor.\\n     * @param initCode The creation bytecode.\\n     * @param data The initialisation code that is passed to the deployed contract.\\n     * @param values The specific `payable` amounts for the deployment and initialisation call.\\n     * @param refundAddress The 20-byte address where any excess ether is returned to.\\n     * @return newContract The 20-byte address where the contract was deployed.\\n     * @custom:security This function allows for reentrancy, however we refrain from adding\\n     * a mutex lock to keep it as use-case agnostic as possible. Please ensure at the protocol\\n     * level that potentially malicious reentrant calls do not affect your smart contract system.\\n     */\\n    function deployCreateAndInit(\\n        bytes memory initCode,\\n        bytes memory data,\\n        Values memory values,\\n        address refundAddress\\n    ) public payable returns (address newContract) {\\n        assembly (\\\"memory-safe\\\") {\\n            newContract := create(mload(values), add(initCode, 0x20), mload(initCode))\\n        }\\n        _requireSuccessfulContractCreation({newContract: newContract});\\n        emit ContractCreation({newContract: newContract});\\n\\n        (bool success, bytes memory returnData) = newContract.call{value: values.initCallAmount}(data);\\n        if (!success) {\\n            revert FailedContractInitialisation({emitter: _SELF, revertData: returnData});\\n        }\\n\\n        if (_SELF.balance != 0) {\\n            // Any wei amount previously forced into this contract (e.g. by using the `SELFDESTRUCT`\\n            // opcode) will be part of the refund transaction.\\n            (success, returnData) = refundAddress.call{value: _SELF.balance}(\\\"\\\");\\n            if (!success) {\\n                revert FailedEtherTransfer({emitter: _SELF, revertData: returnData});\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Deploys and initialises a new contract via calling the `CREATE` opcode and using the\\n     * creation bytecode `initCode`, the initialisation code `data`, the struct for the `payable`\\n     * amounts `values`, and `msg.value` as inputs. In order to save deployment costs, we do not\\n     * sanity check the `initCode` length. Note that if `values.constructorAmount` is non-zero,\\n     * `initCode` must have a `payable` constructor, and any excess ether is returned to `msg.sender`.\\n     * @param initCode The creation bytecode.\\n     * @param data The initialisation code that is passed to the deployed contract.\\n     * @param values The specific `payable` amounts for the deployment and initialisation call.\\n     * @return newContract The 20-byte address where the contract was deployed.\\n     * @custom:security This function allows for reentrancy, however we refrain from adding\\n     * a mutex lock to keep it as use-case agnostic as possible. Please ensure at the protocol\\n     * level that potentially malicious reentrant calls do not affect your smart contract system.\\n     */\\n    function deployCreateAndInit(\\n        bytes memory initCode,\\n        bytes memory data,\\n        Values memory values\\n    ) public payable returns (address newContract) {\\n        newContract = deployCreateAndInit({initCode: initCode, data: data, values: values, refundAddress: msg.sender});\\n    }\\n\\n    /**\\n     * @dev Deploys a new EIP-1167 minimal proxy contract using the `CREATE` opcode, and initialises\\n     * the implementation contract using the implementation address `implementation`, the initialisation\\n     * code `data`, and `msg.value` as inputs. Note that if `msg.value` is non-zero, the initialiser\\n     * function called via `data` must be `payable`.\\n     * @param implementation The 20-byte implementation contract address.\\n     * @param data The initialisation code that is passed to the deployed proxy contract.\\n     * @return proxy The 20-byte address where the clone was deployed.\\n     * @custom:security This function allows for reentrancy, however we refrain from adding\\n     * a mutex lock to keep it as use-case agnostic as possible. Please ensure at the protocol\\n     * level that potentially malicious reentrant calls do not affect your smart contract system.\\n     */\\n    function deployCreateClone(address implementation, bytes memory data) public payable returns (address proxy) {\\n        bytes20 implementationInBytes = bytes20(implementation);\\n        assembly (\\\"memory-safe\\\") {\\n            let clone := mload(0x40)\\n            mstore(\\n                clone,\\n                hex\\\"3d_60_2d_80_60_0a_3d_39_81_f3_36_3d_3d_37_3d_3d_3d_36_3d_73_00_00_00_00_00_00_00_00_00_00_00_00\\\"\\n            )\\n            mstore(add(clone, 0x14), implementationInBytes)\\n            mstore(\\n                add(clone, 0x28),\\n                hex\\\"5a_f4_3d_82_80_3e_90_3d_91_60_2b_57_fd_5b_f3_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00\\\"\\n            )\\n            proxy := create(0, clone, 0x37)\\n        }\\n        if (proxy == address(0)) {\\n            revert FailedContractCreation({emitter: _SELF});\\n        }\\n        emit ContractCreation({newContract: proxy});\\n\\n        (bool success, bytes memory returnData) = proxy.call{value: msg.value}(data);\\n        _requireSuccessfulContractInitialisation({\\n            success: success,\\n            returnData: returnData,\\n            implementation: implementation\\n        });\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via `deployer` using\\n     * the `CREATE` opcode. For the specification of the Recursive Length Prefix (RLP) encoding\\n     * scheme, please refer to p. 19 of the Ethereum Yellow Paper (https://web.archive.org/web/20230921110603/https://ethereum.github.io/yellowpaper/paper.pdf)\\n     * and the Ethereum Wiki (https://web.archive.org/web/20230921112807/https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/).\\n     * For further insights also, see the following issue: https://web.archive.org/web/20230921112943/https://github.com/transmissions11/solmate/issues/207.\\n     *\\n     * Based on the EIP-161 (https://web.archive.org/web/20230921113207/https://raw.githubusercontent.com/ethereum/EIPs/master/EIPS/eip-161.md) specification,\\n     * all contract accounts on the Ethereum mainnet are initiated with `nonce = 1`. Thus, the\\n     * first contract address created by another contract is calculated with a non-zero nonce.\\n     * @param deployer The 20-byte deployer address.\\n     * @param nonce The next 32-byte nonce of the deployer address.\\n     * @return computedAddress The 20-byte address where a contract will be stored.\\n     */\\n    function computeCreateAddress(address deployer, uint256 nonce) public view returns (address computedAddress) {\\n        bytes memory data;\\n        bytes1 len = bytes1(0x94);\\n\\n        // The theoretical allowed limit, based on EIP-2681, for an account nonce is 2**64-2:\\n        // https://web.archive.org/web/20230921113252/https://eips.ethereum.org/EIPS/eip-2681.\\n        if (nonce > type(uint64).max - 1) {\\n            revert InvalidNonceValue({emitter: _SELF});\\n        }\\n\\n        // The integer zero is treated as an empty byte string and therefore has only one length prefix,\\n        // 0x80, which is calculated via 0x80 + 0.\\n        if (nonce == 0x00) {\\n            data = abi.encodePacked(bytes1(0xd6), len, deployer, bytes1(0x80));\\n        }\\n        // A one-byte integer in the [0x00, 0x7f] range uses its own value as a length prefix, there is no\\n        // additional \\\"0x80 + length\\\" prefix that precedes it.\\n        else if (nonce <= 0x7f) {\\n            data = abi.encodePacked(bytes1(0xd6), len, deployer, uint8(nonce));\\n        }\\n        // In the case of `nonce > 0x7f` and `nonce <= type(uint8).max`, we have the following encoding scheme\\n        // (the same calculation can be carried over for higher nonce bytes):\\n        // 0xda = 0xc0 (short RLP prefix) + 0x1a (= the bytes length of: 0x94 + address + 0x84 + nonce, in hex),\\n        // 0x94 = 0x80 + 0x14 (= the bytes length of an address, 20 bytes, in hex),\\n        // 0x84 = 0x80 + 0x04 (= the bytes length of the nonce, 4 bytes, in hex).\\n        else if (nonce <= type(uint8).max) {\\n            data = abi.encodePacked(bytes1(0xd7), len, deployer, bytes1(0x81), uint8(nonce));\\n        } else if (nonce <= type(uint16).max) {\\n            data = abi.encodePacked(bytes1(0xd8), len, deployer, bytes1(0x82), uint16(nonce));\\n        } else if (nonce <= type(uint24).max) {\\n            data = abi.encodePacked(bytes1(0xd9), len, deployer, bytes1(0x83), uint24(nonce));\\n        } else if (nonce <= type(uint32).max) {\\n            data = abi.encodePacked(bytes1(0xda), len, deployer, bytes1(0x84), uint32(nonce));\\n        } else if (nonce <= type(uint40).max) {\\n            data = abi.encodePacked(bytes1(0xdb), len, deployer, bytes1(0x85), uint40(nonce));\\n        } else if (nonce <= type(uint48).max) {\\n            data = abi.encodePacked(bytes1(0xdc), len, deployer, bytes1(0x86), uint48(nonce));\\n        } else if (nonce <= type(uint56).max) {\\n            data = abi.encodePacked(bytes1(0xdd), len, deployer, bytes1(0x87), uint56(nonce));\\n        } else {\\n            data = abi.encodePacked(bytes1(0xde), len, deployer, bytes1(0x88), uint64(nonce));\\n        }\\n\\n        computedAddress = address(uint160(uint256(keccak256(data))));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via this contract\\n     * using the `CREATE` opcode. For the specification of the Recursive Length Prefix (RLP)\\n     * encoding scheme, please refer to p. 19 of the Ethereum Yellow Paper (https://web.archive.org/web/20230921110603/https://ethereum.github.io/yellowpaper/paper.pdf)\\n     * and the Ethereum Wiki (https://web.archive.org/web/20230921112807/https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/).\\n     * For further insights also, see the following issue: https://web.archive.org/web/20230921112943/https://github.com/transmissions11/solmate/issues/207.\\n     *\\n     * Based on the EIP-161 (https://web.archive.org/web/20230921113207/https://raw.githubusercontent.com/ethereum/EIPs/master/EIPS/eip-161.md) specification,\\n     * all contract accounts on the Ethereum mainnet are initiated with `nonce = 1`. Thus, the\\n     * first contract address created by another contract is calculated with a non-zero nonce.\\n     * @param nonce The next 32-byte nonce of this contract.\\n     * @return computedAddress The 20-byte address where a contract will be stored.\\n     */\\n    function computeCreateAddress(uint256 nonce) public view returns (address computedAddress) {\\n        computedAddress = computeCreateAddress({deployer: _SELF, nonce: nonce});\\n    }\\n\\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\\n    /*                           CREATE2                          */\\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\\n\\n    /**\\n     * @dev Deploys a new contract via calling the `CREATE2` opcode and using the salt value `salt`,\\n     * the creation bytecode `initCode`, and `msg.value` as inputs. In order to save deployment costs,\\n     * we do not sanity check the `initCode` length. Note that if `msg.value` is non-zero, `initCode`\\n     * must have a `payable` constructor.\\n     * @param salt The 32-byte random value used to create the contract address.\\n     * @param initCode The creation bytecode.\\n     * @return newContract The 20-byte address where the contract was deployed.\\n     */\\n    function deployCreate2(bytes32 salt, bytes memory initCode) public payable returns (address newContract) {\\n        bytes32 guardedSalt = _guard({salt: salt});\\n        assembly (\\\"memory-safe\\\") {\\n            newContract := create2(callvalue(), add(initCode, 0x20), mload(initCode), guardedSalt)\\n        }\\n        _requireSuccessfulContractCreation({newContract: newContract});\\n\\n        if (_create2Deployed[newContract]) revert FailedContractCreation({emitter: _SELF});\\n        _create2Deployed[newContract] = true;\\n\\n\\n        emit ContractCreation({newContract: newContract, salt: guardedSalt});\\n    }\\n\\n    /**\\n     * @dev Deploys a new contract via calling the `CREATE2` opcode and using the creation bytecode\\n     * `initCode` and `msg.value` as inputs. The salt value is calculated pseudo-randomly using a\\n     * diverse selection of block and transaction properties. This approach does not guarantee true\\n     * randomness! In order to save deployment costs, we do not sanity check the `initCode` length.\\n     * Note that if `msg.value` is non-zero, `initCode` must have a `payable` constructor.\\n     * @param initCode The creation bytecode.\\n     * @return newContract The 20-byte address where the contract was deployed.\\n     */\\n    function deployCreate2(bytes memory initCode) public payable returns (address newContract) {\\n        // Note that the safeguarding function `_guard` is called as part of the overloaded function\\n        // `deployCreate2`.\\n        newContract = deployCreate2({salt: _generateSalt(), initCode: initCode});\\n    }\\n\\n    /**\\n     * @dev Create a contract using CREATE2 by submitting a given salt or nonce\\n     * along with the initialization code for the contract. Note that the first 20\\n     * bytes of the salt must match those of the calling address, which prevents\\n     * contract creation events from being submitted by unintended parties.\\n     * @param salt bytes32 The nonce that will be passed into the CREATE2 call.\\n     * @param initCode bytes The initialization code that will be passed\\n     * into the CREATE2 call.\\n     * @return newContract Address of the contract that will be created, or the null address\\n     * if a contract already exists at that address.\\n     */\\n    function safeCreate2(bytes32 salt, bytes memory initCode) public payable containsCaller(salt) returns (address newContract) {\\n        newContract = deployCreate2({salt: salt, initCode: initCode});\\n    }\\n\\n    /**\\n     * @dev Deploys and initialises a new contract via calling the `CREATE2` opcode and using the\\n     * salt value `salt`, the creation bytecode `initCode`, the initialisation code `data`, the struct\\n     * for the `payable` amounts `values`, the refund address `refundAddress`, and `msg.value` as inputs.\\n     * In order to save deployment costs, we do not sanity check the `initCode` length. Note that if\\n     * `values.constructorAmount` is non-zero, `initCode` must have a `payable` constructor.\\n     * @param salt The 32-byte random value used to create the contract address.\\n     * @param initCode The creation bytecode.\\n     * @param data The initialisation code that is passed to the deployed contract.\\n     * @param values The specific `payable` amounts for the deployment and initialisation call.\\n     * @param refundAddress The 20-byte address where any excess ether is returned to.\\n     * @return newContract The 20-byte address where the contract was deployed.\\n     * @custom:security This function allows for reentrancy, however we refrain from adding\\n     * a mutex lock to keep it as use-case agnostic as possible. Please ensure at the protocol\\n     * level that potentially malicious reentrant calls do not affect your smart contract system.\\n     */\\n    function deployCreate2AndInit(\\n        bytes32 salt,\\n        bytes memory initCode,\\n        bytes memory data,\\n        Values memory values,\\n        address refundAddress\\n    ) public payable returns (address newContract) {\\n        bytes32 guardedSalt = _guard({salt: salt});\\n        assembly (\\\"memory-safe\\\") {\\n            newContract := create2(mload(values), add(initCode, 0x20), mload(initCode), guardedSalt)\\n        }\\n        _requireSuccessfulContractCreation({newContract: newContract});\\n\\n        if (_create2Deployed[newContract]) revert FailedContractCreation({emitter: _SELF});\\n        _create2Deployed[newContract] = true;\\n\\n        emit ContractCreation({newContract: newContract, salt: guardedSalt});\\n\\n        (bool success, bytes memory returnData) = newContract.call{value: values.initCallAmount}(data);\\n        if (!success) {\\n            revert FailedContractInitialisation({emitter: _SELF, revertData: returnData});\\n        }\\n\\n        if (_SELF.balance != 0) {\\n            // Any wei amount previously forced into this contract (e.g. by using the `SELFDESTRUCT`\\n            // opcode) will be part of the refund transaction.\\n            (success, returnData) = refundAddress.call{value: _SELF.balance}(\\\"\\\");\\n            if (!success) {\\n                revert FailedEtherTransfer({emitter: _SELF, revertData: returnData});\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Deploys and initialises a new contract via calling the `CREATE2` opcode and using the\\n     * salt value `salt`, creation bytecode `initCode`, the initialisation code `data`, the struct for\\n     * the `payable` amounts `values`, and `msg.value` as inputs. In order to save deployment costs,\\n     * we do not sanity check the `initCode` length. Note that if `values.constructorAmount` is non-zero,\\n     * `initCode` must have a `payable` constructor, and any excess ether is returned to `msg.sender`.\\n     * @param salt The 32-byte random value used to create the contract address.\\n     * @param initCode The creation bytecode.\\n     * @param data The initialisation code that is passed to the deployed contract.\\n     * @param values The specific `payable` amounts for the deployment and initialisation call.\\n     * @return newContract The 20-byte address where the contract was deployed.\\n     * @custom:security This function allows for reentrancy, however we refrain from adding\\n     * a mutex lock to keep it as use-case agnostic as possible. Please ensure at the protocol\\n     * level that potentially malicious reentrant calls do not affect your smart contract system.\\n     */\\n    function deployCreate2AndInit(\\n        bytes32 salt,\\n        bytes memory initCode,\\n        bytes memory data,\\n        Values memory values\\n    ) public payable returns (address newContract) {\\n        // Note that the safeguarding function `_guard` is called as part of the overloaded function\\n        // `deployCreate2AndInit`.\\n        newContract = deployCreate2AndInit({\\n            salt: salt,\\n            initCode: initCode,\\n            data: data,\\n            values: values,\\n            refundAddress: msg.sender\\n        });\\n    }\\n\\n    /**\\n     * @dev Deploys and initialises a new contract via calling the `CREATE2` opcode and using the\\n     * creation bytecode `initCode`, the initialisation code `data`, the struct for the `payable`\\n     * amounts `values`, the refund address `refundAddress`, and `msg.value` as inputs. The salt value\\n     * is calculated pseudo-randomly using a diverse selection of block and transaction properties.\\n     * This approach does not guarantee true randomness! In order to save deployment costs, we do not\\n     * sanity check the `initCode` length. Note that if `values.constructorAmount` is non-zero, `initCode`\\n     * must have a `payable` constructor.\\n     * @param initCode The creation bytecode.\\n     * @param data The initialisation code that is passed to the deployed contract.\\n     * @param values The specific `payable` amounts for the deployment and initialisation call.\\n     * @param refundAddress The 20-byte address where any excess ether is returned to.\\n     * @return newContract The 20-byte address where the contract was deployed.\\n     * @custom:security This function allows for reentrancy, however we refrain from adding\\n     * a mutex lock to keep it as use-case agnostic as possible. Please ensure at the protocol\\n     * level that potentially malicious reentrant calls do not affect your smart contract system.\\n     */\\n    function deployCreate2AndInit(\\n        bytes memory initCode,\\n        bytes memory data,\\n        Values memory values,\\n        address refundAddress\\n    ) public payable returns (address newContract) {\\n        // Note that the safeguarding function `_guard` is called as part of the overloaded function\\n        // `deployCreate2AndInit`.\\n        newContract = deployCreate2AndInit({\\n            salt: _generateSalt(),\\n            initCode: initCode,\\n            data: data,\\n            values: values,\\n            refundAddress: refundAddress\\n        });\\n    }\\n\\n    /**\\n     * @dev Deploys and initialises a new contract via calling the `CREATE2` opcode and using the\\n     * creation bytecode `initCode`, the initialisation code `data`, the struct for the `payable` amounts\\n     * `values`, and `msg.value` as inputs. The salt value is calculated pseudo-randomly using a\\n     * diverse selection of block and transaction properties. This approach does not guarantee true\\n     * randomness! In order to save deployment costs, we do not sanity check the `initCode` length.\\n     * Note that if `values.constructorAmount` is non-zero, `initCode` must have a `payable` constructor,\\n     * and any excess ether is returned to `msg.sender`.\\n     * @param initCode The creation bytecode.\\n     * @param data The initialisation code that is passed to the deployed contract.\\n     * @param values The specific `payable` amounts for the deployment and initialisation call.\\n     * @return newContract The 20-byte address where the contract was deployed.\\n     * @custom:security This function allows for reentrancy, however we refrain from adding\\n     * a mutex lock to keep it as use-case agnostic as possible. Please ensure at the protocol\\n     * level that potentially malicious reentrant calls do not affect your smart contract system.\\n     */\\n    function deployCreate2AndInit(\\n        bytes memory initCode,\\n        bytes memory data,\\n        Values memory values\\n    ) public payable returns (address newContract) {\\n        // Note that the safeguarding function `_guard` is called as part of the overloaded function\\n        // `deployCreate2AndInit`.\\n        newContract = deployCreate2AndInit({\\n            salt: _generateSalt(),\\n            initCode: initCode,\\n            data: data,\\n            values: values,\\n            refundAddress: msg.sender\\n        });\\n    }\\n\\n    /**\\n     * @dev Deploys a new EIP-1167 minimal proxy contract using the `CREATE2` opcode and the salt\\n     * value `salt`, and initialises the implementation contract using the implementation address\\n     * `implementation`, the initialisation code `data`, and `msg.value` as inputs. Note that if\\n     * `msg.value` is non-zero, the initialiser function called via `data` must be `payable`.\\n     * @param salt The 32-byte random value used to create the proxy contract address.\\n     * @param implementation The 20-byte implementation contract address.\\n     * @param data The initialisation code that is passed to the deployed proxy contract.\\n     * @return proxy The 20-byte address where the clone was deployed.\\n     * @custom:security This function allows for reentrancy, however we refrain from adding\\n     * a mutex lock to keep it as use-case agnostic as possible. Please ensure at the protocol\\n     * level that potentially malicious reentrant calls do not affect your smart contract system.\\n     */\\n    function deployCreate2Clone(\\n        bytes32 salt,\\n        address implementation,\\n        bytes memory data\\n    ) public payable returns (address proxy) {\\n        bytes32 guardedSalt = _guard({salt: salt});\\n        bytes20 implementationInBytes = bytes20(implementation);\\n        assembly (\\\"memory-safe\\\") {\\n            let clone := mload(0x40)\\n            mstore(\\n                clone,\\n                hex\\\"3d_60_2d_80_60_0a_3d_39_81_f3_36_3d_3d_37_3d_3d_3d_36_3d_73_00_00_00_00_00_00_00_00_00_00_00_00\\\"\\n            )\\n            mstore(add(clone, 0x14), implementationInBytes)\\n            mstore(\\n                add(clone, 0x28),\\n                hex\\\"5a_f4_3d_82_80_3e_90_3d_91_60_2b_57_fd_5b_f3_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00\\\"\\n            )\\n            proxy := create2(0, clone, 0x37, guardedSalt)\\n        }\\n        if (proxy == address(0)) {\\n            revert FailedContractCreation({emitter: _SELF});\\n        }\\n        emit ContractCreation({newContract: proxy, salt: guardedSalt});\\n\\n        (bool success, bytes memory returnData) = proxy.call{value: msg.value}(data);\\n        _requireSuccessfulContractInitialisation({\\n            success: success,\\n            returnData: returnData,\\n            implementation: implementation\\n        });\\n    }\\n\\n    /**\\n     * @dev Deploys a new EIP-1167 minimal proxy contract using the `CREATE2` opcode and the salt\\n     * value `salt`, and initialises the implementation contract using the implementation address\\n     * `implementation`, the initialisation code `data`, and `msg.value` as inputs. The salt value is\\n     * calculated pseudo-randomly using a diverse selection of block and transaction properties. This\\n     * approach does not guarantee true randomness! Note that if `msg.value` is non-zero, the initialiser\\n     * function called via `data` must be `payable`.\\n     * @param implementation The 20-byte implementation contract address.\\n     * @param data The initialisation code that is passed to the deployed proxy contract.\\n     * @return proxy The 20-byte address where the clone was deployed.\\n     * @custom:security This function allows for reentrancy, however we refrain from adding\\n     * a mutex lock to keep it as use-case agnostic as possible. Please ensure at the protocol\\n     * level that potentially malicious reentrant calls do not affect your smart contract system.\\n     */\\n    function deployCreate2Clone(address implementation, bytes memory data) public payable returns (address proxy) {\\n        // Note that the safeguarding function `_guard` is called as part of the overloaded function\\n        // `deployCreate2Clone`.\\n        proxy = deployCreate2Clone({salt: _generateSalt(), implementation: implementation, data: data});\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via `deployer` using\\n     * the `CREATE2` opcode. Any change in the `initCodeHash` or `salt` values will result in a new\\n     * destination address. This implementation is based on OpenZeppelin:\\n     * https://web.archive.org/web/20230921113703/https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts/181d518609a9f006fcb97af63e6952e603cf100e/contracts/utils/Create2.sol.\\n     * @param salt The 32-byte random value used to create the contract address.\\n     * @param initCodeHash The 32-byte bytecode digest of the contract creation bytecode.\\n     * @param deployer The 20-byte deployer address.\\n     * @return computedAddress The 20-byte address where a contract will be stored.\\n     */\\n    function computeCreate2Address(\\n        bytes32 salt,\\n        bytes32 initCodeHash,\\n        address deployer\\n    ) public pure returns (address computedAddress) {\\n        assembly (\\\"memory-safe\\\") {\\n            // |                      | ↓ ptr ...  ↓ ptr + 0x0B (start) ...  ↓ ptr + 0x20 ...  ↓ ptr + 0x40 ...   |\\n            // |----------------------|---------------------------------------------------------------------------|\\n            // | initCodeHash         |                                                        CCCCCCCCCCCCC...CC |\\n            // | salt                 |                                      BBBBBBBBBBBBB...BB                   |\\n            // | deployer             | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\\n            // | 0xFF                 |            FF                                                             |\\n            // |----------------------|---------------------------------------------------------------------------|\\n            // | memory               | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\\n            // | keccak256(start, 85) |            ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ |\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x40), initCodeHash)\\n            mstore(add(ptr, 0x20), salt)\\n            mstore(ptr, deployer)\\n            let start := add(ptr, 0x0b)\\n            mstore8(start, 0xff)\\n            computedAddress := keccak256(start, 85)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via this contract using\\n     * the `CREATE2` opcode. Any change in the `initCodeHash` or `salt` values will result in a new\\n     * destination address.\\n     * @param salt The 32-byte random value used to create the contract address.\\n     * @param initCodeHash The 32-byte bytecode digest of the contract creation bytecode.\\n     * @return computedAddress The 20-byte address where a contract will be stored.\\n     */\\n    function findCreate2AddressViaHash(bytes32 salt, bytes32 initCodeHash) public view returns (address computedAddress) {\\n        computedAddress = computeCreate2Address({salt: _guard({salt: salt}), initCodeHash: initCodeHash, deployer: _SELF});\\n        // return null address to signify failure if contract has been deployed.\\n        if (_create2Deployed[computedAddress]) return address(0);\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via this contract using\\n     * the `CREATE2` opcode. Any change in the `initCodeHash` or `salt` values will result in a new\\n     * destination address.\\n     * @param salt The 32-byte random value used to create the contract address.\\n     * @param initCode The 32-byte bytecode digest of the contract creation bytecode.\\n     * @return computedAddress The 20-byte address where a contract will be stored.\\n     */\\n    function findCreate2Address(bytes32 salt, bytes memory initCode) public view returns (address computedAddress) {\\n        computedAddress = computeCreate2Address({salt: _guard({salt: salt}), initCodeHash: keccak256(abi.encodePacked(initCode)), deployer: _SELF});\\n        // return null address to signify failure if contract has been deployed.\\n        if (_create2Deployed[computedAddress]) return address(0);\\n    }\\n\\n    /**\\n     * @dev Determine if a contract has already been deployed by the factory to a\\n     * given address.\\n     * @param deploymentAddress address The contract address to check.\\n     * @return True if the contract has been deployed, false otherwise.\\n     */\\n    function hasBeenDeployed(address deploymentAddress) external view returns (bool) {\\n        // determine if a contract has been deployed to the provided address.\\n        return _create2Deployed[deploymentAddress];\\n    }\\n\\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\\n    /*                           CREATE3                          */\\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\\n\\n    /**\\n     * @dev Deploys a new contract via employing the `CREATE3` pattern (i.e. without an initcode\\n     * factor) and using the salt value `salt`, the creation bytecode `initCode`, and `msg.value`\\n     * as inputs. In order to save deployment costs, we do not sanity check the `initCode` length.\\n     * Note that if `msg.value` is non-zero, `initCode` must have a `payable` constructor. This\\n     * implementation is based on Solmate:\\n     * https://web.archive.org/web/20230921113832/https://raw.githubusercontent.com/transmissions11/solmate/e8f96f25d48fe702117ce76c79228ca4f20206cb/src/utils/CREATE3.sol.\\n     * @param salt The 32-byte random value used to create the proxy contract address.\\n     * @param initCode The creation bytecode.\\n     * @return newContract The 20-byte address where the contract was deployed.\\n     * @custom:security We strongly recommend implementing a permissioned deploy protection by setting\\n     * the first 20 bytes equal to `msg.sender` in the `salt` to prevent maliciously intended frontrun\\n     * proxy deployments on other chains.\\n     */\\n    function deployCreate3(bytes32 salt, bytes memory initCode) public payable returns (address newContract) {\\n        bytes32 guardedSalt = _guard({salt: salt});\\n        bytes memory proxyChildBytecode = hex\\\"67_36_3d_3d_37_36_3d_34_f0_3d_52_60_08_60_18_f3\\\";\\n        address proxy;\\n        assembly (\\\"memory-safe\\\") {\\n            proxy := create2(0, add(proxyChildBytecode, 32), mload(proxyChildBytecode), guardedSalt)\\n        }\\n        if (proxy == address(0)) {\\n            revert FailedContractCreation({emitter: _SELF});\\n        }\\n        emit Create3ProxyContractCreation({newContract: proxy, salt: guardedSalt});\\n\\n        newContract = computeCreate3Address({salt: guardedSalt});\\n        (bool success, ) = proxy.call{value: msg.value}(initCode);\\n        _requireSuccessfulContractCreation({success: success, newContract: newContract});\\n        emit ContractCreation({newContract: newContract});\\n    }\\n\\n    /**\\n     * @dev Deploys a new contract via employing the `CREATE3` pattern (i.e. without an initcode\\n     * factor) and using the salt value `salt`, the creation bytecode `initCode`, and `msg.value`\\n     * as inputs. The salt value is calculated pseudo-randomly using a diverse selection of block\\n     * and transaction properties. This approach does not guarantee true randomness! In order to save\\n     * deployment costs, we do not sanity check the `initCode` length. Note that if `msg.value` is\\n     * non-zero, `initCode` must have a `payable` constructor. This implementation is based on Solmate:\\n     * https://web.archive.org/web/20230921113832/https://raw.githubusercontent.com/transmissions11/solmate/e8f96f25d48fe702117ce76c79228ca4f20206cb/src/utils/CREATE3.sol.\\n     * @param initCode The creation bytecode.\\n     * @return newContract The 20-byte address where the contract was deployed.\\n     */\\n    function deployCreate3(bytes memory initCode) public payable returns (address newContract) {\\n        // Note that the safeguarding function `_guard` is called as part of the overloaded function\\n        // `deployCreate3`.\\n        newContract = deployCreate3({salt: _generateSalt(), initCode: initCode});\\n    }\\n\\n    /**\\n     * @dev Deploys and initialises a new contract via employing the `CREATE3` pattern (i.e. without\\n     * an initcode factor) and using the salt value `salt`, the creation bytecode `initCode`, the\\n     * initialisation code `data`, the struct for the `payable` amounts `values`, the refund address\\n     * `refundAddress`, and `msg.value` as inputs. In order to save deployment costs, we do not sanity\\n     * check the `initCode` length. Note that if `values.constructorAmount` is non-zero, `initCode` must\\n     * have a `payable` constructor. This implementation is based on Solmate:\\n     * https://web.archive.org/web/20230921113832/https://raw.githubusercontent.com/transmissions11/solmate/e8f96f25d48fe702117ce76c79228ca4f20206cb/src/utils/CREATE3.sol.\\n     * @param salt The 32-byte random value used to create the proxy contract address.\\n     * @param initCode The creation bytecode.\\n     * @param data The initialisation code that is passed to the deployed contract.\\n     * @param values The specific `payable` amounts for the deployment and initialisation call.\\n     * @param refundAddress The 20-byte address where any excess ether is returned to.\\n     * @return newContract The 20-byte address where the contract was deployed.\\n     * @custom:security This function allows for reentrancy, however we refrain from adding\\n     * a mutex lock to keep it as use-case agnostic as possible. Please ensure at the protocol\\n     * level that potentially malicious reentrant calls do not affect your smart contract system.\\n     * Furthermore, we strongly recommend implementing a permissioned deploy protection by setting\\n     * the first 20 bytes equal to `msg.sender` in the `salt` to prevent maliciously intended frontrun\\n     * proxy deployments on other chains.\\n     */\\n    function deployCreate3AndInit(\\n        bytes32 salt,\\n        bytes memory initCode,\\n        bytes memory data,\\n        Values memory values,\\n        address refundAddress\\n    ) public payable returns (address newContract) {\\n        bytes32 guardedSalt = _guard({salt: salt});\\n        bytes memory proxyChildBytecode = hex\\\"67_36_3d_3d_37_36_3d_34_f0_3d_52_60_08_60_18_f3\\\";\\n        address proxy;\\n        assembly (\\\"memory-safe\\\") {\\n            proxy := create2(0, add(proxyChildBytecode, 32), mload(proxyChildBytecode), guardedSalt)\\n        }\\n        if (proxy == address(0)) {\\n            revert FailedContractCreation({emitter: _SELF});\\n        }\\n        emit Create3ProxyContractCreation({newContract: proxy, salt: guardedSalt});\\n\\n        newContract = computeCreate3Address({salt: guardedSalt});\\n        (bool success, ) = proxy.call{value: values.constructorAmount}(initCode);\\n        _requireSuccessfulContractCreation({success: success, newContract: newContract});\\n        emit ContractCreation({newContract: newContract});\\n\\n        bytes memory returnData;\\n        (success, returnData) = newContract.call{value: values.initCallAmount}(data);\\n        if (!success) {\\n            revert FailedContractInitialisation({emitter: _SELF, revertData: returnData});\\n        }\\n\\n        if (_SELF.balance != 0) {\\n            // Any wei amount previously forced into this contract (e.g. by using the `SELFDESTRUCT`\\n            // opcode) will be part of the refund transaction.\\n            (success, returnData) = refundAddress.call{value: _SELF.balance}(\\\"\\\");\\n            if (!success) {\\n                revert FailedEtherTransfer({emitter: _SELF, revertData: returnData});\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Deploys and initialises a new contract via employing the `CREATE3` pattern (i.e. without\\n     * an initcode factor) and using the salt value `salt`, the creation bytecode `initCode`, the\\n     * initialisation code `data`, the struct for the `payable` amounts `values`, and `msg.value` as\\n     * inputs. In order to save deployment costs, we do not sanity check the `initCode` length. Note\\n     * that if `values.constructorAmount` is non-zero, `initCode` must have a `payable` constructor,\\n     * and any excess ether is returned to `msg.sender`. This implementation is based on Solmate:\\n     * https://web.archive.org/web/20230921113832/https://raw.githubusercontent.com/transmissions11/solmate/e8f96f25d48fe702117ce76c79228ca4f20206cb/src/utils/CREATE3.sol.\\n     * @param salt The 32-byte random value used to create the proxy contract address.\\n     * @param initCode The creation bytecode.\\n     * @param data The initialisation code that is passed to the deployed contract.\\n     * @param values The specific `payable` amounts for the deployment and initialisation call.\\n     * @return newContract The 20-byte address where the contract was deployed.\\n     * @custom:security This function allows for reentrancy, however we refrain from adding\\n     * a mutex lock to keep it as use-case agnostic as possible. Please ensure at the protocol\\n     * level that potentially malicious reentrant calls do not affect your smart contract system.\\n     * Furthermore, we strongly recommend implementing a permissioned deploy protection by setting\\n     * the first 20 bytes equal to `msg.sender` in the `salt` to prevent maliciously intended frontrun\\n     * proxy deployments on other chains.\\n     */\\n    function deployCreate3AndInit(\\n        bytes32 salt,\\n        bytes memory initCode,\\n        bytes memory data,\\n        Values memory values\\n    ) public payable returns (address newContract) {\\n        // Note that the safeguarding function `_guard` is called as part of the overloaded function\\n        // `deployCreate3AndInit`.\\n        newContract = deployCreate3AndInit({\\n            salt: salt,\\n            initCode: initCode,\\n            data: data,\\n            values: values,\\n            refundAddress: msg.sender\\n        });\\n    }\\n\\n    /**\\n     * @dev Deploys and initialises a new contract via employing the `CREATE3` pattern (i.e. without\\n     * an initcode factor) and using the creation bytecode `initCode`, the initialisation code `data`,\\n     * the struct for the `payable` amounts `values`, the refund address `refundAddress`, and `msg.value`\\n     * as inputs. The salt value is calculated pseudo-randomly using a diverse selection of block and\\n     * transaction properties. This approach does not guarantee true randomness! In order to save deployment\\n     * costs, we do not sanity check the `initCode` length. Note that if `values.constructorAmount` is non-zero,\\n     * `initCode` must have a `payable` constructor. This implementation is based on Solmate:\\n     * https://web.archive.org/web/20230921113832/https://raw.githubusercontent.com/transmissions11/solmate/e8f96f25d48fe702117ce76c79228ca4f20206cb/src/utils/CREATE3.sol.\\n     * @param initCode The creation bytecode.\\n     * @param data The initialisation code that is passed to the deployed contract.\\n     * @param values The specific `payable` amounts for the deployment and initialisation call.\\n     * @param refundAddress The 20-byte address where any excess ether is returned to.\\n     * @return newContract The 20-byte address where the contract was deployed.\\n     * @custom:security This function allows for reentrancy, however we refrain from adding\\n     * a mutex lock to keep it as use-case agnostic as possible. Please ensure at the protocol\\n     * level that potentially malicious reentrant calls do not affect your smart contract system.\\n     */\\n    function deployCreate3AndInit(\\n        bytes memory initCode,\\n        bytes memory data,\\n        Values memory values,\\n        address refundAddress\\n    ) public payable returns (address newContract) {\\n        // Note that the safeguarding function `_guard` is called as part of the overloaded function\\n        // `deployCreate3AndInit`.\\n        newContract = deployCreate3AndInit({\\n            salt: _generateSalt(),\\n            initCode: initCode,\\n            data: data,\\n            values: values,\\n            refundAddress: refundAddress\\n        });\\n    }\\n\\n    /**\\n     * @dev Deploys and initialises a new contract via employing the `CREATE3` pattern (i.e. without\\n     * an initcode factor) and using the creation bytecode `initCode`, the initialisation code `data`,\\n     * the struct for the `payable` amounts `values`, `msg.value` as inputs. The salt value is calculated\\n     * pseudo-randomly using a diverse selection of block and transaction properties. This approach does\\n     * not guarantee true randomness! In order to save deployment costs, we do not sanity check the `initCode`\\n     * length. Note that if `values.constructorAmount` is non-zero, `initCode` must have a `payable` constructor,\\n     * and any excess ether is returned to `msg.sender`. This implementation is based on Solmate:\\n     * https://web.archive.org/web/20230921113832/https://raw.githubusercontent.com/transmissions11/solmate/e8f96f25d48fe702117ce76c79228ca4f20206cb/src/utils/CREATE3.sol.\\n     * @param initCode The creation bytecode.\\n     * @param data The initialisation code that is passed to the deployed contract.\\n     * @param values The specific `payable` amounts for the deployment and initialisation call.\\n     * @return newContract The 20-byte address where the contract was deployed.\\n     * @custom:security This function allows for reentrancy, however we refrain from adding\\n     * a mutex lock to keep it as use-case agnostic as possible. Please ensure at the protocol\\n     * level that potentially malicious reentrant calls do not affect your smart contract system.\\n     */\\n    function deployCreate3AndInit(\\n        bytes memory initCode,\\n        bytes memory data,\\n        Values memory values\\n    ) public payable returns (address newContract) {\\n        // Note that the safeguarding function `_guard` is called as part of the overloaded function\\n        // `deployCreate3AndInit`.\\n        newContract = deployCreate3AndInit({\\n            salt: _generateSalt(),\\n            initCode: initCode,\\n            data: data,\\n            values: values,\\n            refundAddress: msg.sender\\n        });\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via `deployer` using\\n     * the `CREATE3` pattern (i.e. without an initcode factor). Any change in the `salt` value will\\n     * result in a new destination address. This implementation is based on Solady:\\n     * https://web.archive.org/web/20230921114120/https://raw.githubusercontent.com/Vectorized/solady/1c1ac4ad9c8558001e92d8d1a7722ef67bec75df/src/utils/CREATE3.sol.\\n     * @param salt The 32-byte random value used to create the proxy contract address.\\n     * @param deployer The 20-byte deployer address.\\n     * @return computedAddress The 20-byte address where a contract will be stored.\\n     */\\n    function computeCreate3Address(bytes32 salt, address deployer) public pure returns (address computedAddress) {\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            mstore(0x00, deployer)\\n            mstore8(0x0b, 0xff)\\n            mstore(0x20, salt)\\n            mstore(\\n                0x40,\\n                hex\\\"21_c3_5d_be_1b_34_4a_24_88_cf_33_21_d6_ce_54_2f_8e_9f_30_55_44_ff_09_e4_99_3a_62_31_9a_49_7c_1f\\\"\\n            )\\n            mstore(0x14, keccak256(0x0b, 0x55))\\n            mstore(0x40, ptr)\\n            mstore(0x00, 0xd694)\\n            mstore8(0x34, 0x01)\\n            computedAddress := keccak256(0x1e, 0x17)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via this contract using\\n     * the `CREATE3` pattern (i.e. without an initcode factor). Any change in the `salt` value will\\n     * result in a new destination address. This implementation is based on Solady:\\n     * https://web.archive.org/web/20230921114120/https://raw.githubusercontent.com/Vectorized/solady/1c1ac4ad9c8558001e92d8d1a7722ef67bec75df/src/utils/CREATE3.sol.\\n     * @param salt The 32-byte random value used to create the proxy contract address.\\n     * @return computedAddress The 20-byte address where a contract will be stored.\\n     */\\n    function computeCreate3Address(bytes32 salt) public view returns (address computedAddress) {\\n        computedAddress = computeCreate3Address({salt: salt, deployer: _SELF});\\n    }\\n\\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\\n    /*                      HELPER FUNCTIONS                      */\\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\\n\\n    /**\\n     * @dev Implements different safeguarding mechanisms depending on the encoded values in the salt\\n     * (`||` stands for byte-wise concatenation):\\n     *   => salt (32 bytes) = 0xbebebebebebebebebebebebebebebebebebebebe||ff||1212121212121212121212\\n     *   - The first 20 bytes (i.e. `bebebebebebebebebebebebebebebebebebebebe`) may be used to\\n     *     implement a permissioned deploy protection by setting them equal to `msg.sender`,\\n     *   - The 21st byte (i.e. `ff`) may be used to implement a cross-chain redeploy protection by\\n     *     setting it equal to `0x01`,\\n     *   - The last random 11 bytes (i.e. `1212121212121212121212`) allow for 2**88 bits of entropy\\n     *     for mining a salt.\\n     * @param salt The 32-byte random value used to create the contract address.\\n     * @return guardedSalt The guarded 32-byte random value used to create the contract address.\\n     */\\n    function _guard(bytes32 salt) internal view returns (bytes32 guardedSalt) {\\n        (SenderBytes senderBytes, RedeployProtectionFlag redeployProtectionFlag) = _parseSalt({salt: salt});\\n\\n        if (senderBytes == SenderBytes.MsgSender && redeployProtectionFlag == RedeployProtectionFlag.True) {\\n            // Configures a permissioned deploy protection as well as a cross-chain redeploy protection.\\n            guardedSalt = keccak256(abi.encode(msg.sender, block.chainid, salt));\\n        } else if (senderBytes == SenderBytes.MsgSender && redeployProtectionFlag == RedeployProtectionFlag.False) {\\n            // Configures solely a permissioned deploy protection.\\n            guardedSalt = _efficientHash({a: bytes32(uint256(uint160(msg.sender))), b: salt});\\n        } else if (senderBytes == SenderBytes.MsgSender) {\\n            // Reverts if the 21st byte is greater than `0x01` in order to enforce developer explicitness.\\n            revert InvalidSalt({emitter: _SELF});\\n        } else if (senderBytes == SenderBytes.ZeroAddress && redeployProtectionFlag == RedeployProtectionFlag.True) {\\n            // Configures solely a cross-chain redeploy protection. In order to prevent a pseudo-randomly\\n            // generated cross-chain redeploy protection, we enforce the zero address check for the first 20 bytes.\\n            guardedSalt = _efficientHash({a: bytes32(block.chainid), b: salt});\\n        } else if (\\n            senderBytes == SenderBytes.ZeroAddress && redeployProtectionFlag == RedeployProtectionFlag.Unspecified\\n        ) {\\n            // Reverts if the 21st byte is greater than `0x01` in order to enforce developer explicitness.\\n            revert InvalidSalt({emitter: _SELF});\\n        } else {\\n            // For the non-pseudo-random cases, the salt value `salt` is hashed to prevent the safeguard mechanisms\\n            // from being bypassed. Otherwise, the salt value `salt` is not modified.\\n            guardedSalt = (salt != _generateSalt()) ? keccak256(abi.encode(salt)) : salt;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the enum for the selection of a permissioned deploy protection as well as a\\n     * cross-chain redeploy protection.\\n     * @param salt The 32-byte random value used to create the contract address.\\n     * @return senderBytes The 8-byte enum for the selection of a permissioned deploy protection.\\n     * @return redeployProtectionFlag The 8-byte enum for the selection of a cross-chain redeploy\\n     * protection.\\n     */\\n    function _parseSalt(\\n        bytes32 salt\\n    ) internal view returns (SenderBytes senderBytes, RedeployProtectionFlag redeployProtectionFlag) {\\n        if (address(bytes20(salt)) == msg.sender && bytes1(salt[20]) == hex\\\"01\\\") {\\n            (senderBytes, redeployProtectionFlag) = (SenderBytes.MsgSender, RedeployProtectionFlag.True);\\n        } else if (address(bytes20(salt)) == msg.sender && bytes1(salt[20]) == hex\\\"00\\\") {\\n            (senderBytes, redeployProtectionFlag) = (SenderBytes.MsgSender, RedeployProtectionFlag.False);\\n        } else if (address(bytes20(salt)) == msg.sender) {\\n            (senderBytes, redeployProtectionFlag) = (SenderBytes.MsgSender, RedeployProtectionFlag.Unspecified);\\n        } else if (address(bytes20(salt)) == address(0) && bytes1(salt[20]) == hex\\\"01\\\") {\\n            (senderBytes, redeployProtectionFlag) = (SenderBytes.ZeroAddress, RedeployProtectionFlag.True);\\n        } else if (address(bytes20(salt)) == address(0) && bytes1(salt[20]) == hex\\\"00\\\") {\\n            (senderBytes, redeployProtectionFlag) = (SenderBytes.ZeroAddress, RedeployProtectionFlag.False);\\n        } else if (address(bytes20(salt)) == address(0)) {\\n            (senderBytes, redeployProtectionFlag) = (SenderBytes.ZeroAddress, RedeployProtectionFlag.Unspecified);\\n        } else if (bytes1(salt[20]) == hex\\\"01\\\") {\\n            (senderBytes, redeployProtectionFlag) = (SenderBytes.Random, RedeployProtectionFlag.True);\\n        } else if (bytes1(salt[20]) == hex\\\"00\\\") {\\n            (senderBytes, redeployProtectionFlag) = (SenderBytes.Random, RedeployProtectionFlag.False);\\n        } else {\\n            (senderBytes, redeployProtectionFlag) = (SenderBytes.Random, RedeployProtectionFlag.Unspecified);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the `keccak256` hash of `a` and `b` after concatenation.\\n     * @param a The first 32-byte value to be concatenated and hashed.\\n     * @param b The second 32-byte value to be concatenated and hashed.\\n     * @return hash The 32-byte `keccak256` hash of `a` and `b`.\\n     */\\n    function _efficientHash(bytes32 a, bytes32 b) internal pure returns (bytes32 hash) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            hash := keccak256(0x00, 0x40)\\n        }\\n    }\\n\\n    /**\\n     * @dev Generates pseudo-randomly a salt value using a diverse selection of block and\\n     * transaction properties.\\n     * @return salt The 32-byte pseudo-random salt value.\\n     */\\n    function _generateSalt() internal view returns (bytes32 salt) {\\n        unchecked {\\n            salt = keccak256(\\n                abi.encode(\\n                    // We don't use `block.number - 256` (the maximum value on the EVM) to accommodate\\n                    // any chains that may try to reduce the amount of available historical block hashes.\\n                    // We also don't subtract 1 to mitigate any risks arising from consecutive block\\n                    // producers on a PoS chain. Therefore, we use `block.number - 32` as a reasonable\\n                    // compromise, one we expect should work on most chains, which is 1 epoch on Ethereum\\n                    // mainnet. Please note that if you use this function between the genesis block and block\\n                    // number 31, the block property `blockhash` will return zero, but the returned salt value\\n                    // `salt` will still have a non-zero value due to the hashing characteristic and the other\\n                    // remaining properties.\\n                    blockhash(block.number - 32),\\n                    block.coinbase,\\n                    block.number,\\n                    block.timestamp,\\n                    block.prevrandao,\\n                    block.chainid,\\n                    msg.sender\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Ensures that `newContract` is a non-zero byte contract.\\n     * @param success The Boolean success condition.\\n     * @param newContract The 20-byte address where the contract was deployed.\\n     */\\n    function _requireSuccessfulContractCreation(bool success, address newContract) internal view {\\n        // Note that reverting if `newContract == address(0)` isn't strictly necessary here, as if\\n        // the deployment fails, `success == false` should already hold. However, since the `CreateX`\\n        // contract should be usable and safe on a wide range of chains, this check is cheap enough\\n        // that there is no harm in including it (security > gas optimisations). It can potentially\\n        // protect against unexpected chain behaviour or a hypothetical compiler bug that doesn't surface\\n        // the call success status properly.\\n        if (!success || newContract == address(0) || newContract.code.length == 0) {\\n            revert FailedContractCreation({emitter: _SELF});\\n        }\\n    }\\n\\n    /**\\n     * @dev Ensures that `newContract` is a non-zero byte contract.\\n     * @param newContract The 20-byte address where the contract was deployed.\\n     */\\n    function _requireSuccessfulContractCreation(address newContract) internal view {\\n        if (newContract == address(0) || newContract.code.length == 0) {\\n            revert FailedContractCreation({emitter: _SELF});\\n        }\\n    }\\n\\n    /**\\n     * @dev Ensures that the contract initialisation call to `implementation` has been successful.\\n     * @param success The Boolean success condition.\\n     * @param returnData The return data from the contract initialisation call.\\n     * @param implementation The 20-byte address where the implementation was deployed.\\n     */\\n    function _requireSuccessfulContractInitialisation(\\n        bool success,\\n        bytes memory returnData,\\n        address implementation\\n    ) internal view {\\n        if (!success || implementation.code.length == 0) {\\n            revert FailedContractInitialisation({emitter: _SELF, revertData: returnData});\\n        }\\n    }\\n}\"\n    },\n    \"contracts/ImmutableCreate2Factory.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20; // optimization enabled, 99999 runs, evm: petersburg\\n\\n\\n/**\\n * @title Immutable Create2 Contract Factory\\n * @author 0age\\n * @notice This contract provides a safeCreate2 function that takes a salt value\\n * and a block of initialization code as arguments and passes them into inline\\n * assembly. The contract prevents redeploys by maintaining a mapping of all\\n * contracts that have already been deployed, and prevents frontrunning or other\\n * collisions by requiring that the first 20 bytes of the salt are equal to the\\n * address of the caller (this can be bypassed by setting the first 20 bytes to\\n * the null address). There is also a view function that computes the address of\\n * the contract that will be created when submitting a given salt or nonce along\\n * with a given block of initialization code.\\n * @dev This contract has not yet been fully tested or audited - proceed with\\n * caution and please share any exploits or optimizations you discover.\\n */\\ncontract ImmutableCreate2Factory {\\n  // mapping to track which addresses have already been deployed.\\n  mapping(address => bool) private _deployed;\\n\\n  /**\\n   * @dev Create a contract using CREATE2 by submitting a given salt or nonce\\n   * along with the initialization code for the contract. Note that the first 20\\n   * bytes of the salt must match those of the calling address, which prevents\\n   * contract creation events from being submitted by unintended parties.\\n   * @param salt bytes32 The nonce that will be passed into the CREATE2 call.\\n   * @param initializationCode bytes The initialization code that will be passed\\n   * into the CREATE2 call.\\n   * @return deploymentAddress Address of the contract that will be created, or\\n   * the null address if a contract already exists at that address.\\n   */\\n  function safeCreate2(\\n    bytes32 salt,\\n    bytes calldata initializationCode\\n  ) external payable containsCaller(salt) returns (address deploymentAddress) {\\n    // move the initialization code from calldata to memory.\\n    bytes memory initCode = initializationCode;\\n\\n    // determine the target address for contract deployment.\\n    address targetDeploymentAddress = address(\\n      uint160(                    // downcast to match the address type.\\n        uint256(                  // convert to uint to truncate upper digits.\\n          keccak256(              // compute the CREATE2 hash using 4 inputs.\\n            abi.encodePacked(     // pack all inputs to the hash together.\\n              hex\\\"ff\\\",            // start with 0xff to distinguish from RLP.\\n              address(this),      // this contract will be the caller.\\n              salt,               // pass in the supplied salt value.\\n              keccak256(          // pass in the hash of initialization code.\\n                abi.encodePacked(\\n                  initCode\\n                )\\n              )\\n            )\\n          )\\n        )\\n      )\\n    );\\n\\n    // ensure that a contract hasn't been previously deployed to target address.\\n    require(\\n      !_deployed[targetDeploymentAddress],\\n      \\\"Invalid contract creation - contract has already been deployed.\\\"\\n    );\\n\\n    // using inline assembly: load data and length of data, then call CREATE2.\\n    assembly {                                // solhint-disable-line\\n      let encoded_data := add(0x20, initCode) // load initialization code.\\n      let encoded_size := mload(initCode)     // load the init code's length.\\n      deploymentAddress := create2(           // call CREATE2 with 4 arguments.\\n        callvalue(),                          // forward any attached value.\\n        encoded_data,                         // pass in initialization code.\\n        encoded_size,                         // pass in init code's length.\\n        salt                                  // pass in the salt value.\\n      )\\n    }\\n\\n    // check address against target to ensure that deployment was successful.\\n    require(\\n      deploymentAddress == targetDeploymentAddress,\\n      \\\"Failed to deploy contract using provided salt and initialization code.\\\"\\n    );\\n\\n    // record the deployment of the contract to prevent redeploys.\\n    _deployed[deploymentAddress] = true;\\n  }\\n\\n  /**\\n   * @dev Compute the address of the contract that will be created when\\n   * submitting a given salt or nonce to the contract along with the contract's\\n   * initialization code. The CREATE2 address is computed in accordance with\\n   * EIP-1014, and adheres to the formula therein of\\n   * `keccak256( 0xff ++ address ++ salt ++ keccak256(init_code)))[12:]` when\\n   * performing the computation. The computed address is then checked for any\\n   * existing contract code - if so, the null address will be returned instead.\\n   * @param salt bytes32 The nonce passed into the CREATE2 address calculation.\\n   * @param initCode bytes The contract initialization code to be used.\\n   * that will be passed into the CREATE2 address calculation.\\n   * @return deploymentAddress Address of the contract that will be created, or the null address\\n   * if a contract has already been deployed to that address.\\n   */\\n  function findCreate2Address(\\n    bytes32 salt,\\n    bytes calldata initCode\\n  ) external view returns (address deploymentAddress) {\\n    // determine the address where the contract will be deployed.\\n    deploymentAddress = address(\\n      uint160(                      // downcast to match the address type.\\n        uint256(                    // convert to uint to truncate upper digits.\\n          keccak256(                // compute the CREATE2 hash using 4 inputs.\\n            abi.encodePacked(       // pack all inputs to the hash together.\\n              hex\\\"ff\\\",              // start with 0xff to distinguish from RLP.\\n              address(this),        // this contract will be the caller.\\n              salt,                 // pass in the supplied salt value.\\n              keccak256(            // pass in the hash of initialization code.\\n                abi.encodePacked(\\n                  initCode\\n                )\\n              )\\n            )\\n          )\\n        )\\n      )\\n    );\\n\\n    // return null address to signify failure if contract has been deployed.\\n    if (_deployed[deploymentAddress]) {\\n      return address(0);\\n    }\\n  }\\n\\n  /**\\n   * @dev Compute the address of the contract that will be created when\\n   * submitting a given salt or nonce to the contract along with the keccak256\\n   * hash of the contract's initialization code. The CREATE2 address is computed\\n   * in accordance with EIP-1014, and adheres to the formula therein of\\n   * `keccak256( 0xff ++ address ++ salt ++ keccak256(init_code)))[12:]` when\\n   * performing the computation. The computed address is then checked for any\\n   * existing contract code - if so, the null address will be returned instead.\\n   * @param salt bytes32 The nonce passed into the CREATE2 address calculation.\\n   * @param initCodeHash bytes32 The keccak256 hash of the initialization code\\n   * that will be passed into the CREATE2 address calculation.\\n   * @return deploymentAddress Address of the contract that will be created, or\\n   * the null address if a contract has already been deployed to that address.\\n   */\\n  function findCreate2AddressViaHash(\\n    bytes32 salt,\\n    bytes32 initCodeHash\\n  ) external view returns (address deploymentAddress) {\\n    // determine the address where the contract will be deployed.\\n    deploymentAddress = address(\\n      uint160(                      // downcast to match the address type.\\n        uint256(                    // convert to uint to truncate upper digits.\\n          keccak256(                // compute the CREATE2 hash using 4 inputs.\\n            abi.encodePacked(       // pack all inputs to the hash together.\\n              hex\\\"ff\\\",              // start with 0xff to distinguish from RLP.\\n              address(this),        // this contract will be the caller.\\n              salt,                 // pass in the supplied salt value.\\n              initCodeHash          // pass in the hash of initialization code.\\n            )\\n          )\\n        )\\n      )\\n    );\\n\\n    // return null address to signify failure if contract has been deployed.\\n    if (_deployed[deploymentAddress]) {\\n      return address(0);\\n    }\\n  }\\n\\n  /**\\n   * @dev Determine if a contract has already been deployed by the factory to a\\n   * given address.\\n   * @param deploymentAddress address The contract address to check.\\n   * @return True if the contract has been deployed, false otherwise.\\n   */\\n  function hasBeenDeployed(\\n    address deploymentAddress\\n  ) external view returns (bool) {\\n    // determine if a contract has been deployed to the provided address.\\n    return _deployed[deploymentAddress];\\n  }\\n\\n  /**\\n   * @dev Modifier to ensure that the first 20 bytes of a submitted salt match\\n   * those of the calling account. This provides protection against the salt\\n   * being stolen by frontrunners or other attackers. The protection can also be\\n   * bypassed if desired by setting each of the first 20 bytes to zero.\\n   * @param salt bytes32 The salt value to check against the calling address.\\n   */\\n  modifier containsCaller(bytes32 salt) {\\n    // prevent contract submissions from being stolen from tx.pool by requiring\\n    // that the first 20 bytes of the submitted salt match msg.sender.\\n    require(\\n      (address(bytes20(salt)) == msg.sender) ||\\n      (bytes20(salt) == bytes20(0)),\\n      \\\"Invalid salt - first 20 bytes of the salt must match calling address.\\\"\\n    );\\n    _;\\n  }\\n}\"\n    }\n  },\n  \"settings\": {\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 200\n    },\n    \"evmVersion\": \"paris\",\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    }\n  }\n}",
      "solcInputHash": "612a87c8608fd61631d2e2263c53d417",
      "transactionHash": "0x10cba3bfc637d020a172d2147d2634584b335a0eac397d7595eb81bc94cdfd0a",
      "args": []
    },
    "decoded": {
      "from": "0x87ea9CE193B9fdd4A1fE5fF18aEaEE2eb930AEf1",
      "gasPrice": "160000000",
      "gasLimit": "379405",
      "to": null,
      "value": "0",
      "nonce": 0,
      "data": "0x608060405234801561001057600080fd5b506105e6806100206000396000f3fe60806040526004361061003f5760003560e01c806308508b8f1461004457806364e030871461009257806385cf97ab146100bd578063a49a7c90146100dd575b600080fd5b34801561005057600080fd5b5061007d61005f366004610472565b6001600160a01b031660009081526020819052604090205460ff1690565b60405190151581526020015b60405180910390f35b6100a56100a036600461049b565b6100fd565b6040516001600160a01b039091168152602001610089565b3480156100c957600080fd5b506100a56100d836600461049b565b610395565b3480156100e957600080fd5b506100a56100f8366004610517565b610418565b600083606081901c33148061011f57506bffffffffffffffffffffffff198116155b6101a45760405162461bcd60e51b815260206004820152604560248201527f496e76616c69642073616c74202d206669727374203230206279746573206f6660448201527f207468652073616c74206d757374206d617463682063616c6c696e67206164646064820152643932b9b99760d91b608482015260a4015b60405180910390fd5b600084848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250604051949550933093508a92506101f491508590602001610539565b6040516020818303038152906040528051906020012060405160200161021c93929190610568565b60408051601f1981840301815291815281516020928301206001600160a01b03811660009081529283905291205490915060ff16156102c35760405162461bcd60e51b815260206004820152603f60248201527f496e76616c696420636f6e7472616374206372656174696f6e202d20636f6e7460448201527f726163742068617320616c7265616479206265656e206465706c6f7965642e00606482015260840161019b565b81602001825188818334f595505050806001600160a01b0316846001600160a01b0316146103685760405162461bcd60e51b815260206004820152604660248201527f4661696c656420746f206465706c6f7920636f6e7472616374207573696e672060448201527f70726f76696465642073616c7420616e6420696e697469616c697a6174696f6e6064820152651031b7b2329760d11b608482015260a40161019b565b5050506001600160a01b0381166000908152602081905260409020805460ff191660011790559392505050565b6000308484846040516020016103ac9291906105a0565b604051602081830303815290604052805190602001206040516020016103d493929190610568565b60408051601f1981840301815291815281516020928301206001600160a01b03811660009081529283905291205490915060ff1615610411575060005b9392505050565b600030838360405160200161042f93929190610568565b60408051601f1981840301815291815281516020928301206001600160a01b03811660009081529283905291205490915060ff161561046c575060005b92915050565b60006020828403121561048457600080fd5b81356001600160a01b038116811461041157600080fd5b6000806000604084860312156104b057600080fd5b83359250602084013567ffffffffffffffff808211156104cf57600080fd5b818601915086601f8301126104e357600080fd5b8135818111156104f257600080fd5b87602082850101111561050457600080fd5b6020830194508093505050509250925092565b6000806040838503121561052a57600080fd5b50508035926020909101359150565b6000825160005b8181101561055a5760208186018101518583015201610540565b506000920191825250919050565b6001600160f81b0319815260609390931b6bffffffffffffffffffffffff191660018401526015830191909152603582015260550190565b818382376000910190815291905056fea2646970667358221220cc97bac233e24594acfe449ff572ecb1fe74b390301bcbd876b2b4f4e557d2ef64736f6c63430008140033",
      "r": "0xfcf2c01d938b8a3caf306a368b58ff9cbcdadd737f50039fbcd9b2165b8b98ed",
      "s": "0x041b93c4a76d71a2d8d20195f2b9b0c00d75f1ad05f10174ac36a9cf89936e27",
      "v": 2914,
      "chainId": 1439
    }
  }
}