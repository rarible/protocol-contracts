{
  "address": "0xA9d7374D191d80aCAAfD8D95b01d27ef354a91E0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "initCode",
          "type": "bytes"
        }
      ],
      "name": "findCreate2Address",
      "outputs": [
        {
          "internalType": "address",
          "name": "deploymentAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "initCodeHash",
          "type": "bytes32"
        }
      ],
      "name": "findCreate2AddressViaHash",
      "outputs": [
        {
          "internalType": "address",
          "name": "deploymentAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "deploymentAddress",
          "type": "address"
        }
      ],
      "name": "hasBeenDeployed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "initializationCode",
          "type": "bytes"
        }
      ],
      "name": "safeCreate2",
      "outputs": [
        {
          "internalType": "address",
          "name": "deploymentAddress",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9fbad649753bab34369cdbff7e9c1b392e0e80096c37f5f4d9e8bca5d7853a37",
  "receipt": {
    "to": null,
    "from": "0x87ea9CE193B9fdd4A1fE5fF18aEaEE2eb930AEf1",
    "contractAddress": "0xA9d7374D191d80aCAAfD8D95b01d27ef354a91E0",
    "transactionIndex": 1,
    "gasUsed": "379405",
    "logsBloom": "0x
    "blockHash": "0x615b1df899a7661aeb43407590929216afc8c16032ee5f10606ca40609393db9",
    "transactionHash": "0x9fbad649753bab34369cdbff7e9c1b392e0e80096c37f5f4d9e8bca5d7853a37",
    "logs": [],
    "blockNumber": 9126,
    "cumulativeGasUsed": "379405",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "612a87c8608fd61631d2e2263c53d417",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"}],\"name\":\"findCreate2Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"deploymentAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"initCodeHash\",\"type\":\"bytes32\"}],\"name\":\"findCreate2AddressViaHash\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"deploymentAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"deploymentAddress\",\"type\":\"address\"}],\"name\":\"hasBeenDeployed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"initializationCode\",\"type\":\"bytes\"}],\"name\":\"safeCreate2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"deploymentAddress\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"0age\",\"details\":\"This contract has not yet been fully tested or audited - proceed with caution and please share any exploits or optimizations you discover.\",\"kind\":\"dev\",\"methods\":{\"findCreate2Address(bytes32,bytes)\":{\"details\":\"Compute the address of the contract that will be created when submitting a given salt or nonce to the contract along with the contract's initialization code. The CREATE2 address is computed in accordance with EIP-1014, and adheres to the formula therein of `keccak256( 0xff ++ address ++ salt ++ keccak256(init_code)))[12:]` when performing the computation. The computed address is then checked for any existing contract code - if so, the null address will be returned instead.\",\"params\":{\"initCode\":\"bytes The contract initialization code to be used. that will be passed into the CREATE2 address calculation.\",\"salt\":\"bytes32 The nonce passed into the CREATE2 address calculation.\"},\"returns\":{\"deploymentAddress\":\"Address of the contract that will be created, or the null address if a contract has already been deployed to that address.\"}},\"findCreate2AddressViaHash(bytes32,bytes32)\":{\"details\":\"Compute the address of the contract that will be created when submitting a given salt or nonce to the contract along with the keccak256 hash of the contract's initialization code. The CREATE2 address is computed in accordance with EIP-1014, and adheres to the formula therein of `keccak256( 0xff ++ address ++ salt ++ keccak256(init_code)))[12:]` when performing the computation. The computed address is then checked for any existing contract code - if so, the null address will be returned instead.\",\"params\":{\"initCodeHash\":\"bytes32 The keccak256 hash of the initialization code that will be passed into the CREATE2 address calculation.\",\"salt\":\"bytes32 The nonce passed into the CREATE2 address calculation.\"},\"returns\":{\"deploymentAddress\":\"Address of the contract that will be created, or the null address if a contract has already been deployed to that address.\"}},\"hasBeenDeployed(address)\":{\"details\":\"Determine if a contract has already been deployed by the factory to a given address.\",\"params\":{\"deploymentAddress\":\"address The contract address to check.\"},\"returns\":{\"_0\":\"True if the contract has been deployed, false otherwise.\"}},\"safeCreate2(bytes32,bytes)\":{\"details\":\"Create a contract using CREATE2 by submitting a given salt or nonce along with the initialization code for the contract. Note that the first 20 bytes of the salt must match those of the calling address, which prevents contract creation events from being submitted by unintended parties.\",\"params\":{\"initializationCode\":\"bytes The initialization code that will be passed into the CREATE2 call.\",\"salt\":\"bytes32 The nonce that will be passed into the CREATE2 call.\"},\"returns\":{\"deploymentAddress\":\"Address of the contract that will be created, or the null address if a contract already exists at that address.\"}}},\"title\":\"Immutable Create2 Contract Factory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract provides a safeCreate2 function that takes a salt value and a block of initialization code as arguments and passes them into inline assembly. The contract prevents redeploys by maintaining a mapping of all contracts that have already been deployed, and prevents frontrunning or other collisions by requiring that the first 20 bytes of the salt are equal to the address of the caller (this can be bypassed by setting the first 20 bytes to the null address). There is also a view function that computes the address of the contract that will be created when submitting a given salt or nonce along with a given block of initialization code.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ImmutableCreate2Factory.sol\":\"ImmutableCreate2Factory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ImmutableCreate2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20; // optimization enabled, 99999 runs, evm: petersburg\\n\\n\\n/**\\n * @title Immutable Create2 Contract Factory\\n * @author 0age\\n * @notice This contract provides a safeCreate2 function that takes a salt value\\n * and a block of initialization code as arguments and passes them into inline\\n * assembly. The contract prevents redeploys by maintaining a mapping of all\\n * contracts that have already been deployed, and prevents frontrunning or other\\n * collisions by requiring that the first 20 bytes of the salt are equal to the\\n * address of the caller (this can be bypassed by setting the first 20 bytes to\\n * the null address). There is also a view function that computes the address of\\n * the contract that will be created when submitting a given salt or nonce along\\n * with a given block of initialization code.\\n * @dev This contract has not yet been fully tested or audited - proceed with\\n * caution and please share any exploits or optimizations you discover.\\n */\\ncontract ImmutableCreate2Factory {\\n  // mapping to track which addresses have already been deployed.\\n  mapping(address => bool) private _deployed;\\n\\n  /**\\n   * @dev Create a contract using CREATE2 by submitting a given salt or nonce\\n   * along with the initialization code for the contract. Note that the first 20\\n   * bytes of the salt must match those of the calling address, which prevents\\n   * contract creation events from being submitted by unintended parties.\\n   * @param salt bytes32 The nonce that will be passed into the CREATE2 call.\\n   * @param initializationCode bytes The initialization code that will be passed\\n   * into the CREATE2 call.\\n   * @return deploymentAddress Address of the contract that will be created, or\\n   * the null address if a contract already exists at that address.\\n   */\\n  function safeCreate2(\\n    bytes32 salt,\\n    bytes calldata initializationCode\\n  ) external payable containsCaller(salt) returns (address deploymentAddress) {\\n    // move the initialization code from calldata to memory.\\n    bytes memory initCode = initializationCode;\\n\\n    // determine the target address for contract deployment.\\n    address targetDeploymentAddress = address(\\n      uint160(                    // downcast to match the address type.\\n        uint256(                  // convert to uint to truncate upper digits.\\n          keccak256(              // compute the CREATE2 hash using 4 inputs.\\n            abi.encodePacked(     // pack all inputs to the hash together.\\n              hex\\\"ff\\\",            // start with 0xff to distinguish from RLP.\\n              address(this),      // this contract will be the caller.\\n              salt,               // pass in the supplied salt value.\\n              keccak256(          // pass in the hash of initialization code.\\n                abi.encodePacked(\\n                  initCode\\n                )\\n              )\\n            )\\n          )\\n        )\\n      )\\n    );\\n\\n    // ensure that a contract hasn't been previously deployed to target address.\\n    require(\\n      !_deployed[targetDeploymentAddress],\\n      \\\"Invalid contract creation - contract has already been deployed.\\\"\\n    );\\n\\n    // using inline assembly: load data and length of data, then call CREATE2.\\n    assembly {                                // solhint-disable-line\\n      let encoded_data := add(0x20, initCode) // load initialization code.\\n      let encoded_size := mload(initCode)     // load the init code's length.\\n      deploymentAddress := create2(           // call CREATE2 with 4 arguments.\\n        callvalue(),                          // forward any attached value.\\n        encoded_data,                         // pass in initialization code.\\n        encoded_size,                         // pass in init code's length.\\n        salt                                  // pass in the salt value.\\n      )\\n    }\\n\\n    // check address against target to ensure that deployment was successful.\\n    require(\\n      deploymentAddress == targetDeploymentAddress,\\n      \\\"Failed to deploy contract using provided salt and initialization code.\\\"\\n    );\\n\\n    // record the deployment of the contract to prevent redeploys.\\n    _deployed[deploymentAddress] = true;\\n  }\\n\\n  /**\\n   * @dev Compute the address of the contract that will be created when\\n   * submitting a given salt or nonce to the contract along with the contract's\\n   * initialization code. The CREATE2 address is computed in accordance with\\n   * EIP-1014, and adheres to the formula therein of\\n   * `keccak256( 0xff ++ address ++ salt ++ keccak256(init_code)))[12:]` when\\n   * performing the computation. The computed address is then checked for any\\n   * existing contract code - if so, the null address will be returned instead.\\n   * @param salt bytes32 The nonce passed into the CREATE2 address calculation.\\n   * @param initCode bytes The contract initialization code to be used.\\n   * that will be passed into the CREATE2 address calculation.\\n   * @return deploymentAddress Address of the contract that will be created, or the null address\\n   * if a contract has already been deployed to that address.\\n   */\\n  function findCreate2Address(\\n    bytes32 salt,\\n    bytes calldata initCode\\n  ) external view returns (address deploymentAddress) {\\n    // determine the address where the contract will be deployed.\\n    deploymentAddress = address(\\n      uint160(                      // downcast to match the address type.\\n        uint256(                    // convert to uint to truncate upper digits.\\n          keccak256(                // compute the CREATE2 hash using 4 inputs.\\n            abi.encodePacked(       // pack all inputs to the hash together.\\n              hex\\\"ff\\\",              // start with 0xff to distinguish from RLP.\\n              address(this),        // this contract will be the caller.\\n              salt,                 // pass in the supplied salt value.\\n              keccak256(            // pass in the hash of initialization code.\\n                abi.encodePacked(\\n                  initCode\\n                )\\n              )\\n            )\\n          )\\n        )\\n      )\\n    );\\n\\n    // return null address to signify failure if contract has been deployed.\\n    if (_deployed[deploymentAddress]) {\\n      return address(0);\\n    }\\n  }\\n\\n  /**\\n   * @dev Compute the address of the contract that will be created when\\n   * submitting a given salt or nonce to the contract along with the keccak256\\n   * hash of the contract's initialization code. The CREATE2 address is computed\\n   * in accordance with EIP-1014, and adheres to the formula therein of\\n   * `keccak256( 0xff ++ address ++ salt ++ keccak256(init_code)))[12:]` when\\n   * performing the computation. The computed address is then checked for any\\n   * existing contract code - if so, the null address will be returned instead.\\n   * @param salt bytes32 The nonce passed into the CREATE2 address calculation.\\n   * @param initCodeHash bytes32 The keccak256 hash of the initialization code\\n   * that will be passed into the CREATE2 address calculation.\\n   * @return deploymentAddress Address of the contract that will be created, or\\n   * the null address if a contract has already been deployed to that address.\\n   */\\n  function findCreate2AddressViaHash(\\n    bytes32 salt,\\n    bytes32 initCodeHash\\n  ) external view returns (address deploymentAddress) {\\n    // determine the address where the contract will be deployed.\\n    deploymentAddress = address(\\n      uint160(                      // downcast to match the address type.\\n        uint256(                    // convert to uint to truncate upper digits.\\n          keccak256(                // compute the CREATE2 hash using 4 inputs.\\n            abi.encodePacked(       // pack all inputs to the hash together.\\n              hex\\\"ff\\\",              // start with 0xff to distinguish from RLP.\\n              address(this),        // this contract will be the caller.\\n              salt,                 // pass in the supplied salt value.\\n              initCodeHash          // pass in the hash of initialization code.\\n            )\\n          )\\n        )\\n      )\\n    );\\n\\n    // return null address to signify failure if contract has been deployed.\\n    if (_deployed[deploymentAddress]) {\\n      return address(0);\\n    }\\n  }\\n\\n  /**\\n   * @dev Determine if a contract has already been deployed by the factory to a\\n   * given address.\\n   * @param deploymentAddress address The contract address to check.\\n   * @return True if the contract has been deployed, false otherwise.\\n   */\\n  function hasBeenDeployed(\\n    address deploymentAddress\\n  ) external view returns (bool) {\\n    // determine if a contract has been deployed to the provided address.\\n    return _deployed[deploymentAddress];\\n  }\\n\\n  /**\\n   * @dev Modifier to ensure that the first 20 bytes of a submitted salt match\\n   * those of the calling account. This provides protection against the salt\\n   * being stolen by frontrunners or other attackers. The protection can also be\\n   * bypassed if desired by setting each of the first 20 bytes to zero.\\n   * @param salt bytes32 The salt value to check against the calling address.\\n   */\\n  modifier containsCaller(bytes32 salt) {\\n    // prevent contract submissions from being stolen from tx.pool by requiring\\n    // that the first 20 bytes of the submitted salt match msg.sender.\\n    require(\\n      (address(bytes20(salt)) == msg.sender) ||\\n      (bytes20(salt) == bytes20(0)),\\n      \\\"Invalid salt - first 20 bytes of the salt must match calling address.\\\"\\n    );\\n    _;\\n  }\\n}\",\"keccak256\":\"0x12df33ea171f11e761b1099cfd96664a3a24cc3a23e492c8fa2a53a9a6b476d6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506105e6806100206000396000f3fe60806040526004361061003f5760003560e01c806308508b8f1461004457806364e030871461009257806385cf97ab146100bd578063a49a7c90146100dd575b600080fd5b34801561005057600080fd5b5061007d61005f366004610472565b6001600160a01b031660009081526020819052604090205460ff1690565b60405190151581526020015b60405180910390f35b6100a56100a036600461049b565b6100fd565b6040516001600160a01b039091168152602001610089565b3480156100c957600080fd5b506100a56100d836600461049b565b610395565b3480156100e957600080fd5b506100a56100f8366004610517565b610418565b600083606081901c33148061011f57506bffffffffffffffffffffffff198116155b6101a45760405162461bcd60e51b815260206004820152604560248201527f496e76616c69642073616c74202d206669727374203230206279746573206f6660448201527f207468652073616c74206d757374206d617463682063616c6c696e67206164646064820152643932b9b99760d91b608482015260a4015b60405180910390fd5b600084848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250604051949550933093508a92506101f491508590602001610539565b6040516020818303038152906040528051906020012060405160200161021c93929190610568565b60408051601f1981840301815291815281516020928301206001600160a01b03811660009081529283905291205490915060ff16156102c35760405162461bcd60e51b815260206004820152603f60248201527f496e76616c696420636f6e7472616374206372656174696f6e202d20636f6e7460448201527f726163742068617320616c7265616479206265656e206465706c6f7965642e00606482015260840161019b565b81602001825188818334f595505050806001600160a01b0316846001600160a01b0316146103685760405162461bcd60e51b815260206004820152604660248201527f4661696c656420746f206465706c6f7920636f6e7472616374207573696e672060448201527f70726f76696465642073616c7420616e6420696e697469616c697a6174696f6e6064820152651031b7b2329760d11b608482015260a40161019b565b5050506001600160a01b0381166000908152602081905260409020805460ff191660011790559392505050565b6000308484846040516020016103ac9291906105a0565b604051602081830303815290604052805190602001206040516020016103d493929190610568565b60408051601f1981840301815291815281516020928301206001600160a01b03811660009081529283905291205490915060ff1615610411575060005b9392505050565b600030838360405160200161042f93929190610568565b60408051601f1981840301815291815281516020928301206001600160a01b03811660009081529283905291205490915060ff161561046c575060005b92915050565b60006020828403121561048457600080fd5b81356001600160a01b038116811461041157600080fd5b6000806000604084860312156104b057600080fd5b83359250602084013567ffffffffffffffff808211156104cf57600080fd5b818601915086601f8301126104e357600080fd5b8135818111156104f257600080fd5b87602082850101111561050457600080fd5b6020830194508093505050509250925092565b6000806040838503121561052a57600080fd5b50508035926020909101359150565b6000825160005b8181101561055a5760208186018101518583015201610540565b506000920191825250919050565b6001600160f81b0319815260609390931b6bffffffffffffffffffffffff191660018401526015830191909152603582015260550190565b818382376000910190815291905056fea2646970667358221220cc97bac233e24594acfe449ff572ecb1fe74b390301bcbd876b2b4f4e557d2ef64736f6c63430008140033",
  "deployedBytecode": "0x60806040526004361061003f5760003560e01c806308508b8f1461004457806364e030871461009257806385cf97ab146100bd578063a49a7c90146100dd575b600080fd5b34801561005057600080fd5b5061007d61005f366004610472565b6001600160a01b031660009081526020819052604090205460ff1690565b60405190151581526020015b60405180910390f35b6100a56100a036600461049b565b6100fd565b6040516001600160a01b039091168152602001610089565b3480156100c957600080fd5b506100a56100d836600461049b565b610395565b3480156100e957600080fd5b506100a56100f8366004610517565b610418565b600083606081901c33148061011f57506bffffffffffffffffffffffff198116155b6101a45760405162461bcd60e51b815260206004820152604560248201527f496e76616c69642073616c74202d206669727374203230206279746573206f6660448201527f207468652073616c74206d757374206d617463682063616c6c696e67206164646064820152643932b9b99760d91b608482015260a4015b60405180910390fd5b600084848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250604051949550933093508a92506101f491508590602001610539565b6040516020818303038152906040528051906020012060405160200161021c93929190610568565b60408051601f1981840301815291815281516020928301206001600160a01b03811660009081529283905291205490915060ff16156102c35760405162461bcd60e51b815260206004820152603f60248201527f496e76616c696420636f6e7472616374206372656174696f6e202d20636f6e7460448201527f726163742068617320616c7265616479206265656e206465706c6f7965642e00606482015260840161019b565b81602001825188818334f595505050806001600160a01b0316846001600160a01b0316146103685760405162461bcd60e51b815260206004820152604660248201527f4661696c656420746f206465706c6f7920636f6e7472616374207573696e672060448201527f70726f76696465642073616c7420616e6420696e697469616c697a6174696f6e6064820152651031b7b2329760d11b608482015260a40161019b565b5050506001600160a01b0381166000908152602081905260409020805460ff191660011790559392505050565b6000308484846040516020016103ac9291906105a0565b604051602081830303815290604052805190602001206040516020016103d493929190610568565b60408051601f1981840301815291815281516020928301206001600160a01b03811660009081529283905291205490915060ff1615610411575060005b9392505050565b600030838360405160200161042f93929190610568565b60408051601f1981840301815291815281516020928301206001600160a01b03811660009081529283905291205490915060ff161561046c575060005b92915050565b60006020828403121561048457600080fd5b81356001600160a01b038116811461041157600080fd5b6000806000604084860312156104b057600080fd5b83359250602084013567ffffffffffffffff808211156104cf57600080fd5b818601915086601f8301126104e357600080fd5b8135818111156104f257600080fd5b87602082850101111561050457600080fd5b6020830194508093505050509250925092565b6000806040838503121561052a57600080fd5b50508035926020909101359150565b6000825160005b8181101561055a5760208186018101518583015201610540565b506000920191825250919050565b6001600160f81b0319815260609390931b6bffffffffffffffffffffffff191660018401526015830191909152603582015260550190565b818382376000910190815291905056fea2646970667358221220cc97bac233e24594acfe449ff572ecb1fe74b390301bcbd876b2b4f4e557d2ef64736f6c63430008140033",
  "devdoc": {
    "author": "0age",
    "details": "This contract has not yet been fully tested or audited - proceed with caution and please share any exploits or optimizations you discover.",
    "kind": "dev",
    "methods": {
      "findCreate2Address(bytes32,bytes)": {
        "details": "Compute the address of the contract that will be created when submitting a given salt or nonce to the contract along with the contract's initialization code. The CREATE2 address is computed in accordance with EIP-1014, and adheres to the formula therein of `keccak256( 0xff ++ address ++ salt ++ keccak256(init_code)))[12:]` when performing the computation. The computed address is then checked for any existing contract code - if so, the null address will be returned instead.",
        "params": {
          "initCode": "bytes The contract initialization code to be used. that will be passed into the CREATE2 address calculation.",
          "salt": "bytes32 The nonce passed into the CREATE2 address calculation."
        },
        "returns": {
          "deploymentAddress": "Address of the contract that will be created, or the null address if a contract has already been deployed to that address."
        }
      },
      "findCreate2AddressViaHash(bytes32,bytes32)": {
        "details": "Compute the address of the contract that will be created when submitting a given salt or nonce to the contract along with the keccak256 hash of the contract's initialization code. The CREATE2 address is computed in accordance with EIP-1014, and adheres to the formula therein of `keccak256( 0xff ++ address ++ salt ++ keccak256(init_code)))[12:]` when performing the computation. The computed address is then checked for any existing contract code - if so, the null address will be returned instead.",
        "params": {
          "initCodeHash": "bytes32 The keccak256 hash of the initialization code that will be passed into the CREATE2 address calculation.",
          "salt": "bytes32 The nonce passed into the CREATE2 address calculation."
        },
        "returns": {
          "deploymentAddress": "Address of the contract that will be created, or the null address if a contract has already been deployed to that address."
        }
      },
      "hasBeenDeployed(address)": {
        "details": "Determine if a contract has already been deployed by the factory to a given address.",
        "params": {
          "deploymentAddress": "address The contract address to check."
        },
        "returns": {
          "_0": "True if the contract has been deployed, false otherwise."
        }
      },
      "safeCreate2(bytes32,bytes)": {
        "details": "Create a contract using CREATE2 by submitting a given salt or nonce along with the initialization code for the contract. Note that the first 20 bytes of the salt must match those of the calling address, which prevents contract creation events from being submitted by unintended parties.",
        "params": {
          "initializationCode": "bytes The initialization code that will be passed into the CREATE2 call.",
          "salt": "bytes32 The nonce that will be passed into the CREATE2 call."
        },
        "returns": {
          "deploymentAddress": "Address of the contract that will be created, or the null address if a contract already exists at that address."
        }
      }
    },
    "title": "Immutable Create2 Contract Factory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This contract provides a safeCreate2 function that takes a salt value and a block of initialization code as arguments and passes them into inline assembly. The contract prevents redeploys by maintaining a mapping of all contracts that have already been deployed, and prevents frontrunning or other collisions by requiring that the first 20 bytes of the salt are equal to the address of the caller (this can be bypassed by setting the first 20 bytes to the null address). There is also a view function that computes the address of the contract that will be created when submitting a given salt or nonce along with a given block of initialization code.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1865,
        "contract": "contracts/ImmutableCreate2Factory.sol:ImmutableCreate2Factory",
        "label": "_deployed",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}