{"id":"376c1bdbd8b4ddffaeb7572ad38e740c","_format":"hh-sol-build-info-1","solcVersion":"0.5.10","solcLongVersion":"0.5.10+commit.5a6ea5b1","input":{"language":"Solidity","sources":{"contracts/ImmutableCreate2Factory.sol":{"content":"/**\n *Submitted for verification at Etherscan.io on 2019-07-30\n*/\n\npragma solidity 0.5.10; // optimization enabled, 99999 runs, evm: petersburg\n\n\n/**\n * @title Immutable Create2 Contract Factory\n * @author 0age\n * @notice This contract provides a safeCreate2 function that takes a salt value\n * and a block of initialization code as arguments and passes them into inline\n * assembly. The contract prevents redeploys by maintaining a mapping of all\n * contracts that have already been deployed, and prevents frontrunning or other\n * collisions by requiring that the first 20 bytes of the salt are equal to the\n * address of the caller (this can be bypassed by setting the first 20 bytes to\n * the null address). There is also a view function that computes the address of\n * the contract that will be created when submitting a given salt or nonce along\n * with a given block of initialization code.\n * @dev This contract has not yet been fully tested or audited - proceed with\n * caution and please share any exploits or optimizations you discover.\n */\ncontract ImmutableCreate2Factory {\n  // mapping to track which addresses have already been deployed.\n  mapping(address => bool) private _deployed;\n\n  /**\n   * @dev Create a contract using CREATE2 by submitting a given salt or nonce\n   * along with the initialization code for the contract. Note that the first 20\n   * bytes of the salt must match those of the calling address, which prevents\n   * contract creation events from being submitted by unintended parties.\n   * @param salt bytes32 The nonce that will be passed into the CREATE2 call.\n   * @param initializationCode bytes The initialization code that will be passed\n   * into the CREATE2 call.\n   * @return Address of the contract that will be created, or the null address\n   * if a contract already exists at that address.\n   */\n  function safeCreate2(\n    bytes32 salt,\n    bytes calldata initializationCode\n  ) external payable containsCaller(salt) returns (address deploymentAddress) {\n    // move the initialization code from calldata to memory.\n    bytes memory initCode = initializationCode;\n\n    // determine the target address for contract deployment.\n    address targetDeploymentAddress = address(\n      uint160(                    // downcast to match the address type.\n        uint256(                  // convert to uint to truncate upper digits.\n          keccak256(              // compute the CREATE2 hash using 4 inputs.\n            abi.encodePacked(     // pack all inputs to the hash together.\n              hex\"ff\",            // start with 0xff to distinguish from RLP.\n              address(this),      // this contract will be the caller.\n              salt,               // pass in the supplied salt value.\n              keccak256(          // pass in the hash of initialization code.\n                abi.encodePacked(\n                  initCode\n                )\n              )\n            )\n          )\n        )\n      )\n    );\n\n    // ensure that a contract hasn't been previously deployed to target address.\n    require(\n      !_deployed[targetDeploymentAddress],\n      \"Invalid contract creation - contract has already been deployed.\"\n    );\n\n    // using inline assembly: load data and length of data, then call CREATE2.\n    assembly {                                // solhint-disable-line\n      let encoded_data := add(0x20, initCode) // load initialization code.\n      let encoded_size := mload(initCode)     // load the init code's length.\n      deploymentAddress := create2(           // call CREATE2 with 4 arguments.\n        callvalue,                            // forward any attached value.\n        encoded_data,                         // pass in initialization code.\n        encoded_size,                         // pass in init code's length.\n        salt                                  // pass in the salt value.\n      )\n    }\n\n    // check address against target to ensure that deployment was successful.\n    require(\n      deploymentAddress == targetDeploymentAddress,\n      \"Failed to deploy contract using provided salt and initialization code.\"\n    );\n\n    // record the deployment of the contract to prevent redeploys.\n    _deployed[deploymentAddress] = true;\n  }\n\n  /**\n   * @dev Compute the address of the contract that will be created when\n   * submitting a given salt or nonce to the contract along with the contract's\n   * initialization code. The CREATE2 address is computed in accordance with\n   * EIP-1014, and adheres to the formula therein of\n   * `keccak256( 0xff ++ address ++ salt ++ keccak256(init_code)))[12:]` when\n   * performing the computation. The computed address is then checked for any\n   * existing contract code - if so, the null address will be returned instead.\n   * @param salt bytes32 The nonce passed into the CREATE2 address calculation.\n   * @param initCode bytes The contract initialization code to be used.\n   * that will be passed into the CREATE2 address calculation.\n   * @return Address of the contract that will be created, or the null address\n   * if a contract has already been deployed to that address.\n   */\n  function findCreate2Address(\n    bytes32 salt,\n    bytes calldata initCode\n  ) external view returns (address deploymentAddress) {\n    // determine the address where the contract will be deployed.\n    deploymentAddress = address(\n      uint160(                      // downcast to match the address type.\n        uint256(                    // convert to uint to truncate upper digits.\n          keccak256(                // compute the CREATE2 hash using 4 inputs.\n            abi.encodePacked(       // pack all inputs to the hash together.\n              hex\"ff\",              // start with 0xff to distinguish from RLP.\n              address(this),        // this contract will be the caller.\n              salt,                 // pass in the supplied salt value.\n              keccak256(            // pass in the hash of initialization code.\n                abi.encodePacked(\n                  initCode\n                )\n              )\n            )\n          )\n        )\n      )\n    );\n\n    // return null address to signify failure if contract has been deployed.\n    if (_deployed[deploymentAddress]) {\n      return address(0);\n    }\n  }\n\n  /**\n   * @dev Compute the address of the contract that will be created when\n   * submitting a given salt or nonce to the contract along with the keccak256\n   * hash of the contract's initialization code. The CREATE2 address is computed\n   * in accordance with EIP-1014, and adheres to the formula therein of\n   * `keccak256( 0xff ++ address ++ salt ++ keccak256(init_code)))[12:]` when\n   * performing the computation. The computed address is then checked for any\n   * existing contract code - if so, the null address will be returned instead.\n   * @param salt bytes32 The nonce passed into the CREATE2 address calculation.\n   * @param initCodeHash bytes32 The keccak256 hash of the initialization code\n   * that will be passed into the CREATE2 address calculation.\n   * @return Address of the contract that will be created, or the null address\n   * if a contract has already been deployed to that address.\n   */\n  function findCreate2AddressViaHash(\n    bytes32 salt,\n    bytes32 initCodeHash\n  ) external view returns (address deploymentAddress) {\n    // determine the address where the contract will be deployed.\n    deploymentAddress = address(\n      uint160(                      // downcast to match the address type.\n        uint256(                    // convert to uint to truncate upper digits.\n          keccak256(                // compute the CREATE2 hash using 4 inputs.\n            abi.encodePacked(       // pack all inputs to the hash together.\n              hex\"ff\",              // start with 0xff to distinguish from RLP.\n              address(this),        // this contract will be the caller.\n              salt,                 // pass in the supplied salt value.\n              initCodeHash          // pass in the hash of initialization code.\n            )\n          )\n        )\n      )\n    );\n\n    // return null address to signify failure if contract has been deployed.\n    if (_deployed[deploymentAddress]) {\n      return address(0);\n    }\n  }\n\n  /**\n   * @dev Determine if a contract has already been deployed by the factory to a\n   * given address.\n   * @param deploymentAddress address The contract address to check.\n   * @return True if the contract has been deployed, false otherwise.\n   */\n  function hasBeenDeployed(\n    address deploymentAddress\n  ) external view returns (bool) {\n    // determine if a contract has been deployed to the provided address.\n    return _deployed[deploymentAddress];\n  }\n\n  /**\n   * @dev Modifier to ensure that the first 20 bytes of a submitted salt match\n   * those of the calling account. This provides protection against the salt\n   * being stolen by frontrunners or other attackers. The protection can also be\n   * bypassed if desired by setting each of the first 20 bytes to zero.\n   * @param salt bytes32 The salt value to check against the calling address.\n   */\n  modifier containsCaller(bytes32 salt) {\n    // prevent contract submissions from being stolen from tx.pool by requiring\n    // that the first 20 bytes of the submitted salt match msg.sender.\n    require(\n      (address(bytes20(salt)) == msg.sender) ||\n      (bytes20(salt) == bytes20(0)),\n      \"Invalid salt - first 20 bytes of the salt must match calling address.\"\n    );\n    _;\n  }\n}"}},"settings":{"optimizer":{"enabled":true,"runs":99999},"evmVersion":"petersburg","outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"],"":["ast"]}}}},"output":{"sources":{"contracts/ImmutableCreate2Factory.sol":{"ast":{"absolutePath":"contracts/ImmutableCreate2Factory.sol","exportedSymbols":{"ImmutableCreate2Factory":[193]},"id":194,"nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","0.5",".10"],"nodeType":"PragmaDirective","src":"67:23:0"},{"baseContracts":[],"contractDependencies":[],"contractKind":"contract","documentation":"@title Immutable Create2 Contract Factory\n@author 0age\n@notice This contract provides a safeCreate2 function that takes a salt value\nand a block of initialization code as arguments and passes them into inline\nassembly. The contract prevents redeploys by maintaining a mapping of all\ncontracts that have already been deployed, and prevents frontrunning or other\ncollisions by requiring that the first 20 bytes of the salt are equal to the\naddress of the caller (this can be bypassed by setting the first 20 bytes to\nthe null address). There is also a view function that computes the address of\nthe contract that will be created when submitting a given salt or nonce along\nwith a given block of initialization code.\n@dev This contract has not yet been fully tested or audited - proceed with\ncaution and please share any exploits or optimizations you discover.","fullyImplemented":true,"id":193,"linearizedBaseContracts":[193],"name":"ImmutableCreate2Factory","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":5,"name":"_deployed","nodeType":"VariableDeclaration","scope":193,"src":"1154:42:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":4,"keyType":{"id":2,"name":"address","nodeType":"ElementaryTypeName","src":"1162:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1154:24:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueType":{"id":3,"name":"bool","nodeType":"ElementaryTypeName","src":"1173:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"value":null,"visibility":"private"},{"body":{"id":68,"nodeType":"Block","src":"1998:2229:0","statements":[{"assignments":[18],"declarations":[{"constant":false,"id":18,"name":"initCode","nodeType":"VariableDeclaration","scope":68,"src":"2065:21:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":17,"name":"bytes","nodeType":"ElementaryTypeName","src":"2065:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":null,"visibility":"internal"}],"id":20,"initialValue":{"argumentTypes":null,"id":19,"name":"initializationCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9,"src":"2089:18:0","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"nodeType":"VariableDeclarationStatement","src":"2065:42:0"},{"assignments":[22],"declarations":[{"constant":false,"id":22,"name":"targetDeploymentAddress","nodeType":"VariableDeclaration","scope":68,"src":"2175:31:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":21,"name":"address","nodeType":"ElementaryTypeName","src":"2175:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"id":45,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"ff","id":29,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2537:7:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_8b1a944cf13a9a1c08facb2c9e98623ef3254d2ddb48113885c3e8e97fec8db9","typeString":"literal_string (contains invalid UTF-8 sequence at position 0)"},"value":null},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":31,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":222,"src":"2623:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_ImmutableCreate2Factory_$193","typeString":"contract ImmutableCreate2Factory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ImmutableCreate2Factory_$193","typeString":"contract ImmutableCreate2Factory"}],"id":30,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2615:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":"address"},"id":32,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2615:13:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":33,"name":"salt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"2686:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":37,"name":"initCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18,"src":"2872:8:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":null,"id":35,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":195,"src":"2836:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":36,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","referencedDeclaration":null,"src":"2836:16:0","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":38,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2836:62:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":34,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":202,"src":"2756:9:0","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":39,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2756:158:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_8b1a944cf13a9a1c08facb2c9e98623ef3254d2ddb48113885c3e8e97fec8db9","typeString":"literal_string (contains invalid UTF-8 sequence at position 0)"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"argumentTypes":null,"id":27,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":195,"src":"2460:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":28,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","referencedDeclaration":null,"src":"2460:16:0","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":40,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2460:468:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":26,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":202,"src":"2380:9:0","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":41,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2380:560:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":25,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2299:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint256"},"id":42,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2299:651:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":24,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2224:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":"uint160"},"id":43,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2224:734:0","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":23,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2209:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":"address"},"id":44,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2209:755:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"VariableDeclarationStatement","src":"2175:789:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":50,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3067:35:0","subExpression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":47,"name":"_deployed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5,"src":"3068:9:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":49,"indexExpression":{"argumentTypes":null,"id":48,"name":"targetDeploymentAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":22,"src":"3078:23:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3068:34:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"496e76616c696420636f6e7472616374206372656174696f6e202d20636f6e74726163742068617320616c7265616479206265656e206465706c6f7965642e","id":51,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3110:65:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_735ef0aec3aeab9c6d0fa63f0ebfc7e89ac3fc816654e42f47857e7444f9897e","typeString":"literal_string \"Invalid contract creation - contract has already been deployed.\""},"value":"Invalid contract creation - contract has already been deployed."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_735ef0aec3aeab9c6d0fa63f0ebfc7e89ac3fc816654e42f47857e7444f9897e","typeString":"literal_string \"Invalid contract creation - contract has already been deployed.\""}],"id":46,"name":"require","nodeType":"Identifier","overloadedDeclarations":[211,212],"referencedDeclaration":212,"src":"3052:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":52,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3052:129:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":53,"nodeType":"ExpressionStatement","src":"3052:129:0"},{"externalReferences":[{"initCode":{"declaration":18,"isOffset":false,"isSlot":false,"src":"3369:8:0","valueSize":1}},{"initCode":{"declaration":18,"isOffset":false,"isSlot":false,"src":"3440:8:0","valueSize":1}},{"deploymentAddress":{"declaration":15,"isOffset":false,"isSlot":false,"src":"3492:17:0","valueSize":1}},{"salt":{"declaration":7,"isOffset":false,"isSlot":false,"src":"3806:4:0","valueSize":1}}],"id":54,"nodeType":"InlineAssembly","operations":"{\n    let encoded_data := add(0x20, initCode)\n    let encoded_size := mload(initCode)\n    deploymentAddress := create2(callvalue(), encoded_data, encoded_size, salt)\n}","src":"3267:617:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":58,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":56,"name":"deploymentAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":15,"src":"3983:17:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"id":57,"name":"targetDeploymentAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":22,"src":"4004:23:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3983:44:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"4661696c656420746f206465706c6f7920636f6e7472616374207573696e672070726f76696465642073616c7420616e6420696e697469616c697a6174696f6e20636f64652e","id":59,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4035:72:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_ae6dfa985d082b03716242249ee9dfc03892785e8454a5c191b9d15c11998bd4","typeString":"literal_string \"Failed to deploy contract using provided salt and initialization code.\""},"value":"Failed to deploy contract using provided salt and initialization code."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ae6dfa985d082b03716242249ee9dfc03892785e8454a5c191b9d15c11998bd4","typeString":"literal_string \"Failed to deploy contract using provided salt and initialization code.\""}],"id":55,"name":"require","nodeType":"Identifier","overloadedDeclarations":[211,212],"referencedDeclaration":212,"src":"3968:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":60,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3968:145:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":61,"nodeType":"ExpressionStatement","src":"3968:145:0"},{"expression":{"argumentTypes":null,"id":66,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":62,"name":"_deployed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5,"src":"4187:9:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":64,"indexExpression":{"argumentTypes":null,"id":63,"name":"deploymentAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":15,"src":"4197:17:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4187:28:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"hexValue":"74727565","id":65,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4218:4:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"4187:35:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":67,"nodeType":"ExpressionStatement","src":"4187:35:0"}]},"documentation":"@dev Create a contract using CREATE2 by submitting a given salt or nonce\nalong with the initialization code for the contract. Note that the first 20\nbytes of the salt must match those of the calling address, which prevents\ncontract creation events from being submitted by unintended parties.\n@param salt bytes32 The nonce that will be passed into the CREATE2 call.\n@param initializationCode bytes The initialization code that will be passed\ninto the CREATE2 call.\n@return Address of the contract that will be created, or the null address\nif a contract already exists at that address.","id":69,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"argumentTypes":null,"id":12,"name":"salt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"1956:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":13,"modifierName":{"argumentTypes":null,"id":11,"name":"containsCaller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":192,"src":"1941:14:0","typeDescriptions":{"typeIdentifier":"t_modifier$_t_bytes32_$","typeString":"modifier (bytes32)"}},"nodeType":"ModifierInvocation","src":"1941:20:0"}],"name":"safeCreate2","nodeType":"FunctionDefinition","parameters":{"id":10,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7,"name":"salt","nodeType":"VariableDeclaration","scope":69,"src":"1868:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1868:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":null,"visibility":"internal"},{"constant":false,"id":9,"name":"initializationCode","nodeType":"VariableDeclaration","scope":69,"src":"1886:33:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":8,"name":"bytes","nodeType":"ElementaryTypeName","src":"1886:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":null,"visibility":"internal"}],"src":"1862:61:0"},"returnParameters":{"id":16,"nodeType":"ParameterList","parameters":[{"constant":false,"id":15,"name":"deploymentAddress","nodeType":"VariableDeclaration","scope":69,"src":"1971:25:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":14,"name":"address","nodeType":"ElementaryTypeName","src":"1971:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"1970:27:0"},"scope":193,"src":"1842:2385:0","stateMutability":"payable","superFunction":null,"visibility":"external"},{"body":{"id":112,"nodeType":"Block","src":"5246:1017:0","statements":[{"expression":{"argumentTypes":null,"id":101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":78,"name":"deploymentAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":76,"src":"5318:17:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"ff","id":85,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5674:7:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_8b1a944cf13a9a1c08facb2c9e98623ef3254d2ddb48113885c3e8e97fec8db9","typeString":"literal_string (contains invalid UTF-8 sequence at position 0)"},"value":null},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":87,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":222,"src":"5762:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_ImmutableCreate2Factory_$193","typeString":"contract ImmutableCreate2Factory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ImmutableCreate2Factory_$193","typeString":"contract ImmutableCreate2Factory"}],"id":86,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5754:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":"address"},"id":88,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5754:13:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":89,"name":"salt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":71,"src":"5827:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":93,"name":"initCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":73,"src":"6017:8:0","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"expression":{"argumentTypes":null,"id":91,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":195,"src":"5981:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":92,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","referencedDeclaration":null,"src":"5981:16:0","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":94,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5981:62:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":90,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":202,"src":"5899:9:0","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":95,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5899:160:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_8b1a944cf13a9a1c08facb2c9e98623ef3254d2ddb48113885c3e8e97fec8db9","typeString":"literal_string (contains invalid UTF-8 sequence at position 0)"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"argumentTypes":null,"id":83,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":195,"src":"5595:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":84,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","referencedDeclaration":null,"src":"5595:16:0","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":96,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5595:478:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":82,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":202,"src":"5513:9:0","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":97,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5513:572:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":81,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5430:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint256"},"id":98,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5430:665:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":80,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5353:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":"uint160"},"id":99,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5353:750:0","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":79,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5338:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":"address"},"id":100,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5338:771:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"5318:791:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":102,"nodeType":"ExpressionStatement","src":"5318:791:0"},{"condition":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":103,"name":"_deployed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5,"src":"6197:9:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":105,"indexExpression":{"argumentTypes":null,"id":104,"name":"deploymentAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":76,"src":"6207:17:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6197:28:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":111,"nodeType":"IfStatement","src":"6193:66:0","trueBody":{"id":110,"nodeType":"Block","src":"6227:32:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"30","id":107,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6250:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":106,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6242:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":"address"},"id":108,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6242:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"functionReturnParameters":77,"id":109,"nodeType":"Return","src":"6235:17:0"}]}}]},"documentation":"@dev Compute the address of the contract that will be created when\nsubmitting a given salt or nonce to the contract along with the contract's\ninitialization code. The CREATE2 address is computed in accordance with\nEIP-1014, and adheres to the formula therein of\n`keccak256( 0xff ++ address ++ salt ++ keccak256(init_code)))[12:]` when\nperforming the computation. The computed address is then checked for any\nexisting contract code - if so, the null address will be returned instead.\n@param salt bytes32 The nonce passed into the CREATE2 address calculation.\n@param initCode bytes The contract initialization code to be used.\nthat will be passed into the CREATE2 address calculation.\n@return Address of the contract that will be created, or the null address\nif a contract has already been deployed to that address.","id":113,"implemented":true,"kind":"function","modifiers":[],"name":"findCreate2Address","nodeType":"FunctionDefinition","parameters":{"id":74,"nodeType":"ParameterList","parameters":[{"constant":false,"id":71,"name":"salt","nodeType":"VariableDeclaration","scope":113,"src":"5150:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":70,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5150:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":null,"visibility":"internal"},{"constant":false,"id":73,"name":"initCode","nodeType":"VariableDeclaration","scope":113,"src":"5168:23:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":72,"name":"bytes","nodeType":"ElementaryTypeName","src":"5168:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":null,"visibility":"internal"}],"src":"5144:51:0"},"returnParameters":{"id":77,"nodeType":"ParameterList","parameters":[{"constant":false,"id":76,"name":"deploymentAddress","nodeType":"VariableDeclaration","scope":113,"src":"5219:25:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":75,"name":"address","nodeType":"ElementaryTypeName","src":"5219:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"5218:27:0"},"scope":193,"src":"5117:1146:0","stateMutability":"view","superFunction":null,"visibility":"external"},{"body":{"id":151,"nodeType":"Block","src":"7315:922:0","statements":[{"expression":{"argumentTypes":null,"id":140,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":122,"name":"deploymentAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":120,"src":"7387:17:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"ff","id":129,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7743:7:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_8b1a944cf13a9a1c08facb2c9e98623ef3254d2ddb48113885c3e8e97fec8db9","typeString":"literal_string (contains invalid UTF-8 sequence at position 0)"},"value":null},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":131,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":222,"src":"7831:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_ImmutableCreate2Factory_$193","typeString":"contract ImmutableCreate2Factory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ImmutableCreate2Factory_$193","typeString":"contract ImmutableCreate2Factory"}],"id":130,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7823:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":"address"},"id":132,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7823:13:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":133,"name":"salt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":115,"src":"7896:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"argumentTypes":null,"id":134,"name":"initCodeHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":117,"src":"7968:12:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_8b1a944cf13a9a1c08facb2c9e98623ef3254d2ddb48113885c3e8e97fec8db9","typeString":"literal_string (contains invalid UTF-8 sequence at position 0)"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"argumentTypes":null,"id":127,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":195,"src":"7664:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":128,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","referencedDeclaration":null,"src":"7664:16:0","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":135,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7664:383:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":126,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":202,"src":"7582:9:0","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":136,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7582:477:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":125,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7499:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint256"},"id":137,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7499:570:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":124,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7422:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":"uint160"},"id":138,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7422:655:0","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":123,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7407:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":"address"},"id":139,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7407:676:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"7387:696:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":141,"nodeType":"ExpressionStatement","src":"7387:696:0"},{"condition":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":142,"name":"_deployed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5,"src":"8171:9:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":144,"indexExpression":{"argumentTypes":null,"id":143,"name":"deploymentAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":120,"src":"8181:17:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8171:28:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":150,"nodeType":"IfStatement","src":"8167:66:0","trueBody":{"id":149,"nodeType":"Block","src":"8201:32:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"30","id":146,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8224:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":145,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8216:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":"address"},"id":147,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8216:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"functionReturnParameters":121,"id":148,"nodeType":"Return","src":"8209:17:0"}]}}]},"documentation":"@dev Compute the address of the contract that will be created when\nsubmitting a given salt or nonce to the contract along with the keccak256\nhash of the contract's initialization code. The CREATE2 address is computed\nin accordance with EIP-1014, and adheres to the formula therein of\n`keccak256( 0xff ++ address ++ salt ++ keccak256(init_code)))[12:]` when\nperforming the computation. The computed address is then checked for any\nexisting contract code - if so, the null address will be returned instead.\n@param salt bytes32 The nonce passed into the CREATE2 address calculation.\n@param initCodeHash bytes32 The keccak256 hash of the initialization code\nthat will be passed into the CREATE2 address calculation.\n@return Address of the contract that will be created, or the null address\nif a contract has already been deployed to that address.","id":152,"implemented":true,"kind":"function","modifiers":[],"name":"findCreate2AddressViaHash","nodeType":"FunctionDefinition","parameters":{"id":118,"nodeType":"ParameterList","parameters":[{"constant":false,"id":115,"name":"salt","nodeType":"VariableDeclaration","scope":152,"src":"7222:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":114,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7222:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":null,"visibility":"internal"},{"constant":false,"id":117,"name":"initCodeHash","nodeType":"VariableDeclaration","scope":152,"src":"7240:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":116,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7240:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":null,"visibility":"internal"}],"src":"7216:48:0"},"returnParameters":{"id":121,"nodeType":"ParameterList","parameters":[{"constant":false,"id":120,"name":"deploymentAddress","nodeType":"VariableDeclaration","scope":152,"src":"7288:25:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":119,"name":"address","nodeType":"ElementaryTypeName","src":"7288:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"7287:27:0"},"scope":193,"src":"7182:1055:0","stateMutability":"view","superFunction":null,"visibility":"external"},{"body":{"id":163,"nodeType":"Block","src":"8581:120:0","statements":[{"expression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":159,"name":"_deployed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5,"src":"8668:9:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":161,"indexExpression":{"argumentTypes":null,"id":160,"name":"deploymentAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":154,"src":"8678:17:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8668:28:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":158,"id":162,"nodeType":"Return","src":"8661:35:0"}]},"documentation":"@dev Determine if a contract has already been deployed by the factory to a\ngiven address.\n@param deploymentAddress address The contract address to check.\n@return True if the contract has been deployed, false otherwise.","id":164,"implemented":true,"kind":"function","modifiers":[],"name":"hasBeenDeployed","nodeType":"FunctionDefinition","parameters":{"id":155,"nodeType":"ParameterList","parameters":[{"constant":false,"id":154,"name":"deploymentAddress","nodeType":"VariableDeclaration","scope":164,"src":"8522:25:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":153,"name":"address","nodeType":"ElementaryTypeName","src":"8522:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"8516:35:0"},"returnParameters":{"id":158,"nodeType":"ParameterList","parameters":[{"constant":false,"id":157,"name":"","nodeType":"VariableDeclaration","scope":164,"src":"8575:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":156,"name":"bool","nodeType":"ElementaryTypeName","src":"8575:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"}],"src":"8574:6:0"},"scope":193,"src":"8492:209:0","stateMutability":"view","superFunction":null,"visibility":"external"},{"body":{"id":191,"nodeType":"Block","src":"9142:346:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":186,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"components":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"id":176,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":171,"name":"salt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":166,"src":"9331:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":170,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9323:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes20_$","typeString":"type(bytes20)"},"typeName":"bytes20"},"id":172,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9323:13:0","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes20","typeString":"bytes20"}],"id":169,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9315:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":"address"},"id":173,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9315:22:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":174,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":208,"src":"9341:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":null,"src":"9341:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"9315:36:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":177,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9314:38:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"argumentTypes":null,"components":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_bytes20","typeString":"bytes20"},"id":184,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":179,"name":"salt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":166,"src":"9371:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":178,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9363:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes20_$","typeString":"type(bytes20)"},"typeName":"bytes20"},"id":180,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9363:13:0","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"30","id":182,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9388:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":181,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9380:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes20_$","typeString":"type(bytes20)"},"typeName":"bytes20"},"id":183,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9380:10:0","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}},"src":"9363:27:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":185,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9362:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9314:77:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"496e76616c69642073616c74202d206669727374203230206279746573206f66207468652073616c74206d757374206d617463682063616c6c696e6720616464726573732e","id":187,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9399:71:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_979150ea917af01af711df6e6f8e813d8cc9edb535cd6f8c22f812e1f4b5ed9c","typeString":"literal_string \"Invalid salt - first 20 bytes of the salt must match calling address.\""},"value":"Invalid salt - first 20 bytes of the salt must match calling address."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_979150ea917af01af711df6e6f8e813d8cc9edb535cd6f8c22f812e1f4b5ed9c","typeString":"literal_string \"Invalid salt - first 20 bytes of the salt must match calling address.\""}],"id":168,"name":"require","nodeType":"Identifier","overloadedDeclarations":[211,212],"referencedDeclaration":212,"src":"9299:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":188,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9299:177:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":189,"nodeType":"ExpressionStatement","src":"9299:177:0"},{"id":190,"nodeType":"PlaceholderStatement","src":"9482:1:0"}]},"documentation":"@dev Modifier to ensure that the first 20 bytes of a submitted salt match\nthose of the calling account. This provides protection against the salt\nbeing stolen by frontrunners or other attackers. The protection can also be\nbypassed if desired by setting each of the first 20 bytes to zero.\n@param salt bytes32 The salt value to check against the calling address.","id":192,"name":"containsCaller","nodeType":"ModifierDefinition","parameters":{"id":167,"nodeType":"ParameterList","parameters":[{"constant":false,"id":166,"name":"salt","nodeType":"VariableDeclaration","scope":192,"src":"9128:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":165,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9128:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":null,"visibility":"internal"}],"src":"9127:14:0"},"src":"9104:384:0","visibility":"internal"}],"scope":194,"src":"1051:8439:0"}],"src":"67:9423:0"},"id":0}},"contracts":{"contracts/ImmutableCreate2Factory.sol":{"ImmutableCreate2Factory":{"abi":[{"constant":true,"inputs":[{"name":"deploymentAddress","type":"address"}],"name":"hasBeenDeployed","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"salt","type":"bytes32"},{"name":"initializationCode","type":"bytes"}],"name":"safeCreate2","outputs":[{"name":"deploymentAddress","type":"address"}],"payable":true,"stateMutability":"payable","type":"function"},{"constant":true,"inputs":[{"name":"salt","type":"bytes32"},{"name":"initCode","type":"bytes"}],"name":"findCreate2Address","outputs":[{"name":"deploymentAddress","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"salt","type":"bytes32"},{"name":"initCodeHash","type":"bytes32"}],"name":"findCreate2AddressViaHash","outputs":[{"name":"deploymentAddress","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}],"evm":{"bytecode":{"linkReferences":{},"object":"608060405234801561001057600080fd5b50610833806100206000396000f3fe60806040526004361061003f5760003560e01c806308508b8f1461004457806364e030871461009857806385cf97ab14610138578063a49a7c90146101bc575b600080fd5b34801561005057600080fd5b506100846004803603602081101561006757600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166101ec565b604080519115158252519081900360200190f35b61010f600480360360408110156100ae57600080fd5b813591908101906040810160208201356401000000008111156100d057600080fd5b8201836020820111156100e257600080fd5b8035906020019184600183028401116401000000008311171561010457600080fd5b509092509050610217565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561014457600080fd5b5061010f6004803603604081101561015b57600080fd5b8135919081019060408101602082013564010000000081111561017d57600080fd5b82018360208201111561018f57600080fd5b803590602001918460018302840111640100000000831117156101b157600080fd5b509092509050610592565b3480156101c857600080fd5b5061010f600480360360408110156101df57600080fd5b508035906020013561069e565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205460ff1690565b600083606081901c33148061024c57507fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008116155b6102a1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260458152602001806107746045913960600191505060405180910390fd5b606084848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250604051855195965090943094508b93508692506020918201918291908401908083835b6020831061033557805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016102f8565b51815160209384036101000a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018019909216911617905260408051929094018281037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00183528085528251928201929092207fff000000000000000000000000000000000000000000000000000000000000008383015260609890981b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016602183015260358201969096526055808201979097528251808203909701875260750182525084519484019490942073ffffffffffffffffffffffffffffffffffffffff81166000908152938490529390922054929350505060ff16156104a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603f815260200180610735603f913960400191505060405180910390fd5b81602001825188818334f5955050508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161461053a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260468152602001806107b96046913960600191505060405180910390fd5b50505073ffffffffffffffffffffffffffffffffffffffff8116600090815260208190526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790559392505050565b6000308484846040516020018083838082843760408051919093018181037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001825280845281516020928301207fff000000000000000000000000000000000000000000000000000000000000008383015260609990991b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000166021820152603581019790975260558088019890985282518088039098018852607590960182525085519585019590952073ffffffffffffffffffffffffffffffffffffffff81166000908152948590529490932054939450505060ff909116159050610697575060005b9392505050565b604080517fff000000000000000000000000000000000000000000000000000000000000006020808301919091523060601b6021830152603582018590526055808301859052835180840390910181526075909201835281519181019190912073ffffffffffffffffffffffffffffffffffffffff81166000908152918290529190205460ff161561072e575060005b9291505056fe496e76616c696420636f6e7472616374206372656174696f6e202d20636f6e74726163742068617320616c7265616479206265656e206465706c6f7965642e496e76616c69642073616c74202d206669727374203230206279746573206f66207468652073616c74206d757374206d617463682063616c6c696e6720616464726573732e4661696c656420746f206465706c6f7920636f6e7472616374207573696e672070726f76696465642073616c7420616e6420696e697469616c697a6174696f6e20636f64652ea265627a7a72305820df0cff3869cc6318b978c5f52bf3eaf62774001c41901ae522bec11cbfb96e8964736f6c634300050a0032","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x833 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x3F JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8508B8F EQ PUSH2 0x44 JUMPI DUP1 PUSH4 0x64E03087 EQ PUSH2 0x98 JUMPI DUP1 PUSH4 0x85CF97AB EQ PUSH2 0x138 JUMPI DUP1 PUSH4 0xA49A7C90 EQ PUSH2 0x1BC JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x50 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x84 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x67 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1EC JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x10F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xAE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH1 0x40 DUP2 ADD PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xD0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xE2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x104 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x217 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x144 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x15B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH1 0x40 DUP2 ADD PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x17D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x18F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x1B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x592 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x1DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x69E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x60 DUP2 SWAP1 SHR CALLER EQ DUP1 PUSH2 0x24C JUMPI POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 DUP2 AND ISZERO JUMPDEST PUSH2 0x2A1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x45 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x774 PUSH1 0x45 SWAP2 CODECOPY PUSH1 0x60 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x60 DUP5 DUP5 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD DUP3 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP6 MLOAD SWAP6 SWAP7 POP SWAP1 SWAP5 ADDRESS SWAP5 POP DUP12 SWAP4 POP DUP7 SWAP3 POP PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 DUP3 SWAP2 SWAP1 DUP5 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x335 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x2F8 JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE PUSH1 0x40 DUP1 MLOAD SWAP3 SWAP1 SWAP5 ADD DUP3 DUP2 SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD DUP4 MSTORE DUP1 DUP6 MSTORE DUP3 MLOAD SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 KECCAK256 PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 DUP4 DUP4 ADD MSTORE PUSH1 0x60 SWAP9 SWAP1 SWAP9 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND PUSH1 0x21 DUP4 ADD MSTORE PUSH1 0x35 DUP3 ADD SWAP7 SWAP1 SWAP7 MSTORE PUSH1 0x55 DUP1 DUP3 ADD SWAP8 SWAP1 SWAP8 MSTORE DUP3 MLOAD DUP1 DUP3 SUB SWAP1 SWAP8 ADD DUP8 MSTORE PUSH1 0x75 ADD DUP3 MSTORE POP DUP5 MLOAD SWAP5 DUP5 ADD SWAP5 SWAP1 SWAP5 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP4 DUP5 SWAP1 MSTORE SWAP4 SWAP1 SWAP3 KECCAK256 SLOAD SWAP3 SWAP4 POP POP POP PUSH1 0xFF AND ISZERO PUSH2 0x4A7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x3F DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x735 PUSH1 0x3F SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x20 ADD DUP3 MLOAD DUP9 DUP2 DUP4 CALLVALUE CREATE2 SWAP6 POP POP POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x53A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x46 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x7B9 PUSH1 0x46 SWAP2 CODECOPY PUSH1 0x60 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 ADDRESS DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x40 DUP1 MLOAD SWAP2 SWAP1 SWAP4 ADD DUP2 DUP2 SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD DUP3 MSTORE DUP1 DUP5 MSTORE DUP2 MLOAD PUSH1 0x20 SWAP3 DUP4 ADD KECCAK256 PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 DUP4 DUP4 ADD MSTORE PUSH1 0x60 SWAP10 SWAP1 SWAP10 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND PUSH1 0x21 DUP3 ADD MSTORE PUSH1 0x35 DUP2 ADD SWAP8 SWAP1 SWAP8 MSTORE PUSH1 0x55 DUP1 DUP9 ADD SWAP9 SWAP1 SWAP9 MSTORE DUP3 MLOAD DUP1 DUP9 SUB SWAP1 SWAP9 ADD DUP9 MSTORE PUSH1 0x75 SWAP1 SWAP7 ADD DUP3 MSTORE POP DUP6 MLOAD SWAP6 DUP6 ADD SWAP6 SWAP1 SWAP6 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP5 DUP6 SWAP1 MSTORE SWAP5 SWAP1 SWAP4 KECCAK256 SLOAD SWAP4 SWAP5 POP POP POP PUSH1 0xFF SWAP1 SWAP2 AND ISZERO SWAP1 POP PUSH2 0x697 JUMPI POP PUSH1 0x0 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADDRESS PUSH1 0x60 SHL PUSH1 0x21 DUP4 ADD MSTORE PUSH1 0x35 DUP3 ADD DUP6 SWAP1 MSTORE PUSH1 0x55 DUP1 DUP4 ADD DUP6 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x75 SWAP1 SWAP3 ADD DUP4 MSTORE DUP2 MLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP2 DUP3 SWAP1 MSTORE SWAP2 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x72E JUMPI POP PUSH1 0x0 JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID 0x49 PUSH15 0x76616C696420636F6E747261637420 PUSH4 0x72656174 PUSH10 0x6F6E202D20636F6E7472 PUSH2 0x6374 KECCAK256 PUSH9 0x617320616C72656164 PUSH26 0x206265656E206465706C6F7965642E496E76616C69642073616C PUSH21 0x202D206669727374203230206279746573206F6620 PUSH21 0x68652073616C74206D757374206D61746368206361 PUSH13 0x6C696E6720616464726573732E 0x46 PUSH2 0x696C PUSH6 0x6420746F2064 PUSH6 0x706C6F792063 PUSH16 0x6E7472616374207573696E672070726F PUSH23 0x696465642073616C7420616E6420696E697469616C697A PUSH2 0x7469 PUSH16 0x6E20636F64652EA265627A7A72305820 0xdf 0xc SELFDESTRUCT CODESIZE PUSH10 0xCC6318B978C5F52BF3EA 0xf6 0x27 PUSH21 0x1C41901AE522BEC11CBFB96E8964736F6C634300 SDIV EXP STOP ORIGIN ","sourceMap":"1051:8439:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1051:8439:0;;;;;;;"},"deployedBytecode":{"linkReferences":{},"object":"60806040526004361061003f5760003560e01c806308508b8f1461004457806364e030871461009857806385cf97ab14610138578063a49a7c90146101bc575b600080fd5b34801561005057600080fd5b506100846004803603602081101561006757600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166101ec565b604080519115158252519081900360200190f35b61010f600480360360408110156100ae57600080fd5b813591908101906040810160208201356401000000008111156100d057600080fd5b8201836020820111156100e257600080fd5b8035906020019184600183028401116401000000008311171561010457600080fd5b509092509050610217565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561014457600080fd5b5061010f6004803603604081101561015b57600080fd5b8135919081019060408101602082013564010000000081111561017d57600080fd5b82018360208201111561018f57600080fd5b803590602001918460018302840111640100000000831117156101b157600080fd5b509092509050610592565b3480156101c857600080fd5b5061010f600480360360408110156101df57600080fd5b508035906020013561069e565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205460ff1690565b600083606081901c33148061024c57507fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008116155b6102a1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260458152602001806107746045913960600191505060405180910390fd5b606084848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250604051855195965090943094508b93508692506020918201918291908401908083835b6020831061033557805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016102f8565b51815160209384036101000a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018019909216911617905260408051929094018281037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00183528085528251928201929092207fff000000000000000000000000000000000000000000000000000000000000008383015260609890981b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016602183015260358201969096526055808201979097528251808203909701875260750182525084519484019490942073ffffffffffffffffffffffffffffffffffffffff81166000908152938490529390922054929350505060ff16156104a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603f815260200180610735603f913960400191505060405180910390fd5b81602001825188818334f5955050508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161461053a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260468152602001806107b96046913960600191505060405180910390fd5b50505073ffffffffffffffffffffffffffffffffffffffff8116600090815260208190526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790559392505050565b6000308484846040516020018083838082843760408051919093018181037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001825280845281516020928301207fff000000000000000000000000000000000000000000000000000000000000008383015260609990991b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000166021820152603581019790975260558088019890985282518088039098018852607590960182525085519585019590952073ffffffffffffffffffffffffffffffffffffffff81166000908152948590529490932054939450505060ff909116159050610697575060005b9392505050565b604080517fff000000000000000000000000000000000000000000000000000000000000006020808301919091523060601b6021830152603582018590526055808301859052835180840390910181526075909201835281519181019190912073ffffffffffffffffffffffffffffffffffffffff81166000908152918290529190205460ff161561072e575060005b9291505056fe496e76616c696420636f6e7472616374206372656174696f6e202d20636f6e74726163742068617320616c7265616479206265656e206465706c6f7965642e496e76616c69642073616c74202d206669727374203230206279746573206f66207468652073616c74206d757374206d617463682063616c6c696e6720616464726573732e4661696c656420746f206465706c6f7920636f6e7472616374207573696e672070726f76696465642073616c7420616e6420696e697469616c697a6174696f6e20636f64652ea265627a7a72305820df0cff3869cc6318b978c5f52bf3eaf62774001c41901ae522bec11cbfb96e8964736f6c634300050a0032","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x3F JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8508B8F EQ PUSH2 0x44 JUMPI DUP1 PUSH4 0x64E03087 EQ PUSH2 0x98 JUMPI DUP1 PUSH4 0x85CF97AB EQ PUSH2 0x138 JUMPI DUP1 PUSH4 0xA49A7C90 EQ PUSH2 0x1BC JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x50 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x84 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x67 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1EC JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x10F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xAE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH1 0x40 DUP2 ADD PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xD0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xE2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x104 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x217 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x144 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x15B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH1 0x40 DUP2 ADD PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x17D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x18F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x1B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x592 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x1DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x69E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x60 DUP2 SWAP1 SHR CALLER EQ DUP1 PUSH2 0x24C JUMPI POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 DUP2 AND ISZERO JUMPDEST PUSH2 0x2A1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x45 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x774 PUSH1 0x45 SWAP2 CODECOPY PUSH1 0x60 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x60 DUP5 DUP5 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD DUP3 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP6 MLOAD SWAP6 SWAP7 POP SWAP1 SWAP5 ADDRESS SWAP5 POP DUP12 SWAP4 POP DUP7 SWAP3 POP PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 DUP3 SWAP2 SWAP1 DUP5 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x335 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x2F8 JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE PUSH1 0x40 DUP1 MLOAD SWAP3 SWAP1 SWAP5 ADD DUP3 DUP2 SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD DUP4 MSTORE DUP1 DUP6 MSTORE DUP3 MLOAD SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 KECCAK256 PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 DUP4 DUP4 ADD MSTORE PUSH1 0x60 SWAP9 SWAP1 SWAP9 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND PUSH1 0x21 DUP4 ADD MSTORE PUSH1 0x35 DUP3 ADD SWAP7 SWAP1 SWAP7 MSTORE PUSH1 0x55 DUP1 DUP3 ADD SWAP8 SWAP1 SWAP8 MSTORE DUP3 MLOAD DUP1 DUP3 SUB SWAP1 SWAP8 ADD DUP8 MSTORE PUSH1 0x75 ADD DUP3 MSTORE POP DUP5 MLOAD SWAP5 DUP5 ADD SWAP5 SWAP1 SWAP5 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP4 DUP5 SWAP1 MSTORE SWAP4 SWAP1 SWAP3 KECCAK256 SLOAD SWAP3 SWAP4 POP POP POP PUSH1 0xFF AND ISZERO PUSH2 0x4A7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x3F DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x735 PUSH1 0x3F SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x20 ADD DUP3 MLOAD DUP9 DUP2 DUP4 CALLVALUE CREATE2 SWAP6 POP POP POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x53A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x46 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x7B9 PUSH1 0x46 SWAP2 CODECOPY PUSH1 0x60 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 ADDRESS DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x40 DUP1 MLOAD SWAP2 SWAP1 SWAP4 ADD DUP2 DUP2 SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD DUP3 MSTORE DUP1 DUP5 MSTORE DUP2 MLOAD PUSH1 0x20 SWAP3 DUP4 ADD KECCAK256 PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 DUP4 DUP4 ADD MSTORE PUSH1 0x60 SWAP10 SWAP1 SWAP10 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND PUSH1 0x21 DUP3 ADD MSTORE PUSH1 0x35 DUP2 ADD SWAP8 SWAP1 SWAP8 MSTORE PUSH1 0x55 DUP1 DUP9 ADD SWAP9 SWAP1 SWAP9 MSTORE DUP3 MLOAD DUP1 DUP9 SUB SWAP1 SWAP9 ADD DUP9 MSTORE PUSH1 0x75 SWAP1 SWAP7 ADD DUP3 MSTORE POP DUP6 MLOAD SWAP6 DUP6 ADD SWAP6 SWAP1 SWAP6 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP5 DUP6 SWAP1 MSTORE SWAP5 SWAP1 SWAP4 KECCAK256 SLOAD SWAP4 SWAP5 POP POP POP PUSH1 0xFF SWAP1 SWAP2 AND ISZERO SWAP1 POP PUSH2 0x697 JUMPI POP PUSH1 0x0 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADDRESS PUSH1 0x60 SHL PUSH1 0x21 DUP4 ADD MSTORE PUSH1 0x35 DUP3 ADD DUP6 SWAP1 MSTORE PUSH1 0x55 DUP1 DUP4 ADD DUP6 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x75 SWAP1 SWAP3 ADD DUP4 MSTORE DUP2 MLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP2 DUP3 SWAP1 MSTORE SWAP2 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x72E JUMPI POP PUSH1 0x0 JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID 0x49 PUSH15 0x76616C696420636F6E747261637420 PUSH4 0x72656174 PUSH10 0x6F6E202D20636F6E7472 PUSH2 0x6374 KECCAK256 PUSH9 0x617320616C72656164 PUSH26 0x206265656E206465706C6F7965642E496E76616C69642073616C PUSH21 0x202D206669727374203230206279746573206F6620 PUSH21 0x68652073616C74206D757374206D61746368206361 PUSH13 0x6C696E6720616464726573732E 0x46 PUSH2 0x696C PUSH6 0x6420746F2064 PUSH6 0x706C6F792063 PUSH16 0x6E7472616374207573696E672070726F PUSH23 0x696465642073616C7420616E6420696E697469616C697A PUSH2 0x7469 PUSH16 0x6E20636F64652EA265627A7A72305820 0xdf 0xc SELFDESTRUCT CODESIZE PUSH10 0xCC6318B978C5F52BF3EA 0xf6 0x27 PUSH21 0x1C41901AE522BEC11CBFB96E8964736F6C634300 SDIV EXP STOP ORIGIN ","sourceMap":"1051:8439:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8492:209;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8492:209:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;8492:209:0;;;;:::i;:::-;;;;;;;;;;;;;;;;;;1842:2385;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1842:2385:0;;;;;;;;;;;;;;21:11:-1;5:28;;2:2;;;46:1;43;36:12;2:2;1842:2385:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;1842:2385:0;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;-1:-1;1842:2385:0;;-1:-1:-1;1842:2385:0;-1:-1:-1;1842:2385:0;:::i;:::-;;;;;;;;;;;;;;;;;;;5117:1146;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5117:1146:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5117:1146:0;;;;;;;;;;;;;;21:11:-1;5:28;;2:2;;;46:1;43;36:12;2:2;5117:1146:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;5117:1146:0;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;-1:-1;5117:1146:0;;-1:-1:-1;5117:1146:0;-1:-1:-1;5117:1146:0;:::i;7182:1055::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7182:1055:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;7182:1055:0;;;;;;;:::i;8492:209::-;8668:28;;8575:4;8668:28;;;;;;;;;;;;;;8492:209::o;1842:2385::-;1971:25;1956:4;9315:22;;;;9341:10;9315:36;;9314:77;;-1:-1:-1;9363:27:0;;;;9314:77;9299:177;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2065:21;2089:18;;2065:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;-1:-1;2836:62:0;;;;2065:42;;-1:-1:-1;99:1;;2623:4:0;;-1:-1:-1;2686:4:0;;-1:-1:-1;2065:42:0;;-1:-1:-1;2836:62:0;;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;176:10;;164:23;;139:12;;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;246:30;;311:9;;295:26;;;340:21;;377:20;365:33;;2836:62:0;;;;;;;26:21:-1;;;22:32;;6:49;;2836:62:0;;;2756:158;;;;;;;;;2460:468;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;26:21:-1;;;22:32;;;6:49;;2460:468:0;;;;-1:-1:-1;2380:560:0;;;;;;;;;2460:468;3068:34;;-1:-1:-1;3068:34:0;;;;;;;;;;;;2380:560;;-1:-1:-1;;;3068:34:0;;3067:35;3052:129;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3369:8;3363:4;3359:19;3440:8;3434:15;3806:4;3729:12;3651;3574:9;3513:365;3492:386;;3276:608;;4004:23;3983:44;;:17;:44;;;3968:145;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;4187:28:0;;;:9;:28;;;;;;;;;;:35;;;;4218:4;4187:35;;;4197:17;1842:2385;-1:-1:-1;;;1842:2385:0:o;5117:1146::-;5219:25;5762:4;5827;6017:8;;5981:62;;;;;;;30:3:-1;22:6;14;1:33;5981:62:0;;;45:16:-1;;;;26:21;;;22:32;;6:49;;5981:62:0;;;5899:160;;49:4:-1;5899:160:0;;;;5595:478;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;26:21:-1;;;22:32;;;6:49;;5595:478:0;;;;;;-1:-1:-1;5513:572:0;;;;;;;;;5595:478;6197:28;;-1:-1:-1;6197:28:0;;;;;;;;;;;;5513:572;;-1:-1:-1;;;6197:28:0;;;;6193:66;;-1:-1:-1;6193:66:0;;-1:-1:-1;6250:1:0;6193:66;5117:1146;;;;;:::o;7182:1055::-;7664:383;;;;;;;;;;;;7831:4;7664:383;;;;;;;;;;;;;;;;;;;;;26:21:-1;;;22:32;;;6:49;;7664:383:0;;;;;;7582:477;;;;;;;;;7664:383;8171:28;;7288:25;8171:28;;;;;;;;;;;;;8167:66;;;-1:-1:-1;8224:1:0;8167:66;7182:1055;;;;:::o"},"methodIdentifiers":{"findCreate2Address(bytes32,bytes)":"85cf97ab","findCreate2AddressViaHash(bytes32,bytes32)":"a49a7c90","hasBeenDeployed(address)":"08508b8f","safeCreate2(bytes32,bytes)":"64e03087"}},"metadata":"{\"compiler\":{\"version\":\"0.5.10+commit.5a6ea5b1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[{\"name\":\"deploymentAddress\",\"type\":\"address\"}],\"name\":\"hasBeenDeployed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"salt\",\"type\":\"bytes32\"},{\"name\":\"initializationCode\",\"type\":\"bytes\"}],\"name\":\"safeCreate2\",\"outputs\":[{\"name\":\"deploymentAddress\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"salt\",\"type\":\"bytes32\"},{\"name\":\"initCode\",\"type\":\"bytes\"}],\"name\":\"findCreate2Address\",\"outputs\":[{\"name\":\"deploymentAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"salt\",\"type\":\"bytes32\"},{\"name\":\"initCodeHash\",\"type\":\"bytes32\"}],\"name\":\"findCreate2AddressViaHash\",\"outputs\":[{\"name\":\"deploymentAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"0age\",\"details\":\"This contract has not yet been fully tested or audited - proceed with caution and please share any exploits or optimizations you discover.\",\"methods\":{\"findCreate2Address(bytes32,bytes)\":{\"details\":\"Compute the address of the contract that will be created when submitting a given salt or nonce to the contract along with the contract's initialization code. The CREATE2 address is computed in accordance with EIP-1014, and adheres to the formula therein of `keccak256( 0xff ++ address ++ salt ++ keccak256(init_code)))[12:]` when performing the computation. The computed address is then checked for any existing contract code - if so, the null address will be returned instead.\",\"params\":{\"initCode\":\"bytes The contract initialization code to be used. that will be passed into the CREATE2 address calculation.\",\"salt\":\"bytes32 The nonce passed into the CREATE2 address calculation.\"},\"return\":\"Address of the contract that will be created, or the null address if a contract has already been deployed to that address.\"},\"findCreate2AddressViaHash(bytes32,bytes32)\":{\"details\":\"Compute the address of the contract that will be created when submitting a given salt or nonce to the contract along with the keccak256 hash of the contract's initialization code. The CREATE2 address is computed in accordance with EIP-1014, and adheres to the formula therein of `keccak256( 0xff ++ address ++ salt ++ keccak256(init_code)))[12:]` when performing the computation. The computed address is then checked for any existing contract code - if so, the null address will be returned instead.\",\"params\":{\"initCodeHash\":\"bytes32 The keccak256 hash of the initialization code that will be passed into the CREATE2 address calculation.\",\"salt\":\"bytes32 The nonce passed into the CREATE2 address calculation.\"},\"return\":\"Address of the contract that will be created, or the null address if a contract has already been deployed to that address.\"},\"hasBeenDeployed(address)\":{\"details\":\"Determine if a contract has already been deployed by the factory to a given address.\",\"params\":{\"deploymentAddress\":\"address The contract address to check.\"},\"return\":\"True if the contract has been deployed, false otherwise.\"},\"safeCreate2(bytes32,bytes)\":{\"details\":\"Create a contract using CREATE2 by submitting a given salt or nonce along with the initialization code for the contract. Note that the first 20 bytes of the salt must match those of the calling address, which prevents contract creation events from being submitted by unintended parties.\",\"params\":{\"initializationCode\":\"bytes The initialization code that will be passed into the CREATE2 call.\",\"salt\":\"bytes32 The nonce that will be passed into the CREATE2 call.\"},\"return\":\"Address of the contract that will be created, or the null address if a contract already exists at that address.\"}},\"title\":\"Immutable Create2 Contract Factory\"},\"userdoc\":{\"methods\":{},\"notice\":\"This contract provides a safeCreate2 function that takes a salt value and a block of initialization code as arguments and passes them into inline assembly. The contract prevents redeploys by maintaining a mapping of all contracts that have already been deployed, and prevents frontrunning or other collisions by requiring that the first 20 bytes of the salt are equal to the address of the caller (this can be bypassed by setting the first 20 bytes to the null address). There is also a view function that computes the address of the contract that will be created when submitting a given salt or nonce along with a given block of initialization code.\"}},\"settings\":{\"compilationTarget\":{\"contracts/ImmutableCreate2Factory.sol\":\"ImmutableCreate2Factory\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"contracts/ImmutableCreate2Factory.sol\":{\"keccak256\":\"0x000b2d2f5160042873afc4f812c915f5481d24238d81d6e9196c292448c43c55\",\"urls\":[\"bzzr://d6601247361039c60e90222828f21fcb67d31cafc333b923ff6a17c1dda5ff01\",\"dweb:/ipfs/QmUYfvbtjXeWwUhyPLFMKWNjYYScq4cPwpYL6NZhttd8H7\"]}},\"version\":1}"}}}}}