"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LibClone__factory = void 0;
var tslib_1 = require("tslib");
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
var ethers_1 = require("ethers");
var _abi = [
    {
        inputs: [],
        name: "DeploymentFailed",
        type: "error",
    },
    {
        inputs: [],
        name: "ETHTransferFailed",
        type: "error",
    },
    {
        inputs: [],
        name: "SaltDoesNotStartWith",
        type: "error",
    },
];
var _bytecode = "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220719f0e848e844023cfa2dbc9c00e644cad026bf1d23c2661a954ac41aab98e0764736f6c63430008140033";
var isSuperArgs = function (xs) { return xs.length > 1; };
var LibClone__factory = /** @class */ (function (_super) {
    tslib_1.__extends(LibClone__factory, _super);
    function LibClone__factory() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var _this = this;
        if (isSuperArgs(args)) {
            _this = _super.apply(this, args) || this;
        }
        else {
            _this = _super.call(this, _abi, _bytecode, args[0]) || this;
        }
        return _this;
    }
    LibClone__factory.prototype.deploy = function (overrides) {
        return _super.prototype.deploy.call(this, overrides || {});
    };
    LibClone__factory.prototype.getDeployTransaction = function (overrides) {
        return _super.prototype.getDeployTransaction.call(this, overrides || {});
    };
    LibClone__factory.prototype.attach = function (address) {
        return _super.prototype.attach.call(this, address);
    };
    LibClone__factory.prototype.connect = function (signer) {
        return _super.prototype.connect.call(this, signer);
    };
    LibClone__factory.createInterface = function () {
        return new ethers_1.utils.Interface(_abi);
    };
    LibClone__factory.connect = function (address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    };
    LibClone__factory.bytecode = _bytecode;
    LibClone__factory.abi = _abi;
    return LibClone__factory;
}(ethers_1.ContractFactory));
exports.LibClone__factory = LibClone__factory;
//# sourceMappingURL=LibClone__factory.js.map