/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export declare namespace IClaimCondition {
  export type ClaimConditionStruct = {
    startTimestamp: PromiseOrValue<BigNumberish>;
    maxClaimableSupply: PromiseOrValue<BigNumberish>;
    supplyClaimed: PromiseOrValue<BigNumberish>;
    quantityLimitPerWallet: PromiseOrValue<BigNumberish>;
    merkleRoot: PromiseOrValue<BytesLike>;
    pricePerToken: PromiseOrValue<BigNumberish>;
    currency: PromiseOrValue<string>;
    metadata: PromiseOrValue<string>;
  };

  export type ClaimConditionStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    string,
    string
  ] & {
    startTimestamp: BigNumber;
    maxClaimableSupply: BigNumber;
    supplyClaimed: BigNumber;
    quantityLimitPerWallet: BigNumber;
    merkleRoot: string;
    pricePerToken: BigNumber;
    currency: string;
    metadata: string;
  };
}

export declare namespace IDrop {
  export type AllowlistProofStruct = {
    proof: PromiseOrValue<BytesLike>[];
    quantityLimitPerWallet: PromiseOrValue<BigNumberish>;
    pricePerToken: PromiseOrValue<BigNumberish>;
    currency: PromiseOrValue<string>;
  };

  export type AllowlistProofStructOutput = [
    string[],
    BigNumber,
    BigNumber,
    string
  ] & {
    proof: string[];
    quantityLimitPerWallet: BigNumber;
    pricePerToken: BigNumber;
    currency: string;
  };
}

export interface DropInterface extends utils.Interface {
  functions: {
    "claim(address,uint256,address,uint256,(bytes32[],uint256,uint256,address),bytes)": FunctionFragment;
    "claimCondition()": FunctionFragment;
    "getActiveClaimConditionId()": FunctionFragment;
    "getClaimConditionById(uint256)": FunctionFragment;
    "getSupplyClaimedByWallet(uint256,address)": FunctionFragment;
    "setClaimConditions((uint256,uint256,uint256,uint256,bytes32,uint256,address,string)[],bool)": FunctionFragment;
    "verifyClaim(uint256,address,uint256,address,uint256,(bytes32[],uint256,uint256,address))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "claim"
      | "claimCondition"
      | "getActiveClaimConditionId"
      | "getClaimConditionById"
      | "getSupplyClaimedByWallet"
      | "setClaimConditions"
      | "verifyClaim"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claim",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      IDrop.AllowlistProofStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimCondition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveClaimConditionId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimConditionById",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSupplyClaimedByWallet",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setClaimConditions",
    values: [IClaimCondition.ClaimConditionStruct[], PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyClaim",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      IDrop.AllowlistProofStruct
    ]
  ): string;

  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimCondition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveClaimConditionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimConditionById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupplyClaimedByWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClaimConditions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyClaim",
    data: BytesLike
  ): Result;

  events: {
    "ClaimConditionsUpdated(tuple[],bool)": EventFragment;
    "TokensClaimed(uint256,address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClaimConditionsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensClaimed"): EventFragment;
}

export interface ClaimConditionsUpdatedEventObject {
  claimConditions: IClaimCondition.ClaimConditionStructOutput[];
  resetEligibility: boolean;
}
export type ClaimConditionsUpdatedEvent = TypedEvent<
  [IClaimCondition.ClaimConditionStructOutput[], boolean],
  ClaimConditionsUpdatedEventObject
>;

export type ClaimConditionsUpdatedEventFilter =
  TypedEventFilter<ClaimConditionsUpdatedEvent>;

export interface TokensClaimedEventObject {
  claimConditionIndex: BigNumber;
  claimer: string;
  receiver: string;
  startTokenId: BigNumber;
  quantityClaimed: BigNumber;
}
export type TokensClaimedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber],
  TokensClaimedEventObject
>;

export type TokensClaimedEventFilter = TypedEventFilter<TokensClaimedEvent>;

export interface Drop extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DropInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claim(
      _receiver: PromiseOrValue<string>,
      _quantity: PromiseOrValue<BigNumberish>,
      _currency: PromiseOrValue<string>,
      _pricePerToken: PromiseOrValue<BigNumberish>,
      _allowlistProof: IDrop.AllowlistProofStruct,
      _data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimCondition(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { currentStartId: BigNumber; count: BigNumber }
    >;

    getActiveClaimConditionId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getClaimConditionById(
      _conditionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [IClaimCondition.ClaimConditionStructOutput] & {
        condition: IClaimCondition.ClaimConditionStructOutput;
      }
    >;

    getSupplyClaimedByWallet(
      _conditionId: PromiseOrValue<BigNumberish>,
      _claimer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { supplyClaimedByWallet: BigNumber }>;

    setClaimConditions(
      _conditions: IClaimCondition.ClaimConditionStruct[],
      _resetClaimEligibility: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verifyClaim(
      _conditionId: PromiseOrValue<BigNumberish>,
      _claimer: PromiseOrValue<string>,
      _quantity: PromiseOrValue<BigNumberish>,
      _currency: PromiseOrValue<string>,
      _pricePerToken: PromiseOrValue<BigNumberish>,
      _allowlistProof: IDrop.AllowlistProofStruct,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isOverride: boolean }>;
  };

  claim(
    _receiver: PromiseOrValue<string>,
    _quantity: PromiseOrValue<BigNumberish>,
    _currency: PromiseOrValue<string>,
    _pricePerToken: PromiseOrValue<BigNumberish>,
    _allowlistProof: IDrop.AllowlistProofStruct,
    _data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimCondition(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { currentStartId: BigNumber; count: BigNumber }
  >;

  getActiveClaimConditionId(overrides?: CallOverrides): Promise<BigNumber>;

  getClaimConditionById(
    _conditionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IClaimCondition.ClaimConditionStructOutput>;

  getSupplyClaimedByWallet(
    _conditionId: PromiseOrValue<BigNumberish>,
    _claimer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setClaimConditions(
    _conditions: IClaimCondition.ClaimConditionStruct[],
    _resetClaimEligibility: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verifyClaim(
    _conditionId: PromiseOrValue<BigNumberish>,
    _claimer: PromiseOrValue<string>,
    _quantity: PromiseOrValue<BigNumberish>,
    _currency: PromiseOrValue<string>,
    _pricePerToken: PromiseOrValue<BigNumberish>,
    _allowlistProof: IDrop.AllowlistProofStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    claim(
      _receiver: PromiseOrValue<string>,
      _quantity: PromiseOrValue<BigNumberish>,
      _currency: PromiseOrValue<string>,
      _pricePerToken: PromiseOrValue<BigNumberish>,
      _allowlistProof: IDrop.AllowlistProofStruct,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimCondition(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { currentStartId: BigNumber; count: BigNumber }
    >;

    getActiveClaimConditionId(overrides?: CallOverrides): Promise<BigNumber>;

    getClaimConditionById(
      _conditionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IClaimCondition.ClaimConditionStructOutput>;

    getSupplyClaimedByWallet(
      _conditionId: PromiseOrValue<BigNumberish>,
      _claimer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setClaimConditions(
      _conditions: IClaimCondition.ClaimConditionStruct[],
      _resetClaimEligibility: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyClaim(
      _conditionId: PromiseOrValue<BigNumberish>,
      _claimer: PromiseOrValue<string>,
      _quantity: PromiseOrValue<BigNumberish>,
      _currency: PromiseOrValue<string>,
      _pricePerToken: PromiseOrValue<BigNumberish>,
      _allowlistProof: IDrop.AllowlistProofStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "ClaimConditionsUpdated(tuple[],bool)"(
      claimConditions?: null,
      resetEligibility?: null
    ): ClaimConditionsUpdatedEventFilter;
    ClaimConditionsUpdated(
      claimConditions?: null,
      resetEligibility?: null
    ): ClaimConditionsUpdatedEventFilter;

    "TokensClaimed(uint256,address,address,uint256,uint256)"(
      claimConditionIndex?: PromiseOrValue<BigNumberish> | null,
      claimer?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      startTokenId?: null,
      quantityClaimed?: null
    ): TokensClaimedEventFilter;
    TokensClaimed(
      claimConditionIndex?: PromiseOrValue<BigNumberish> | null,
      claimer?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      startTokenId?: null,
      quantityClaimed?: null
    ): TokensClaimedEventFilter;
  };

  estimateGas: {
    claim(
      _receiver: PromiseOrValue<string>,
      _quantity: PromiseOrValue<BigNumberish>,
      _currency: PromiseOrValue<string>,
      _pricePerToken: PromiseOrValue<BigNumberish>,
      _allowlistProof: IDrop.AllowlistProofStruct,
      _data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimCondition(overrides?: CallOverrides): Promise<BigNumber>;

    getActiveClaimConditionId(overrides?: CallOverrides): Promise<BigNumber>;

    getClaimConditionById(
      _conditionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSupplyClaimedByWallet(
      _conditionId: PromiseOrValue<BigNumberish>,
      _claimer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setClaimConditions(
      _conditions: IClaimCondition.ClaimConditionStruct[],
      _resetClaimEligibility: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verifyClaim(
      _conditionId: PromiseOrValue<BigNumberish>,
      _claimer: PromiseOrValue<string>,
      _quantity: PromiseOrValue<BigNumberish>,
      _currency: PromiseOrValue<string>,
      _pricePerToken: PromiseOrValue<BigNumberish>,
      _allowlistProof: IDrop.AllowlistProofStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claim(
      _receiver: PromiseOrValue<string>,
      _quantity: PromiseOrValue<BigNumberish>,
      _currency: PromiseOrValue<string>,
      _pricePerToken: PromiseOrValue<BigNumberish>,
      _allowlistProof: IDrop.AllowlistProofStruct,
      _data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimCondition(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getActiveClaimConditionId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClaimConditionById(
      _conditionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSupplyClaimedByWallet(
      _conditionId: PromiseOrValue<BigNumberish>,
      _claimer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setClaimConditions(
      _conditions: IClaimCondition.ClaimConditionStruct[],
      _resetClaimEligibility: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verifyClaim(
      _conditionId: PromiseOrValue<BigNumberish>,
      _claimer: PromiseOrValue<string>,
      _quantity: PromiseOrValue<BigNumberish>,
      _currency: PromiseOrValue<string>,
      _pricePerToken: PromiseOrValue<BigNumberish>,
      _allowlistProof: IDrop.AllowlistProofStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
