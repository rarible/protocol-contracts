/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  BatchMintMetadata,
  BatchMintMetadataInterface,
} from "../../../../../@rarible/external-contracts/contracts/extension/BatchMintMetadata";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "BatchMintInvalidBatchId",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "BatchMintInvalidTokenId",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "batchId",
        type: "uint256",
      },
    ],
    name: "BatchMintMetadataFrozen",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "_fromTokenId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_toTokenId",
        type: "uint256",
      },
    ],
    name: "BatchMetadataUpdate",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [],
    name: "MetadataFrozen",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "batchFrozen",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getBaseURICount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "getBatchIdAtIndex",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061015b806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80632419f51b1461004657806363b45e2d1461006c5780638304053214610074575b600080fd5b6100596100543660046100f6565b6100a7565b6040519081526020015b60405180910390f35b600054610059565b6100976100823660046100f6565b60026020526000908152604090205460ff1681565b6040519015158152602001610063565b6000805482106100d157604051630793127760e11b81526004810183905260240160405180910390fd5b600082815481106100e4576100e461010f565b90600052602060002001549050919050565b60006020828403121561010857600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fdfea26469706673582212204d89f94a11978fec923334490c6a320364d977f2268cea7ae43eff2bddb32b9564736f6c63430008170033";

type BatchMintMetadataConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BatchMintMetadataConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BatchMintMetadata__factory extends ContractFactory {
  constructor(...args: BatchMintMetadataConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BatchMintMetadata> {
    return super.deploy(overrides || {}) as Promise<BatchMintMetadata>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): BatchMintMetadata {
    return super.attach(address) as BatchMintMetadata;
  }
  override connect(signer: Signer): BatchMintMetadata__factory {
    return super.connect(signer) as BatchMintMetadata__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BatchMintMetadataInterface {
    return new utils.Interface(_abi) as BatchMintMetadataInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BatchMintMetadata {
    return new Contract(address, _abi, signerOrProvider) as BatchMintMetadata;
  }
}
