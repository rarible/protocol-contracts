// SPDX-License-Identifier: Apache-2.0
pragma solidity >=0.4.9 <0.9.0;

// this contract is auto-generated by a manual triggered script in utils/hedera-response-codes-protobuf-parser.js
// the generated contract is using hedera response codes from services version 0.59.0-SNAPSHOT
// https://github.com/hashgraph/hedera-services/blob/main/hapi/hedera-protobufs/services/response_code.proto

library HederaResponseCodes {
    /// The transaction passed the precheck validations.
    int32 internal constant OK = 0;

    /// For any error not handled by specific error codes listed below.
    int32 internal constant INVALID_TRANSACTION = 1;

    /// Payer account does not exist.
    int32 internal constant PAYER_ACCOUNT_NOT_FOUND = 2;

    /// Node Account provided does not match the node account of the node the transaction was submitted to.
    int32 internal constant INVALID_NODE_ACCOUNT = 3;

    /// Pre-Check error when TransactionValidStart + transactionValidDuration is less than current consensus time.
    int32 internal constant TRANSACTION_EXPIRED = 4;

    /// Transaction start time is greater than current consensus time
    int32 internal constant INVALID_TRANSACTION_START = 5;

    /// The given transactionValidDuration was either non-positive, or greater than the maximum valid duration of 180 secs.
    int32 internal constant INVALID_TRANSACTION_DURATION = 6;

    /// The transaction signature is not valid
    int32 internal constant INVALID_SIGNATURE = 7;

    /// Transaction memo size exceeded 100 bytes
    int32 internal constant MEMO_TOO_LONG = 8;

    /// The fee provided in the transaction is insufficient for this type of transaction
    int32 internal constant INSUFFICIENT_TX_FEE = 9;

    /// The payer account has insufficient cryptocurrency to pay the transaction fee
    int32 internal constant INSUFFICIENT_PAYER_BALANCE = 10;

    /// This transaction ID is a duplicate of one that was submitted to this node or reached consensus in the last 180 seconds (receipt period)
    int32 internal constant DUPLICATE_TRANSACTION = 11;

    /// If API is throttled out
    int32 internal constant BUSY = 12;

    /// The API is not currently supported
    int32 internal constant NOT_SUPPORTED = 13;

    /// The file id is invalid or does not exist
    int32 internal constant INVALID_FILE_ID = 14;

    /// The account id is invalid or does not exist
    int32 internal constant INVALID_ACCOUNT_ID = 15;

    /// The contract id is invalid or does not exist
    int32 internal constant INVALID_CONTRACT_ID = 16;

    /// Transaction id is not valid
    int32 internal constant INVALID_TRANSACTION_ID = 17;

    /// Receipt for given transaction id does not exist
    int32 internal constant RECEIPT_NOT_FOUND = 18;

    /// Record for given transaction id does not exist
    int32 internal constant RECORD_NOT_FOUND = 19;

    /// The solidity id is invalid or entity with this solidity id does not exist
    int32 internal constant INVALID_SOLIDITY_ID = 20;

    /// The responding node has submitted the transaction to the network. Its final status is still unknown.
    int32 internal constant UNKNOWN = 21;

    /// The transaction succeeded
    int32 internal constant SUCCESS = 22;

    /// There was a system error and the transaction failed because of invalid request parameters.
    int32 internal constant FAIL_INVALID = 23;

    /// There was a system error while performing fee calculation, reserved for future.
    int32 internal constant FAIL_FEE = 24;

    /// There was a system error while performing balance checks, reserved for future.
    int32 internal constant FAIL_BALANCE = 25;

    /// Key not provided in the transaction body
    int32 internal constant KEY_REQUIRED = 26;

    /// Unsupported algorithm/encoding used for keys in the transaction
    int32 internal constant BAD_ENCODING = 27;

    /// When the account balance is not sufficient for the transfer
    int32 internal constant INSUFFICIENT_ACCOUNT_BALANCE = 28;

    /// During an update transaction when the system is not able to find the Users Solidity address
    int32 internal constant INVALID_SOLIDITY_ADDRESS = 29;

    /// Not enough gas was supplied to execute transaction
    int32 internal constant INSUFFICIENT_GAS = 30;

    /// contract byte code size is over the limit
    int32 internal constant CONTRACT_SIZE_LIMIT_EXCEEDED = 31;

    /// local execution (query) is requested for a function which changes state
    int32 internal constant LOCAL_CALL_MODIFICATION_EXCEPTION = 32;

    /// Contract REVERT OPCODE executed
    int32 internal constant CONTRACT_REVERT_EXECUTED = 33;

    /// For any contract execution related error not handled by specific error codes listed above.
    int32 internal constant CONTRACT_EXECUTION_EXCEPTION = 34;

    /// In Query validation, account with +ve(amount) value should be Receiving node account, the receiver account should be only one account in the list
    int32 internal constant INVALID_RECEIVING_NODE_ACCOUNT = 35;

    /// Header is missing in Query request
    int32 internal constant MISSING_QUERY_HEADER = 36;

    /// The update of the account failed
    int32 internal constant ACCOUNT_UPDATE_FAILED = 37;

    /// Provided key encoding was not supported by the system
    int32 internal constant INVALID_KEY_ENCODING = 38;

    /// null solidity address
    int32 internal constant NULL_SOLIDITY_ADDRESS = 39;

    /// update of the contract failed
    int32 internal constant CONTRACT_UPDATE_FAILED = 40;

    /// the query header is invalid
    int32 internal constant INVALID_QUERY_HEADER = 41;

    /// Invalid fee submitted
    int32 internal constant INVALID_FEE_SUBMITTED = 42;

    /// Payer signature is invalid
    int32 internal constant INVALID_PAYER_SIGNATURE = 43;

    /// The keys were not provided in the request.
    int32 internal constant KEY_NOT_PROVIDED = 44;

    /// Expiration time provided in the transaction was invalid.
    int32 internal constant INVALID_EXPIRATION_TIME = 45;

    /// WriteAccess Control Keys are not provided for the file
    int32 internal constant NO_WACL_KEY = 46;

    /// The contents of file are provided as empty.
    int32 internal constant FILE_CONTENT_EMPTY = 47;

    /// The crypto transfer credit and debit do not sum equal to 0
    int32 internal constant INVALID_ACCOUNT_AMOUNTS = 48;

    /// Transaction body provided is empty
    int32 internal constant EMPTY_TRANSACTION_BODY = 49;

    /// Invalid transaction body provided
    int32 internal constant INVALID_TRANSACTION_BODY = 50;

    /// the type of key (base ed25519 key, KeyList, or ThresholdKey) does not match the type of signature (base ed25519 signature, SignatureList, or ThresholdKeySignature)
    int32 internal constant INVALID_SIGNATURE_TYPE_MISMATCHING_KEY = 51;

    /// the number of key (KeyList, or ThresholdKey) does not match that of signature (SignatureList, or ThresholdKeySignature). e.g. if a keyList has 3 base keys, then the corresponding signatureList should also have 3 base signatures.
    int32 internal constant INVALID_SIGNATURE_COUNT_MISMATCHING_KEY = 52;

    /// the livehash body is empty
    int32 internal constant EMPTY_LIVE_HASH_BODY = 53;

    /// the livehash data is missing
    int32 internal constant EMPTY_LIVE_HASH = 54;

    /// the keys for a livehash are missing
    int32 internal constant EMPTY_LIVE_HASH_KEYS = 55;

    /// the livehash data is not the output of a SHA-384 digest
    int32 internal constant INVALID_LIVE_HASH_SIZE = 56;

    /// the query body is empty
    int32 internal constant EMPTY_QUERY_BODY = 57;

    /// the crypto livehash query is empty
    int32 internal constant EMPTY_LIVE_HASH_QUERY = 58;

    /// the livehash is not present
    int32 internal constant LIVE_HASH_NOT_FOUND = 59;

    /// the account id passed has not yet been created.
    int32 internal constant ACCOUNT_ID_DOES_NOT_EXIST = 60;

    /// the livehash already exists for a given account
    int32 internal constant LIVE_HASH_ALREADY_EXISTS = 61;

    /// File WACL keys are invalid
    int32 internal constant INVALID_FILE_WACL = 62;

    /// Serialization failure
    int32 internal constant SERIALIZATION_FAILED = 63;

    /// The size of the Transaction is greater than transactionMaxBytes
    int32 internal constant TRANSACTION_OVERSIZE = 64;

    /// The Transaction has more than 50 levels
    int32 internal constant TRANSACTION_TOO_MANY_LAYERS = 65;

    /// Contract is marked as deleted
    int32 internal constant CONTRACT_DELETED = 66;

    /// the platform node is either disconnected or lagging behind.
    int32 internal constant PLATFORM_NOT_ACTIVE = 67;

    /// one public key matches more than one prefixes on the signature map
    int32 internal constant KEY_PREFIX_MISMATCH = 68;

    /// transaction not created by platform due to large backlog
    int32 internal constant PLATFORM_TRANSACTION_NOT_CREATED = 69;

    /// auto renewal period is not a positive number of seconds
    int32 internal constant INVALID_RENEWAL_PERIOD = 70;

    /// the response code when a smart contract id is passed for a crypto API request
    int32 internal constant INVALID_PAYER_ACCOUNT_ID = 71;

    /// the account has been marked as deleted
    int32 internal constant ACCOUNT_DELETED = 72;

    /// the file has been marked as deleted
    int32 internal constant FILE_DELETED = 73;

    /// same accounts repeated in the transfer account list
    int32 internal constant ACCOUNT_REPEATED_IN_ACCOUNT_AMOUNTS = 74;

    /// attempting to set negative balance value for crypto account
    int32 internal constant SETTING_NEGATIVE_ACCOUNT_BALANCE = 75;

    /// when deleting smart contract that has crypto balance either transfer account or transfer smart contract is required
    int32 internal constant OBTAINER_REQUIRED = 76;

    /// when deleting smart contract that has crypto balance you can not use the same contract id as transferContractId as the one being deleted
    int32 internal constant OBTAINER_SAME_CONTRACT_ID = 77;

    /// transferAccountId or transferContractId specified for contract delete does not exist
    int32 internal constant OBTAINER_DOES_NOT_EXIST = 78;

    /// attempting to modify (update or delete a immutable smart contract, i.e. one created without a admin key)
    int32 internal constant MODIFYING_IMMUTABLE_CONTRACT = 79;

    /// Unexpected exception thrown by file system functions
    int32 internal constant FILE_SYSTEM_EXCEPTION = 80;

    /// the duration is not a subset of [MINIMUM_AUTORENEW_DURATION,MAXIMUM_AUTORENEW_DURATION]
    int32 internal constant AUTORENEW_DURATION_NOT_IN_RANGE = 81;

    /// Decoding the smart contract binary to a byte array failed. Check that the input is a valid hex string.
    int32 internal constant ERROR_DECODING_BYTESTRING = 82;

    /// File to create a smart contract was of length zero
    int32 internal constant CONTRACT_FILE_EMPTY = 83;

    /// Bytecode for smart contract is of length zero
    int32 internal constant CONTRACT_BYTECODE_EMPTY = 84;

    /// Attempt to set negative initial balance
    int32 internal constant INVALID_INITIAL_BALANCE = 85;

    /// Attempt to set negative receive record threshold
    int32 internal constant INVALID_RECEIVE_RECORD_THRESHOLD = 86;

    /// Attempt to set negative send record threshold
    int32 internal constant INVALID_SEND_RECORD_THRESHOLD = 87;

    /// Special Account Operations should be performed by only Genesis account, return this code if it is not Genesis Account
    int32 internal constant ACCOUNT_IS_NOT_GENESIS_ACCOUNT = 88;

    /// The fee payer account doesn't have permission to submit such Transaction
    int32 internal constant PAYER_ACCOUNT_UNAUTHORIZED = 89;

    /// FreezeTransactionBody is invalid
    int32 internal constant INVALID_FREEZE_TRANSACTION_BODY = 90;

    /// FreezeTransactionBody does not exist
    int32 internal constant FREEZE_TRANSACTION_BODY_NOT_FOUND = 91;

    /// Exceeded the number of accounts (both from and to) allowed for crypto transfer list
    int32 internal constant TRANSFER_LIST_SIZE_LIMIT_EXCEEDED = 92;

    /// Smart contract result size greater than specified maxResultSize
    int32 internal constant RESULT_SIZE_LIMIT_EXCEEDED = 93;

    /// The payer account is not a special account(account 0.0.55)
    int32 internal constant NOT_SPECIAL_ACCOUNT = 94;

    /// Negative gas was offered in smart contract call
    int32 internal constant CONTRACT_NEGATIVE_GAS = 95;

    /// Negative value / initial balance was specified in a smart contract call / create
    int32 internal constant CONTRACT_NEGATIVE_VALUE = 96;

    /// Failed to update fee file
    int32 internal constant INVALID_FEE_FILE = 97;

    /// Failed to update exchange rate file
    int32 internal constant INVALID_EXCHANGE_RATE_FILE = 98;

    /// Payment tendered for contract local call cannot cover both the fee and the gas
    int32 internal constant INSUFFICIENT_LOCAL_CALL_GAS = 99;

    /// Entities with Entity ID below 1000 are not allowed to be deleted
    int32 internal constant ENTITY_NOT_ALLOWED_TO_DELETE = 100;

    /// Violating one of these rules: 1) treasury account can update all entities below 0.0.1000, 2) account 0.0.50 can update all entities from 0.0.51 - 0.0.80, 3) Network Function Master Account A/c 0.0.50 - Update all Network Function accounts & perform all the Network Functions listed below, 4) Network Function Accounts: i) A/c 0.0.55 - Update Address Book files (0.0.101/102), ii) A/c 0.0.56 - Update Fee schedule (0.0.111), iii) A/c 0.0.57 - Update Exchange Rate (0.0.112).
    int32 internal constant AUTHORIZATION_FAILED = 101;

    /// Fee Schedule Proto uploaded but not valid (append or update is required)
    int32 internal constant FILE_UPLOADED_PROTO_INVALID = 102;

    /// Fee Schedule Proto uploaded but not valid (append or update is required)
    int32 internal constant FILE_UPLOADED_PROTO_NOT_SAVED_TO_DISK = 103;

    /// Fee Schedule Proto File Part uploaded
    int32 internal constant FEE_SCHEDULE_FILE_PART_UPLOADED = 104;

    /// The change on Exchange Rate exceeds Exchange_Rate_Allowed_Percentage
    int32 internal constant EXCHANGE_RATE_CHANGE_LIMIT_EXCEEDED = 105;

    /// Contract permanent storage exceeded the currently allowable limit
    int32 internal constant MAX_CONTRACT_STORAGE_EXCEEDED = 106;

    /// Transfer Account should not be same as Account to be deleted
    int32 internal constant TRANSFER_ACCOUNT_SAME_AS_DELETE_ACCOUNT = 107;

    int32 internal constant TOTAL_LEDGER_BALANCE_INVALID = 108;

    /// The expiration date/time on a smart contract may not be reduced
    int32 internal constant EXPIRATION_REDUCTION_NOT_ALLOWED = 110;

    /// Gas exceeded currently allowable gas limit per transaction
    int32 internal constant MAX_GAS_LIMIT_EXCEEDED = 111;

    /// File size exceeded the currently allowable limit
    int32 internal constant MAX_FILE_SIZE_EXCEEDED = 112;

    /// When a valid signature is not provided for operations on account with receiverSigRequired=true
    int32 internal constant RECEIVER_SIG_REQUIRED = 113;

    /// The Topic ID specified is not in the system.
    int32 internal constant INVALID_TOPIC_ID = 150;

    /// A provided admin key was invalid. Verify the bytes for an Ed25519 public key are exactly 32 bytes; and the bytes for a compressed ECDSA(secp256k1) key are exactly 33 bytes, with the first byte either 0x02 or 0x03..
    int32 internal constant INVALID_ADMIN_KEY = 155;

    /// A provided submit key was invalid.
    int32 internal constant INVALID_SUBMIT_KEY = 156;

    /// An attempted operation was not authorized (ie - a deleteTopic for a topic with no adminKey).
    int32 internal constant UNAUTHORIZED = 157;

    /// A ConsensusService message is empty.
    int32 internal constant INVALID_TOPIC_MESSAGE = 158;

    /// The autoRenewAccount specified is not a valid, active account.
    int32 internal constant INVALID_AUTORENEW_ACCOUNT = 159;

    /// An adminKey was not specified on the topic, so there must not be an autoRenewAccount.
    int32 internal constant AUTORENEW_ACCOUNT_NOT_ALLOWED = 160;

    /// The topic has expired, was not automatically renewed, and is in a 7 day grace period before the topic will be deleted unrecoverably. This error response code will not be returned until autoRenew functionality is supported by HAPI.
    int32 internal constant TOPIC_EXPIRED = 162;

    /// chunk number must be from 1 to total (chunks) inclusive.
    int32 internal constant INVALID_CHUNK_NUMBER = 163;

    /// For every chunk, the payer account that is part of initialTransactionID must match the Payer Account of this transaction. The entire initialTransactionID should match the transactionID of the first chunk, but this is not checked or enforced by Hedera except when the chunk number is 1.
    int32 internal constant INVALID_CHUNK_TRANSACTION_ID = 164;

    /// Account is frozen and cannot transact with the token
    int32 internal constant ACCOUNT_FROZEN_FOR_TOKEN = 165;

    /// An involved account already has more than <tt>tokens.maxPerAccount</tt> associations with non-deleted tokens.
    int32 internal constant TOKENS_PER_ACCOUNT_LIMIT_EXCEEDED = 166;

    /// The token is invalid or does not exist
    int32 internal constant INVALID_TOKEN_ID = 167;

    /// Invalid token decimals
    int32 internal constant INVALID_TOKEN_DECIMALS = 168;

    /// Invalid token initial supply
    int32 internal constant INVALID_TOKEN_INITIAL_SUPPLY = 169;

    /// Treasury Account does not exist or is deleted
    int32 internal constant INVALID_TREASURY_ACCOUNT_FOR_TOKEN = 170;

    /// Token Symbol is not UTF-8 capitalized alphabetical string
    int32 internal constant INVALID_TOKEN_SYMBOL = 171;

    /// Freeze key is not set on token
    int32 internal constant TOKEN_HAS_NO_FREEZE_KEY = 172;

    /// Amounts in transfer list are not net zero
    int32 internal constant TRANSFERS_NOT_ZERO_SUM_FOR_TOKEN = 173;

    /// A token symbol was not provided
    int32 internal constant MISSING_TOKEN_SYMBOL = 174;

    /// The provided token symbol was too long
    int32 internal constant TOKEN_SYMBOL_TOO_LONG = 175;

    /// KYC must be granted and account does not have KYC granted
    int32 internal constant ACCOUNT_KYC_NOT_GRANTED_FOR_TOKEN = 176;

    /// KYC key is not set on token
    int32 internal constant TOKEN_HAS_NO_KYC_KEY = 177;

    /// Token balance is not sufficient for the transaction
    int32 internal constant INSUFFICIENT_TOKEN_BALANCE = 178;

    /// Token transactions cannot be executed on deleted token
    int32 internal constant TOKEN_WAS_DELETED = 179;

    /// Supply key is not set on token
    int32 internal constant TOKEN_HAS_NO_SUPPLY_KEY = 180;

    /// Wipe key is not set on token
    int32 internal constant TOKEN_HAS_NO_WIPE_KEY = 181;

    /// The requested token mint amount would cause an invalid total supply
    int32 internal constant INVALID_TOKEN_MINT_AMOUNT = 182;

    /// The requested token burn amount would cause an invalid total supply
    int32 internal constant INVALID_TOKEN_BURN_AMOUNT = 183;

    /// A required token-account relationship is missing
    int32 internal constant TOKEN_NOT_ASSOCIATED_TO_ACCOUNT = 184;

    /// The target of a wipe operation was the token treasury account
    int32 internal constant CANNOT_WIPE_TOKEN_TREASURY_ACCOUNT = 185;

    /// The provided KYC key was invalid.
    int32 internal constant INVALID_KYC_KEY = 186;

    /// The provided wipe key was invalid.
    int32 internal constant INVALID_WIPE_KEY = 187;

    /// The provided freeze key was invalid.
    int32 internal constant INVALID_FREEZE_KEY = 188;

    /// The provided supply key was invalid.
    int32 internal constant INVALID_SUPPLY_KEY = 189;

    /// Token Name is not provided
    int32 internal constant MISSING_TOKEN_NAME = 190;

    /// Token Name is too long
    int32 internal constant TOKEN_NAME_TOO_LONG = 191;

    /// The provided wipe amount must not be negative, zero or bigger than the token holder balance
    int32 internal constant INVALID_WIPING_AMOUNT = 192;

    /// Token does not have Admin key set, thus update/delete transactions cannot be performed
    int32 internal constant TOKEN_IS_IMMUTABLE = 193;

    /// An <tt>associateToken</tt> operation specified a token already associated to the account
    int32 internal constant TOKEN_ALREADY_ASSOCIATED_TO_ACCOUNT = 194;

    /// An attempted operation is invalid until all token balances for the target account are zero
    int32 internal constant TRANSACTION_REQUIRES_ZERO_TOKEN_BALANCES = 195;

    /// An attempted operation is invalid because the account is a treasury
    int32 internal constant ACCOUNT_IS_TREASURY = 196;

    /// Same TokenIDs present in the token list
    int32 internal constant TOKEN_ID_REPEATED_IN_TOKEN_LIST = 197;

    /// Exceeded the number of token transfers (both from and to) allowed for token transfer list
    int32 internal constant TOKEN_TRANSFER_LIST_SIZE_LIMIT_EXCEEDED = 198;

    /// TokenTransfersTransactionBody has no TokenTransferList
    int32 internal constant EMPTY_TOKEN_TRANSFER_BODY = 199;

    /// TokenTransfersTransactionBody has a TokenTransferList with no AccountAmounts
    int32 internal constant EMPTY_TOKEN_TRANSFER_ACCOUNT_AMOUNTS = 200;

    /// The Scheduled entity does not exist; or has now expired, been deleted, or been executed
    int32 internal constant INVALID_SCHEDULE_ID = 201;

    /// The Scheduled entity cannot be modified. Admin key not set
    int32 internal constant SCHEDULE_IS_IMMUTABLE = 202;

    /// The provided Scheduled Payer does not exist
    int32 internal constant INVALID_SCHEDULE_PAYER_ID = 203;

    /// The Schedule Create Transaction TransactionID account does not exist
    int32 internal constant INVALID_SCHEDULE_ACCOUNT_ID = 204;

    /// The provided sig map did not contain any new valid signatures from required signers of the scheduled transaction
    int32 internal constant NO_NEW_VALID_SIGNATURES = 205;

    /// The required signers for a scheduled transaction cannot be resolved, for example because they do not exist or have been deleted
    int32 internal constant UNRESOLVABLE_REQUIRED_SIGNERS = 206;

    /// Only whitelisted transaction types may be scheduled
    int32 internal constant SCHEDULED_TRANSACTION_NOT_IN_WHITELIST = 207;

    /// At least one of the signatures in the provided sig map did not represent a valid signature for any required signer
    int32 internal constant SOME_SIGNATURES_WERE_INVALID = 208;

    /// The scheduled field in the TransactionID may not be set to true
    int32 internal constant TRANSACTION_ID_FIELD_NOT_ALLOWED = 209;

    /// A schedule already exists with the same identifying fields of an attempted ScheduleCreate (that is, all fields other than scheduledPayerAccountID)
    int32 internal constant IDENTICAL_SCHEDULE_ALREADY_CREATED = 210;

    /// A string field in the transaction has a UTF-8 encoding with the prohibited zero byte
    int32 internal constant INVALID_ZERO_BYTE_IN_STRING = 211;

    /// A schedule being signed or deleted has already been deleted
    int32 internal constant SCHEDULE_ALREADY_DELETED = 212;

    /// A schedule being signed or deleted has already been executed
    int32 internal constant SCHEDULE_ALREADY_EXECUTED = 213;

    /// ConsensusSubmitMessage request's message size is larger than allowed.
    int32 internal constant MESSAGE_SIZE_TOO_LARGE = 214;

    /// An operation was assigned to more than one throttle group in a given bucket
    int32 internal constant OPERATION_REPEATED_IN_BUCKET_GROUPS = 215;

    /// The capacity needed to satisfy all opsPerSec groups in a bucket overflowed a signed 8-byte integral type
    int32 internal constant BUCKET_CAPACITY_OVERFLOW = 216;

    /// Given the network size in the address book, the node-level capacity for an operation would never be enough to accept a single request; usually means a bucket burstPeriod should be increased
    int32 internal constant NODE_CAPACITY_NOT_SUFFICIENT_FOR_OPERATION = 217;

    /// A bucket was defined without any throttle groups
    int32 internal constant BUCKET_HAS_NO_THROTTLE_GROUPS = 218;

    /// A throttle group was granted zero opsPerSec
    int32 internal constant THROTTLE_GROUP_HAS_ZERO_OPS_PER_SEC = 219;

    /// The throttle definitions file was updated, but some supported operations were not assigned a bucket
    int32 internal constant SUCCESS_BUT_MISSING_EXPECTED_OPERATION = 220;

    /// The new contents for the throttle definitions system file were not valid protobuf
    int32 internal constant UNPARSEABLE_THROTTLE_DEFINITIONS = 221;

    /// The new throttle definitions system file were invalid, and no more specific error could be divined
    int32 internal constant INVALID_THROTTLE_DEFINITIONS = 222;

    /// The transaction references an account which has passed its expiration without renewal funds available, and currently remains in the ledger only because of the grace period given to expired entities
    int32 internal constant ACCOUNT_EXPIRED_AND_PENDING_REMOVAL = 223;

    /// Invalid token max supply
    int32 internal constant INVALID_TOKEN_MAX_SUPPLY = 224;

    /// Invalid token nft serial number
    int32 internal constant INVALID_TOKEN_NFT_SERIAL_NUMBER = 225;

    /// Invalid nft id
    int32 internal constant INVALID_NFT_ID = 226;

    /// Nft metadata is too long
    int32 internal constant METADATA_TOO_LONG = 227;

    /// Repeated operations count exceeds the limit
    int32 internal constant BATCH_SIZE_LIMIT_EXCEEDED = 228;

    /// The range of data to be gathered is out of the set boundaries
    int32 internal constant INVALID_QUERY_RANGE = 229;

    /// A custom fractional fee set a denominator of zero
    int32 internal constant FRACTION_DIVIDES_BY_ZERO = 230;

    /// The transaction payer could not afford a custom fee
    int32 internal constant INSUFFICIENT_PAYER_BALANCE_FOR_CUSTOM_FEE = 231;

    /// More than 10 custom fees were specified
    int32 internal constant CUSTOM_FEES_LIST_TOO_LONG = 232;

    /// Any of the feeCollector accounts for customFees is invalid
    int32 internal constant INVALID_CUSTOM_FEE_COLLECTOR = 233;

    /// Any of the token Ids in customFees is invalid
    int32 internal constant INVALID_TOKEN_ID_IN_CUSTOM_FEES = 234;

    /// Any of the token Ids in customFees are not associated to feeCollector
    int32 internal constant TOKEN_NOT_ASSOCIATED_TO_FEE_COLLECTOR = 235;

    /// A token cannot have more units minted due to its configured supply ceiling
    int32 internal constant TOKEN_MAX_SUPPLY_REACHED = 236;

    /// The transaction attempted to move an NFT serial number from an account other than its owner
    int32 internal constant SENDER_DOES_NOT_OWN_NFT_SERIAL_NO = 237;

    /// A custom fee schedule entry did not specify either a fixed or fractional fee
    int32 internal constant CUSTOM_FEE_NOT_FULLY_SPECIFIED = 238;

    /// Only positive fees may be assessed at this time
    int32 internal constant CUSTOM_FEE_MUST_BE_POSITIVE = 239;

    /// Fee schedule key is not set on token
    int32 internal constant TOKEN_HAS_NO_FEE_SCHEDULE_KEY = 240;

    /// A fractional custom fee exceeded the range of a 64-bit signed integer
    int32 internal constant CUSTOM_FEE_OUTSIDE_NUMERIC_RANGE = 241;

    /// A royalty cannot exceed the total fungible value exchanged for an NFT
    int32 internal constant ROYALTY_FRACTION_CANNOT_EXCEED_ONE = 242;

    /// Each fractional custom fee must have its maximum_amount, if specified, at least its minimum_amount
    int32 internal constant FRACTIONAL_FEE_MAX_AMOUNT_LESS_THAN_MIN_AMOUNT = 243;

    /// A fee schedule update tried to clear the custom fees from a token whose fee schedule was already empty
    int32 internal constant CUSTOM_SCHEDULE_ALREADY_HAS_NO_FEES = 244;

    /// Only tokens of type FUNGIBLE_COMMON can be used to as fee schedule denominations
    int32 internal constant CUSTOM_FEE_DENOMINATION_MUST_BE_FUNGIBLE_COMMON = 245;

    /// Only tokens of type FUNGIBLE_COMMON can have fractional fees
    int32 internal constant CUSTOM_FRACTIONAL_FEE_ONLY_ALLOWED_FOR_FUNGIBLE_COMMON = 246;

    /// The provided custom fee schedule key was invalid
    int32 internal constant INVALID_CUSTOM_FEE_SCHEDULE_KEY = 247;

    /// The requested token mint metadata was invalid
    int32 internal constant INVALID_TOKEN_MINT_METADATA = 248;

    /// The requested token burn metadata was invalid
    int32 internal constant INVALID_TOKEN_BURN_METADATA = 249;

    /// The treasury for a unique token cannot be changed until it owns no NFTs
    int32 internal constant CURRENT_TREASURY_STILL_OWNS_NFTS = 250;

    /// An account cannot be dissociated from a unique token if it owns NFTs for the token
    int32 internal constant ACCOUNT_STILL_OWNS_NFTS = 251;

    /// A NFT can only be burned when owned by the unique token's treasury
    int32 internal constant TREASURY_MUST_OWN_BURNED_NFT = 252;

    /// An account did not own the NFT to be wiped
    int32 internal constant ACCOUNT_DOES_NOT_OWN_WIPED_NFT = 253;

    /// An AccountAmount token transfers list referenced a token type other than FUNGIBLE_COMMON
    int32 internal constant ACCOUNT_AMOUNT_TRANSFERS_ONLY_ALLOWED_FOR_FUNGIBLE_COMMON = 254;

    /// All the NFTs allowed in the current price regime have already been minted
    int32 internal constant MAX_NFTS_IN_PRICE_REGIME_HAVE_BEEN_MINTED = 255;

    /// The payer account has been marked as deleted
    int32 internal constant PAYER_ACCOUNT_DELETED = 256;

    /// The reference chain of custom fees for a transferred token exceeded the maximum length of 2
    int32 internal constant CUSTOM_FEE_CHARGING_EXCEEDED_MAX_RECURSION_DEPTH = 257;

    /// More than 20 balance adjustments were to satisfy a CryptoTransfer and its implied custom fee payments
    int32 internal constant CUSTOM_FEE_CHARGING_EXCEEDED_MAX_ACCOUNT_AMOUNTS = 258;

    /// The sender account in the token transfer transaction could not afford a custom fee
    int32 internal constant INSUFFICIENT_SENDER_ACCOUNT_BALANCE_FOR_CUSTOM_FEE = 259;

    /// Currently no more than 4,294,967,295 NFTs may be minted for a given unique token type
    int32 internal constant SERIAL_NUMBER_LIMIT_REACHED = 260;

    /// Only tokens of type NON_FUNGIBLE_UNIQUE can have royalty fees
    int32 internal constant CUSTOM_ROYALTY_FEE_ONLY_ALLOWED_FOR_NON_FUNGIBLE_UNIQUE = 261;

    /// The account has reached the limit on the automatic associations count.
    int32 internal constant NO_REMAINING_AUTOMATIC_ASSOCIATIONS = 262;

    /// Already existing automatic associations are more than the new maximum automatic associations.
    int32 internal constant EXISTING_AUTOMATIC_ASSOCIATIONS_EXCEED_GIVEN_LIMIT = 263;

    /// Cannot set the number of automatic associations for an account more than the maximum allowed token associations <tt>tokens.maxPerAccount</tt>.
    int32 internal constant REQUESTED_NUM_AUTOMATIC_ASSOCIATIONS_EXCEEDS_ASSOCIATION_LIMIT = 264;

    /// Token is paused. This Token cannot be a part of any kind of Transaction until unpaused.
    int32 internal constant TOKEN_IS_PAUSED = 265;

    /// Pause key is not set on token
    int32 internal constant TOKEN_HAS_NO_PAUSE_KEY = 266;

    /// The provided pause key was invalid
    int32 internal constant INVALID_PAUSE_KEY = 267;

    /// The update file in a freeze transaction body must exist.
    int32 internal constant FREEZE_UPDATE_FILE_DOES_NOT_EXIST = 268;

    /// The hash of the update file in a freeze transaction body must match the in-memory hash.
    int32 internal constant FREEZE_UPDATE_FILE_HASH_DOES_NOT_MATCH = 269;

    /// A FREEZE_UPGRADE transaction was handled with no previous update prepared.
    int32 internal constant NO_UPGRADE_HAS_BEEN_PREPARED = 270;

    /// A FREEZE_ABORT transaction was handled with no scheduled freeze.
    int32 internal constant NO_FREEZE_IS_SCHEDULED = 271;

    /// The update file hash when handling a FREEZE_UPGRADE transaction differs from the file hash at the time of handling the PREPARE_UPGRADE transaction.
    int32 internal constant UPDATE_FILE_HASH_CHANGED_SINCE_PREPARE_UPGRADE = 272;

    /// The given freeze start time was in the (consensus) past.
    int32 internal constant FREEZE_START_TIME_MUST_BE_FUTURE = 273;

    /// The prepared update file cannot be updated or appended until either the upgrade has been completed, or a FREEZE_ABORT has been handled.
    int32 internal constant PREPARED_UPDATE_FILE_IS_IMMUTABLE = 274;

    /// Once a freeze is scheduled, it must be aborted before any other type of freeze can can be performed.
    int32 internal constant FREEZE_ALREADY_SCHEDULED = 275;

    /// If an NMT upgrade has been prepared, the following operation must be a FREEZE_UPGRADE. (To issue a FREEZE_ONLY, submit a FREEZE_ABORT first.)
    int32 internal constant FREEZE_UPGRADE_IN_PROGRESS = 276;

    /// If an NMT upgrade has been prepared, the subsequent FREEZE_UPGRADE transaction must confirm the id of the file to be used in the upgrade.
    int32 internal constant UPDATE_FILE_ID_DOES_NOT_MATCH_PREPARED = 277;

    /// If an NMT upgrade has been prepared, the subsequent FREEZE_UPGRADE transaction must confirm the hash of the file to be used in the upgrade.
    int32 internal constant UPDATE_FILE_HASH_DOES_NOT_MATCH_PREPARED = 278;

    /// Consensus throttle did not allow execution of this transaction. System is throttled at consensus level.
    int32 internal constant CONSENSUS_GAS_EXHAUSTED = 279;

    /// A precompiled contract succeeded, but was later reverted.
    int32 internal constant REVERTED_SUCCESS = 280;

    /// All contract storage allocated to the current price regime has been consumed.
    int32 internal constant MAX_STORAGE_IN_PRICE_REGIME_HAS_BEEN_USED = 281;

    /// An alias used in a CryptoTransfer transaction is not the serialization of a primitive Key message--that is, a Key with a single Ed25519 or ECDSA(secp256k1) public key and no unknown protobuf fields.
    int32 internal constant INVALID_ALIAS_KEY = 282;

    /// A fungible token transfer expected a different number of decimals than the involved type actually has.
    int32 internal constant UNEXPECTED_TOKEN_DECIMALS = 283;

    /// The proxy account id is invalid or does not exist.
    int32 internal constant INVALID_PROXY_ACCOUNT_ID = 284;

    /// The transfer account id in CryptoDelete transaction is invalid or does not exist.
    int32 internal constant INVALID_TRANSFER_ACCOUNT_ID = 285;

    /// The fee collector account id in TokenFeeScheduleUpdate is invalid or does not exist.
    int32 internal constant INVALID_FEE_COLLECTOR_ACCOUNT_ID = 286;

    /// The alias already set on an account cannot be updated using CryptoUpdate transaction.
    int32 internal constant ALIAS_IS_IMMUTABLE = 287;

    /// An approved allowance specifies a spender account that is the same as the hbar/token owner account.
    int32 internal constant SPENDER_ACCOUNT_SAME_AS_OWNER = 288;

    /// The establishment or adjustment of an approved allowance cause the token allowance to exceed the token maximum supply.
    int32 internal constant AMOUNT_EXCEEDS_TOKEN_MAX_SUPPLY = 289;

    /// The specified amount for an approved allowance cannot be negative.
    int32 internal constant NEGATIVE_ALLOWANCE_AMOUNT = 290;

    /// The approveForAll flag cannot be set for a fungible token.
    int32 internal constant CANNOT_APPROVE_FOR_ALL_FUNGIBLE_COMMON = 291;

    /// The spender does not have an existing approved allowance with the hbar/token owner.
    int32 internal constant SPENDER_DOES_NOT_HAVE_ALLOWANCE = 292;

    /// The transfer amount exceeds the current approved allowance for the spender account.
    int32 internal constant AMOUNT_EXCEEDS_ALLOWANCE = 293;

    /// The payer account of an approveAllowances or adjustAllowance transaction is attempting to go beyond the maximum allowed number of allowances.
    int32 internal constant MAX_ALLOWANCES_EXCEEDED = 294;

    /// No allowances have been specified in the approval transaction.
    int32 internal constant EMPTY_ALLOWANCES = 295;

    /// Spender is repeated more than once in Crypto or Token or NFT allowance lists in a single CryptoApproveAllowance transaction.
    int32 internal constant SPENDER_ACCOUNT_REPEATED_IN_ALLOWANCES = 296;

    /// Serial numbers are repeated in nft allowance for a single spender account
    int32 internal constant REPEATED_SERIAL_NUMS_IN_NFT_ALLOWANCES = 297;

    /// Fungible common token used in NFT allowances
    int32 internal constant FUNGIBLE_TOKEN_IN_NFT_ALLOWANCES = 298;

    /// Non fungible token used in fungible token allowances
    int32 internal constant NFT_IN_FUNGIBLE_TOKEN_ALLOWANCES = 299;

    /// The account id specified as the owner is invalid or does not exist.
    int32 internal constant INVALID_ALLOWANCE_OWNER_ID = 300;

    /// The account id specified as the spender is invalid or does not exist.
    int32 internal constant INVALID_ALLOWANCE_SPENDER_ID = 301;

    /// [Deprecated] If the CryptoDeleteAllowance transaction has repeated crypto or token or Nft allowances to delete.
    int32 internal constant REPEATED_ALLOWANCES_TO_DELETE = 302;

    /// If the account Id specified as the delegating spender is invalid or does not exist.
    int32 internal constant INVALID_DELEGATING_SPENDER = 303;

    /// The delegating Spender cannot grant approveForAll allowance on a NFT token type for another spender.
    int32 internal constant DELEGATING_SPENDER_CANNOT_GRANT_APPROVE_FOR_ALL = 304;

    /// The delegating Spender cannot grant allowance on a NFT serial for another spender as it doesnt not have approveForAll granted on token-owner.
    int32 internal constant DELEGATING_SPENDER_DOES_NOT_HAVE_APPROVE_FOR_ALL = 305;

    /// The scheduled transaction could not be created because it's expiration_time was too far in the future.
    int32 internal constant SCHEDULE_EXPIRATION_TIME_TOO_FAR_IN_FUTURE = 306;

    /// The scheduled transaction could not be created because it's expiration_time was less than or equal to the consensus time.
    int32 internal constant SCHEDULE_EXPIRATION_TIME_MUST_BE_HIGHER_THAN_CONSENSUS_TIME = 307;

    /// The scheduled transaction could not be created because it would cause throttles to be violated on the specified expiration_time.
    int32 internal constant SCHEDULE_FUTURE_THROTTLE_EXCEEDED = 308;

    /// The scheduled transaction could not be created because it would cause the gas limit to be violated on the specified expiration_time.
    int32 internal constant SCHEDULE_FUTURE_GAS_LIMIT_EXCEEDED = 309;

    /// The ethereum transaction either failed parsing or failed signature validation, or some other EthereumTransaction error not covered by another response code.
    int32 internal constant INVALID_ETHEREUM_TRANSACTION = 310;

    /// EthereumTransaction was signed against a chainId that this network does not support.
    int32 internal constant WRONG_CHAIN_ID = 311;

    /// This transaction specified an ethereumNonce that is not the current ethereumNonce of the account.
    int32 internal constant WRONG_NONCE = 312;

    /// The ethereum transaction specified an access list, which the network does not support.
    int32 internal constant ACCESS_LIST_UNSUPPORTED = 313;

    /// A schedule being signed or deleted has passed it's expiration date and is pending execution if needed and then expiration.
    int32 internal constant SCHEDULE_PENDING_EXPIRATION = 314;

    /// A selfdestruct or ContractDelete targeted a contract that is a token treasury.
    int32 internal constant CONTRACT_IS_TOKEN_TREASURY = 315;

    /// A selfdestruct or ContractDelete targeted a contract with non-zero token balances.
    int32 internal constant CONTRACT_HAS_NON_ZERO_TOKEN_BALANCES = 316;

    /// A contract referenced by a transaction is "detached"; that is, expired and lacking any hbar funds for auto-renewal payment---but still within its post-expiry grace period.
    int32 internal constant CONTRACT_EXPIRED_AND_PENDING_REMOVAL = 317;

    /// A ContractUpdate requested removal of a contract's auto-renew account, but that contract has no auto-renew account.
    int32 internal constant CONTRACT_HAS_NO_AUTO_RENEW_ACCOUNT = 318;

    /// A delete transaction submitted via HAPI set permanent_removal=true
    int32 internal constant PERMANENT_REMOVAL_REQUIRES_SYSTEM_INITIATION = 319;

    /// A CryptoCreate or ContractCreate used the deprecated proxyAccountID field.
    int32 internal constant PROXY_ACCOUNT_ID_FIELD_IS_DEPRECATED = 320;

    /// An account set the staked_account_id to itself in CryptoUpdate or ContractUpdate transactions.
    int32 internal constant SELF_STAKING_IS_NOT_ALLOWED = 321;

    /// The staking account id or staking node id given is invalid or does not exist.
    int32 internal constant INVALID_STAKING_ID = 322;

    /// Native staking, while implemented, has not yet enabled by the council.
    int32 internal constant STAKING_NOT_ENABLED = 323;

    /// The range provided in UtilPrng transaction is negative.
    int32 internal constant INVALID_PRNG_RANGE = 324;

    /// The maximum number of entities allowed in the current price regime have been created.
    int32 internal constant MAX_ENTITIES_IN_PRICE_REGIME_HAVE_BEEN_CREATED = 325;

    /// The full prefix signature for precompile is not valid
    int32 internal constant INVALID_FULL_PREFIX_SIGNATURE_FOR_PRECOMPILE = 326;

    /// The combined balances of a contract and its auto-renew account (if any) did not cover the rent charged for net new storage used in a transaction.
    int32 internal constant INSUFFICIENT_BALANCES_FOR_STORAGE_RENT = 327;

    /// A contract transaction tried to use more than the allowed number of child records, via either system contract records or internal contract creations.
    int32 internal constant MAX_CHILD_RECORDS_EXCEEDED = 328;

    /// The combined balances of a contract and its auto-renew account (if any) or balance of an account did not cover the auto-renewal fees in a transaction.
    int32 internal constant INSUFFICIENT_BALANCES_FOR_RENEWAL_FEES = 329;

    /// A transaction's protobuf message includes unknown fields; could mean that a client expects not-yet-released functionality to be available.
    int32 internal constant TRANSACTION_HAS_UNKNOWN_FIELDS = 330;

    /// The account cannot be modified. Account's key is not set
    int32 internal constant ACCOUNT_IS_IMMUTABLE = 331;

    /// An alias that is assigned to an account or contract cannot be assigned to another account or contract.
    int32 internal constant ALIAS_ALREADY_ASSIGNED = 332;

    /// A provided metadata key was invalid. Verification includes, for example, checking the size of Ed25519 and ECDSA(secp256k1) public keys.
    int32 internal constant INVALID_METADATA_KEY = 333;

    /// Metadata key is not set on token
    int32 internal constant TOKEN_HAS_NO_METADATA_KEY = 334;

    /// Token Metadata is not provided
    int32 internal constant MISSING_TOKEN_METADATA = 335;

    /// NFT serial numbers are missing in the TokenUpdateNftsTransactionBody
    int32 internal constant MISSING_SERIAL_NUMBERS = 336;

    /// Admin key is not set on token
    int32 internal constant TOKEN_HAS_NO_ADMIN_KEY = 337;

    /// A transaction failed because the consensus node identified is deleted from the address book.
    int32 internal constant NODE_DELETED = 338;

    /// A transaction failed because the consensus node identified is not valid or does not exist in state.
    int32 internal constant INVALID_NODE_ID = 339;

    /// A transaction failed because one or more entries in the list of service endpoints for the `gossip_endpoint` field is invalid.<br/> The most common cause for this response is a service endpoint that has the domain name (DNS) set rather than address and port.
    int32 internal constant INVALID_GOSSIP_ENDPOINT = 340;

    /// A transaction failed because the node account identifier provided does not exist or is not valid.<br/> One common source of this error is providing a node account identifier using the "alias" form rather than "numeric" form.
    int32 internal constant INVALID_NODE_ACCOUNT_ID = 341;

    /// A transaction failed because the description field cannot be encoded as UTF-8 or is more than 100 bytes when encoded.
    int32 internal constant INVALID_NODE_DESCRIPTION = 342;

    /// A transaction failed because one or more entries in the list of service endpoints for the `service_endpoint` field is invalid.<br/> The most common cause for this response is a service endpoint that has the domain name (DNS) set rather than address and port.
    int32 internal constant INVALID_SERVICE_ENDPOINT = 343;

    /// A transaction failed because the TLS certificate provided for the node is missing or invalid. <p> #### Probable Causes The certificate MUST be a TLS certificate of a type permitted for gossip signatures.<br/> The value presented MUST be a UTF-8 NFKD encoding of the TLS certificate.<br/> The certificate encoded MUST be in PEM format.<br/> The `gossip_ca_certificate` field is REQUIRED and MUST NOT be empty.
    int32 internal constant INVALID_GOSSIP_CA_CERTIFICATE = 344;

    /// A transaction failed because the hash provided for the gRPC certificate is present but invalid. <p> #### Probable Causes The `grpc_certificate_hash` MUST be a SHA-384 hash.<br/> The input hashed MUST be a UTF-8 NFKD encoding of the actual TLS certificate.<br/> The certificate to be encoded MUST be in PEM format.
    int32 internal constant INVALID_GRPC_CERTIFICATE = 345;

    /// The maximum automatic associations value is not valid.<br/> The most common cause for this error is a value less than `-1`.
    int32 internal constant INVALID_MAX_AUTO_ASSOCIATIONS = 346;

    /// The maximum number of nodes allowed in the address book have been created.
    int32 internal constant MAX_NODES_CREATED = 347;

    /// In ServiceEndpoint, domain_name and ipAddressV4 are mutually exclusive
    int32 internal constant IP_FQDN_CANNOT_BE_SET_FOR_SAME_ENDPOINT = 348;

    /// Fully qualified domain name is not allowed in gossip_endpoint
    int32 internal constant GOSSIP_ENDPOINT_CANNOT_HAVE_FQDN = 349;

    /// In ServiceEndpoint, domain_name size too large
    int32 internal constant FQDN_SIZE_TOO_LARGE = 350;

    /// ServiceEndpoint is invalid
    int32 internal constant INVALID_ENDPOINT = 351;

    /// The number of gossip endpoints exceeds the limit
    int32 internal constant GOSSIP_ENDPOINTS_EXCEEDED_LIMIT = 352;

    /// The transaction attempted to use duplicate `TokenReference`.<br/> This affects `TokenReject` attempting to reject same token reference more than once.
    int32 internal constant TOKEN_REFERENCE_REPEATED = 353;

    /// The account id specified as the owner in `TokenReject` is invalid or does not exist.
    int32 internal constant INVALID_OWNER_ID = 354;

    /// The transaction attempted to use more than the allowed number of `TokenReference`.
    int32 internal constant TOKEN_REFERENCE_LIST_SIZE_LIMIT_EXCEEDED = 355;

    /// The number of service endpoints exceeds the limit
    int32 internal constant SERVICE_ENDPOINTS_EXCEEDED_LIMIT = 356;

    /// The IPv4 address is invalid
    int32 internal constant INVALID_IPV4_ADDRESS = 357;

    /// The transaction attempted to use empty `TokenReference` list.
    int32 internal constant EMPTY_TOKEN_REFERENCE_LIST = 358;

    /// The node account is not allowed to be updated
    int32 internal constant UPDATE_NODE_ACCOUNT_NOT_ALLOWED = 359;

    /// The token has no metadata or supply key
    int32 internal constant TOKEN_HAS_NO_METADATA_OR_SUPPLY_KEY = 360;

    /// The list of `PendingAirdropId`s is empty and MUST NOT be empty.
    int32 internal constant EMPTY_PENDING_AIRDROP_ID_LIST = 361;

    /// A `PendingAirdropId` is repeated in a `claim` or `cancel` transaction.
    int32 internal constant PENDING_AIRDROP_ID_REPEATED = 362;

    /// The number of `PendingAirdropId` values in the list exceeds the maximum allowable number.
    int32 internal constant PENDING_AIRDROP_ID_LIST_TOO_LONG = 363;

    /// A pending airdrop already exists for the specified NFT.
    int32 internal constant PENDING_NFT_AIRDROP_ALREADY_EXISTS = 364;

    /// The identified account is sender for one or more pending airdrop(s) and cannot be deleted. <p> The requester SHOULD cancel all pending airdrops before resending this transaction.
    int32 internal constant ACCOUNT_HAS_PENDING_AIRDROPS = 365;

    /// Consensus throttle did not allow execution of this transaction.<br/> The transaction should be retried after a modest delay.
    int32 internal constant THROTTLED_AT_CONSENSUS = 366;

    /// The provided pending airdrop id is invalid.<br/> This pending airdrop MAY already be claimed or cancelled. <p> The client SHOULD query a mirror node to determine the current status of the pending airdrop.
    int32 internal constant INVALID_PENDING_AIRDROP_ID = 367;

    /// The token to be airdropped has a fallback royalty fee and cannot be sent or claimed via an airdrop transaction.
    int32 internal constant TOKEN_AIRDROP_WITH_FALLBACK_ROYALTY = 368;

    /// This airdrop claim is for a pending airdrop with an invalid token.<br/> The token might be deleted, or the sender may not have enough tokens to fulfill the offer. <p> The client SHOULD query mirror node to determine the status of the pending airdrop and whether the sender can fulfill the offer.
    int32 internal constant INVALID_TOKEN_IN_PENDING_AIRDROP = 369;

    /// A scheduled transaction configured to wait for expiry to execute was given an expiry time at which there is already too many transactions scheduled to expire; its creation must be retried with a different expiry.
    int32 internal constant SCHEDULE_EXPIRY_IS_BUSY = 370;

    /// The provided gRPC certificate hash is invalid.
    int32 internal constant INVALID_GRPC_CERTIFICATE_HASH = 371;

    /// A scheduled transaction configured to wait for expiry to execute was not given an explicit expiration time.
    int32 internal constant MISSING_EXPIRY_TIME = 372;

    /// A contract operation attempted to schedule another transaction after it had already scheduled a recursive contract call.
    int32 internal constant NO_SCHEDULING_ALLOWED_AFTER_SCHEDULED_RECURSION = 373;

    /// A contract can schedule recursive calls a finite number of times (this is approximately four million times with typical network configuration.)
    int32 internal constant RECURSIVE_SCHEDULING_LIMIT_REACHED = 374;

    /// The target network is waiting for the ledger ID to be set, which is a side effect of finishing the network's TSS construction.
    int32 internal constant WAITING_FOR_LEDGER_ID = 375;

    /// The provided fee exempt key list size exceeded the limit.
    int32 internal constant MAX_ENTRIES_FOR_FEE_EXEMPT_KEY_LIST_EXCEEDED = 376;

    /// The provided fee exempt key list contains duplicated keys.
    int32 internal constant FEE_EXEMPT_KEY_LIST_CONTAINS_DUPLICATED_KEYS = 377;

    /// The provided fee exempt key list contains an invalid key.
    int32 internal constant INVALID_KEY_IN_FEE_EXEMPT_KEY_LIST = 378;

    /// The provided fee schedule key contains an invalid key.
    int32 internal constant INVALID_FEE_SCHEDULE_KEY = 379;

    /// If a fee schedule key is not set when we create a topic we cannot add it on update.
    int32 internal constant FEE_SCHEDULE_KEY_CANNOT_BE_UPDATED = 380;

    /// If the topic's custom fees are updated the topic SHOULD have a fee schedule key
    int32 internal constant FEE_SCHEDULE_KEY_NOT_SET = 381;

    /// The fee amount is exceeding the amount that the payer is willing to pay.
    int32 internal constant MAX_CUSTOM_FEE_LIMIT_EXCEEDED = 382;

    /// There are no corresponding custom fees.
    int32 internal constant NO_VALID_MAX_CUSTOM_FEE = 383;

    /// The provided list contains invalid max custom fee.
    int32 internal constant INVALID_MAX_CUSTOM_FEES = 384;

    /// The provided max custom fee list contains fees with duplicate denominations.
    int32 internal constant DUPLICATE_DENOMINATION_IN_MAX_CUSTOM_FEE_LIST = 385;

    /// The provided max custom fee list contains fees with duplicate account id.
    int32 internal constant DUPLICATE_ACCOUNT_ID_IN_MAX_CUSTOM_FEE_LIST = 386;

    /// Max custom fees list is not supported for this operation.
    int32 internal constant MAX_CUSTOM_FEES_IS_NOT_SUPPORTED = 387;

}
